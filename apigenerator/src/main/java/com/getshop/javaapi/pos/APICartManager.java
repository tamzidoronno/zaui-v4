package com.getshop.javaapi.pos;

import com.google.gson.GsonBuilder;
import com.google.gson.Gson;
import java.util.LinkedHashMap;
import com.google.gson.JsonElement;
import com.thundashop.core.common.JsonObject2;
import com.thundashop.core.common.Communicator;
public class APICartManager {

      public Communicator transport;

      public APICartManager(Communicator transport){
           this.transport = transport;
      }

     /**
     * Need to attach a reference number manually to the cart?
     * @throws ErrorException
     */
     public void addMetaDataToProduct(Object cartItemId, Object metaData)  throws Exception  {
          JsonObject2 gs_json_object_data = new JsonObject2();
          gs_json_object_data.args = new LinkedHashMap();
          gs_json_object_data.args.put("cartItemId",new Gson().toJson(cartItemId));
          gs_json_object_data.args.put("metaData",new Gson().toJson(metaData));
          gs_json_object_data.method = "addMetaDataToProduct";
          gs_json_object_data.interfaceName = "core.cartmanager.ICartManager";
          String result = transport.send(gs_json_object_data);
     }

     /**
     * Add a new product to the cart.
     * @param productId The product id generated by the productmanager.
     * @param int Number instances of the product ordered.
     * @return
     * @throws ErrorException
     */
     public JsonElement addProduct(Object productId, Object count, Object variations)  throws Exception  {
          JsonObject2 gs_json_object_data = new JsonObject2();
          gs_json_object_data.args = new LinkedHashMap();
          gs_json_object_data.args.put("productId",new Gson().toJson(productId));
          gs_json_object_data.args.put("count",new Gson().toJson(count));
          gs_json_object_data.args.put("variations",new Gson().toJson(variations));
          gs_json_object_data.method = "addProduct";
          gs_json_object_data.interfaceName = "core.cartmanager.ICartManager";
          String result = transport.send(gs_json_object_data);
          Gson gson = new GsonBuilder().serializeNulls().create();
          JsonElement object = gson.fromJson(result, JsonElement.class);
          return object;
     }

     /**
     * Add a new product to the cart.
     * @param productId The product id generated by the productmanager.
     * @param int Number instances of the product ordered.
     * @return
     * @throws ErrorException
     */
     public JsonElement addProductItem(Object productId, Object count)  throws Exception  {
          JsonObject2 gs_json_object_data = new JsonObject2();
          gs_json_object_data.args = new LinkedHashMap();
          gs_json_object_data.args.put("productId",new Gson().toJson(productId));
          gs_json_object_data.args.put("count",new Gson().toJson(count));
          gs_json_object_data.method = "addProductItem";
          gs_json_object_data.interfaceName = "core.cartmanager.ICartManager";
          String result = transport.send(gs_json_object_data);
          Gson gson = new GsonBuilder().serializeNulls().create();
          JsonElement object = gson.fromJson(result, JsonElement.class);
          return object;
     }

     /**
     * Add a new product to the cart.
     * @param productId The product id generated by the productmanager.
     * @param int Number instances of the product ordered.
     * @return
     * @throws ErrorException
     */
     public JsonElement addProductWithSource(Object productId, Object count, Object source)  throws Exception  {
          JsonObject2 gs_json_object_data = new JsonObject2();
          gs_json_object_data.args = new LinkedHashMap();
          gs_json_object_data.args.put("productId",new Gson().toJson(productId));
          gs_json_object_data.args.put("count",new Gson().toJson(count));
          gs_json_object_data.args.put("source",new Gson().toJson(source));
          gs_json_object_data.method = "addProductWithSource";
          gs_json_object_data.interfaceName = "core.cartmanager.ICartManager";
          String result = transport.send(gs_json_object_data);
          Gson gson = new GsonBuilder().serializeNulls().create();
          JsonElement object = gson.fromJson(result, JsonElement.class);
          return object;
     }

     /**
     * Send in a cart and you shall have the total price for all products.
     */
     public JsonElement calculateTotalCost(Object cart)  throws Exception  {
          JsonObject2 gs_json_object_data = new JsonObject2();
          gs_json_object_data.args = new LinkedHashMap();
          gs_json_object_data.args.put("cart",new Gson().toJson(cart));
          gs_json_object_data.method = "calculateTotalCost";
          gs_json_object_data.interfaceName = "core.cartmanager.ICartManager";
          String result = transport.send(gs_json_object_data);
          Gson gson = new GsonBuilder().serializeNulls().create();
          JsonElement object = gson.fromJson(result, JsonElement.class);
          return object;
     }

     /**
     * Send in a cart and you shall have the total price for all products.
     */
     public JsonElement calculateTotalCount(Object cart)  throws Exception  {
          JsonObject2 gs_json_object_data = new JsonObject2();
          gs_json_object_data.args = new LinkedHashMap();
          gs_json_object_data.args.put("cart",new Gson().toJson(cart));
          gs_json_object_data.method = "calculateTotalCount";
          gs_json_object_data.interfaceName = "core.cartmanager.ICartManager";
          String result = transport.send(gs_json_object_data);
          Gson gson = new GsonBuilder().serializeNulls().create();
          JsonElement object = gson.fromJson(result, JsonElement.class);
          return object;
     }

     /**
     * Clear the current shopping cart.
     */
     public void clear()  throws Exception  {
          JsonObject2 gs_json_object_data = new JsonObject2();
          gs_json_object_data.args = new LinkedHashMap();
          gs_json_object_data.method = "clear";
          gs_json_object_data.interfaceName = "core.cartmanager.ICartManager";
          String result = transport.send(gs_json_object_data);
     }

     /**
     * Fetch the current cart.
     * @return
     * @throws ErrorException
     */
     public JsonElement getCart()  throws Exception  {
          JsonObject2 gs_json_object_data = new JsonObject2();
          gs_json_object_data.args = new LinkedHashMap();
          gs_json_object_data.method = "getCart";
          gs_json_object_data.interfaceName = "core.cartmanager.ICartManager";
          String result = transport.send(gs_json_object_data);
          Gson gson = new GsonBuilder().serializeNulls().create();
          JsonElement object = gson.fromJson(result, JsonElement.class);
          return object;
     }

     /**
     * Need to attach a reference number manually to the cart?
     * @throws ErrorException
     */
     public JsonElement getCartTotal(Object cart)  throws Exception  {
          JsonObject2 gs_json_object_data = new JsonObject2();
          gs_json_object_data.args = new LinkedHashMap();
          gs_json_object_data.args.put("cart",new Gson().toJson(cart));
          gs_json_object_data.method = "getCartTotal";
          gs_json_object_data.interfaceName = "core.cartmanager.ICartManager";
          String result = transport.send(gs_json_object_data);
          Gson gson = new GsonBuilder().serializeNulls().create();
          JsonElement object = gson.fromJson(result, JsonElement.class);
          return object;
     }

     /**
     * Returns the current total amount
     * note, this does not include shipping.
     *
     * @return
     * @throws ErrorException
     */
     public JsonElement getCartTotalAmount()  throws Exception  {
          JsonObject2 gs_json_object_data = new JsonObject2();
          gs_json_object_data.args = new LinkedHashMap();
          gs_json_object_data.method = "getCartTotalAmount";
          gs_json_object_data.interfaceName = "core.cartmanager.ICartManager";
          String result = transport.send(gs_json_object_data);
          Gson gson = new GsonBuilder().serializeNulls().create();
          JsonElement object = gson.fromJson(result, JsonElement.class);
          return object;
     }

     /**
     * Returns the shipping cost
     * @return
     */
     public JsonElement getShippingCost()  throws Exception  {
          JsonObject2 gs_json_object_data = new JsonObject2();
          gs_json_object_data.args = new LinkedHashMap();
          gs_json_object_data.method = "getShippingCost";
          gs_json_object_data.interfaceName = "core.cartmanager.ICartManager";
          String result = transport.send(gs_json_object_data);
          Gson gson = new GsonBuilder().serializeNulls().create();
          JsonElement object = gson.fromJson(result, JsonElement.class);
          return object;
     }

     /**
     * Fetch the total amount of price to use when calculating shipping price.
     * @return
     * @throws ErrorException
     */
     public JsonElement getShippingPriceBasis()  throws Exception  {
          JsonObject2 gs_json_object_data = new JsonObject2();
          gs_json_object_data.args = new LinkedHashMap();
          gs_json_object_data.method = "getShippingPriceBasis";
          gs_json_object_data.interfaceName = "core.cartmanager.ICartManager";
          String result = transport.send(gs_json_object_data);
          Gson gson = new GsonBuilder().serializeNulls().create();
          JsonElement object = gson.fromJson(result, JsonElement.class);
          return object;
     }

     /**
     * Returns the current calculation of taxes.
     * @return
     */
     public JsonElement getTaxes()  throws Exception  {
          JsonObject2 gs_json_object_data = new JsonObject2();
          gs_json_object_data.args = new LinkedHashMap();
          gs_json_object_data.method = "getTaxes";
          gs_json_object_data.interfaceName = "core.cartmanager.ICartManager";
          String result = transport.send(gs_json_object_data);
          Gson gson = new GsonBuilder().serializeNulls().create();
          JsonElement object = gson.fromJson(result, JsonElement.class);
          return object;
     }

     /**
     * Remove an added product from the cart.
     * @param productId The product id generated by the productmanager, that has been added to the cart.
     * @return
     * @throws ErrorException
     */
     public void removeCartItem(Object cartItemId)  throws Exception  {
          JsonObject2 gs_json_object_data = new JsonObject2();
          gs_json_object_data.args = new LinkedHashMap();
          gs_json_object_data.args.put("cartItemId",new Gson().toJson(cartItemId));
          gs_json_object_data.method = "removeCartItem";
          gs_json_object_data.interfaceName = "core.cartmanager.ICartManager";
          String result = transport.send(gs_json_object_data);
     }

     /**
     * Remove an added product from the cart.
     * @param productId The product id generated by the productmanager, that has been added to the cart.
     * @return
     * @throws ErrorException
     */
     public JsonElement removeProduct(Object cartItemId)  throws Exception  {
          JsonObject2 gs_json_object_data = new JsonObject2();
          gs_json_object_data.args = new LinkedHashMap();
          gs_json_object_data.args.put("cartItemId",new Gson().toJson(cartItemId));
          gs_json_object_data.method = "removeProduct";
          gs_json_object_data.interfaceName = "core.cartmanager.ICartManager";
          String result = transport.send(gs_json_object_data);
          Gson gson = new GsonBuilder().serializeNulls().create();
          JsonElement object = gson.fromJson(result, JsonElement.class);
          return object;
     }

     /**
     * Set a new address to the current cart.
     */
     public void setAddress(Object address)  throws Exception  {
          JsonObject2 gs_json_object_data = new JsonObject2();
          gs_json_object_data.args = new LinkedHashMap();
          gs_json_object_data.args.put("address",new Gson().toJson(address));
          gs_json_object_data.method = "setAddress";
          gs_json_object_data.interfaceName = "core.cartmanager.ICartManager";
          String result = transport.send(gs_json_object_data);
     }

     /**
     * Need to attach a reference number manually to the cart?
     * @throws ErrorException
     */
     public void setCart(Object cart)  throws Exception  {
          JsonObject2 gs_json_object_data = new JsonObject2();
          gs_json_object_data.args = new LinkedHashMap();
          gs_json_object_data.args.put("cart",new Gson().toJson(cart));
          gs_json_object_data.method = "setCart";
          gs_json_object_data.interfaceName = "core.cartmanager.ICartManager";
          String result = transport.send(gs_json_object_data);
     }

     /**
     * Need to attach a reference number manually to the cart?
     * @throws ErrorException
     */
     public void setReference(Object reference)  throws Exception  {
          JsonObject2 gs_json_object_data = new JsonObject2();
          gs_json_object_data.args = new LinkedHashMap();
          gs_json_object_data.args.put("reference",new Gson().toJson(reference));
          gs_json_object_data.method = "setReference";
          gs_json_object_data.interfaceName = "core.cartmanager.ICartManager";
          String result = transport.send(gs_json_object_data);
     }

     /**
     * Sets the shipping cost.
     * Should be in base currency.
     */
     public void setShippingCost(Object shippingCost)  throws Exception  {
          JsonObject2 gs_json_object_data = new JsonObject2();
          gs_json_object_data.args = new LinkedHashMap();
          gs_json_object_data.args.put("shippingCost",new Gson().toJson(shippingCost));
          gs_json_object_data.method = "setShippingCost";
          gs_json_object_data.interfaceName = "core.cartmanager.ICartManager";
          String result = transport.send(gs_json_object_data);
     }

     /**
     * Need to attach a reference number manually to the cart?
     * @throws ErrorException
     */
     public void updateCartItem(Object item)  throws Exception  {
          JsonObject2 gs_json_object_data = new JsonObject2();
          gs_json_object_data.args = new LinkedHashMap();
          gs_json_object_data.args.put("item",new Gson().toJson(item));
          gs_json_object_data.method = "updateCartItem";
          gs_json_object_data.interfaceName = "core.cartmanager.ICartManager";
          String result = transport.send(gs_json_object_data);
     }

     /**
     * Change the number of instances added to the product.
     * @param productId The product id generated by the productmanager.
     * @param count The number of instances (has to be a positive integer)
     * @return
     * @throws ErrorException
     */
     public JsonElement updateProductCount(Object cartItemId, Object count)  throws Exception  {
          JsonObject2 gs_json_object_data = new JsonObject2();
          gs_json_object_data.args = new LinkedHashMap();
          gs_json_object_data.args.put("cartItemId",new Gson().toJson(cartItemId));
          gs_json_object_data.args.put("count",new Gson().toJson(count));
          gs_json_object_data.method = "updateProductCount";
          gs_json_object_data.interfaceName = "core.cartmanager.ICartManager";
          String result = transport.send(gs_json_object_data);
          Gson gson = new GsonBuilder().serializeNulls().create();
          JsonElement object = gson.fromJson(result, JsonElement.class);
          return object;
     }

}
