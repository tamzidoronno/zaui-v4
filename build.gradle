import org.gradle.api.artifacts.*

apply plugin: 'base' // To add "clean" task to the root project.
apply plugin: 'java'
apply plugin: 'eclipse'


version = '4.1.1'

subprojects {
    apply from: rootProject.file('common.gradle')
}

repositories {
    mavenCentral()
}

task createJavaAPI(dependsOn: "core:build") {
    doFirst {
        println 'java-api: ' + version
    }
}

task javaapiClean {
    dependsOn 'javaapi:cleanUp'
}

task javaapiGen {
    dependsOn 'core:startGenerator'
}


task assembleGetShop(type: Exec, dependsOn: ['copyLibs']) {
    commandLine 'scripts/assemble.sh', version
}


task mergedJavadoc(type: Javadoc, description: 'Creates Javadoc from all the projects.') {
    title = 'All modules'
    destinationDir = new File(project.buildDir, 'merged-javadoc')

    // Note: The closures below are executed lazily.
    source {
       subprojects*.sourceSets*.main*.allSource
    }
    classpath.from {
        subprojects*.configurations*.compile*.copyRecursive({ !(it instanceof ProjectDependency); })*.resolve()
    }
}


task copyLibs(type: Copy, dependsOn: ['javaapiClean', 'javaapiGen', 'javaapi:jar',
                                      'core:build', 'core:generateJavascriptApi']) {
    //prebuild all and copy all external libraries, gradle + libs to downloaded folder which will be used for assembleGetShop task
    def dst = "./downloaded"
    def outs = project(":core").sourceSets.main.output.classesDirs
    def allRuntime = project(":core").sourceSets.main.runtimeClasspath
    def src = allRuntime.filter { !outs.contains(it) }
    delete dst
    from src
    into dst
    println(" Task copyLibs done.")
}