<?
/* @var $factory Factory */
$factory = $this->getFactory();
$pb = $factory->getPage()->loadPageBuilder();
$layoutupdate = false;
if (isset($_POST['data']['updatelayout'])) {
    $pb->activateBuildLayoutMode();
    $layoutupdate = true;
}
$pb->convertToNewLayout(false);
$layout = $pb->updateLayoutConfig();
$pb->saveBuildLayout($layout);


$content_groups = ["standard", "contact", "map", "product", "productlist", "frontpage"];
$leftmenu = array();
$leftmenu["standard"]['icon'] = "fa-pencil-square-o";
$leftmenu["standard"]['text'] = $this->__f("Standard page");
$leftmenu["standard"]['target'] = "standard";

$leftmenu["contact"]['icon'] = "fa-envelope";
$leftmenu["contact"]['text'] = $this->__f("Contact");
$leftmenu["contact"]['target'] = "contact";

$leftmenu["product"]['icon'] = "fa-shopping-cart";
$leftmenu["product"]['text'] = $this->__f("Product"); 
$leftmenu["product"]['target'] = "product";

$leftmenu["map"]['icon'] = "fa-globe";
$leftmenu["map"]['text'] = $this->__f("Map"); 
$leftmenu["map"]['target'] = "map";

$leftmenu["productlist"]['icon'] = "fa-list-alt";
$leftmenu["productlist"]['text'] = $this->__f("Product list");
$leftmenu["productlist"]['target'] = "productlist";

$leftmenu["frontpage"]['icon'] = "fa-heart";
$leftmenu["frontpage"]['text'] = $this->__f("Homepage");
$leftmenu["frontpage"]['target'] = "frontpage";

$type = "default";
$subtype = "default";
$target = "default";
if(isset($_POST['data']['pagetype'])) {
    $type = $_POST['data']['pagetype'];
    $content_groups = [$type];
    foreach($leftmenu as $index => $data) {
        if($index != $type) {
            unset($leftmenu[$index]);
        }
    }
}
if(isset($_POST['data']['pageSubType'])) {
    $subtype = $_POST['data']['pageSubType'];
}
if(isset($_POST['data']['target'])) {
    $target = $_POST['data']['target'];
}

?>

<div class="skeletondisplayer">

    <div class="layoutpreviewselection app">
        <input type="hidden" value="<? echo $type; ?>" id="gs_newpage_type">
        <input type="hidden" value="<? echo $subtype; ?>" id="gs_newpage_subtype">
        <input type="hidden" value="<? echo $target; ?>" id="gs_newpage_target">
        <div class="gs_tabs">
            <span class='gs_tab <?
            if (!$layoutupdate) {
                echo "gs_tab_selected";
            }
            ?>' target="content_pages"><i class="fa fa-book"></i> <? echo $this->__f("Content"); ?></span>
            <span class='gs_tab' target="empty_pages"><i class="fa fa-square-o"></i> <? echo $this->__f("Empty page"); ?></span>
            <span class='gs_tab <?
            if ($layoutupdate) {
                echo "gs_tab_selected";
            }
            ?>' target="layout_builder"><i class="fa fa-wrench"></i> <? echo $this->__f("Build your layout"); ?></span>
        </div>
        <div class="gs_tab_area content_pages <?
             if (!$layoutupdate) {
                 echo "gs_tab_area_active";
             }
            ?>">
            <div class='category_selection'>
                <div class='options'>
                    
                    <? $selectedEntry = false; foreach($leftmenu as $index => $left_entry) { ?>
                        <div class='option_entry <? if(!$selectedEntry) { echo "option_selected"; $selectedEntry = $index; } ?>' target='<? echo $left_entry['target'] ?>'><i class="fa <? echo $left_entry['icon'] ?>"></i><? echo $left_entry['text'] ?></div> 
                    <? } ?>
                </div>
            </div>
            <div>
                <div class="options_content">
                    <?
                    foreach ($content_groups as $group) {
                        $selected = "";
                        if ($group == $selectedEntry) {
                            $selected = "content_type_selected";
                        }
                        ?>
                        <div class='<? echo $group; ?> content_type_area <? echo $selected; ?>'>
                        <?
                        $pages = $pb->getPredefinedPage($group);
                        foreach ($pages as $predefined) {
                            $pb->printPredefinedPagePreview($predefined, $group);
                        }
                        ?>
                        </div>
        <? } ?>
                </div>
            </div>
            <div style='clear:both;'></div>
        </div>
        <div class="layoutconfiguration gs_tab_area layout_builder <?
                if ($layoutupdate) {
                    echo "gs_tab_area_active";
                }
                ?>">
            <div class="left_panel">
                <?
                echo "<select id='leftsidebarcount'>";
                for ($i = 0; $i <= 20; $i++) {
                    $lfsel = "";
                    if ($layout->leftSideBar == $i) {
                        $lfsel = "SELECTED";
                    }
                    echo "<option value='$i' $lfsel>$i " . $factory->__f("left sidebar") . "</option>";
                }
                echo "</select>";
                ?>
                <select id="rowscount">
                    <?
                    for ($i = 0; $i <= 20; $i++) {
                        $selected = "";
                        if ($i == sizeof($layout->rows)) {
                            $selected = "SELECTED";
                        }
                        echo "<option value='" . $i . "' $selected>" . $i . " " . $this->__f("number of rows") . "</option>";
                    }
                    ?>
                </select>
                <?
                echo "<select id='rightsidebarcount'>";
                for ($i = 0; $i <= 20; $i++) {
                    $lfsel = "";
                    if ($layout->rightSideBar == $i) {
                        $lfsel = "SELECTED";
                    }
                    echo "<option value='$i' $lfsel>$i " . $factory->__f("right sidebar") . "</option>";
                }
                echo "</select>";
                ?>
                <div class="gs_button small setnewlayout">
                    <? echo $factory->__f("Set page layout"); ?>
                    <i class="fa fa-arrow-circle-right"></i>
                </div>
            </div>
            <div class="right_panel">
                <div class='layoutpreviewbox'>
<?
echo $pb->printPreview();
?>
                </div>
            </div>
        </div>
        <div class='predefined_layouts empty_pages gs_tab_area'>
<? echo $pb->printSuggestions(); ?>
        </div>
        <div style="clear:both;"></div>
    </div>
</div>


<script>

    function doresizebox(element, ui) {
        var newsize = ui.originalSize.width - ui.size.width;
        var cellnumber =Â parseInt(element.attr('cellnumber')) - 1;
        var box = element.closest('.previewrowcontainer').find('.previewrow.cell[cellnumber="' + cellnumber + '"]');
        var boxorigwidth = box.attr('origwidth');
        if (boxorigwidth === undefined) {
            box.attr('origwidth', box.width());
        }
        var newwidth = (parseInt(boxorigwidth) + parseInt(newsize)) + 1;
        box.width(newwidth);
    }
    function alignLayoutBoxes(index, cellnumber, firstcell, changedcell, offset) {
        var above = index - offset;
        var changedPercentage = parseFloat(changedcell.attr('percentage'));
        var firstPercentage = parseFloat(firstcell.attr('percentage'));
        var abovecell = null;
        var changedcellposition = firstcell.position();
        $('.previewrowcontainer[index="' + above + '"]').find('.cell').each(function(theindex) {
            var diff = changedcellposition.left - $(this).position().left;
            if ((diff < 10 && diff > -10) && abovecell === null) {
                abovecell = $(this);
            }
        });
        if (abovecell === null) {
            return false;
        }

        var abovePercentage = parseFloat(abovecell.attr('percentage'));
        if (above >= 0) {
            var diff = abovePercentage - firstPercentage;
            if (diff < 1 && diff > -1) {
                var chop = changedPercentage - abovePercentage;
                firstPercentage += chop;
                firstcell.attr('percentage', abovePercentage);
                changedcell.attr('percentage', firstPercentage);
                return true;
            }
        }
        return false;
    }

    function calculateResizedPercenage(element, total) {
        return ((element.width() / total) * 100);
    }


    $('.layoutpreviewbox .previewrow.cell').resizable({
        handles: 'w',
        "resize": function(event, ui) {
            doresizebox($(this), ui);
        },
        "stop": function(event, ui) {
            var cellnumber = $(this).attr('cellnumber');
            var changednumber = cellnumber - 1;
            var rowcontainer = $(this).closest('.previewrowcontainer');
            var index = rowcontainer.attr('index');
            var cells = rowcontainer.find('.cell');
            var rowadjust = [];

            var totalwidth = 0;
            cells.each(function() {
                totalwidth += $(this).width();
            });

            var firstcell = rowcontainer.find('.cell[cellnumber="' + cellnumber + '"]');
            var changedcell = rowcontainer.find('.cell[cellnumber="' + changednumber + '"]');

            var before = parseFloat(firstcell.attr('percentage')) + parseFloat(changedcell.attr('percentage'));
            firstcell.attr('percentage', calculateResizedPercenage(firstcell, totalwidth));
            changedcell.attr('percentage', calculateResizedPercenage(changedcell, totalwidth));
            var after = parseFloat(firstcell.attr('percentage')) + parseFloat(changedcell.attr('percentage'));
            var diff = before - after;
            changedcell.attr('percentage', parseFloat(changedcell.attr('percentage')) + (diff / 2));
            firstcell.attr('percentage', parseFloat(firstcell.attr('percentage')) + (diff / 2));

            var aligned = alignLayoutBoxes(index, changednumber, firstcell, changedcell, 1);
            if (!aligned) {
                aligned = alignLayoutBoxes(index, changednumber, changedcell, firstcell, 1);
            }
            if (!aligned) {
                aligned = alignLayoutBoxes(index, changednumber, firstcell, changedcell, 2);
            }
            if (!aligned) {
                aligned = alignLayoutBoxes(index, changednumber, changedcell, firstcell, 2);
            }

            cells.each(function(index) {
                var percentage = $(this).attr('percentage');
                rowadjust.push(percentage);
            });

            var data = {
                "adjustment": rowadjust,
                "index": index
            };
            data["updatelayout"] = true;
            var event = thundashop.Ajax.createEvent('', 'showPageLayoutSelection', null, data);
            thundashop.common.showInformationBox(event, __f("Select page layout"), true);

        }
    });
    $('.layoutpreviewbox .previewrow.cell[cellnumber="1"]').resizable("destroy");
    $('.layoutpreviewbox .previewrow.cell.sidebar').resizable("destroy");
    $('.layoutpreviewbox .sortable_layout_rows').sortable({
        containment: "parent",
        handle: ".fa-arrows-v",
        stop: function(event, ui) {
            var sorted = [];
            $('.layoutpreviewbox .sortable_layout_rows li').each(function() {
                sorted.push($(this).attr('rowid'));
            });

            var data = {
                "sortorder": sorted,
                "layoutmode": true
            }
            var event = thundashop.Ajax.createEvent('', 'setRowLayoutSortOrder', null, data);

            thundashop.Ajax.postWithCallBack(event, function() {
            });
        }
    });
</script>
