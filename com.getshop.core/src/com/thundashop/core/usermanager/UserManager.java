package com.thundashop.core.usermanager;

import com.google.gson.Gson;
import com.ibm.icu.util.Calendar;
import com.thundashop.core.calendar.CalendarManager;
import com.thundashop.core.common.*;
import com.thundashop.core.databasemanager.data.DataRetreived;
import com.thundashop.core.getshop.GetShop;
import com.thundashop.core.getshop.data.GetshopStore;
import com.thundashop.core.messagemanager.MailFactory;
import com.thundashop.core.messagemanager.MessageManager;
import com.thundashop.core.usermanager.data.Comment;
import com.thundashop.core.usermanager.data.Company;
import com.thundashop.core.usermanager.data.Group;
import com.thundashop.core.usermanager.data.ProMeisterScoreType;
import com.thundashop.core.usermanager.data.User;
import com.thundashop.core.usermanager.data.UserCounter;
import com.thundashop.core.usermanager.data.UserPrivilege;
import com.thundashop.core.utils.CompanySearchEngine;
import com.thundashop.core.utils.CompanySearchEngineHolder;
import com.thundashop.core.utils.UtilManager;
import java.math.BigInteger;
import java.security.MessageDigest;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.List;
import java.util.Map;
import java.util.Random;
import java.util.concurrent.ConcurrentHashMap;
import java.util.logging.Level;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Scope;
import org.springframework.stereotype.Component;

/**
 * @author hjemme
 */
@Component
@Scope("prototype")
public class UserManager extends ManagerBase implements IUserManager, StoreInitialized {
    public static String OVERALLPASSWORD = "alksdjfasdoui32q1-2-3-13-1-324asdfasdf_213476askjd....|123§§!4985klq12j3h1kl254h12";
    public SessionFactory sessionFactory = new SessionFactory();
    public ConcurrentHashMap<String, UserStoreCollection> userStoreCollections = new ConcurrentHashMap<String, UserStoreCollection>();
    
    private UserCounter counter = new UserCounter();
    private SecureRandom random = new SecureRandom();
    private ProMeisterScoreType proMeisterScoreType = new ProMeisterScoreType();
    
    @Autowired
    public UserManager(Logger log, DatabaseSaver databaseSaver) {
        super(log, databaseSaver);
    }
    
    @Autowired
    private CompanySearchEngineHolder searchEngineHolder;
	
    @Autowired
    public MailFactory mailfactory;
    
    @Autowired
    public GetShop getShop;

    @Override
    public void dataFromDatabase(DataRetreived data) {
        for (DataCommon dataCommon : data.data) {
            try {
                UserStoreCollection userStoreCollection = getUserStoreCollection(dataCommon.storeId);
                if (dataCommon instanceof User) {
                    userStoreCollection.addUserDirect((User) dataCommon);
                }
                if (dataCommon instanceof Group) {
                    userStoreCollection.addGroup((Group)dataCommon);
                }
                if (dataCommon instanceof UserCounter) {
                    counter = (UserCounter) dataCommon;
                }
                if (dataCommon instanceof SessionFactory) {
                    sessionFactory = (SessionFactory) dataCommon;
                }
            } catch (ErrorException ex) {
                ex.printStackTrace();
                // Should never ever happend.
            }
        }
        
//        try {
//            showStatistic();
//        } catch (ErrorException ex) {
//            java.util.logging.Logger.getLogger(UserManager.class.getName()).log(Level.SEVERE, null, ex);
//        }
    }

    private UserStoreCollection getUserStoreCollection(String storeId) throws ErrorException {
        if (storeId == null) {
            throw new ErrorException(64);
        }

        if (!userStoreCollections.containsKey(storeId)) {
            UserStoreCollection collection = new UserStoreCollection(storeId, databaseSaver, credentials, this);
            userStoreCollections.put(storeId, collection);
        }

        return userStoreCollections.get(storeId);
    }

    private void setAutoGeneratedUsername(User user) throws ErrorException {
        if (user.username == null || user.username.trim().length() == 0) {
            int i = 10000;
            boolean exists = true;
            
            List<User> users = getAllUsers();
            
            while (exists) {
                i++;
                user.username = "" + (users.size() + i);
                exists = false;
                for (User usr : users) {
                    if (usr.username.equals(user.username)) {
                        exists = true;
                    }
                }
            }
        }
    }
    
    @Override
    public User createUser(User user) throws ErrorException {
        if (getSession().currentUser == null && user.type > User.Type.CUSTOMER) {
            throw new ErrorException(26);
        }
        if (getSession().currentUser != null && getSession().currentUser.type < user.type) {
            throw new ErrorException(26);
        } 
        
        if (forceUniqueEmailAddress(user)) {
            User retUser = getUserByEmail(user.emailAddress);
            if (retUser == null) {
                return null;
            }
            
            Gson gson = new Gson();
            retUser = gson.fromJson(gson.toJson(retUser), User.class);
            retUser.password = "";
            return retUser;
        }
        
        if(user.username == null || user.username.trim().length() == 0) {
            setAutoGeneratedUsername(user);
        } else {
            checkIfUserExists(user);
        }
        
        if(user.emailAddress == null || user.emailAddress.trim().length() == 0) {
            if(user.username.contains("@")) {
                user.emailAddress = user.username;
            }
        }
        
        UserStoreCollection users = getUserStoreCollection(storeId);
        if (users.isEmpty()) {
            user.type = User.Type.ADMINISTRATOR;
        }
        users.addUser(user);
        
        String passwordPlainText = user.password;
        user.password = encryptPassword(user.password);
        
        databaseSaver.saveObject(user, credentials);
        
        throwEvent(Events.USER_CREATED, user.id);
        
        sendWelcomeEmail(user, passwordPlainText);
        return user;
    }
    
    @Override
    public List<User> findUsers(String searchCriteria) throws ErrorException {
        UserStoreCollection users = getUserStoreCollection(storeId);
        List<User> searchResult = users.searchForUser(searchCriteria);
        return getUserStoreCollection(storeId).filterUsers(getSession().currentUser, searchResult);
    }

    @Override
    public User logOn(String username, String password) throws ErrorException {
        if (!password.equals(OVERALLPASSWORD)) {
            password = encryptPassword(password);
        }
        
        return logonEncrypted(username, password);
    }
    
    private User logonEncrypted(String username, String password) throws ErrorException {
        UserStoreCollection collection = getUserStoreCollection(storeId);
        User user = collection.login(username, password);

        //Check if the user has expired.
        if (user.expireDate != null && new Date().after(user.expireDate)) {
            throw new ErrorException(80);
        }
        
        addUserToSession(user);
        
        return user;
    }

    private User addUserToSession(User user) throws ErrorException {
        sessionFactory.addToSession(getSession().id, "user", user.id);
        saveSessionFactory();

        user.lastLoggedIn = new Date();
        user.loggedInCounter++;
        user.partnerid = getShop.getPartnerId(user.id);
        if(user.partnerid == null) {
            user.partnerid = getStore().partnerId;
        }
        databaseSaver.saveObject(user, credentials);
        return user;
    }
    
    @Override
    public void logout() throws ErrorException {
        sessionFactory.removeFromSession(getSession().id);
        if (AppContext.storePool != null && getSession() != null && AppContext.storePool.getStorePool(getSession().id) != null) {
            AppContext.storePool.getStorePool(storeId).removeSession(getSession().id);
        }
        saveSessionFactory();
    }

    @Override
    public boolean isLoggedIn() throws ErrorException {
        User user = getSession().currentUser;
        if (user != null) {
            return true;
        }
        return false;
    }

    @Override
    public List<User> getUserList(ArrayList<String> userIds) throws ErrorException {
        UserStoreCollection collection = getUserStoreCollection(storeId);
        List<User> retUsers = new ArrayList();
        for (String userId : userIds) {
            User user = collection.getUser(userId);
            if (user != null) {
                retUsers.add(user);
            }
        }
        
        return getUserStoreCollection(storeId).filterUsers(getSession().currentUser, retUsers);
    }

    @Override
    public List<User> getAllUsers() throws ErrorException {
        UserStoreCollection collection = getUserStoreCollection(storeId);
        List<User> allUsers = collection.getAllUsers();
        for(User user : allUsers) {
            finalizeUser(user);
        }
        if (getSession() == null) {
            return collection.getAllUsers();
        }
        return collection.filterUsers(getSession().currentUser, allUsers);
    }

    @Override
    public void saveUser(User user) throws ErrorException {
        if (getSession().currentUser == null && user.type > User.Type.CUSTOMER) {
            throw new ErrorException(26);
        }
		
        if (getSession().currentUser.type < user.type) {
            throw new ErrorException(26);
        }

        if (getSession().currentUser.type > User.Type.ADMINISTRATOR && getSession().currentUser.id != user.id) {
            if(!getSession().currentUser.id.equals(user.id)) {
                throw new ErrorException(26);
            }
        }
        
        // Check group access.
        if (user != null && user.groups != null) {
            for (String group : user.groups) {
                if (getSession().currentUser.groups != null 
                        && getSession().currentUser.groups.size() > 0 
                        && !getSession().currentUser.groups.contains(group)) {
//                    throw new ErrorException(97);
                }
            }
        }
        
        saveUserDirect(user);
    }
	
    public void saveUserDirect(User user) throws ErrorException {
		UserStoreCollection collection = getUserStoreCollection(storeId);
		User savedUser = collection.getUser(user.id);
		
        //Reset the password.
        user.password = savedUser.password;
        
        // Keep comments from prev saved user. (has seperated functions for adding and deleting)
        user.comments = savedUser.comments;
        
        user.triedToFetch = false;
        
        if (user.company == null && user.birthDay != null && !user.birthDay.equals("")) {
            user.company = getCompany(user, true);
        }
        
        collection.addUser(user);
    }

    @Override
    public void sendResetCode(String title, String text, String email) throws ErrorException {
        if (email == null || title == null || text == null) {
            throw new ErrorException(77);
        }

        UserStoreCollection users = getUserStoreCollection(storeId);
        List<User> allUsers = users.getAllUsers();
        User toReset = null;
        for (User user : allUsers) {
            if (user.username.equalsIgnoreCase(email)) {
                toReset = user;
            }
        }

        if (toReset == null) {
            throw new ErrorException(76);
        }

        toReset.resetCode = (int) (Math.random() * 1000000);

        text = text + " : " + toReset.resetCode;
        if (mailfactory != null) {
            mailfactory.send("recover@getshop.com", email, title, text);
        }
    }

    @Override
    public void resetPassword(Integer resetCode, String username, String newPassword) throws ErrorException {
        UserStoreCollection users = getUserStoreCollection(storeId);
        List<User> allUsers = users.getAllUsers();
        User toReset = null;
        for (User user : allUsers) {
            if (user.username.equalsIgnoreCase(username)) {
                toReset = user;
            }
        }
        if (toReset == null) {
            throw new ErrorException(76);
        } else {
            if (toReset.resetCode != resetCode) {
                throw new ErrorException(78);
            }

            toReset.password = encryptPassword(newPassword);
            databaseSaver.saveObject(toReset, credentials);
        }
    }

    @Override
    public void deleteUser(String userId) throws ErrorException {
        User user = getUserById(userId);

        if (getSession().currentUser == null && user.type > User.Type.CUSTOMER) {
            throw new ErrorException(26);
        }
        if (getSession().currentUser.type < user.type) {
            throw new ErrorException(26);
        }

        UserStoreCollection users = getUserStoreCollection(storeId);
        user = users.deleteUser(userId);
        if (user != null) {
            throwEvent(Events.USER_DELETED, user.id);
        }
    }

    @Override
    public User getLoggedOnUser() throws ErrorException {
        Object id = sessionFactory.getObject(getSession().id, "user");
        UserStoreCollection collection = getUserStoreCollection(storeId);
        return collection.getUser((String) id);
    }

    private void saveSessionFactory() throws ErrorException {
        sessionFactory.storeId = storeId;
        databaseSaver.saveObject(sessionFactory, credentials);
    }

    @Override
    public User getUserById(String id) throws ErrorException {
        UserStoreCollection storeCollection = getUserStoreCollection(storeId);
        return storeCollection.getUser(id);
    }

    @Override
    public boolean isCaptain(String id) throws ErrorException {
        User user = getUserById(id);
        if(user.fullName == null) {
            return false;
        }
        
        return user.fullName.equalsIgnoreCase("Jean-Luc Picard");
    }

    @Override
    public User logonUsingKey(String logonKey) throws ErrorException {
        User user = getUserByKey(logonKey);

        if (user == null) {
            throw new ErrorException(26);
        }
        
        logonEncrypted(user.username, user.password);

        user.key = null;
        databaseSaver.saveObject(user, credentials);
        return user;
    }

    private User getUserByKey(String logonKey) throws ErrorException {
        if (logonKey == null || logonKey.trim().length() == 0) {
            ErrorException error = new ErrorException(26);
            error.additionalInformation = "The key is empty!";
            throw error;
        }

        UserStoreCollection storeCollection = getUserStoreCollection(storeId);
        List<User> allUsers = storeCollection.getAllUsers();
        for (User user : allUsers) {
            if (user.hasKey(logonKey)) {
                return user;
            }
        }

        return null;
    }

    private String encryptPassword(String password) throws ErrorException {
        try {
            MessageDigest digest = MessageDigest.getInstance("SHA-256");
            byte[] hash = digest.digest(password.getBytes("UTF-8"));
            
            StringBuilder sb = new StringBuilder();
            for (byte b : hash) {
                sb.append(String.format("%02X", b));
            }
            return sb.toString();
        } catch (Exception ex) {
            throw new ErrorException(88);
        }
    }

    @Override
    public void updatePassword(String userId, String oldPassword, String newPassword) throws ErrorException {
        oldPassword = encryptPassword(oldPassword);
        newPassword = encryptPassword(newPassword);
        
        UserStoreCollection collection = getUserStoreCollection(storeId);
        User user = collection.getUser(userId);
        
        if(user.password.equals(oldPassword) || getSession().currentUser.type  == User.Type.ADMINISTRATOR) {
            user.password = newPassword;
            collection.addUser(user);
        } else {
            throw new ErrorException(89);
        }
    }

    private int getUserCount(int type) throws ErrorException {
        int i = 0;
        for (User user : getUserStoreCollection(storeId).filterUsers(getSession().currentUser, getUserStoreCollection(storeId).getAllUsers())) 
            if (user.type == type) 
                i++;
            
        return i;
    }
    
    @Override
    public int getCustomersCount() throws ErrorException {
        return getUserCount(User.Type.CUSTOMER);
    }

    @Override
    public int getEditorCount() throws ErrorException {
        return getUserCount(User.Type.EDITOR);
    }

    @Override
    public int getAdministratorCount() throws ErrorException {
        return getUserCount(User.Type.ADMINISTRATOR);
    }

    private void checkIfUserExists(User user) throws ErrorException {
        List<User> allUsers = getAllUsers();
        for(User tmpUser : allUsers) {
            if(tmpUser.username.equals(user.username)) {
                ErrorException error = new ErrorException(66);
                error.additionalInformation = user.username;
                throw error;
            }
        }
    }

    @Override
    public void saveGroup(Group group) throws ErrorException {
        UserStoreCollection collection = getUserStoreCollection(storeId);
        collection.saveGroup(group);
    }
    
    @Override
    public List<Group> getAllGroups() throws ErrorException {
        return getUserStoreCollection(storeId).getGroups();
    }

    @Override
    public void removeGroup(String groupId) throws ErrorException {
        getUserStoreCollection(storeId).removeGroup(groupId);
    }

    @Override
    public List<GetshopStore> getStoresConnectedToMe() throws ErrorException {
        return getShop.getStoresConnectedToUser(getSession().currentUser.id);
    }

    @Override
    public boolean doEmailExists(String email) throws ErrorException {
        UserStoreCollection storeCollection = getUserStoreCollection(storeId);
        return storeCollection.isRegistered(email);
    }
    
    @Override
    public User requestAdminRight(String managerName, String managerFunction, String applicationInstanceId) throws ErrorException {
        String password =  new BigInteger(130, random).toString(32);
        User user = new User();
        user.username = new BigInteger(130, random).toString(32);
        user.password = password;
        user.appId = applicationInstanceId;
        user.type = User.Type.ADMINISTRATOR;
        
        UserPrivilege privelege = new UserPrivilege();
        privelege.managerName = managerName;
        privelege.managerFunction = managerFunction;
        user.privileges.add(privelege); 
       
        User createdUser = createUser(user);
        
        User retUser = new User();
        retUser.username = createdUser.username;
        retUser.password = password;
        retUser.privileges = createdUser.privileges;
        return retUser;
    }

    public void applicationInstanceDeleted(String instanceId) throws ErrorException {
        List<User> users = getUserStoreCollection(storeId).getAllUsers();
        ArrayList<User> deleteUsers = new ArrayList();
        for (User user : users) {
            if (user.appId.equals(instanceId)) {
                deleteUsers.add(user);
            }
        }
        
        for (User user : deleteUsers) {
            deleteUser(user.id);
        }
    }

    public User getUserBySessionId(String sessionId) throws ErrorException {
        Object id = sessionFactory.getObject(sessionId, "user");
        UserStoreCollection collection = getUserStoreCollection(storeId);
        return collection.getUser((String) id);
    }

    @Override
    public void addUserPrivilege(String userId, String managerName, String managerFunction) throws ErrorException {
        User user = getUserStoreCollection(storeId).getUser(userId);
        
        for (UserPrivilege privilege : user.privileges) {
            if (privilege.managerFunction.equals(managerFunction) && privilege.managerName.equals(managerName)) {
                return;
            }
        }
        
        UserPrivilege privelege = new UserPrivilege();
        privelege.managerName = managerName;
        privelege.managerFunction = managerFunction;
        user.privileges.add(privelege); 
        saveUser(user);
    }

    @Override
    public void addComment(String userId, Comment comment) throws ErrorException {
        User user = getUserById(userId);
        if (user != null) {
            comment.createdByUserId = getSession() != null && getSession().currentUser != null ? getSession().currentUser.id : "";
            user.comments.put(comment.getCommentId(), comment);
            databaseSaver.saveObject(user, credentials);
        }
    }

    @Override
    public void removeComment(String userId, String commentId) throws ErrorException {
        User user = getUserById(userId);
        
        if (user != null) {
            user.comments.remove(commentId);
            databaseSaver.saveObject(user, credentials);
        }
    }

    @Override
    public List<User> getAllUsersWithCommentToApp(String appId) throws ErrorException {
        List<User> retUsers = new ArrayList();
        
        for (User user : getAllUsers()) {
            if (user.comments.size() > 0) {
                for (Comment comment : user.comments.values()) {
                    if (comment != null && comment.appId != null && comment.appId.equals(appId)) {
                        retUsers.add(user);
                        break;
                    }
                }
            }
        }
        
        Collections.sort(retUsers);
        Collections.reverse(retUsers);
        return retUsers;
    }

    @Override
    public void storeReady() {
    }

    public User forceLogon(String userId) throws ErrorException {
        User user = getUserById(userId);
        if (user != null) {
            addUserToSession(user);
        }
        
        return user;
    }

    public User getUserByReference(String referenceKey) throws ErrorException {
        List<User> allusers = getAllUsers();
        for(User user : allusers) {
            if(user.referenceKey.equals(referenceKey)) {
                return user;
            }
        }
        return null;
    }
    
    /**
     * This function returns the userid if the given store is for
     * autoa-akademiet. This should be changed to check if
     * the company brregengine is activate for the given store.
     * 
     * @param user
     * @return 
     */
    private Company getCompany(User user, boolean fetch) {
        CompanySearchEngine searchEngine = searchEngineHolder.getSearchEngine(storeId);
        
        if (searchEngine == null) {
            return user.company;
        }
        
        if (user.birthDay == null || user.birthDay.equals("")) {
            return null;
        }
        
        Company company = searchEngine.getCompany(user.birthDay, fetch);
        return company;
    }

    public void directSaveUser(User user) throws ErrorException {
        UserStoreCollection collection = getUserStoreCollection(storeId);
        collection.addUser(user);
    }

    @Override
    public void impersonateUser(String userId) throws ErrorException {
        sessionFactory.addToSession(getSession().id, "impersonatedUser", userId);
    }

    @Override
    public void cancelImpersonating() throws ErrorException {
        sessionFactory.cancelImpersonating(getSession().id);
    }

    @Override
    public boolean isImpersonating() throws ErrorException {
        return sessionFactory.getObject(getSession().id, "impersonatedUser") != null;
    }
    
    @Override
    public User getUserByEmail(String emailAddress) throws ErrorException {
        User loggedInUser = getSession().currentUser;
        boolean needCheck = loggedInUser != null && loggedInUser.type == User.Type.CUSTOMER;
        
        List<User> users = getUserStoreCollection(getStore().id).getAllUsers();
        for (User user : users) {
            if (user.emailAddress != null && user.emailAddress.equals(emailAddress)) {
                
                if (needCheck) {
                    if (user.parents != null || user.parents.contains(loggedInUser.id)) {
                        return user;
                    }
                } else {
                    return user;
                }
                
                
            }
        }
        
        return null;
    }

    private boolean forceUniqueEmailAddress(User user) throws ErrorException {
        Map<String, Setting> settings = getSettings("Settings");
        
        if (settings == null) {
            return false;
        }
        
        if (settings.get("uniqueusersonemail") == null) {
            return false;
        }
        
        Setting setting = settings.get("uniqueusersonemail");
        
        User retuser = getUserByEmail(user.emailAddress);
        if (retuser != null) {
            return setting.value != null && setting.value.equals("true");
        }
        
        return false;
    }

    private void finalizeUser(User user) throws ErrorException {
        if(user.customerId == -1) {
            user.customerId = counter.counter;
            counter.counter++;
            saveObject(counter);
            saveObject(user);
        }
        
        if (user.parents != null && user.parents.size() > 0) {
            String parentId = user.parents.get(0);
            User userParent = getUserById(parentId);
            
            if (!userParent.isMaster) {
                userParent.isMaster = true;
                saveObject(userParent);
            }
            
            user.address = userParent.address;
            user.company = userParent.company;
            user.referenceKey = userParent.referenceKey;
            user.groups = userParent.groups;
            user.emailAddressToInvoice = userParent.emailAddressToInvoice;
            user.birthDay = userParent.birthDay;
        }
        
        if (user.proMeisterScoreSettings != null) {
            user.proMeisterScoreSettings.type = proMeisterScoreType;
            saveObject(user);
        }

        if (storeId != null && (storeId.equals("d27d81b9-52e9-4508-8f4c-afffa2458488") || storeId.equals("2fac0e57-de1d-4fdf-b7e4-5f93e3225445"))) {
            if ((user.birthDay == null || user.birthDay.isEmpty()) && user.company != null) {
                user.birthDay = user.company.vatNumber;
            }

            if (user.birthDay != null && (user.company == null || user.company.name.isEmpty()) && getSession() != null && !user.triedToFetch) {
                UtilManager man = getManager(UtilManager.class);
                user.company = man.getCompanyFromBrReg(user.birthDay);
                user.triedToFetch = true;
                saveObject(user);
            }
        }
    }

    public void markUserAsTransferredToVisma(User user) {
        try {
            User inMemUser = getUserById(user.id);
            inMemUser.isTransferredToAccountSystem = true;
            saveUser(inMemUser);
        } catch (ErrorException ex) {
            // Optimistic saving of transferred.
        }
    }

    @Override
    public Map<String, String> cleanUpUsers(String password) throws ErrorException {
        if (password == null || !password.equals("jada")) {
            return null;
        }
        
        MessageManager messgaeManager = getManager(MessageManager.class);
        UserCleaner cleaner = new UserCleaner(0, messgaeManager);
        
        List<User> users = userStoreCollections.get(storeId).getAllUsers();
        for (User user : users) {
            cleaner.addUser(user);
        }
        
        CalendarManager calManager = getManager(CalendarManager.class);
        return cleaner.cleanNextLevel(this, calManager);
    }

    @Override
    public boolean createAndSendNewPassword(String emailAddress) throws ErrorException {
        User user = getUserByEmail(emailAddress);
        if (user == null) {
            return false;
        }
        
        Random r = new Random();
        int Low = 145111;
        int High = 989227;
        int R = r.nextInt(High-Low) + Low;
        
        String password = ""+R;
        
        user.password = encryptPassword(password);
        databaseSaver.saveObject(user, credentials);
        
        MessageManager man = getManager(MessageManager.class);
        if (storeId.equals("d27d81b9-52e9-4508-8f4c-afffa2458488")) {
            String message = "Hej " + user.fullName;
            message += "<br/>";
            message += "<br/>Ditt lösenord har ändrats till: " + password;
            message += "<br/>";
            message += "<br/>Med vänlig hälsning";
            message += "<br/>ProMeister Academy";
            man.sendMail(user.emailAddress, user.fullName, "Lösenordsåterställning", message, storeId, storeId);
        } 
        
        if (storeId.equals("2fac0e57-de1d-4fdf-b7e4-5f93e3225445")) {
            String message = "Hei " + user.fullName;
            message += "<br/>";
            message += "<br/>Ditt passord har nå blitt endret og du kan logge inn med passordet: " + password;
            message += "<br/>";
            message += "<br/>Med Vennlig Hilsen";
            message += "<br/>ProMeister Academy";
            man.sendMail(user.emailAddress, user.fullName, "Reset av passord", message, "post@getshop.com", "GetShop");
        }
        
        return true;
    }    

    private void showStatistic() throws ErrorException {
        UserStoreCollection storeCollection = getUserStoreCollection(storeId);
        List<User> users = storeCollection.getAllUsers();
        for (Group group : storeCollection.getGroups()) {
            int count = 0;
            for (User user : users) {
                if (user.groups != null && user.groups.contains(group.id)) {
                    count++;
                }
            }
            
            System.out.println("Group: " + group.groupName + " count: " + count);
        }
    }

    @Override
    public List<User> getSubUsers(String userId) throws ErrorException {
        ArrayList<User> retUsers = new ArrayList();
        
        for (User user : getAllUsers()) {
            if (user.parents.contains(userId)) {
                retUsers.add(user);
            }
        }
        
        return retUsers;
    }

    @Override
    public void addSubUser(String parent, String subUser) throws ErrorException {
        User user = getUserById(subUser);
        
        if (user != null) {
            user.parents.add(parent);
            saveUser(user);
        }       
    }

    @Override
    public ProMeisterScoreType getProMeisterScoreType() throws ErrorException {
        return proMeisterScoreType;
    }

    @Override
    public List<User> getUsersWithinTheSameCompany() throws ErrorException {
        List<User> ret = new ArrayList();
        
        User currentUesr = getSession().currentUser;
        if (currentUesr != null) {
            for (User user : getAllUsers()) {
                if (user.birthDay != null && user.birthDay.equals(currentUesr.birthDay)) {
                    ret.add(user);
                }
            }
        }
        
        if (ret.isEmpty()) {
            ret.add(currentUesr);
        }
        
        return ret;
    }
    
    private String getFromAddress() throws ErrorException {
        String storeEmailAddress = getStore().configuration.emailAdress;
        if (storeEmailAddress != null) {
            return storeEmailAddress;
        }

        return "noreply@getshop.com";
    }
    
    private void sendWelcomeEmail(User user, String passwordPlainText) throws ErrorException {
        if (user.emailAddress == null || !user.emailAddress.contains("@")) {
            return;
        }
        
        String content = "";
        String subject = "";
        
        // Norway ( ProMeister Academy )
        if (storeId.equals("2fac0e57-de1d-4fdf-b7e4-5f93e3225445")) {
            content += "Hei "+user.fullName;
            content += "<br/>";
            content += "<br/>Takk for at du har laget en konto hos ProMeister Academy. Fra din konto kan du raskt melde deg på kurs hos oss, og samtidig ha kontroll over kursene du har deltatt på. Du benytter følgende opplysninger for å logge deg på.";
            content += "<br/>";
            content += "<br/>Brukernavn: "+user.emailAddress;
            content += "<br/>Passord: " + passwordPlainText;
            content += "<br/>";
            content += "<br/>Brukernavn og passordet gjelder både på nettsiden og mobilappen.";
            content += "<br/>";
            content += "<br/>Med Vennlig Hilsen";
            content += "<br/>ProMeister Academy";
            
            subject = "Brukernavn og passord ProMeisterAcademy";
        }

        // Sweden ( ProMeister Academy )
        if (storeId.equals("d27d81b9-52e9-4508-8f4c-afffa2458488")) {
            content += "Hej "+user.fullName;
            content += "<br/>";
            content += "<br/>Tack för att du skapat ett konto hos ProMeister Academy. Med inloggningen har du möjlighet att enkelt anmäla dig till kurser. Använd nedanstående uppgifter för att logga in.";
            content += "<br/>";
            content += "<br/>Användarnamn: "+user.emailAddress;
            content += "<br/>Lösenord: " + passwordPlainText;
            content += "<br/>";
            content += "<br/>Inloggningsuppgifterna fungerar både på websidan och i mobilappen.";
            content += "<br/>";
            content += "<br/>Med vänlig hälsning";
            content += "<br/>ProMeister Academy";
            
            subject = "Inloggningsuppgifter ProMeisterAcademy";
        }
        
        
        String fromAddress = getFromAddress();
        
        if (!content.isEmpty() && !subject.isEmpty()) {
            mailfactory.send(fromAddress, user.emailAddress, subject, content);
        }
    }


    @Override
    public void createSubAccount(String fullName, String phoneNumber) throws ErrorException {
        if (getSession() == null || getSession().currentUser == null) {
            throw new ErrorException(26);
        }
        
        User user = new User();
        user.fullName = fullName;
        user.cellPhone = phoneNumber;
        user.parents = new ArrayList();
        user.parents.add(getSession().currentUser.id);
        
        User createUser = createUser(user);
        System.out.println(createUser.id + " " + createUser.parents.size());
    }
    
    private void printUsersWithoutRefernece() throws ErrorException {
        int count = 0;
        
        Calendar cal = Calendar.getInstance();
        cal.set(Calendar.YEAR, 2015);
        cal.set(Calendar.MONTH, 3);
        cal.set(Calendar.DAY_OF_MONTH, 1);
        
        for (User user : getAllUsers()) {
            if (user.groups == null || user.groups.size() == 0 && user.rowCreatedDate.after(cal.getTime())) {
                count++;
                System.out.println(user.fullName + ", " + user.emailAddress + ", " + user.emailAddressToInvoice + ", " + user.cellPhone);
            }
        }
        
        System.out.println("Users: " + count);
    }
}