package com.getshop.javaapi;

import com.google.gson.GsonBuilder;
import com.google.gson.Gson;
import com.google.gson.reflect.TypeToken;
import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.LinkedHashMap;
import com.thundashop.core.common.JsonObject2;
public class APIGalleryManager {

      public Transporter transport;

      public APIGalleryManager(Transporter transport){
           this.transport = transport;
      }

     /**
     * Add a image to a given gallery.
     * @param galleryId The id for the gallery, if this does not exists, it creates a gallery related to this id.
     * @param imageId The image id generated by the filemanager.
     * @param description A description to the image.
     * @param title A title to the image.
     * @throws ErrorException
     */
     public com.thundashop.app.gallerymanager.data.ImageEntry addImageToGallery(java.lang.String galleryId, java.lang.String imageId, java.lang.String description, java.lang.String title)  throws Exception  {
          JsonObject2 gs_json_object_data = new JsonObject2();
          gs_json_object_data.args = new LinkedHashMap();
          gs_json_object_data.args.put("galleryId",new Gson().toJson(galleryId));
          gs_json_object_data.args.put("imageId",new Gson().toJson(imageId));
          gs_json_object_data.args.put("description",new Gson().toJson(description));
          gs_json_object_data.args.put("title",new Gson().toJson(title));
          gs_json_object_data.method = "addImageToGallery";
          gs_json_object_data.interfaceName = "core.gallerymanager.IGalleryManager";
          String result = transport.send(gs_json_object_data);
          Gson gson = new GsonBuilder().serializeNulls().create();
          Type typeJson_3323322222_autogenerated = new TypeToken<com.thundashop.app.gallerymanager.data.ImageEntry>() {}.getType();
          com.thundashop.app.gallerymanager.data.ImageEntry object = gson.fromJson(result, typeJson_3323322222_autogenerated);
          return object;
     }

     /**
     * Create a new gallery.
     * @return The id for the new gallery.
     * @throws ErrorException
     */
     public java.lang.String createImageGallery()  throws Exception  {
          JsonObject2 gs_json_object_data = new JsonObject2();
          gs_json_object_data.args = new LinkedHashMap();
          gs_json_object_data.method = "createImageGallery";
          gs_json_object_data.interfaceName = "core.gallerymanager.IGalleryManager";
          String result = transport.send(gs_json_object_data);
          Gson gson = new GsonBuilder().serializeNulls().create();
          Type typeJson_3323322222_autogenerated = new TypeToken<java.lang.String>() {}.getType();
          java.lang.String object = gson.fromJson(result, typeJson_3323322222_autogenerated);
          return object;
     }

     /**
     * Remove an already existing image.
     * @param entryId The id of the image to remove.
     * @throws ErrorException
     */
     public void deleteImage(java.lang.String entryId)  throws Exception  {
          JsonObject2 gs_json_object_data = new JsonObject2();
          gs_json_object_data.args = new LinkedHashMap();
          gs_json_object_data.args.put("entryId",new Gson().toJson(entryId));
          gs_json_object_data.method = "deleteImage";
          gs_json_object_data.interfaceName = "core.gallerymanager.IGalleryManager";
          String result = transport.send(gs_json_object_data);
     }

     /**
     * Fetch all images binded to a given gallery id.
     * @param id The id to fetch the entries from.
     * @return
     * @throws ErrorException
     */
     public java.util.List getAllImages(java.lang.String id)  throws Exception  {
          JsonObject2 gs_json_object_data = new JsonObject2();
          gs_json_object_data.args = new LinkedHashMap();
          gs_json_object_data.args.put("id",new Gson().toJson(id));
          gs_json_object_data.method = "getAllImages";
          gs_json_object_data.interfaceName = "core.gallerymanager.IGalleryManager";
          String result = transport.send(gs_json_object_data);
          Gson gson = new GsonBuilder().serializeNulls().create();
          Type typeJson_3323322222_autogenerated = new TypeToken<java.util.List<com.thundashop.app.gallerymanager.data.ImageEntry>>() {}.getType();
          java.util.List object = gson.fromJson(result, typeJson_3323322222_autogenerated);
          return object;
     }

     /**
     * Find an existing entry.
     * @param id The id for search for (found in the ImageEntry object)
     * @return
     * @throws ErrorException
     */
     public com.thundashop.app.gallerymanager.data.ImageEntry getEntry(java.lang.String id)  throws Exception  {
          JsonObject2 gs_json_object_data = new JsonObject2();
          gs_json_object_data.args = new LinkedHashMap();
          gs_json_object_data.args.put("id",new Gson().toJson(id));
          gs_json_object_data.method = "getEntry";
          gs_json_object_data.interfaceName = "core.gallerymanager.IGalleryManager";
          String result = transport.send(gs_json_object_data);
          Gson gson = new GsonBuilder().serializeNulls().create();
          Type typeJson_3323322222_autogenerated = new TypeToken<com.thundashop.app.gallerymanager.data.ImageEntry>() {}.getType();
          com.thundashop.app.gallerymanager.data.ImageEntry object = gson.fromJson(result, typeJson_3323322222_autogenerated);
          return object;
     }

     /**
     * Update an already existing image.
     * @param entry The entry to update.
     * @throws ErrorException
     */
     public void saveEntry(com.thundashop.app.gallerymanager.data.ImageEntry entry)  throws Exception  {
          JsonObject2 gs_json_object_data = new JsonObject2();
          gs_json_object_data.args = new LinkedHashMap();
          gs_json_object_data.args.put("entry",new Gson().toJson(entry));
          gs_json_object_data.method = "saveEntry";
          gs_json_object_data.interfaceName = "core.gallerymanager.IGalleryManager";
          String result = transport.send(gs_json_object_data);
     }

}
