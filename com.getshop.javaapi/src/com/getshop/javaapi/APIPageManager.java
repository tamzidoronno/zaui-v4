package com.getshop.javaapi;

import com.google.gson.GsonBuilder;
import com.google.gson.Gson;
import com.google.gson.reflect.TypeToken;
import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.LinkedHashMap;
import com.thundashop.core.common.JsonObject2;
public class APIPageManager {

      public Transporter transport;

      public APIPageManager(Transporter transport){
           this.transport = transport;
      }

     /**
     * Add application
     * @param id
     * @return
     * @throws ErrorException
     */
     public com.thundashop.core.common.AppConfiguration addApplication(java.lang.String applicationSettingId)  throws Exception  {
          JsonObject2 data = new JsonObject2();
          data.args = new LinkedHashMap();
          data.args.put("applicationSettingId",new Gson().toJson(applicationSettingId));
          data.method = "addApplication";
          data.interfaceName = "core.pagemanager.IPageManager";
          String result = transport.send(data);
          Gson gson = new GsonBuilder().serializeNulls().create();
          Type typeJson_3323322222_autogenerated = new TypeToken<com.thundashop.core.common.AppConfiguration>() {}.getType();
          com.thundashop.core.common.AppConfiguration object = gson.fromJson(result, typeJson_3323322222_autogenerated);
          return object;
     }

     /**
     * Position could be
     * - left
     * - middle
     * - right
     *
     * @param pageId
     * @param appAreaId
     * @param applicationSettingId
     * @param position
     * @throws ErrorException
     */
     public void addApplicationToBottomArea(java.lang.String pageId, java.lang.String appAreaId, java.lang.String applicationSettingId, java.lang.String position)  throws Exception  {
          JsonObject2 data = new JsonObject2();
          data.args = new LinkedHashMap();
          data.args.put("pageId",new Gson().toJson(pageId));
          data.args.put("appAreaId",new Gson().toJson(appAreaId));
          data.args.put("applicationSettingId",new Gson().toJson(applicationSettingId));
          data.args.put("position",new Gson().toJson(position));
          data.method = "addApplicationToBottomArea";
          data.interfaceName = "core.pagemanager.IPageManager";
          String result = transport.send(data);
     }

     /**
     * If you know the id of the application you want to add, we strongly recommend to use this call.
     * This function
     * @param pageId The id of the page to add the application to
     * @param settingsId The settings id which identify what applications is being added.
     * @param pageArea The area this application should be added to.
     * @return AppConfiguration
     * @throws ErrorException
     */
     public com.thundashop.core.common.AppConfiguration addApplicationToPage(java.lang.String pageId, java.lang.String applicationSettingId, java.lang.String pageArea)  throws Exception  {
          JsonObject2 data = new JsonObject2();
          data.args = new LinkedHashMap();
          data.args.put("pageId",new Gson().toJson(pageId));
          data.args.put("applicationSettingId",new Gson().toJson(applicationSettingId));
          data.args.put("pageArea",new Gson().toJson(pageArea));
          data.method = "addApplicationToPage";
          data.interfaceName = "core.pagemanager.IPageManager";
          String result = transport.send(data);
          Gson gson = new GsonBuilder().serializeNulls().create();
          Type typeJson_3323322222_autogenerated = new TypeToken<com.thundashop.core.common.AppConfiguration>() {}.getType();
          com.thundashop.core.common.AppConfiguration object = gson.fromJson(result, typeJson_3323322222_autogenerated);
          return object;
     }

     /**
     * Add an existing application to the application area
     *
     * @param pageId
     * @param appId
     * @param area
     * @throws ErrorException
     */
     public void addExistingApplicationToPageArea(java.lang.String pageId, java.lang.String appId, java.lang.String area)  throws Exception  {
          JsonObject2 data = new JsonObject2();
          data.args = new LinkedHashMap();
          data.args.put("pageId",new Gson().toJson(pageId));
          data.args.put("appId",new Gson().toJson(appId));
          data.args.put("area",new Gson().toJson(area));
          data.method = "addExistingApplicationToPageArea";
          data.interfaceName = "core.pagemanager.IPageManager";
          String result = transport.send(data);
     }

     /**
     * Change the page layout<br>
     * HeaderFooterLeftMiddleRight = 1<br>
     * HeaderLeftMiddleFooter = 2<br>
     * HeaderRightMiddleFooter = 3<br>
     * HeaderMiddleFooter = 4<br>
     *
     * @param pageId
     * @param layout
     * @throws ErrorException
     */
     public void changePageLayout(java.lang.String pageId, int layout)  throws Exception  {
          JsonObject2 data = new JsonObject2();
          data.args = new LinkedHashMap();
          data.args.put("pageId",new Gson().toJson(pageId));
          data.args.put("layout",new Gson().toJson(layout));
          data.method = "changePageLayout";
          data.interfaceName = "core.pagemanager.IPageManager";
          String result = transport.send(data);
     }

     /**
     * Change the userlevel for a given page. Make it accessible for only administrators / editors / customers.<br>
     * Everyone with a higher userlevel will allways gain access to the userlevels below.
     * @param pageId The id of the page to change.
     * @param userLevel The userlevel to set ADMINISTRATOR = 100, EDITOR = 50, CUSTOMER = 10
     * @return
     * @throws ErrorException
     */
     public com.thundashop.core.pagemanager.data.Page changePageUserLevel(java.lang.String pageId, int userLevel)  throws Exception  {
          JsonObject2 data = new JsonObject2();
          data.args = new LinkedHashMap();
          data.args.put("pageId",new Gson().toJson(pageId));
          data.args.put("userLevel",new Gson().toJson(userLevel));
          data.method = "changePageUserLevel";
          data.interfaceName = "core.pagemanager.IPageManager";
          String result = transport.send(data);
          Gson gson = new GsonBuilder().serializeNulls().create();
          Type typeJson_3323322222_autogenerated = new TypeToken<com.thundashop.core.pagemanager.data.Page>() {}.getType();
          com.thundashop.core.pagemanager.data.Page object = gson.fromJson(result, typeJson_3323322222_autogenerated);
          return object;
     }

     /**
     * Remove all content on all page areas for this page.
     * @param pageId
     * @throws ErrorException
     */
     public void clearPage(java.lang.String pageId)  throws Exception  {
          JsonObject2 data = new JsonObject2();
          data.args = new LinkedHashMap();
          data.args.put("pageId",new Gson().toJson(pageId));
          data.method = "clearPage";
          data.interfaceName = "core.pagemanager.IPageManager";
          String result = transport.send(data);
     }

     /**
     * Remove all applications for specified page area at specified page.
     *
     * @param pageId
     * @throws ErrorException
     */
     public void clearPageArea(java.lang.String pageId, java.lang.String pageArea)  throws Exception  {
          JsonObject2 data = new JsonObject2();
          data.args = new LinkedHashMap();
          data.args.put("pageId",new Gson().toJson(pageId));
          data.args.put("pageArea",new Gson().toJson(pageArea));
          data.method = "clearPageArea";
          data.interfaceName = "core.pagemanager.IPageManager";
          String result = transport.send(data);
     }

     /**
     * Create a new page.
     * This page can be used to stick applications to it.
     *
     * Layout parameters<br>
     * Header footer left middle right = 1;<br>
     * Header left middle footer = 2;<br>
     * Header right middle footer = 3;<br>
     * Header middle footer = 4;<br>
     *
     * @param layout See above, integer 1 to 4
     * @param parentId The parent page. From what page are this page being created?
     * @return
     * @throws ErrorException
     */
     public com.thundashop.core.pagemanager.data.Page createPage(int layout, java.lang.String parentId)  throws Exception  {
          JsonObject2 data = new JsonObject2();
          data.args = new LinkedHashMap();
          data.args.put("layout",new Gson().toJson(layout));
          data.args.put("parentId",new Gson().toJson(parentId));
          data.method = "createPage";
          data.interfaceName = "core.pagemanager.IPageManager";
          String result = transport.send(data);
          Gson gson = new GsonBuilder().serializeNulls().create();
          Type typeJson_3323322222_autogenerated = new TypeToken<com.thundashop.core.pagemanager.data.Page>() {}.getType();
          com.thundashop.core.pagemanager.data.Page object = gson.fromJson(result, typeJson_3323322222_autogenerated);
          return object;
     }

     /**
     * Create a new page with the specified id.
     * For layouts available, see layouts for createPage function
     *
     * @param id
     * @return
     */
     public com.thundashop.core.pagemanager.data.Page createPageWithId(int layout, java.lang.String parentId, java.lang.String id)  throws Exception  {
          JsonObject2 data = new JsonObject2();
          data.args = new LinkedHashMap();
          data.args.put("layout",new Gson().toJson(layout));
          data.args.put("parentId",new Gson().toJson(parentId));
          data.args.put("id",new Gson().toJson(id));
          data.method = "createPageWithId";
          data.interfaceName = "core.pagemanager.IPageManager";
          String result = transport.send(data);
          Gson gson = new GsonBuilder().serializeNulls().create();
          Type typeJson_3323322222_autogenerated = new TypeToken<com.thundashop.core.pagemanager.data.Page>() {}.getType();
          com.thundashop.core.pagemanager.data.Page object = gson.fromJson(result, typeJson_3323322222_autogenerated);
          return object;
     }

     /**
     * Delete an application from the store
     * removes all references where it has been used.
     *
     * Suitable for singleton applications
     *
     * @param id
     * @throws ErrorException
     */
     public void deleteApplication(java.lang.String id)  throws Exception  {
          JsonObject2 data = new JsonObject2();
          data.args = new LinkedHashMap();
          data.args.put("id",new Gson().toJson(id));
          data.method = "deleteApplication";
          data.interfaceName = "core.pagemanager.IPageManager";
          String result = transport.send(data);
     }

     /**
     * Delete the page with the id.
     *
     * @param id
     */
     public void deletePage(java.lang.String id)  throws Exception  {
          JsonObject2 data = new JsonObject2();
          data.args = new LinkedHashMap();
          data.args.put("id",new Gson().toJson(id));
          data.method = "deletePage";
          data.interfaceName = "core.pagemanager.IPageManager";
          String result = transport.send(data);
     }

     /**
     * Fetch all settings for a given application
     * @param name The php equivelent name of the application.
     * @return
     * @throws ErrorException
     */
     public java.util.HashMap getApplicationSettings(java.lang.String name)  throws Exception  {
          JsonObject2 data = new JsonObject2();
          data.args = new LinkedHashMap();
          data.args.put("name",new Gson().toJson(name));
          data.method = "getApplicationSettings";
          data.interfaceName = "core.pagemanager.IPageManager";
          String result = transport.send(data);
          Gson gson = new GsonBuilder().serializeNulls().create();
          Type typeJson_3323322222_autogenerated = new TypeToken<java.util.HashMap<java.lang.String,com.thundashop.core.common.Setting>>() {}.getType();
          java.util.HashMap object = gson.fromJson(result, typeJson_3323322222_autogenerated);
          return object;
     }

     /**
     * Get all applications from the applicationPool.
     *
     * @return
     */
     public java.util.List getApplications()  throws Exception  {
          JsonObject2 data = new JsonObject2();
          data.args = new LinkedHashMap();
          data.method = "getApplications";
          data.interfaceName = "core.pagemanager.IPageManager";
          String result = transport.send(data);
          Gson gson = new GsonBuilder().serializeNulls().create();
          Type typeJson_3323322222_autogenerated = new TypeToken<java.util.List<com.thundashop.core.common.AppConfiguration>>() {}.getType();
          java.util.List object = gson.fromJson(result, typeJson_3323322222_autogenerated);
          return object;
     }

     /**
     * Get all applications from the applicationPool.
     * based on the specified ApplicationSettingsId
     *
     * @return
     */
     public java.util.List getApplicationsBasedOnApplicationSettingsId(java.lang.String appSettingsId)  throws Exception  {
          JsonObject2 data = new JsonObject2();
          data.args = new LinkedHashMap();
          data.args.put("appSettingsId",new Gson().toJson(appSettingsId));
          data.method = "getApplicationsBasedOnApplicationSettingsId";
          data.interfaceName = "core.pagemanager.IPageManager";
          String result = transport.send(data);
          Gson gson = new GsonBuilder().serializeNulls().create();
          Type typeJson_3323322222_autogenerated = new TypeToken<java.util.List<com.thundashop.core.common.AppConfiguration>>() {}.getType();
          java.util.List object = gson.fromJson(result, typeJson_3323322222_autogenerated);
          return object;
     }

     /**
     * Get all applications from the applicationPool.
     * based on the specified ApplicationSettingsId
     *
     * @return
     */
     public java.util.List getApplicationsByPageAreaAndSettingsId(java.lang.String appSettingsId, java.lang.String pageArea)  throws Exception  {
          JsonObject2 data = new JsonObject2();
          data.args = new LinkedHashMap();
          data.args.put("appSettingsId",new Gson().toJson(appSettingsId));
          data.args.put("pageArea",new Gson().toJson(pageArea));
          data.method = "getApplicationsByPageAreaAndSettingsId";
          data.interfaceName = "core.pagemanager.IPageManager";
          String result = transport.send(data);
          Gson gson = new GsonBuilder().serializeNulls().create();
          Type typeJson_3323322222_autogenerated = new TypeToken<java.util.List<com.thundashop.core.common.AppConfiguration>>() {}.getType();
          java.util.List object = gson.fromJson(result, typeJson_3323322222_autogenerated);
          return object;
     }

     /**
     * Fetch all application from the applicationPool (added applications) which has a given type.
     * @param type
     * @return
     * @throws ErrorException
     */
     public java.util.List getApplicationsByType(java.lang.String type)  throws Exception  {
          JsonObject2 data = new JsonObject2();
          data.args = new LinkedHashMap();
          data.args.put("type",new Gson().toJson(type));
          data.method = "getApplicationsByType";
          data.interfaceName = "core.pagemanager.IPageManager";
          String result = transport.send(data);
          Gson gson = new GsonBuilder().serializeNulls().create();
          Type typeJson_3323322222_autogenerated = new TypeToken<java.util.List<com.thundashop.core.common.AppConfiguration>>() {}.getType();
          java.util.List object = gson.fromJson(result, typeJson_3323322222_autogenerated);
          return object;
     }

     /**
     * Get all applications that is needed to render a page.
     *
     * @param pageId
     * @return
     * @throws ErrorException
     */
     public java.util.List getApplicationsForPage(java.lang.String pageId)  throws Exception  {
          JsonObject2 data = new JsonObject2();
          data.args = new LinkedHashMap();
          data.args.put("pageId",new Gson().toJson(pageId));
          data.method = "getApplicationsForPage";
          data.interfaceName = "core.pagemanager.IPageManager";
          String result = transport.send(data);
          Gson gson = new GsonBuilder().serializeNulls().create();
          Type typeJson_3323322222_autogenerated = new TypeToken<java.util.List<com.thundashop.core.common.AppConfiguration>>() {}.getType();
          java.util.List object = gson.fromJson(result, typeJson_3323322222_autogenerated);
          return object;
     }

     /**
     * fetch an existing page.
     * @param id The id for the page to fetch.
     * @return
     * @throws ErrorException
     */
     public com.thundashop.core.pagemanager.data.Page getPage(java.lang.String id)  throws Exception  {
          JsonObject2 data = new JsonObject2();
          data.args = new LinkedHashMap();
          data.args.put("id",new Gson().toJson(id));
          data.method = "getPage";
          data.interfaceName = "core.pagemanager.IPageManager";
          String result = transport.send(data);
          Gson gson = new GsonBuilder().serializeNulls().create();
          Type typeJson_3323322222_autogenerated = new TypeToken<com.thundashop.core.pagemanager.data.Page>() {}.getType();
          com.thundashop.core.pagemanager.data.Page object = gson.fromJson(result, typeJson_3323322222_autogenerated);
          return object;
     }

     /**
     * Fetch a list of all pages found for a list of applications.<br>
     * The key is the application id, the list combined with the key a list of page ids found for the specified applications.
     * @param appIds A list of application ids to resolve pages for.
     * @throws ErrorException
     */
     public java.util.HashMap getPagesForApplications(java.util.List appIds)  throws Exception  {
          JsonObject2 data = new JsonObject2();
          data.args = new LinkedHashMap();
          data.args.put("appIds",new Gson().toJson(appIds));
          data.method = "getPagesForApplications";
          data.interfaceName = "core.pagemanager.IPageManager";
          String result = transport.send(data);
          Gson gson = new GsonBuilder().serializeNulls().create();
          Type typeJson_3323322222_autogenerated = new TypeToken<java.util.HashMap<java.lang.String,java.util.List<java.lang.String>>>() {}.getType();
          java.util.HashMap object = gson.fromJson(result, typeJson_3323322222_autogenerated);
          return object;
     }

     /**
     * Get secured settings
     */
     public java.util.HashMap getSecuredSettings(java.lang.String applicationInstanceId)  throws Exception  {
          JsonObject2 data = new JsonObject2();
          data.args = new LinkedHashMap();
          data.args.put("applicationInstanceId",new Gson().toJson(applicationInstanceId));
          data.method = "getSecuredSettings";
          data.interfaceName = "core.pagemanager.IPageManager";
          String result = transport.send(data);
          Gson gson = new GsonBuilder().serializeNulls().create();
          Type typeJson_3323322222_autogenerated = new TypeToken<java.util.HashMap<java.lang.String,com.thundashop.core.common.Setting>>() {}.getType();
          java.util.HashMap object = gson.fromJson(result, typeJson_3323322222_autogenerated);
          return object;
     }

     /**
     * Fetch all settings for a given application
     * @param name The php equivelent name of the application.
     * @return
     * @throws ErrorException
     */
     public java.util.HashMap getSecuredSettingsInternal(java.lang.String appName)  throws Exception  {
          JsonObject2 data = new JsonObject2();
          data.args = new LinkedHashMap();
          data.args.put("appName",new Gson().toJson(appName));
          data.method = "getSecuredSettingsInternal";
          data.interfaceName = "core.pagemanager.IPageManager";
          String result = transport.send(data);
          Gson gson = new GsonBuilder().serializeNulls().create();
          Type typeJson_3323322222_autogenerated = new TypeToken<java.util.HashMap<java.lang.String,com.thundashop.core.common.Setting>>() {}.getType();
          java.util.HashMap object = gson.fromJson(result, typeJson_3323322222_autogenerated);
          return object;
     }

     /**
     * Remove instances of applications added for a specific page id.
     * @param appSettingsId The id of the application row
     * @throws ErrorException
     */
     public void removeAllApplications(java.lang.String appSettingsId)  throws Exception  {
          JsonObject2 data = new JsonObject2();
          data.args = new LinkedHashMap();
          data.args.put("appSettingsId",new Gson().toJson(appSettingsId));
          data.method = "removeAllApplications";
          data.interfaceName = "core.pagemanager.IPageManager";
          String result = transport.send(data);
     }

     /**
     * Remove an application
     *
     * @param applicationId The id to the application.
     * @return
     * @throws ErrorException
     */
     public com.thundashop.core.pagemanager.data.Page removeApplication(java.lang.String applicationId, java.lang.String pageid)  throws Exception  {
          JsonObject2 data = new JsonObject2();
          data.args = new LinkedHashMap();
          data.args.put("applicationId",new Gson().toJson(applicationId));
          data.args.put("pageid",new Gson().toJson(pageid));
          data.method = "removeApplication";
          data.interfaceName = "core.pagemanager.IPageManager";
          String result = transport.send(data);
          Gson gson = new GsonBuilder().serializeNulls().create();
          Type typeJson_3323322222_autogenerated = new TypeToken<com.thundashop.core.pagemanager.data.Page>() {}.getType();
          com.thundashop.core.pagemanager.data.Page object = gson.fromJson(result, typeJson_3323322222_autogenerated);
          return object;
     }

     /**
     * Rearrange a given application for a given page.
     * @param pageId The id of the page where the application is located.
     * @param appId The id of application id to rearrange.
     * @param moveUp If set to true the application is moved up, otherwhise it is set to false.
     * @return
     * @throws ErrorException
     */
     public com.thundashop.core.pagemanager.data.Page reorderApplication(java.lang.String pageId, java.lang.String appId, java.lang.Boolean moveUp)  throws Exception  {
          JsonObject2 data = new JsonObject2();
          data.args = new LinkedHashMap();
          data.args.put("pageId",new Gson().toJson(pageId));
          data.args.put("appId",new Gson().toJson(appId));
          data.args.put("moveUp",new Gson().toJson(moveUp));
          data.method = "reorderApplication";
          data.interfaceName = "core.pagemanager.IPageManager";
          String result = transport.send(data);
          Gson gson = new GsonBuilder().serializeNulls().create();
          Type typeJson_3323322222_autogenerated = new TypeToken<com.thundashop.core.pagemanager.data.Page>() {}.getType();
          com.thundashop.core.pagemanager.data.Page object = gson.fromJson(result, typeJson_3323322222_autogenerated);
          return object;
     }

     /**
     * For each instance of the application, there is an configuration object attached.<br>
     * Modify this object to set an application sticky, inheritable etc.
     * @param config The appconfiguration object to update / save.
     * @throws ErrorException
     */
     public void saveApplicationConfiguration(com.thundashop.core.common.AppConfiguration config)  throws Exception  {
          JsonObject2 data = new JsonObject2();
          data.args = new LinkedHashMap();
          data.args.put("config",new Gson().toJson(config));
          data.method = "saveApplicationConfiguration";
          data.interfaceName = "core.pagemanager.IPageManager";
          String result = transport.send(data);
     }

     /**
     * Save the page
     */
     public void savePage(com.thundashop.core.pagemanager.data.Page page)  throws Exception  {
          JsonObject2 data = new JsonObject2();
          data.args = new LinkedHashMap();
          data.args.put("page",new Gson().toJson(page));
          data.method = "savePage";
          data.interfaceName = "core.pagemanager.IPageManager";
          String result = transport.send(data);
     }

     /**
     * Search for pages by name.
     */
     public java.util.List search(java.lang.String search)  throws Exception  {
          JsonObject2 data = new JsonObject2();
          data.args = new LinkedHashMap();
          data.args.put("search",new Gson().toJson(search));
          data.method = "search";
          data.interfaceName = "core.pagemanager.IPageManager";
          String result = transport.send(data);
          Gson gson = new GsonBuilder().serializeNulls().create();
          Type typeJson_3323322222_autogenerated = new TypeToken<java.util.List<com.thundashop.core.pagemanager.data.Page>>() {}.getType();
          java.util.List object = gson.fromJson(result, typeJson_3323322222_autogenerated);
          return object;
     }

     /**
     * Set a given set of settings to a given application.
     * @param settings The settings for the application.
     * @throws ErrorException
     */
     public void setApplicationSettings(com.thundashop.core.common.Settings settings)  throws Exception  {
          JsonObject2 data = new JsonObject2();
          data.args = new LinkedHashMap();
          data.args.put("settings",new Gson().toJson(settings));
          data.method = "setApplicationSettings";
          data.interfaceName = "core.pagemanager.IPageManager";
          String result = transport.send(data);
     }

     /**
     * Stick an application. This means that the application will be visible on all the pages.<br>
     * This is especially useful for top menu application, footer applications, and other application<br>
     * that is supposed to be displayed all the time.
     * <br>
     * <br> 1 = sticked
     * <br> 0 = not sticked
     * @param appId The id of the application to stick.
     * @param toggle True makes the application sticky, false disabled the stickyness.
     * @throws ErrorException
     */
     public void setApplicationSticky(java.lang.String appId, int toggle)  throws Exception  {
          JsonObject2 data = new JsonObject2();
          data.args = new LinkedHashMap();
          data.args.put("appId",new Gson().toJson(appId));
          data.args.put("toggle",new Gson().toJson(toggle));
          data.method = "setApplicationSticky";
          data.interfaceName = "core.pagemanager.IPageManager";
          String result = transport.send(data);
     }

     /**
     * Set the page description.
     * @param description The description to add.
     * @param pageId The id of the page.
     * @throws ErrorException
     */
     public void setPageDescription(java.lang.String pageId, java.lang.String description)  throws Exception  {
          JsonObject2 data = new JsonObject2();
          data.args = new LinkedHashMap();
          data.args.put("pageId",new Gson().toJson(pageId));
          data.args.put("description",new Gson().toJson(description));
          data.method = "setPageDescription";
          data.interfaceName = "core.pagemanager.IPageManager";
          String result = transport.send(data);
     }

     /**
     * Update a page and give it a parent page. <br>
     * This is used to figure out a hiarcy for the menues.<br>
     * @param pageId The page to have a parent page.
     * @param parentPageId The id of the page to be set as the parent page.
     * @throws ErrorException
     */
     public void setParentPage(java.lang.String pageId, java.lang.String parentPageId)  throws Exception  {
          JsonObject2 data = new JsonObject2();
          data.args = new LinkedHashMap();
          data.args.put("pageId",new Gson().toJson(pageId));
          data.args.put("parentPageId",new Gson().toJson(parentPageId));
          data.method = "setParentPage";
          data.interfaceName = "core.pagemanager.IPageManager";
          String result = transport.send(data);
     }

     /**
     * If you clone an application, you would prefer to switch all already added applications
     * into an existing application.
     * @param fromAppId
     * @param toAppId
     * @throws ErrorException
     */
     public void swapApplication(java.lang.String fromAppId, java.lang.String toAppId)  throws Exception  {
          JsonObject2 data = new JsonObject2();
          data.args = new LinkedHashMap();
          data.args.put("fromAppId",new Gson().toJson(fromAppId));
          data.args.put("toAppId",new Gson().toJson(toAppId));
          data.method = "swapApplication";
          data.interfaceName = "core.pagemanager.IPageManager";
          String result = transport.send(data);
     }

     /**
     * Switch application areas between two applications areas on a given page.
     */
     public void switchApplicationAreas(java.lang.String pageId, java.lang.String fromArea, java.lang.String toArea)  throws Exception  {
          JsonObject2 data = new JsonObject2();
          data.args = new LinkedHashMap();
          data.args.put("pageId",new Gson().toJson(pageId));
          data.args.put("fromArea",new Gson().toJson(fromArea));
          data.args.put("toArea",new Gson().toJson(toArea));
          data.method = "switchApplicationAreas";
          data.interfaceName = "core.pagemanager.IPageManager";
          String result = transport.send(data);
     }

     /**
     * Search for pages by name.
     */
     public void toggleBottomApplicationArea(java.lang.String pageId, java.lang.String appAreaId)  throws Exception  {
          JsonObject2 data = new JsonObject2();
          data.args = new LinkedHashMap();
          data.args.put("pageId",new Gson().toJson(pageId));
          data.args.put("appAreaId",new Gson().toJson(appAreaId));
          data.method = "toggleBottomApplicationArea";
          data.interfaceName = "core.pagemanager.IPageManager";
          String result = transport.send(data);
     }

     /**
     * Need to translate a set of page ids?
     * @param pages A list (array) of page ids to translate.
     * @return A list of human readable strings, the key is the page id.
     * @throws ErrorException
     */
     public java.util.HashMap translatePages(java.util.List pages)  throws Exception  {
          JsonObject2 data = new JsonObject2();
          data.args = new LinkedHashMap();
          data.args.put("pages",new Gson().toJson(pages));
          data.method = "translatePages";
          data.interfaceName = "core.pagemanager.IPageManager";
          String result = transport.send(data);
          Gson gson = new GsonBuilder().serializeNulls().create();
          Type typeJson_3323322222_autogenerated = new TypeToken<java.util.HashMap<java.lang.String,java.lang.String>>() {}.getType();
          java.util.HashMap object = gson.fromJson(result, typeJson_3323322222_autogenerated);
          return object;
     }

}
