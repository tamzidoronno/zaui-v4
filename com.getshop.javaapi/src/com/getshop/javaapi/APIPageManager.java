package com.getshop.javaapi;

import com.google.gson.GsonBuilder;
import com.google.gson.Gson;
import com.google.gson.reflect.TypeToken;
import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.LinkedHashMap;
import com.thundashop.core.common.JsonObject2;
public class APIPageManager {

      public Transporter transport;

      public APIPageManager(Transporter transport){
           this.transport = transport;
      }

     /**
     * Add application
     * @param id
     * @return
     * @throws ErrorException
     */
     public com.thundashop.core.common.ApplicationInstance addApplication(java.lang.String applicationId, java.lang.String pageCellId)  throws Exception  {
          JsonObject2 gs_json_object_data = new JsonObject2();
          gs_json_object_data.args = new LinkedHashMap();
          gs_json_object_data.args.put("applicationId",new Gson().toJson(applicationId));
          gs_json_object_data.args.put("pageCellId",new Gson().toJson(pageCellId));
          gs_json_object_data.method = "addApplication";
          gs_json_object_data.interfaceName = "core.pagemanager.IPageManager";
          String result = transport.send(gs_json_object_data);
          Gson gson = new GsonBuilder().serializeNulls().create();
          Type typeJson_3323322222_autogenerated = new TypeToken<com.thundashop.core.common.ApplicationInstance>() {}.getType();
          com.thundashop.core.common.ApplicationInstance object = gson.fromJson(result, typeJson_3323322222_autogenerated);
          return object;
     }

     /**
     * Add an existing application to the application area
     *
     * @param pageId
     * @param appId
     * @param area
     * @throws ErrorException
     */
     public void addExistingApplicationToPageArea(java.lang.String pageId, java.lang.String appId, java.lang.String area)  throws Exception  {
          JsonObject2 gs_json_object_data = new JsonObject2();
          gs_json_object_data.args = new LinkedHashMap();
          gs_json_object_data.args.put("pageId",new Gson().toJson(pageId));
          gs_json_object_data.args.put("appId",new Gson().toJson(appId));
          gs_json_object_data.args.put("area",new Gson().toJson(area));
          gs_json_object_data.method = "addExistingApplicationToPageArea";
          gs_json_object_data.interfaceName = "core.pagemanager.IPageManager";
          String result = transport.send(gs_json_object_data);
     }

     /**
     * Add an cell to an specific earea.
     * @param pageId
     * @param incell
     * @param beforecell
     * @param direction
     * @param area header/footer/body if nothing set it will default to body.
     * @return
     * @throws ErrorException
     */
     public java.lang.String addLayoutCell(java.lang.String pageId, java.lang.String incell, java.lang.String beforecell, java.lang.String direction, java.lang.String area)  throws Exception  {
          JsonObject2 gs_json_object_data = new JsonObject2();
          gs_json_object_data.args = new LinkedHashMap();
          gs_json_object_data.args.put("pageId",new Gson().toJson(pageId));
          gs_json_object_data.args.put("incell",new Gson().toJson(incell));
          gs_json_object_data.args.put("beforecell",new Gson().toJson(beforecell));
          gs_json_object_data.args.put("direction",new Gson().toJson(direction));
          gs_json_object_data.args.put("area",new Gson().toJson(area));
          gs_json_object_data.method = "addLayoutCell";
          gs_json_object_data.interfaceName = "core.pagemanager.IPageManager";
          String result = transport.send(gs_json_object_data);
          Gson gson = new GsonBuilder().serializeNulls().create();
          Type typeJson_3323322222_autogenerated = new TypeToken<java.lang.String>() {}.getType();
          java.lang.String object = gson.fromJson(result, typeJson_3323322222_autogenerated);
          return object;
     }

     /**
     * Change the userlevel for a given page. Make it accessible for only administrators / editors / customers.<br>
     * Everyone with a higher userlevel will allways gain access to the userlevels below.
     * @param pageId The id of the page to change.
     * @param userLevel The userlevel to set ADMINISTRATOR = 100, EDITOR = 50, CUSTOMER = 10
     * @return
     * @throws ErrorException
     */
     public com.thundashop.core.pagemanager.data.Page changePageUserLevel(java.lang.String pageId, int userLevel)  throws Exception  {
          JsonObject2 gs_json_object_data = new JsonObject2();
          gs_json_object_data.args = new LinkedHashMap();
          gs_json_object_data.args.put("pageId",new Gson().toJson(pageId));
          gs_json_object_data.args.put("userLevel",new Gson().toJson(userLevel));
          gs_json_object_data.method = "changePageUserLevel";
          gs_json_object_data.interfaceName = "core.pagemanager.IPageManager";
          String result = transport.send(gs_json_object_data);
          Gson gson = new GsonBuilder().serializeNulls().create();
          Type typeJson_3323322222_autogenerated = new TypeToken<com.thundashop.core.pagemanager.data.Page>() {}.getType();
          com.thundashop.core.pagemanager.data.Page object = gson.fromJson(result, typeJson_3323322222_autogenerated);
          return object;
     }

     /**
     * Remove all content on all page areas for this page.
     * @param pageId
     * @throws ErrorException
     */
     public void clearPage(java.lang.String pageId)  throws Exception  {
          JsonObject2 gs_json_object_data = new JsonObject2();
          gs_json_object_data.args = new LinkedHashMap();
          gs_json_object_data.args.put("pageId",new Gson().toJson(pageId));
          gs_json_object_data.method = "clearPage";
          gs_json_object_data.interfaceName = "core.pagemanager.IPageManager";
          String result = transport.send(gs_json_object_data);
     }

     /**
     * Remove all applications for specified page area at specified page.
     *
     * @param pageId
     * @throws ErrorException
     */
     public void clearPageArea(java.lang.String pageId, java.lang.String pageArea)  throws Exception  {
          JsonObject2 gs_json_object_data = new JsonObject2();
          gs_json_object_data.args = new LinkedHashMap();
          gs_json_object_data.args.put("pageId",new Gson().toJson(pageId));
          gs_json_object_data.args.put("pageArea",new Gson().toJson(pageArea));
          gs_json_object_data.method = "clearPageArea";
          gs_json_object_data.interfaceName = "core.pagemanager.IPageManager";
          String result = transport.send(gs_json_object_data);
     }

     /**
     * Create a new row to add application areas to for a given page.
     * @param pageId
     * @return
     * @throws ErrorException
     */
     public java.lang.String createNewRow(java.lang.String pageId)  throws Exception  {
          JsonObject2 gs_json_object_data = new JsonObject2();
          gs_json_object_data.args = new LinkedHashMap();
          gs_json_object_data.args.put("pageId",new Gson().toJson(pageId));
          gs_json_object_data.method = "createNewRow";
          gs_json_object_data.interfaceName = "core.pagemanager.IPageManager";
          String result = transport.send(gs_json_object_data);
          Gson gson = new GsonBuilder().serializeNulls().create();
          Type typeJson_3323322222_autogenerated = new TypeToken<java.lang.String>() {}.getType();
          java.lang.String object = gson.fromJson(result, typeJson_3323322222_autogenerated);
          return object;
     }

     /**
     * Create a new page.
     * This page can be used to stick applications to it.
     *
     * @return
     * @throws ErrorException
     */
     public com.thundashop.core.pagemanager.data.Page createPage()  throws Exception  {
          JsonObject2 gs_json_object_data = new JsonObject2();
          gs_json_object_data.args = new LinkedHashMap();
          gs_json_object_data.method = "createPage";
          gs_json_object_data.interfaceName = "core.pagemanager.IPageManager";
          String result = transport.send(gs_json_object_data);
          Gson gson = new GsonBuilder().serializeNulls().create();
          Type typeJson_3323322222_autogenerated = new TypeToken<com.thundashop.core.pagemanager.data.Page>() {}.getType();
          com.thundashop.core.pagemanager.data.Page object = gson.fromJson(result, typeJson_3323322222_autogenerated);
          return object;
     }

     /**
     * Delete an application from the store
     * removes all references where it has been used.
     *
     * Suitable for singleton applications
     *
     * @param id
     * @throws ErrorException
     */
     public void deleteApplication(java.lang.String id)  throws Exception  {
          JsonObject2 gs_json_object_data = new JsonObject2();
          gs_json_object_data.args = new LinkedHashMap();
          gs_json_object_data.args.put("id",new Gson().toJson(id));
          gs_json_object_data.method = "deleteApplication";
          gs_json_object_data.interfaceName = "core.pagemanager.IPageManager";
          String result = transport.send(gs_json_object_data);
     }

     /**
     * Delete the page with the id.
     *
     * @param id
     */
     public void deletePage(java.lang.String id)  throws Exception  {
          JsonObject2 gs_json_object_data = new JsonObject2();
          gs_json_object_data.args = new LinkedHashMap();
          gs_json_object_data.args.put("id",new Gson().toJson(id));
          gs_json_object_data.method = "deletePage";
          gs_json_object_data.interfaceName = "core.pagemanager.IPageManager";
          String result = transport.send(gs_json_object_data);
     }

     /**
     * Add an cell to an specific earea.
     * @param pageId
     * @param incell
     * @param beforecell
     * @param direction
     * @param area header/footer/body if nothing set it will default to body.
     * @return
     * @throws ErrorException
     */
     public com.thundashop.core.pagemanager.data.Page dropCell(java.lang.String pageId, java.lang.String cellId)  throws Exception  {
          JsonObject2 gs_json_object_data = new JsonObject2();
          gs_json_object_data.args = new LinkedHashMap();
          gs_json_object_data.args.put("pageId",new Gson().toJson(pageId));
          gs_json_object_data.args.put("cellId",new Gson().toJson(cellId));
          gs_json_object_data.method = "dropCell";
          gs_json_object_data.interfaceName = "core.pagemanager.IPageManager";
          String result = transport.send(gs_json_object_data);
          Gson gson = new GsonBuilder().serializeNulls().create();
          Type typeJson_3323322222_autogenerated = new TypeToken<com.thundashop.core.pagemanager.data.Page>() {}.getType();
          com.thundashop.core.pagemanager.data.Page object = gson.fromJson(result, typeJson_3323322222_autogenerated);
          return object;
     }

     /**
     * Get all applications from the applicationPool.
     *
     * @return
     */
     public java.util.List getApplications()  throws Exception  {
          JsonObject2 gs_json_object_data = new JsonObject2();
          gs_json_object_data.args = new LinkedHashMap();
          gs_json_object_data.method = "getApplications";
          gs_json_object_data.interfaceName = "core.pagemanager.IPageManager";
          String result = transport.send(gs_json_object_data);
          Gson gson = new GsonBuilder().serializeNulls().create();
          Type typeJson_3323322222_autogenerated = new TypeToken<java.util.List<com.thundashop.core.common.ApplicationInstance>>() {}.getType();
          java.util.List object = gson.fromJson(result, typeJson_3323322222_autogenerated);
          return object;
     }

     /**
     * Get all applications from the applicationPool.
     * based on the specified ApplicationSettingsId
     *
     * @return
     */
     public java.util.List getApplicationsBasedOnApplicationSettingsId(java.lang.String appSettingsId)  throws Exception  {
          JsonObject2 gs_json_object_data = new JsonObject2();
          gs_json_object_data.args = new LinkedHashMap();
          gs_json_object_data.args.put("appSettingsId",new Gson().toJson(appSettingsId));
          gs_json_object_data.method = "getApplicationsBasedOnApplicationSettingsId";
          gs_json_object_data.interfaceName = "core.pagemanager.IPageManager";
          String result = transport.send(gs_json_object_data);
          Gson gson = new GsonBuilder().serializeNulls().create();
          Type typeJson_3323322222_autogenerated = new TypeToken<java.util.List<com.thundashop.core.common.ApplicationInstance>>() {}.getType();
          java.util.List object = gson.fromJson(result, typeJson_3323322222_autogenerated);
          return object;
     }

     /**
     * Get all applications from the applicationPool.
     * based on the specified ApplicationSettingsId
     *
     * @return
     */
     public java.util.List getApplicationsByPageAreaAndSettingsId(java.lang.String appSettingsId, java.lang.String pageArea)  throws Exception  {
          JsonObject2 gs_json_object_data = new JsonObject2();
          gs_json_object_data.args = new LinkedHashMap();
          gs_json_object_data.args.put("appSettingsId",new Gson().toJson(appSettingsId));
          gs_json_object_data.args.put("pageArea",new Gson().toJson(pageArea));
          gs_json_object_data.method = "getApplicationsByPageAreaAndSettingsId";
          gs_json_object_data.interfaceName = "core.pagemanager.IPageManager";
          String result = transport.send(gs_json_object_data);
          Gson gson = new GsonBuilder().serializeNulls().create();
          Type typeJson_3323322222_autogenerated = new TypeToken<java.util.List<com.thundashop.core.common.ApplicationInstance>>() {}.getType();
          java.util.List object = gson.fromJson(result, typeJson_3323322222_autogenerated);
          return object;
     }

     /**
     * Fetch all application from the applicationPool (added applications) which has a given type.
     * @param type
     * @return
     * @throws ErrorException
     */
     public java.util.List getApplicationsByType(java.lang.String type)  throws Exception  {
          JsonObject2 gs_json_object_data = new JsonObject2();
          gs_json_object_data.args = new LinkedHashMap();
          gs_json_object_data.args.put("type",new Gson().toJson(type));
          gs_json_object_data.method = "getApplicationsByType";
          gs_json_object_data.interfaceName = "core.pagemanager.IPageManager";
          String result = transport.send(gs_json_object_data);
          Gson gson = new GsonBuilder().serializeNulls().create();
          Type typeJson_3323322222_autogenerated = new TypeToken<java.util.List<com.thundashop.core.common.ApplicationInstance>>() {}.getType();
          java.util.List object = gson.fromJson(result, typeJson_3323322222_autogenerated);
          return object;
     }

     /**
     * Get all applications that is needed to render a page.
     *
     * @param pageId
     * @return
     * @throws ErrorException
     */
     public java.util.List getApplicationsForPage(java.lang.String pageId)  throws Exception  {
          JsonObject2 gs_json_object_data = new JsonObject2();
          gs_json_object_data.args = new LinkedHashMap();
          gs_json_object_data.args.put("pageId",new Gson().toJson(pageId));
          gs_json_object_data.method = "getApplicationsForPage";
          gs_json_object_data.interfaceName = "core.pagemanager.IPageManager";
          String result = transport.send(gs_json_object_data);
          Gson gson = new GsonBuilder().serializeNulls().create();
          Type typeJson_3323322222_autogenerated = new TypeToken<java.util.List<com.thundashop.core.common.ApplicationInstance>>() {}.getType();
          java.util.List object = gson.fromJson(result, typeJson_3323322222_autogenerated);
          return object;
     }

     /**
     * Set the carousel configuration.
     * @param pageId
     * @return
     * @throws ErrorException
     */
     public com.thundashop.core.pagemanager.data.PageCell getCell(java.lang.String pageId, java.lang.String cellId)  throws Exception  {
          JsonObject2 gs_json_object_data = new JsonObject2();
          gs_json_object_data.args = new LinkedHashMap();
          gs_json_object_data.args.put("pageId",new Gson().toJson(pageId));
          gs_json_object_data.args.put("cellId",new Gson().toJson(cellId));
          gs_json_object_data.method = "getCell";
          gs_json_object_data.interfaceName = "core.pagemanager.IPageManager";
          String result = transport.send(gs_json_object_data);
          Gson gson = new GsonBuilder().serializeNulls().create();
          Type typeJson_3323322222_autogenerated = new TypeToken<com.thundashop.core.pagemanager.data.PageCell>() {}.getType();
          com.thundashop.core.pagemanager.data.PageCell object = gson.fromJson(result, typeJson_3323322222_autogenerated);
          return object;
     }

     /**
     * fetch an existing page.
     * @param id The id for the page to fetch.
     * @return
     * @throws ErrorException
     */
     public com.thundashop.core.pagemanager.data.Page getPage(java.lang.String id)  throws Exception  {
          JsonObject2 gs_json_object_data = new JsonObject2();
          gs_json_object_data.args = new LinkedHashMap();
          gs_json_object_data.args.put("id",new Gson().toJson(id));
          gs_json_object_data.method = "getPage";
          gs_json_object_data.interfaceName = "core.pagemanager.IPageManager";
          String result = transport.send(gs_json_object_data);
          Gson gson = new GsonBuilder().serializeNulls().create();
          Type typeJson_3323322222_autogenerated = new TypeToken<com.thundashop.core.pagemanager.data.Page>() {}.getType();
          com.thundashop.core.pagemanager.data.Page object = gson.fromJson(result, typeJson_3323322222_autogenerated);
          return object;
     }

     /**
     * Fetch a list of all pages found for a list of applications.<br>
     * The key is the application id, the list combined with the key a list of page ids found for the specified applications.
     * @param appIds A list of application ids to resolve pages for.
     * @throws ErrorException
     */
     public java.util.HashMap getPagesForApplications(java.util.List appIds)  throws Exception  {
          JsonObject2 gs_json_object_data = new JsonObject2();
          gs_json_object_data.args = new LinkedHashMap();
          gs_json_object_data.args.put("appIds",new Gson().toJson(appIds));
          gs_json_object_data.method = "getPagesForApplications";
          gs_json_object_data.interfaceName = "core.pagemanager.IPageManager";
          String result = transport.send(gs_json_object_data);
          Gson gson = new GsonBuilder().serializeNulls().create();
          Type typeJson_3323322222_autogenerated = new TypeToken<java.util.HashMap<java.lang.String,java.util.List<java.lang.String>>>() {}.getType();
          java.util.HashMap object = gson.fromJson(result, typeJson_3323322222_autogenerated);
          return object;
     }

     /**
     * Get secured settings
     */
     public java.util.HashMap getSecuredSettings(java.lang.String applicationInstanceId)  throws Exception  {
          JsonObject2 gs_json_object_data = new JsonObject2();
          gs_json_object_data.args = new LinkedHashMap();
          gs_json_object_data.args.put("applicationInstanceId",new Gson().toJson(applicationInstanceId));
          gs_json_object_data.method = "getSecuredSettings";
          gs_json_object_data.interfaceName = "core.pagemanager.IPageManager";
          String result = transport.send(gs_json_object_data);
          Gson gson = new GsonBuilder().serializeNulls().create();
          Type typeJson_3323322222_autogenerated = new TypeToken<java.util.HashMap<java.lang.String,com.thundashop.core.common.Setting>>() {}.getType();
          java.util.HashMap object = gson.fromJson(result, typeJson_3323322222_autogenerated);
          return object;
     }

     /**
     * Change the userlevel for a given page. Make it accessible for only administrators / editors / customers.<br>
     * Everyone with a higher userlevel will allways gain access to the userlevels below.
     * @param pageId The id of the page to change.
     * @param userLevel The userlevel to set ADMINISTRATOR = 100, EDITOR = 50, CUSTOMER = 10
     * @return
     * @throws ErrorException
     */
     public java.util.HashMap getSecuredSettingsInternal(java.lang.String appName)  throws Exception  {
          JsonObject2 gs_json_object_data = new JsonObject2();
          gs_json_object_data.args = new LinkedHashMap();
          gs_json_object_data.args.put("appName",new Gson().toJson(appName));
          gs_json_object_data.method = "getSecuredSettingsInternal";
          gs_json_object_data.interfaceName = "core.pagemanager.IPageManager";
          String result = transport.send(gs_json_object_data);
          Gson gson = new GsonBuilder().serializeNulls().create();
          Type typeJson_3323322222_autogenerated = new TypeToken<java.util.HashMap<java.lang.String,com.thundashop.core.common.Setting>>() {}.getType();
          java.util.HashMap object = gson.fromJson(result, typeJson_3323322222_autogenerated);
          return object;
     }

     /**
     * Remove all content on all page areas for this page.
     * @param pageId
     * @throws ErrorException
     */
     public void linkPageCell(java.lang.String pageId, java.lang.String cellId, java.lang.String link)  throws Exception  {
          JsonObject2 gs_json_object_data = new JsonObject2();
          gs_json_object_data.args = new LinkedHashMap();
          gs_json_object_data.args.put("pageId",new Gson().toJson(pageId));
          gs_json_object_data.args.put("cellId",new Gson().toJson(cellId));
          gs_json_object_data.args.put("link",new Gson().toJson(link));
          gs_json_object_data.method = "linkPageCell";
          gs_json_object_data.interfaceName = "core.pagemanager.IPageManager";
          String result = transport.send(gs_json_object_data);
     }

     /**
     * Move a cell either up or down.
     * @param pageId
     * @return
     * @throws ErrorException
     */
     public void moveCell(java.lang.String pageId, java.lang.String cellId, boolean up)  throws Exception  {
          JsonObject2 gs_json_object_data = new JsonObject2();
          gs_json_object_data.args = new LinkedHashMap();
          gs_json_object_data.args.put("pageId",new Gson().toJson(pageId));
          gs_json_object_data.args.put("cellId",new Gson().toJson(cellId));
          gs_json_object_data.args.put("up",new Gson().toJson(up));
          gs_json_object_data.method = "moveCell";
          gs_json_object_data.interfaceName = "core.pagemanager.IPageManager";
          String result = transport.send(gs_json_object_data);
     }

     /**
     * Set the carousel configuration.
     * @param pageId
     * @return
     * @throws ErrorException
     */
     public void moveCellMobile(java.lang.String pageId, java.lang.String cellId, java.lang.Boolean moveUp)  throws Exception  {
          JsonObject2 gs_json_object_data = new JsonObject2();
          gs_json_object_data.args = new LinkedHashMap();
          gs_json_object_data.args.put("pageId",new Gson().toJson(pageId));
          gs_json_object_data.args.put("cellId",new Gson().toJson(cellId));
          gs_json_object_data.args.put("moveUp",new Gson().toJson(moveUp));
          gs_json_object_data.method = "moveCellMobile";
          gs_json_object_data.interfaceName = "core.pagemanager.IPageManager";
          String result = transport.send(gs_json_object_data);
     }

     /**
     * Remove an application
     *
     * @param pageAreaId The id of the page area to remove.
     * @return
     * @throws ErrorException
     */
     public com.thundashop.core.pagemanager.data.Page removeAppFromCell(java.lang.String pageId, java.lang.String cellid)  throws Exception  {
          JsonObject2 gs_json_object_data = new JsonObject2();
          gs_json_object_data.args = new LinkedHashMap();
          gs_json_object_data.args.put("pageId",new Gson().toJson(pageId));
          gs_json_object_data.args.put("cellid",new Gson().toJson(cellid));
          gs_json_object_data.method = "removeAppFromCell";
          gs_json_object_data.interfaceName = "core.pagemanager.IPageManager";
          String result = transport.send(gs_json_object_data);
          Gson gson = new GsonBuilder().serializeNulls().create();
          Type typeJson_3323322222_autogenerated = new TypeToken<com.thundashop.core.pagemanager.data.Page>() {}.getType();
          com.thundashop.core.pagemanager.data.Page object = gson.fromJson(result, typeJson_3323322222_autogenerated);
          return object;
     }

     /**
     * For each instance of the application, there is an configuration object attached.<br>
     * Modify this object to set an application sticky, inheritable etc.
     * @param config The appconfiguration object to update / save.
     * @throws ErrorException
     */
     public void saveApplicationConfiguration(com.thundashop.core.common.ApplicationInstance config)  throws Exception  {
          JsonObject2 gs_json_object_data = new JsonObject2();
          gs_json_object_data.args = new LinkedHashMap();
          gs_json_object_data.args.put("config",new Gson().toJson(config));
          gs_json_object_data.method = "saveApplicationConfiguration";
          gs_json_object_data.interfaceName = "core.pagemanager.IPageManager";
          String result = transport.send(gs_json_object_data);
     }

     /**
     * Set the carousel configuration.
     * @param pageId
     * @return
     * @throws ErrorException
     */
     public void saveCellPosition(java.lang.String pageId, java.lang.String cellId, com.thundashop.core.pagemanager.data.FloatingData data)  throws Exception  {
          JsonObject2 gs_json_object_data = new JsonObject2();
          gs_json_object_data.args = new LinkedHashMap();
          gs_json_object_data.args.put("pageId",new Gson().toJson(pageId));
          gs_json_object_data.args.put("cellId",new Gson().toJson(cellId));
          gs_json_object_data.args.put("data",new Gson().toJson(data));
          gs_json_object_data.method = "saveCellPosition";
          gs_json_object_data.interfaceName = "core.pagemanager.IPageManager";
          String result = transport.send(gs_json_object_data);
     }

     /**
     * Save the page
     */
     public void savePage(com.thundashop.core.pagemanager.data.Page page)  throws Exception  {
          JsonObject2 gs_json_object_data = new JsonObject2();
          gs_json_object_data.args = new LinkedHashMap();
          gs_json_object_data.args.put("page",new Gson().toJson(page));
          gs_json_object_data.method = "savePage";
          gs_json_object_data.interfaceName = "core.pagemanager.IPageManager";
          String result = transport.send(gs_json_object_data);
     }

     /**
     * Set the carousel configuration.
     * @param pageId
     * @return
     * @throws ErrorException
     */
     public void setCarouselConfig(java.lang.String pageId, java.lang.String cellId, com.thundashop.core.pagemanager.data.CarouselConfig config)  throws Exception  {
          JsonObject2 gs_json_object_data = new JsonObject2();
          gs_json_object_data.args = new LinkedHashMap();
          gs_json_object_data.args.put("pageId",new Gson().toJson(pageId));
          gs_json_object_data.args.put("cellId",new Gson().toJson(cellId));
          gs_json_object_data.args.put("config",new Gson().toJson(config));
          gs_json_object_data.method = "setCarouselConfig";
          gs_json_object_data.interfaceName = "core.pagemanager.IPageManager";
          String result = transport.send(gs_json_object_data);
     }

     /**
     * Set the carousel configuration.
     * @param pageId
     * @return
     * @throws ErrorException
     */
     public void setCellMode(java.lang.String pageId, java.lang.String cellId, java.lang.String mode)  throws Exception  {
          JsonObject2 gs_json_object_data = new JsonObject2();
          gs_json_object_data.args = new LinkedHashMap();
          gs_json_object_data.args.put("pageId",new Gson().toJson(pageId));
          gs_json_object_data.args.put("cellId",new Gson().toJson(cellId));
          gs_json_object_data.args.put("mode",new Gson().toJson(mode));
          gs_json_object_data.method = "setCellMode";
          gs_json_object_data.interfaceName = "core.pagemanager.IPageManager";
          String result = transport.send(gs_json_object_data);
     }

     /**
     * Set the carousel configuration.
     * @param pageId
     * @return
     * @throws ErrorException
     */
     public void setCellName(java.lang.String pageId, java.lang.String cellId, java.lang.String cellName)  throws Exception  {
          JsonObject2 gs_json_object_data = new JsonObject2();
          gs_json_object_data.args = new LinkedHashMap();
          gs_json_object_data.args.put("pageId",new Gson().toJson(pageId));
          gs_json_object_data.args.put("cellId",new Gson().toJson(cellId));
          gs_json_object_data.args.put("cellName",new Gson().toJson(cellName));
          gs_json_object_data.method = "setCellName";
          gs_json_object_data.interfaceName = "core.pagemanager.IPageManager";
          String result = transport.send(gs_json_object_data);
     }

     /**
     * Set the page description.
     * @param description The description to add.
     * @param pageId The id of the page.
     * @throws ErrorException
     */
     public void setPageDescription(java.lang.String pageId, java.lang.String description)  throws Exception  {
          JsonObject2 gs_json_object_data = new JsonObject2();
          gs_json_object_data.args = new LinkedHashMap();
          gs_json_object_data.args.put("pageId",new Gson().toJson(pageId));
          gs_json_object_data.args.put("description",new Gson().toJson(description));
          gs_json_object_data.method = "setPageDescription";
          gs_json_object_data.interfaceName = "core.pagemanager.IPageManager";
          String result = transport.send(gs_json_object_data);
     }

     /**
     * Update a page and give it a parent page. <br>
     * This is used to figure out a hiarcy for the menues.<br>
     * @param pageId The page to have a parent page.
     * @param parentPageId The id of the page to be set as the parent page.
     * @throws ErrorException
     */
     public void setParentPage(java.lang.String pageId, java.lang.String parentPageId)  throws Exception  {
          JsonObject2 gs_json_object_data = new JsonObject2();
          gs_json_object_data.args = new LinkedHashMap();
          gs_json_object_data.args.put("pageId",new Gson().toJson(pageId));
          gs_json_object_data.args.put("parentPageId",new Gson().toJson(parentPageId));
          gs_json_object_data.method = "setParentPage";
          gs_json_object_data.interfaceName = "core.pagemanager.IPageManager";
          String result = transport.send(gs_json_object_data);
     }

     /**
     * Add application
     * @param id
     * @return
     * @throws ErrorException
     */
     public void setStylesOnCell(java.lang.String pageId, java.lang.String cellId, java.lang.String styles, java.lang.String innerStyles, java.lang.Double width)  throws Exception  {
          JsonObject2 gs_json_object_data = new JsonObject2();
          gs_json_object_data.args = new LinkedHashMap();
          gs_json_object_data.args.put("pageId",new Gson().toJson(pageId));
          gs_json_object_data.args.put("cellId",new Gson().toJson(cellId));
          gs_json_object_data.args.put("styles",new Gson().toJson(styles));
          gs_json_object_data.args.put("innerStyles",new Gson().toJson(innerStyles));
          gs_json_object_data.args.put("width",new Gson().toJson(width));
          gs_json_object_data.method = "setStylesOnCell";
          gs_json_object_data.interfaceName = "core.pagemanager.IPageManager";
          String result = transport.send(gs_json_object_data);
     }

     /**
     * Set the carousel configuration.
     * @param pageId
     * @return
     * @throws ErrorException
     */
     public void setWidth(java.lang.String pageId, java.lang.String cellId, java.lang.Integer outerWidth, java.lang.Integer outerWidthWithMargins)  throws Exception  {
          JsonObject2 gs_json_object_data = new JsonObject2();
          gs_json_object_data.args = new LinkedHashMap();
          gs_json_object_data.args.put("pageId",new Gson().toJson(pageId));
          gs_json_object_data.args.put("cellId",new Gson().toJson(cellId));
          gs_json_object_data.args.put("outerWidth",new Gson().toJson(outerWidth));
          gs_json_object_data.args.put("outerWidthWithMargins",new Gson().toJson(outerWidthWithMargins));
          gs_json_object_data.method = "setWidth";
          gs_json_object_data.interfaceName = "core.pagemanager.IPageManager";
          String result = transport.send(gs_json_object_data);
     }

     /**
     * Set the carousel configuration.
     * @param pageId
     * @return
     * @throws ErrorException
     */
     public void toggleHiddenOnMobile(java.lang.String pageId, java.lang.String cellId, java.lang.Boolean hide)  throws Exception  {
          JsonObject2 gs_json_object_data = new JsonObject2();
          gs_json_object_data.args = new LinkedHashMap();
          gs_json_object_data.args.put("pageId",new Gson().toJson(pageId));
          gs_json_object_data.args.put("cellId",new Gson().toJson(cellId));
          gs_json_object_data.args.put("hide",new Gson().toJson(hide));
          gs_json_object_data.method = "toggleHiddenOnMobile";
          gs_json_object_data.interfaceName = "core.pagemanager.IPageManager";
          String result = transport.send(gs_json_object_data);
     }

     /**
     * Set the carousel configuration.
     * @param pageId
     * @return
     * @throws ErrorException
     */
     public void togglePinArea(java.lang.String pageId, java.lang.String cellId)  throws Exception  {
          JsonObject2 gs_json_object_data = new JsonObject2();
          gs_json_object_data.args = new LinkedHashMap();
          gs_json_object_data.args.put("pageId",new Gson().toJson(pageId));
          gs_json_object_data.args.put("cellId",new Gson().toJson(cellId));
          gs_json_object_data.method = "togglePinArea";
          gs_json_object_data.interfaceName = "core.pagemanager.IPageManager";
          String result = transport.send(gs_json_object_data);
     }

     /**
     * Need to translate a set of page ids?
     * @param pages A list (array) of page ids to translate.
     * @return A list of human readable strings, the key is the page id.
     * @throws ErrorException
     */
     public java.util.HashMap translatePages(java.util.List pages)  throws Exception  {
          JsonObject2 gs_json_object_data = new JsonObject2();
          gs_json_object_data.args = new LinkedHashMap();
          gs_json_object_data.args.put("pages",new Gson().toJson(pages));
          gs_json_object_data.method = "translatePages";
          gs_json_object_data.interfaceName = "core.pagemanager.IPageManager";
          String result = transport.send(gs_json_object_data);
          Gson gson = new GsonBuilder().serializeNulls().create();
          Type typeJson_3323322222_autogenerated = new TypeToken<java.util.HashMap<java.lang.String,java.lang.String>>() {}.getType();
          java.util.HashMap object = gson.fromJson(result, typeJson_3323322222_autogenerated);
          return object;
     }

}
