package com.getshop.javaapi;

import com.google.gson.GsonBuilder;
import com.google.gson.Gson;
import com.google.gson.reflect.TypeToken;
import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.LinkedHashMap;
import com.thundashop.core.common.JsonObject2;
public class APIStoreManager {

      public Transporter transport;

      public APIStoreManager(Transporter transport){
           this.transport = transport;
      }

     /**
     * Create a new store / webshop with a given name.
     * @param hostname The hostname to the webshop.
     * @param email The email to identify the first user with,
     * @param password The password to logon the first user added to this webshop.
     * @param notify Notify the web shop owner by email about this new store.
     * @return
     * @throws ErrorException
     */
     public com.thundashop.core.storemanager.data.Store createStore(java.lang.String hostname, java.lang.String email, java.lang.String password, boolean notify)  throws Exception  {
          JsonObject2 gs_json_object_data = new JsonObject2();
          gs_json_object_data.args = new LinkedHashMap();
          gs_json_object_data.args.put("hostname",new Gson().toJson(hostname));
          gs_json_object_data.args.put("email",new Gson().toJson(email));
          gs_json_object_data.args.put("password",new Gson().toJson(password));
          gs_json_object_data.args.put("notify",new Gson().toJson(notify));
          gs_json_object_data.method = "createStore";
          gs_json_object_data.interfaceName = "core.storemanager.IStoreManager";
          String result = transport.send(gs_json_object_data);
          Gson gson = new GsonBuilder().serializeNulls().create();
          Type typeJson_3323322222_autogenerated = new TypeToken<com.thundashop.core.storemanager.data.Store>() {}.getType();
          com.thundashop.core.storemanager.data.Store object = gson.fromJson(result, typeJson_3323322222_autogenerated);
          return object;
     }

     /**
     * Enable extended support for this webshop.
     * Extended mode is a more advanced version of the ui where there is no limitation to what can be created / made.
     * @param toggle True or false depending if this webshop should have access to the extended mode.
     * @param password A password given by getshop to toggle this option.
     * @return
     * @throws ErrorException
     */
     public void delete()  throws Exception  {
          JsonObject2 gs_json_object_data = new JsonObject2();
          gs_json_object_data.args = new LinkedHashMap();
          gs_json_object_data.method = "delete";
          gs_json_object_data.interfaceName = "core.storemanager.IStoreManager";
          String result = transport.send(gs_json_object_data);
     }

     /**
     * Enable extended support for this webshop.
     * Extended mode is a more advanced version of the ui where there is no limitation to what can be created / made.
     * @param toggle True or false depending if this webshop should have access to the extended mode.
     * @param password A password given by getshop to toggle this option.
     * @return
     * @throws ErrorException
     */
     public com.thundashop.core.storemanager.data.Store enableExtendedMode(boolean toggle, java.lang.String password)  throws Exception  {
          JsonObject2 gs_json_object_data = new JsonObject2();
          gs_json_object_data.args = new LinkedHashMap();
          gs_json_object_data.args.put("toggle",new Gson().toJson(toggle));
          gs_json_object_data.args.put("password",new Gson().toJson(password));
          gs_json_object_data.method = "enableExtendedMode";
          gs_json_object_data.interfaceName = "core.storemanager.IStoreManager";
          String result = transport.send(gs_json_object_data);
          Gson gson = new GsonBuilder().serializeNulls().create();
          Type typeJson_3323322222_autogenerated = new TypeToken<com.thundashop.core.storemanager.data.Store>() {}.getType();
          com.thundashop.core.storemanager.data.Store object = gson.fromJson(result, typeJson_3323322222_autogenerated);
          return object;
     }

     /**
     * Enable support to send sms for this webshop.
     * This option is not free since there is a cost for each sms sent.
     * @param toggle true or false depending on if this webshop should have access to sms.
     * @param password A password given by getshop to toggle this option.
     * @return
     * @throws ErrorException
     */
     public com.thundashop.core.storemanager.data.Store enableSMSAccess(boolean toggle, java.lang.String password)  throws Exception  {
          JsonObject2 gs_json_object_data = new JsonObject2();
          gs_json_object_data.args = new LinkedHashMap();
          gs_json_object_data.args.put("toggle",new Gson().toJson(toggle));
          gs_json_object_data.args.put("password",new Gson().toJson(password));
          gs_json_object_data.method = "enableSMSAccess";
          gs_json_object_data.interfaceName = "core.storemanager.IStoreManager";
          String result = transport.send(gs_json_object_data);
          Gson gson = new GsonBuilder().serializeNulls().create();
          Type typeJson_3323322222_autogenerated = new TypeToken<com.thundashop.core.storemanager.data.Store>() {}.getType();
          com.thundashop.core.storemanager.data.Store object = gson.fromJson(result, typeJson_3323322222_autogenerated);
          return object;
     }

     /**
     * On registration, generate a new id this store, which will become a part of the hostname.
     * @return
     * @throws ErrorException
     */
     public int generateStoreId()  throws Exception  {
          JsonObject2 gs_json_object_data = new JsonObject2();
          gs_json_object_data.args = new LinkedHashMap();
          gs_json_object_data.method = "generateStoreId";
          gs_json_object_data.interfaceName = "core.storemanager.IStoreManager";
          String result = transport.send(gs_json_object_data);
          Gson gson = new GsonBuilder().serializeNulls().create();
          Type typeJson_3323322222_autogenerated = new TypeToken<Integer>() {}.getType();
          Integer object = gson.fromJson(result, typeJson_3323322222_autogenerated);
          return object;
     }

     /**
     * Get the store added to this session.
     * @return
     * @throws ErrorException
     */
     public com.thundashop.core.storemanager.data.Store getMyStore()  throws Exception  {
          JsonObject2 gs_json_object_data = new JsonObject2();
          gs_json_object_data.args = new LinkedHashMap();
          gs_json_object_data.method = "getMyStore";
          gs_json_object_data.interfaceName = "core.storemanager.IStoreManager";
          String result = transport.send(gs_json_object_data);
          Gson gson = new GsonBuilder().serializeNulls().create();
          Type typeJson_3323322222_autogenerated = new TypeToken<com.thundashop.core.storemanager.data.Store>() {}.getType();
          com.thundashop.core.storemanager.data.Store object = gson.fromJson(result, typeJson_3323322222_autogenerated);
          return object;
     }

     /**
     * Fetch the store id identified to this user.
     * @return The store id
     * @throws ErrorException
     */
     public java.lang.String getStoreId()  throws Exception  {
          JsonObject2 gs_json_object_data = new JsonObject2();
          gs_json_object_data.args = new LinkedHashMap();
          gs_json_object_data.method = "getStoreId";
          gs_json_object_data.interfaceName = "core.storemanager.IStoreManager";
          String result = transport.send(gs_json_object_data);
          Gson gson = new GsonBuilder().serializeNulls().create();
          Type typeJson_3323322222_autogenerated = new TypeToken<java.lang.String>() {}.getType();
          java.lang.String object = gson.fromJson(result, typeJson_3323322222_autogenerated);
          return object;
     }

     /**
     * Initializing this api. This will identify the webshop and will act as the root for everything in this api.
     * @param initSessionId The session id to identify to this user.
     * @return
     * @throws ErrorException
     */
     public com.thundashop.core.storemanager.data.Store initializeStore(java.lang.String webAddress, java.lang.String initSessionId)  throws Exception  {
          JsonObject2 gs_json_object_data = new JsonObject2();
          gs_json_object_data.args = new LinkedHashMap();
          gs_json_object_data.args.put("webAddress",new Gson().toJson(webAddress));
          gs_json_object_data.args.put("initSessionId",new Gson().toJson(initSessionId));
          gs_json_object_data.method = "initializeStore";
          gs_json_object_data.interfaceName = "core.storemanager.IStoreManager";
          String result = transport.send(gs_json_object_data);
          Gson gson = new GsonBuilder().serializeNulls().create();
          Type typeJson_3323322222_autogenerated = new TypeToken<com.thundashop.core.storemanager.data.Store>() {}.getType();
          com.thundashop.core.storemanager.data.Store object = gson.fromJson(result, typeJson_3323322222_autogenerated);
          return object;
     }

     /**
     * Check if a web shop address has already been taken.
     * @param address The address to check for.
     * @throws ErrorException
     */
     public boolean isAddressTaken(java.lang.String address)  throws Exception  {
          JsonObject2 gs_json_object_data = new JsonObject2();
          gs_json_object_data.args = new LinkedHashMap();
          gs_json_object_data.args.put("address",new Gson().toJson(address));
          gs_json_object_data.method = "isAddressTaken";
          gs_json_object_data.interfaceName = "core.storemanager.IStoreManager";
          String result = transport.send(gs_json_object_data);
          Gson gson = new GsonBuilder().serializeNulls().create();
          Type typeJson_3323322222_autogenerated = new TypeToken<Boolean>() {}.getType();
          Boolean object = gson.fromJson(result, typeJson_3323322222_autogenerated);
          return object;
     }

     /**
     * Remove an already added domain name.
     * @param domainName The domain name to remove.
     * @return
     * @throws ErrorException
     */
     public com.thundashop.core.storemanager.data.Store removeDomainName(java.lang.String domainName)  throws Exception  {
          JsonObject2 gs_json_object_data = new JsonObject2();
          gs_json_object_data.args = new LinkedHashMap();
          gs_json_object_data.args.put("domainName",new Gson().toJson(domainName));
          gs_json_object_data.method = "removeDomainName";
          gs_json_object_data.interfaceName = "core.storemanager.IStoreManager";
          String result = transport.send(gs_json_object_data);
          Gson gson = new GsonBuilder().serializeNulls().create();
          Type typeJson_3323322222_autogenerated = new TypeToken<com.thundashop.core.storemanager.data.Store>() {}.getType();
          com.thundashop.core.storemanager.data.Store object = gson.fromJson(result, typeJson_3323322222_autogenerated);
          return object;
     }

     /**
     * Update the current store with new configuration data.
     * @param config The configuration data to update.
     * @return
     * @throws ErrorException
     */
     public com.thundashop.core.storemanager.data.Store saveStore(com.thundashop.core.storemanager.data.StoreConfiguration config)  throws Exception  {
          JsonObject2 gs_json_object_data = new JsonObject2();
          gs_json_object_data.args = new LinkedHashMap();
          gs_json_object_data.args.put("config",new Gson().toJson(config));
          gs_json_object_data.method = "saveStore";
          gs_json_object_data.interfaceName = "core.storemanager.IStoreManager";
          String result = transport.send(gs_json_object_data);
          Gson gson = new GsonBuilder().serializeNulls().create();
          Type typeJson_3323322222_autogenerated = new TypeToken<com.thundashop.core.storemanager.data.Store>() {}.getType();
          com.thundashop.core.storemanager.data.Store object = gson.fromJson(result, typeJson_3323322222_autogenerated);
          return object;
     }

     /**
     * This option will enable / disable the deepfreeze mode.
     * if a websolution is set to deepfreeze, it will automatically be
     * reverted to the original state each hour. No options will be stored.
     *
     * @param mode - true / false
     */
     public void setDeepFreeze(boolean mode, java.lang.String password)  throws Exception  {
          JsonObject2 gs_json_object_data = new JsonObject2();
          gs_json_object_data.args = new LinkedHashMap();
          gs_json_object_data.args.put("mode",new Gson().toJson(mode));
          gs_json_object_data.args.put("password",new Gson().toJson(password));
          gs_json_object_data.method = "setDeepFreeze";
          gs_json_object_data.interfaceName = "core.storemanager.IStoreManager";
          String result = transport.send(gs_json_object_data);
     }

     /**
     * This will set the readintroduction variable in the Store object to true.
     * @return
     * @throws ErrorException
     */
     public com.thundashop.core.storemanager.data.Store setIntroductionRead()  throws Exception  {
          JsonObject2 gs_json_object_data = new JsonObject2();
          gs_json_object_data.args = new LinkedHashMap();
          gs_json_object_data.method = "setIntroductionRead";
          gs_json_object_data.interfaceName = "core.storemanager.IStoreManager";
          String result = transport.send(gs_json_object_data);
          Gson gson = new GsonBuilder().serializeNulls().create();
          Type typeJson_3323322222_autogenerated = new TypeToken<com.thundashop.core.storemanager.data.Store>() {}.getType();
          com.thundashop.core.storemanager.data.Store object = gson.fromJson(result, typeJson_3323322222_autogenerated);
          return object;
     }

     /**
     * Setting this store to be a template or not.
     *
     * @param storeId
     * @param isTemplate
     */
     public void setIsTemplate(java.lang.String storeId, boolean isTemplate)  throws Exception  {
          JsonObject2 gs_json_object_data = new JsonObject2();
          gs_json_object_data.args = new LinkedHashMap();
          gs_json_object_data.args.put("storeId",new Gson().toJson(storeId));
          gs_json_object_data.args.put("isTemplate",new Gson().toJson(isTemplate));
          gs_json_object_data.method = "setIsTemplate";
          gs_json_object_data.interfaceName = "core.storemanager.IStoreManager";
          String result = transport.send(gs_json_object_data);
     }

     /**
     * Set a new domain name to this store / webshop
     * @param domainName The domain name to identify this shop with.
     * @return
     * @throws ErrorException
     */
     public com.thundashop.core.storemanager.data.Store setPrimaryDomainName(java.lang.String domainName)  throws Exception  {
          JsonObject2 gs_json_object_data = new JsonObject2();
          gs_json_object_data.args = new LinkedHashMap();
          gs_json_object_data.args.put("domainName",new Gson().toJson(domainName));
          gs_json_object_data.method = "setPrimaryDomainName";
          gs_json_object_data.interfaceName = "core.storemanager.IStoreManager";
          String result = transport.send(gs_json_object_data);
          Gson gson = new GsonBuilder().serializeNulls().create();
          Type typeJson_3323322222_autogenerated = new TypeToken<com.thundashop.core.storemanager.data.Store>() {}.getType();
          com.thundashop.core.storemanager.data.Store object = gson.fromJson(result, typeJson_3323322222_autogenerated);
          return object;
     }

     /**
     * A user can set a different language for its session.
     * @param id
     * @throws ErrorException
     */
     public void setSessionLanguage(java.lang.String id)  throws Exception  {
          JsonObject2 gs_json_object_data = new JsonObject2();
          gs_json_object_data.args = new LinkedHashMap();
          gs_json_object_data.args.put("id",new Gson().toJson(id));
          gs_json_object_data.method = "setSessionLanguage";
          gs_json_object_data.interfaceName = "core.storemanager.IStoreManager";
          String result = transport.send(gs_json_object_data);
     }

}
