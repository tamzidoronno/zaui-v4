package com.thundashop.api.managers;

import com.google.gson.GsonBuilder;
import com.google.gson.Gson;
import com.google.gson.reflect.TypeToken;
import java.lang.reflect.Type;
import java.util.HashMap;
import com.thundashop.core.common.JsonObject2;
import com.thundashop.core.usermanager.data.Address;
import java.util.List;
import com.thundashop.core.cartmanager.data.Cart;

public class APICartManager {

      public Transporter transport;

      public APICartManager(Transporter transport){
           this.transport = transport;
      }

     /**
     * Add a new product to the cart.
     * @param productId The product id generated by the productmanager.
     * @param int Number instances of the product ordered.
     * @return Cart
     * @throws ErrorException 
     */

     public Cart addProduct(String productId, int count, List<String> variations)  throws Exception  {
          JsonObject2 data = new JsonObject2();
          data.args = new HashMap();
          data.args.put("productId",new Gson().toJson(productId));
          data.args.put("count",new Gson().toJson(count));
          data.args.put("variations",new Gson().toJson(variations));
          data.method = "addProduct";
          data.interfaceName = "core.cartmanager.ICartManager";
          String result = transport.send(data);
          Gson gson = new GsonBuilder().serializeNulls().create();
          Type typeJson_3323322222_autogenerated = new TypeToken<Cart>() {}.getType();
          Cart object = gson.fromJson(result, typeJson_3323322222_autogenerated);
          return object;
     }

     /**
     * Send in a cart and you shall have the total price for all products.
     */

     public Double calculateTotalCost(Cart cart)  throws Exception  {
          JsonObject2 data = new JsonObject2();
          data.args = new HashMap();
          data.args.put("cart",new Gson().toJson(cart));
          data.method = "calculateTotalCost";
          data.interfaceName = "core.cartmanager.ICartManager";
          String result = transport.send(data);
          Gson gson = new GsonBuilder().serializeNulls().create();
          Type typeJson_3323322222_autogenerated = new TypeToken<Double>() {}.getType();
          Double object = gson.fromJson(result, typeJson_3323322222_autogenerated);
          return object;
     }

     /**
     * Clear the current shopping cart.
     */

     public void clear()  throws Exception  {
          JsonObject2 data = new JsonObject2();
          data.args = new HashMap();
          data.method = "clear";
          data.interfaceName = "core.cartmanager.ICartManager";
          String result = transport.send(data);
     }

     /**
     * Fetch the current cart.
     * @return Cart
     * @throws ErrorException 
     */

     public Cart getCart()  throws Exception  {
          JsonObject2 data = new JsonObject2();
          data.args = new HashMap();
          data.method = "getCart";
          data.interfaceName = "core.cartmanager.ICartManager";
          String result = transport.send(data);
          Gson gson = new GsonBuilder().serializeNulls().create();
          Type typeJson_3323322222_autogenerated = new TypeToken<Cart>() {}.getType();
          Cart object = gson.fromJson(result, typeJson_3323322222_autogenerated);
          return object;
     }

     /**
     * Returns the current total amount
     * note, this does not include shipping.
     * 
     * @return Double
     * @throws ErrorException 
     */

     public Double getCartTotalAmount()  throws Exception  {
          JsonObject2 data = new JsonObject2();
          data.args = new HashMap();
          data.method = "getCartTotalAmount";
          data.interfaceName = "core.cartmanager.ICartManager";
          String result = transport.send(data);
          Gson gson = new GsonBuilder().serializeNulls().create();
          Type typeJson_3323322222_autogenerated = new TypeToken<Double>() {}.getType();
          Double object = gson.fromJson(result, typeJson_3323322222_autogenerated);
          return object;
     }

     /**
     * Returns the shipping cost
     * @return Double
     */

     public Double getShippingCost()  throws Exception  {
          JsonObject2 data = new JsonObject2();
          data.args = new HashMap();
          data.method = "getShippingCost";
          data.interfaceName = "core.cartmanager.ICartManager";
          String result = transport.send(data);
          Gson gson = new GsonBuilder().serializeNulls().create();
          Type typeJson_3323322222_autogenerated = new TypeToken<Double>() {}.getType();
          Double object = gson.fromJson(result, typeJson_3323322222_autogenerated);
          return object;
     }

     /**
     * Remove an added product from the cart.
     * @param productId The product id generated by the productmanager, that has been added to the cart.
     * @return Cart
     * @throws ErrorException 
     */

     public Cart removeProduct(String cartItemId)  throws Exception  {
          JsonObject2 data = new JsonObject2();
          data.args = new HashMap();
          data.args.put("cartItemId",new Gson().toJson(cartItemId));
          data.method = "removeProduct";
          data.interfaceName = "core.cartmanager.ICartManager";
          String result = transport.send(data);
          Gson gson = new GsonBuilder().serializeNulls().create();
          Type typeJson_3323322222_autogenerated = new TypeToken<Cart>() {}.getType();
          Cart object = gson.fromJson(result, typeJson_3323322222_autogenerated);
          return object;
     }

     /**
     * Set a new address to the current cart.
     */

     public void setAddress(Address address)  throws Exception  {
          JsonObject2 data = new JsonObject2();
          data.args = new HashMap();
          data.args.put("address",new Gson().toJson(address));
          data.method = "setAddress";
          data.interfaceName = "core.cartmanager.ICartManager";
          String result = transport.send(data);
     }

     /**
     * Sets the shipping cost.
     * Should be in base currency.
     */

     public void setShippingCost(double shippingCost)  throws Exception  {
          JsonObject2 data = new JsonObject2();
          data.args = new HashMap();
          data.args.put("shippingCost",new Gson().toJson(shippingCost));
          data.method = "setShippingCost";
          data.interfaceName = "core.cartmanager.ICartManager";
          String result = transport.send(data);
     }

     /**
     * Change the number of instances added to the product.
     * @param productId The product id generated by the productmanager.
     * @param count The number of instances (has to be a positive integer)
     * @return Cart
     * @throws ErrorException 
     */

     public Cart updateProductCount(String cartItemId, int count)  throws Exception  {
          JsonObject2 data = new JsonObject2();
          data.args = new HashMap();
          data.args.put("cartItemId",new Gson().toJson(cartItemId));
          data.args.put("count",new Gson().toJson(count));
          data.method = "updateProductCount";
          data.interfaceName = "core.cartmanager.ICartManager";
          String result = transport.send(data);
          Gson gson = new GsonBuilder().serializeNulls().create();
          Type typeJson_3323322222_autogenerated = new TypeToken<Cart>() {}.getType();
          Cart object = gson.fromJson(result, typeJson_3323322222_autogenerated);
          return object;
     }

}
