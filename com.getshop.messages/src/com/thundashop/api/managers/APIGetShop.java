package com.thundashop.api.managers;

import com.google.gson.GsonBuilder;
import com.google.gson.Gson;
import com.google.gson.reflect.TypeToken;
import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.LinkedHashMap;
import com.thundashop.core.common.JsonObject2;
import com.thundashop.core.getshop.data.GetshopStore;
import java.util.List;
import com.thundashop.core.getshop.data.PartnerData;

public class APIGetShop {

      public Transporter transport;

      public APIGetShop(Transporter transport){
           this.transport = transport;
      }

     /**
     * 
     * @param userId
     * @param partner
     * @param password
     * @throws ErrorException 
     */

     public void addUserToPartner(String userId, String partner, String password)  throws Exception  {
          JsonObject2 data = new JsonObject2();
          data.args = new LinkedHashMap();
          data.args.put("userId",new Gson().toJson(userId));
          data.args.put("partner",new Gson().toJson(partner));
          data.args.put("password",new Gson().toJson(password));
          data.method = "addUserToPartner";
          data.interfaceName = "core.getshop.IGetShop";
          String result = transport.send(data);
     }

     /**
     * Find the store address for a given application.
     * @param uuid The appid.
     * @return String
     * @throws ErrorException 
     */

     public String findAddressForApplication(String uuid)  throws Exception  {
          JsonObject2 data = new JsonObject2();
          data.args = new LinkedHashMap();
          data.args.put("uuid",new Gson().toJson(uuid));
          data.method = "findAddressForApplication";
          data.interfaceName = "core.getshop.IGetShop";
          String result = transport.send(data);
          Gson gson = new GsonBuilder().serializeNulls().create();
          Type typeJson_3323322222_autogenerated = new TypeToken<String>() {}.getType();
          String object = gson.fromJson(result, typeJson_3323322222_autogenerated);
          return object;
     }

     /**
     * Need to figure out what address is connected to a specific uuid?
     * Remember this is query is quite slow. so cache the result.
     * @param uuid
     * @return String
     * @throws ErrorException 
     */

     public String findAddressForUUID(String uuid)  throws Exception  {
          JsonObject2 data = new JsonObject2();
          data.args = new LinkedHashMap();
          data.args.put("uuid",new Gson().toJson(uuid));
          data.method = "findAddressForUUID";
          data.interfaceName = "core.getshop.IGetShop";
          String result = transport.send(data);
          Gson gson = new GsonBuilder().serializeNulls().create();
          Type typeJson_3323322222_autogenerated = new TypeToken<String>() {}.getType();
          String object = gson.fromJson(result, typeJson_3323322222_autogenerated);
          return object;
     }

     /**
     * Get partner data for this user.
     * @return PartnerData
     * @throws ErrorException 
     */

     public PartnerData getPartnerData(String partnerId, String password)  throws Exception  {
          JsonObject2 data = new JsonObject2();
          data.args = new LinkedHashMap();
          data.args.put("partnerId",new Gson().toJson(partnerId));
          data.args.put("password",new Gson().toJson(password));
          data.method = "getPartnerData";
          data.interfaceName = "core.getshop.IGetShop";
          String result = transport.send(data);
          Gson gson = new GsonBuilder().serializeNulls().create();
          Type typeJson_3323322222_autogenerated = new TypeToken<PartnerData>() {}.getType();
          PartnerData object = gson.fromJson(result, typeJson_3323322222_autogenerated);
          return object;
     }

     /**
     * 
     * @param code
     * @return List<GetshopStore>
     */

     public List<GetshopStore> getStores(String code)  throws Exception  {
          JsonObject2 data = new JsonObject2();
          data.args = new LinkedHashMap();
          data.args.put("code",new Gson().toJson(code));
          data.method = "getStores";
          data.interfaceName = "core.getshop.IGetShop";
          String result = transport.send(data);
          Gson gson = new GsonBuilder().serializeNulls().create();
          Type typeJson_3323322222_autogenerated = new TypeToken<List<GetshopStore>>() {}.getType();
          List<GetshopStore> object = gson.fromJson(result, typeJson_3323322222_autogenerated);
          return object;
     }

     /**
     * 
     * @param ids
     * @throws ErrorException 
     */

     public void setApplicationList(List<String> ids, String partnerId, String password)  throws Exception  {
          JsonObject2 data = new JsonObject2();
          data.args = new LinkedHashMap();
          data.args.put("ids",new Gson().toJson(ids));
          data.args.put("partnerId",new Gson().toJson(partnerId));
          data.args.put("password",new Gson().toJson(password));
          data.method = "setApplicationList";
          data.interfaceName = "core.getshop.IGetShop";
          String result = transport.send(data);
     }

}
