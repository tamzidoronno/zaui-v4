//
// This file is to be applied to every subproject.
//

apply plugin: 'java'
apply plugin: 'maven'

String mavenGroupId = 'com.getshop'
String mavenVersion = '4.1.0'

sourceCompatibility = '1.8'
[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'

repositories {
    mavenCentral();
    // You may define additional repositories, or even remove "mavenCentral()".
    // Read more about repositories here:
    //   http://www.gradle.org/docs/current/userguide/dependency_management.html#sec:repositories
}

dependencies {
    // Adding dependencies here will add the dependencies to each subproject.
    testImplementation 'junit:junit:4.10'

    // spring
    implementation 'org.springframework:spring-core:4.2.1.RELEASE'
    implementation 'org.springframework:spring-context:4.2.1.RELEASE'
    implementation 'org.springframework:spring-beans:4.2.1.RELEASE'
    implementation 'org.springframework:spring-aop:4.2.1.RELEASE'
    implementation 'org.springframework:spring-web:4.2.9.RELEASE'
    implementation 'org.springframework:spring-expression:4.2.1.RELEASE'
    implementation 'org.springframework.hateoas:spring-hateoas:0.24.0.RELEASE'
    compileOnly group: 'org.projectlombok', name: 'lombok', version: '1.18.24'
    annotationProcessor 'org.projectlombok:lombok:1.18.24'

    testImplementation 'org.springframework:spring-test:4.2.1.RELEASE'

//    // mongo
//    implementation 'org.mongodb:mongo-java-driver:2.13.2'
//    implementation 'org.mongodb.morphia:morphia:1.0.1'

    // apache commons
    implementation 'commons-codec:commons-codec:1.10'
    implementation 'org.apache.commons:commons-collections4:4.1'
    implementation 'commons-discovery:commons-discovery:0.5'
    implementation 'commons-httpclient:commons-httpclient:2.0.2'
    implementation 'org.apache.commons:commons-lang3:3.4'
    implementation 'commons-net:commons-net:2.0'

    // google
    implementation 'com.google.api-client:google-api-client:1.25.0'
    implementation 'com.google.api-client:google-api-client-android:1.25.0'
    implementation 'com.google.api-client:google-api-client-appengine:1.25.0'
    implementation 'com.google.api-client:google-api-client-gson:1.25.0'
    implementation 'com.google.api-client:google-api-client-java6:1.25.0'
    implementation 'com.google.api-client:google-api-client-servlet:1.25.0'
    implementation 'com.google.apis:google-api-services-gmail:v1-rev98-1.25.0'
    implementation 'com.google.apis:google-api-services-youtube:v3-rev117-1.19.0'
    implementation 'com.google.oauth-client:google-oauth-client:1.25.0'
    implementation 'com.google.oauth-client:google-oauth-client-appengine:1.25.0'
    implementation 'com.google.oauth-client:google-oauth-client-jetty:1.25.0'
    implementation 'com.google.code.gson:gson:2.5'
    implementation 'com.google.guava:guava:18.0'

    implementation 'com.warrenstrange:googleauth:1.1.5'
    
    implementation group: 'org.apache.oltu.oauth2', name: 'org.apache.oltu.oauth2.client', version: '1.0.0'
    implementation group: 'com.squareup.okhttp3', name: 'okhttp', version: '4.9.3'
}

String mavenArtifactId = name

group = mavenGroupId
version = mavenVersion

task sourcesJar(type: Jar, dependsOn: classes, description: 'Creates a jar from the source files.') {
    classifier = 'sources'
    from sourceSets.main.allSource
}

artifacts {
    archives jar
    archives sourcesJar
}

configure(install.repositories.mavenInstaller) {
    pom.project {
        groupId = mavenGroupId
        artifactId = mavenArtifactId
        version = mavenVersion
    }
}

task createFolders(description: 'Creates the source folders if they do not exist.') doLast {
    sourceSets*.allSource*.srcDirs*.each { File srcDir ->
        if (!srcDir.isDirectory()) {
            println "Creating source folder: ${srcDir}"
            srcDir.mkdirs()
        }
    }
}
