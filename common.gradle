//
// This file is to be applied to every subproject.
//

apply plugin: 'java'
apply plugin: 'maven'

String mavenGroupId = 'com.getshop'
String mavenVersion = '4.1.0'

sourceCompatibility = '1.8'
[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'

repositories {
    mavenCentral();
    // You may define additional repositories, or even remove "mavenCentral()".
    // Read more about repositories here:
    //   http://www.gradle.org/docs/current/userguide/dependency_management.html#sec:repositories
}

dependencies {
    // Adding dependencies here will add the dependencies to each subproject.
    testImplementation group: 'junit', name: 'junit', version: '4.10'

    // spring
    implementation group: 'org.springframework', name: 'spring-core', version: '4.2.1.RELEASE'
    implementation group: 'org.springframework', name: 'spring-context', version: '4.2.1.RELEASE'
    implementation group: 'org.springframework', name: 'spring-beans', version: '4.2.1.RELEASE'
    implementation group: 'org.springframework', name: 'spring-aop', version: '4.2.1.RELEASE'
    implementation group: 'org.springframework', name: 'spring-web', version: '4.2.9.RELEASE'
    implementation group: 'org.springframework', name: 'spring-expression', version: '4.2.1.RELEASE'
    implementation group: 'org.springframework.hateoas', name: 'spring-hateoas', version: '0.24.0.RELEASE'

    testImplementation group: 'org.springframework', name: 'spring-test', version: '4.2.1.RELEASE'

    // mongo
    implementation group: 'org.mongodb', name: 'mongo-java-driver', version: '2.13.2'
    implementation group: 'org.mongodb.morphia', name: 'morphia', version: '1.0.1'

    // apache commons
    implementation group: 'commons-codec', name: 'commons-codec', version: '1.10'
    implementation group: 'org.apache.commons', name: 'commons-collections4', version: '4.1'
    implementation group: 'commons-discovery', name: 'commons-discovery', version: '0.5'
    implementation group: 'commons-httpclient', name: 'commons-httpclient', version: '2.0.2'
    implementation group: 'org.apache.commons', name: 'commons-lang3', version: '3.4'
    implementation group: 'commons-net', name: 'commons-net', version: '2.0'

    // google
    implementation group: 'com.google.api-client', name: 'google-api-client', version: '1.25.0'
    implementation group: 'com.google.api-client', name: 'google-api-client-android', version: '1.25.0'
    implementation group: 'com.google.api-client', name: 'google-api-client-appengine', version: '1.25.0'
    implementation group: 'com.google.api-client', name: 'google-api-client-gson', version: '1.25.0'
    implementation group: 'com.google.api-client', name: 'google-api-client-java6', version: '1.25.0'
    implementation group: 'com.google.api-client', name: 'google-api-client-servlet', version: '1.25.0'
    implementation group: 'com.google.apis', name: 'google-api-services-gmail', version: 'v1-rev98-1.25.0'
    implementation group: 'com.google.apis', name: 'google-api-services-youtube', version: 'v3-rev117-1.19.0'
    implementation group: 'com.google.oauth-client', name: 'google-oauth-client', version: '1.25.0'
    implementation group: 'com.google.oauth-client', name: 'google-oauth-client-appengine', version: '1.25.0'
    implementation group: 'com.google.oauth-client', name: 'google-oauth-client-jetty', version: '1.25.0'
    implementation group: 'com.google.code.gson', name: 'gson', version: '2.5'
    implementation group: 'com.google.guava', name: 'guava', version: '18.0'

    implementation group: 'com.warrenstrange', name: 'googleauth', version: '1.1.5'

}

String mavenArtifactId = name

group = mavenGroupId
version = mavenVersion

task sourcesJar(type: Jar, dependsOn: classes, description: 'Creates a jar from the source files.') {
    classifier = 'sources'
    from sourceSets.main.allSource
}

artifacts {
    archives jar
    archives sourcesJar
}

configure(install.repositories.mavenInstaller) {
    pom.project {
        groupId = mavenGroupId
        artifactId = mavenArtifactId
        version = mavenVersion
    }
}

task createFolders(description: 'Creates the source folders if they do not exist.') doLast {
    sourceSets*.allSource*.srcDirs*.each { File srcDir ->
        if (!srcDir.isDirectory()) {
            println "Creating source folder: ${srcDir}"
            srcDir.mkdirs()
        }
    }
}
