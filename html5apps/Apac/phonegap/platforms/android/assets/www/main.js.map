{"version":3,"sources":["adata.js","app.js","getshopapi.js","messagePersister.js","routes.js","components/destination/AddPickupTaskController.js","components/destination/DepartingController.js","components/destination/DestinationController.js","components/destination/DestinationExceptionController.js","components/general/BaseController.js","components/home/HomeController.js","components/login/LoginController.js","components/pool/PoolController.js","components/pool/PoolControllerFooter.js","components/routeoverview/RouteCompleteController.js","components/routeoverview/RouteOverviewController.js","components/services/apiservice.js","components/task/KeyReferenceController.js","components/task/TaskController.js","components/task/TaskCorrectionController.js","components/task/TaskFooterController.js"],"names":[],"mappingsndjzHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACrplBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACnplatHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"main.js","sourcesContent":["/* \n * To change this license header, choose License Headers in Project Properties.\n * To change this template file, choose Tools | Templates\n * and open the template in the editor.\n */\n\n\nadata = {\n    routes: [],\n    exceptions: [],\n    loaded: false,\n    driverMessages: [],\n    currentVersion: \"\",\n    \n    allLoaded: function($scope, completedFunction, $state) {\n        if (this.routeLoadCompleted && this.exceptionLoadCompleted && this.messagesLoaded) {\n            if (typeof(completedFunction) === \"function\") {\n                completedFunction();\n            }\n            \n            if ($state) {\n                $state.go($state.current, {}, {reload: true});\n                return;\n            }\n            \n            if ($scope) {\n                setTimeout($scope.$apply(), 1);\n            }\n            \n            localStorage.setItem(\"currentVersion\", \"1.0.15\");\n        }\n    },\n    \n    loadAllData: function ($api, $scope, completedFunction, $state) {\n        var me = this;\n        \n        me.routes = [];\n        me.exceptions = [];\n        me.routeLoadCompleted = false;\n        me.exceptionLoadCompleted = false;\n        me.messagesLoaded = false;\n                \n        $api.getApi().TrackAndTraceManager.getMyRoutes().done(function (res) {\n            me.routes = res;\n            me.loaded = true;\n            me.save();\n            \n            me.routeLoadCompleted = true;\n            me.allLoaded($scope, completedFunction, $state);\n        });\n        \n        $api.getApi().TrackAndTraceManager.getExceptions().done(function (res) {\n            me.exceptions = res;\n            me.save();\n            me.exceptionLoadCompleted = true;\n            me.allLoaded($scope, completedFunction, $state);\n        });\n        \n        if ($api.getLoggedOnUser()) {\n            $api.getApi().TrackAndTraceManager.getDriverMessages($api.getLoggedOnUser().id).done(function (res) {\n                me.driverMessages = res;\n                me.save();\n                me.messagesLoaded = true;\n                me.allLoaded($scope, completedFunction, $state);\n            });\n        } else {\n            me.messagesLoaded = true;\n            me.allLoaded($scope, completedFunction);\n        }\n    },\n    \n    updateDestination: function(destination, $api) {\n        for (var i in this.routes) {\n            var route = this.routes[i];\n            for (var j in route.destinations) {\n                if (route.destinations[j].id === destination.id) {\n                    route.destinations[j] = destination;\n                    console.log(\"replaced\");\n                }\n            }\n        }\n        this.save();\n    },\n    \n    removeRoute: function(routeId) {\n        var newRoutes = [];\n        for (var i in this.routes) {\n            var route = this.routes[i];\n            if (route.id !== routeId) {\n                newRoutes.push(route);\n            }\n        }\n        this.routes = newRoutes;\n        this.save();\n    },\n    \n    updateTask: function(destination, task, $api) {\n        for (var i in this.routes) {\n            var route = this.routes[i];\n            for (var j in route.destinations) {\n                if (route.destinations[j].id === destination.id) {\n                    var found = false;\n                    var kdest = route.destinations[j];\n                    for (var k in kdest.tasks) {\n                        var inTask = kdest.tasks[k];\n                        if (inTask.id === task.id) {\n                            kdest.tasks[k] = task;\n                            found = true;\n                        }\n                    }\n                    \n                    if (!found) {\n                        if (!route.destinations[j].tasks)\n                            route.destinations[j].tasks = [];\n                        \n                        route.destinations[j].tasks.push(task);\n                        route.destinations[j].taskIds.push(task.id);\n                    }\n                    \n                }\n            }\n        }\n        this.save();\n    },\n    \n    updateRoute: function(route, $api) {\n        if (!route)\n            return;\n        \n        var toAdd = []; \n        var found = false;\n        \n        for (var i in this.routes) {\n            var iRoute = this.routes[i];\n            if (iRoute.id === route.id) {\n                found = true;\n                toAdd.push(route);\n            } else {\n                toAdd.push(iRoute);\n            }\n        }\n        \n        if (!found && $api) {\n            toAdd.push(route);\n        }\n        \n        \n        this.routes = toAdd;\n        this.save();\n        \n        return found;\n    },\n    \n    getRouteById: function (routeId) {\n        $routeToUse = null;\n        $(this.routes).each(function () {\n            if (this.id === routeId) {\n                $routeToUse = this;\n            }\n        });\n\n        return $routeToUse;\n    },\n    \n    getDestinationById: function (destinationId) {\n        $destToUse = null;\n        $(this.routes).each(function () {\n            $(this.destinations).each(function () {\n                if (this.id === destinationId)\n                    $destToUse = this;\n            })\n        });\n        return $destToUse;\n    },\n    \n    getTaskById: function(taskId) {\n        $taskToUse = null;\n        $(this.routes).each(function () {\n            $(this.destinations).each(function () {\n                $(this.tasks).each(function () {\n                    if (this.id === taskId)\n                        $taskToUse = this;\n                });\n            });\n        });\n        return $taskToUse;\n    },\n    \n    getDestionationsExceptions: function() {\n        var retArr = [];\n        for (var i in this.exceptions) {\n            var exception = this.exceptions[i];\n            if (exception.type === \"destionation\") {\n                retArr.push(exception);\n            }\n        }\n        \n        return retArr;\n    },\n    \n    save: function() {\n        if (db) {\n            me = this;\n            db.transaction(function(tx) {\n                var insertingData = JSON.stringify(me.routes);\n                \n                tx.executeSql('CREATE TABLE IF NOT EXISTS DataTable (name, score)');\n                tx.executeSql('delete from DataTable', []);\n                tx.executeSql('INSERT INTO DataTable VALUES (?,?)', ['aDataRoutes', insertingData]);\n                tx.executeSql('INSERT INTO DataTable VALUES (?,?)', ['aDataExceptions', JSON.stringify(me.exceptions)]);\n                tx.executeSql('INSERT INTO DataTable VALUES (?,?)', ['aDriverMessages', JSON.stringify(me.driverMessages)]);\n            }, function(error) {\n                alert('Failed to store data, msg: ' + error.message);\n            }, function() {\n            });\n\n            \n        } else {\n            localStorage.setItem(\"aDataRoutes\", JSON.stringify(this.routes));\n            localStorage.setItem(\"aDataExceptions\", JSON.stringify(this.exceptions));\n            localStorage.setItem(\"aDriverMessages\", JSON.stringify(this.driverMessages));    \n        }\n        \n    },\n    \n    cleanupFaultyRoutes: function() {\n        for (var i in this.routes) {\n            if (i === \"errorCode\") {\n                this.routes = [];\n                break;\n            }\n        }\n        \n        for (var i in this.exceptions) {\n            if (i === \"errorCode\") {\n                this.exceptions = [];\n                break;\n            }\n        }\n        \n        for (var i in this.driverMessages) {\n            if (i === \"errorCode\") {\n                this.driverMessages = [];\n                break;\n            }\n        }\n    },\n    \n    loadFromLocalStorage: function($state) {\n        if (localStorage.getItem(\"currentVersion\") !== \"1.0.15\") {\n            return;\n        }\n        \n        var me = this;\n        \n        if (db) {\n            db.transaction(function(tx) {\n                tx.executeSql('CREATE TABLE IF NOT EXISTS DataTable (name, score)');\n                \n                tx.executeSql('SELECT score as value FROM DataTable WHERE name = ?', ['aDataRoutes'], function(tx, rs) {\n                    if (rs.rows && rs.rows.item) {\n                        me.routes = JSON.parse(rs.rows.item(0).value);\n                        \n                        $state.go($state.current, {}, {reload: true});\n                    }\n                }, function(tx, error) {\n                    alert(\"error: \" + error.message);\n                    this.routes = [];\n                });\n                \n                tx.executeSql('SELECT score AS value FROM DataTable where name like \"aDataExceptions\" ', [], function(tx, rs) {\n                    if (rs.rows && rs.rows.item) {\n                        me.exceptions = JSON.parse(rs.rows.item(0).value);\n                        $state.go($state.current, {}, {reload: true});\n                    }\n                }, function(tx, error) {\n                    this.exceptions = [];\n                });\n                \n                tx.executeSql('SELECT score AS value FROM DataTable where name like \"aDriverMessages\" ', [], function(tx, rs) {\n                    if (rs.rows && rs.rows.item) {\n                        me.driverMessages = JSON.parse(rs.rows.item(0).value);\n                        $state.go($state.current, {}, {reload: true});\n                    }\n                }, function(tx, error) {\n                    this.driverMessages = [];\n                });\n            });\n            \n        } else {\n            if (localStorage.getItem(\"aDataRoutes\")) {\n                this.routes = JSON.parse(localStorage.getItem(\"aDataRoutes\"));\n            }\n\n            if (localStorage.getItem(\"aDataExceptions\")) {\n                this.exceptions = JSON.parse(localStorage.getItem(\"aDataExceptions\"));\n            }\n\n            if (localStorage.getItem(\"aDriverMessages\")) {\n                this.driverMessages = JSON.parse(localStorage.getItem(\"aDriverMessages\"));\n            }\n        }\n        \n        this.cleanupFaultyRoutes();\n    }\n};\n    \nadata.loadFromLocalStorage();","angular.module('TrackAndTrace', [\n    'ui.router', 'bc.AngularKeypad'\n]);\n\n\n// Make sure to reconnect on startup\nangular.module('TrackAndTrace').run(['$api', function ($api) {\n    $api.reconnect();\n}]);\n\nangular.module('TrackAndTrace').factory('datarepository', function($api) {\n    return adata;\n    \n});\n\nangular.module('TrackAndTrace').factory('$exceptionHandler', \n\n    function() {\n      return function(exception, cause) {\n            exception.message += ' (caused by \"' + cause + '\")';\n            alert(\"Unexpected error: \\n\" + exception.message + \"\\n\" + exception.stack);\n            throw exception;\n      };\n    });\n\nangular.module('TrackAndTrace')\n .run( function($rootScope, $location) {\n    $rootScope.$on(\"$locationChangeSuccess\",function(event, next, current){\n        window.scroll(0,0);\n    });\n    \n    if ( localStorage.getItem(\"username\") == null || localStorage.getItem(\"password\") === \"\") {\n        $location.path( \"/login\" );\n    } else if ($location.$$path === \"\") {\n        $location.path( \"/home\" );\n    }\n })\n\n\nvar app = document.URL.indexOf( 'http://' ) === -1 && document.URL.indexOf( 'https://' ) === -1;\nif (app) {\n    angular.module('TrackAndTrace').directive(\"ngMobileClick\", [function () {\n        return function (scope, elem, attrs) {\n            elem.bind(\"touchstart\", function (e) {\n                e.preventDefault();\n                e.stopPropagation();\n\n                scope.$evalAsync(attrs[\"ngMobileClick\"]);\n            });\n        }\n    }])\n    angular.module('TrackAndTrace').directive(\"ngMobileClickEnd\", [function () {\n        return function (scope, elem, attrs) {\n            elem.bind(\"touchend\", function (e) {\n                e.preventDefault();\n                e.stopPropagation();\n\n                scope.$evalAsync(attrs[\"ngMobileClickEnd\"]);\n            });\n        }\n    }])\n} else {\n    angular.module('TrackAndTrace').directive(\"ngMobileClick\", [function () {\n        return function (scope, elem, attrs) {\n            elem.bind(\"click\", function (e) {\n                e.preventDefault();\n                e.stopPropagation();\n\n                scope.$evalAsync(attrs[\"ngMobileClick\"]);\n            });\n        }\n    }])\n    angular.module('TrackAndTrace').directive(\"ngMobileClickEnd\", [function () {\n        return function (scope, elem, attrs) {\n            elem.bind(\"click\", function (e) {\n                e.preventDefault();\n                e.stopPropagation();\n                scope.$evalAsync(attrs[\"ngMobileClickEnd\"]);\n            });\n        }\n    }])\n}\n\nstopShowingOfGpsFetching = function() {\n    $('.fetchingGpsCoordinates').hide();\n}\n\nstartShowingOfGpsFetching = function() {\n    window.scroll(0,0);\n    $('.fetchingGpsCoordinates').show();\n}\n\nvar db = null;\n\nangular.module('TrackAndTrace').run(function($state, $api) {\n    document.addEventListener('deviceready', function() {\n        db = window.sqlitePlugin.openDatabase({name: 'tntdatabase.db', location: 'default'});\n        \n        if (typeof(adata) !== \"undefined\" && adata) {\n            adata.loadFromLocalStorage($state);\n        }\n        \n        if (typeof(messagePersister) !== \"undefined\" && messagePersister) {\n            messagePersister.load($api);\n        }\n        \n    });\n});\n","var GetShopApiWebSocket = function(address, port, identifier, persistMessages) {\n    this.sentMessages =  [];\n    this.messagesToSendJson =  [];\n    this.address = address;\n\n    if (typeof(port) === \"undefined\" || !port) {\n        this.port = \"31330\";\n    } else {\n        this.port = port;\n    }\n    \n    if (typeof(identifier) === \"undefined\" || !identifier) {\n        this.identifier = this.address;\n    } else {\n        this.identifier = identifier;\n    }\n};\n\nGetShopApiWebSocket.prototype = {\n    websocket: null,\n    connectionEstablished: null,\n    transferCompleted: null,\n    transferStarted: null,\n    shouldConnect: true,\n    sessionId: false,\n    unsentMessageLoaded: false,\n    globalErrorHandler: false,\n    messageCountChangedEvent: null,\n    listeners: [],\n    \n    connect: function() {\n        if (!this.shouldConnect)\n            return;\n        \n        this.shouldConnect = false;\n        this.connectedCalled = true;\n        var me = this;\n        if (this.connectionEstablished === null) {\n            this.fireDisconnectedEvent();\n        }\n        var address = \"ws://\"+this.address+\":\"+this.port+\"/\";\n        this.socket = new WebSocket(address);\n        this.socket.onopen = $.proxy(this.connected, this);\n        this.socket.onclose = function() {\n            me.disconnected();\n        };\n        this.socket.onmessage = function(msg) {\n            me.handleMessage(msg);\n        };\n        \n        this.createManagers();\n    },\n\n    setGlobalErrorHandler: function(globalErrorHandler) {\n        this.globalErrorHandler = globalErrorHandler;\n    },\n    \n    guid: function() {\n        function s4() {\n          return Math.floor((1 + Math.random()) * 0x10000)\n            .toString(16)\n            .substring(1);\n        }\n        return s4() + s4() + '-' + s4() + '-' + s4() + '-' +\n          s4() + '-' + s4() + s4() + s4();\n    },\n\n    addListener : function(dataObjectName, callback, scope) {\n        var listenObject = {\n            gs_session_scope: scope,\n            dataObjectName : dataObjectName,\n            callback: callback\n        }\n        \n        this.listeners.push(listenObject);\n    },\n\n    handleMessage: function(msg) {\n        var data = msg.data;\n        var jsonObject = JSON.parse(data);\n        \n        var corrolatingMessage = this.getMessage(jsonObject.messageId);\n        \n        if (typeof(corrolatingMessage) === \"undefined\") {\n            this.handleIncomingMessage(jsonObject);\n            return;\n        }\n\n        if (this.globalErrorHandler && jsonObject && jsonObject.object && jsonObject.object.errorCode) {\n            this.globalErrorHandler(jsonObject.object);\n        } else {\n            corrolatingMessage.resolveWith({ 'messageId': jsonObject.messageId }, [jsonObject.object]);\n        }\n        \n        if (this.sentMessages.length === 0 && this.transferCompleted) {\n            this.transferCompleted();\n        }\n        \n        if (this.sentMessages.length === 0 && this.transferCompletedFirstTimeAfterUnsentMessageSent && this.firstUnsentMessages) {\n            this.transferCompletedFirstTimeAfterUnsentMessageSent();\n            this.firstUnsentMessages = false;\n        }\n        \n        if (typeof('messagePersister') !== \"undefined\" && messagePersister) {\n            messagePersister.markAsSent(corrolatingMessage);\n            this.fireMessageCountChanged();\n        }\n    },\n\n    handleIncomingMessage: function(msg) {\n        if ( typeof msg === \"object\")\n            return;\n        \n        var dataObject = JSON.parse(msg);\n        for (var i in this.listeners) {\n            var listener = this.listeners[i];\n            if (listener.dataObjectName === dataObject.coninicalName) {\n                if (listener.gs_session_scope) {\n                    listener.callback.apply(listener.gs_session_scope, [dataObject.payLoad]);\n                } else {\n                    listener.callback(dataObject.payLoad);\n                }\n            }\n        }\n    },\n\n    reconnect: function() {\n        var me = this;\n        this.shouldConnect = true;\n        exec = function() {\n            me.connect();\n        };\n        setTimeout(exec, 300);\n    },\n            \n    initializeStore: function() {\n        if (this.socket.OPEN)\n            this.socket.send('initstore:'+this.identifier);\n    },\n            \n    connected: function() {\n        this.setSessionId();\n        this.initializeStore();\n        this.fireConnectedEvent();\n        this.connectionEstablished = true;\n    },\n    \n    getUnsentMessageCount: function() {\n        if (typeof('messagePersister') !== \"undefined\" && messagePersister) {\n            return messagePersister.getUnsetMessageCount();\n        }\n        \n        return 0;\n    },\n\n    setSessionId: function() {\n        if (sessionStorage.getItem(\"getshop.sessionId\")) {\n            this.sessionId = sessionStorage.getItem(\"getshop.sessionId\");\n        }\n        \n        if (!this.sessionId) {\n            this.sessionId = this.guid();\n            sessionStorage.setItem(\"getshop.sessionId\", this.sessionId);\n        }\n        \n        if (this.socket.OPEN)\n            this.socket.send('sessionid:'+this.sessionId);\n    },\n          \n    disconnected: function() {\n        this.sentMessages = [];\n        \n        this.fireDisconnectedEvent();\n        this.connectionEstablished = false;\n        this.firstUnsentMessages = false;\n        this.reconnect();\n    },\n\n    setInitConnectionFailed: function(callback) {\n        this.initConnectionFailed = callback;\n    },\n    fireDisconnectedEvent: function() {\n        if (this.connectionEstablished === null || this.connectionEstablished && typeof(this.disconnectedCallback) === \"function\") {\n            if (this.disconnectedCallback) {\n                this.disconnectedCallback();\n            }\n        }\n    },\n            \n    fireConnectedEvent: function() {\n        if (this.connectionEstablished === null || !this.connectionEstablished && typeof(this.connectedCallback) === \"function\") {\n            if (this.connectedCallback) {\n                this.connectedCallback();\n            }\n        }\n    },\n    \n    fireMessageCountChanged: function() {\n        if (this.messageCountChangedEvent) {\n            this.messageCountChangedEvent();\n        }\n    },\n    \n    setMessageCountChangedEvent: function(func) {\n        this.messageCountChangedEvent = func;\n    },\n            \n    setDisconnectedEvent: function(callback) {\n        this.disconnectedCallback = callback;\n    },\n            \n    setConnectedEvent: function(callback) {\n        this.connectedCallback = callback;\n    },\n        \n    send: function(message, silent) {\n        var deferred = $.Deferred();\n        message.messageId = this.makeid();\n        \n        if (typeof('messagePersister') !== \"undefined\" && messagePersister) {\n            messagePersister.persist(message);\n            this.fireMessageCountChanged();\n        }\n        \n        deferred.messageId = message.messageId;\n        var messageJson = JSON.stringify(message);\n        \n        if (this.sentMessages.length === 0 && this.transferStarted && silent !== true) {\n            this.transferStarted();\n        }\n        \n        this.sentMessages.push(deferred);\n        \n        var loginMessage = this.getLoginMessage();\n        \n        var sendFunc = function(messageJson, me) {\n            if (me.socket.readyState !== 1) {\n                setTimeout(function() {\n                    sendFunc(messageJson, me);\n                }, 50);\n            } else {\n                if (loginMessage) {\n                    me.socket.send(loginMessage);\n                }\n                me.socket.send(messageJson);\n                var messageObject = JSON.parse(messageJson);\n            }\n        }\n        \n        sendFunc(messageJson, this);\n        \n        this.sendUnsentMessages();\n        \n        return deferred;\n    },\n    \n    getLoginMessage: function() {\n        if (localStorage.getItem(\"username\") && localStorage.getItem(\"password\")) {\n            var data = {\n                args : {\n                    username : JSON.stringify(localStorage.getItem(\"username\")),\n                    password : JSON.stringify(localStorage.getItem(\"password\")),\n                },\n                method: 'logOn',\n                interfaceName: 'core.usermanager.IUserManager',\n            };\n            \n            data.messageId = this.makeid();\n            return JSON.stringify(data);\n        }\n        \n        return false;\n    },\n    \n    sendUnsentMessages: function() {\n        var sendFunc = function(messageJson, me) {\n            if (me.socket.readyState !== 1) {\n                setTimeout(function() {\n                    sendFunc(messageJson, me);\n                }, 50);\n            } else {\n                me.socket.send(messageJson);\n            }\n        }\n        \n        if (typeof('messagePersister') !== \"undefined\" && messagePersister) {\n            var allUnsetMessages = messagePersister.getAllUnsentMessages();\n            \n            for (var k in allUnsetMessages) {\n                var unsentMessage = allUnsetMessages[k];\n                \n                if (!this.inUnsentMessages(unsentMessage.messageId)) {\n                    var messageJson2 = JSON.stringify(unsentMessage);\n                    var deferred2 = $.Deferred();\n                    deferred2.messageId = unsentMessage.messageId;\n                    this.sentMessages.push(deferred2);\n                    sendFunc(messageJson2, this);\n                }\n            }\n        }\n    },\n    \n    inUnsentMessages: function(msgId) {\n        for (var i in this.sentMessages) {\n            if (this.sentMessages[i].messageId === msgId) {\n                return true;\n            }\n        }\n        \n        return false;\n    },\n\n    getMessage: function(id) {\n        for (var i=0;i<this.messagesToSendJson.length; i++) {\n            if (this.messagesToSendJson[i].messageId === id) {\n                this.messagesToSendJson.splice(i, 1);\n            }\n        }\n        \n        if (this.persistMessages) {\n            localStorage.setItem(\"gs_api_messagetopush\", JSON.stringify(this.messagesToSendJson));\n            this.fireMessageCountChanged();\n        }\n        \n        for (var i=0;i<this.sentMessages.length; i++) {\n            if (this.sentMessages[i].messageId === id) {\n                var message = this.sentMessages[i];\n                this.sentMessages.splice(i, 1);\n                return message;\n            }\n        }\n    },\n            \n    makeid :  function () {\n        var text = \"\";\n        var possible = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";\n\n        for( var i=0; i < 35; i++ )\n            text += possible.charAt(Math.floor(Math.random() * possible.length));\n\n        return text;\n    }\n}\n\n\nGetShopApiWebSocket.BannerManager = function(communication) {\n    this.communication = communication;\n}\n\nGetShopApiWebSocket.BannerManager.prototype = {\n    'addImage' : function(id,fileId, gs_silent) {\n        var data = {\n            args : {\n                id : JSON.stringify(id),\n                fileId : JSON.stringify(fileId),\n            },\n            method: 'addImage',\n            interfaceName: 'app.banner.IBannerManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'addSlide' : function(gs_silent) {\n        var data = {\n            args : {\n            },\n            method: 'addSlide',\n            interfaceName: 'app.banner.IBannerManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'createSet' : function(width,height,id, gs_silent) {\n        var data = {\n            args : {\n                width : JSON.stringify(width),\n                height : JSON.stringify(height),\n                id : JSON.stringify(id),\n            },\n            method: 'createSet',\n            interfaceName: 'app.banner.IBannerManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'deleteSet' : function(id, gs_silent) {\n        var data = {\n            args : {\n                id : JSON.stringify(id),\n            },\n            method: 'deleteSet',\n            interfaceName: 'app.banner.IBannerManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'deleteSlide' : function(slideId, gs_silent) {\n        var data = {\n            args : {\n                slideId : JSON.stringify(slideId),\n            },\n            method: 'deleteSlide',\n            interfaceName: 'app.banner.IBannerManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getSet' : function(id, gs_silent) {\n        var data = {\n            args : {\n                id : JSON.stringify(id),\n            },\n            method: 'getSet',\n            interfaceName: 'app.banner.IBannerManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getSlideById' : function(slideId, gs_silent) {\n        var data = {\n            args : {\n                slideId : JSON.stringify(slideId),\n            },\n            method: 'getSlideById',\n            interfaceName: 'app.banner.IBannerManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'linkProductToImage' : function(bannerSetId,imageId,productId, gs_silent) {\n        var data = {\n            args : {\n                bannerSetId : JSON.stringify(bannerSetId),\n                imageId : JSON.stringify(imageId),\n                productId : JSON.stringify(productId),\n            },\n            method: 'linkProductToImage',\n            interfaceName: 'app.banner.IBannerManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'removeImage' : function(bannerSetId,fileId, gs_silent) {\n        var data = {\n            args : {\n                bannerSetId : JSON.stringify(bannerSetId),\n                fileId : JSON.stringify(fileId),\n            },\n            method: 'removeImage',\n            interfaceName: 'app.banner.IBannerManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'saveSet' : function(set, gs_silent) {\n        var data = {\n            args : {\n                set : JSON.stringify(set),\n            },\n            method: 'saveSet',\n            interfaceName: 'app.banner.IBannerManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'setImageForSlide' : function(slideId,fileId, gs_silent) {\n        var data = {\n            args : {\n                slideId : JSON.stringify(slideId),\n                fileId : JSON.stringify(fileId),\n            },\n            method: 'setImageForSlide',\n            interfaceName: 'app.banner.IBannerManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n}\nGetShopApiWebSocket.ContentManager = function(communication) {\n    this.communication = communication;\n}\n\nGetShopApiWebSocket.ContentManager.prototype = {\n    'createContent' : function(content, gs_silent) {\n        var data = {\n            args : {\n                content : JSON.stringify(content),\n            },\n            method: 'createContent',\n            interfaceName: 'app.content.IContentManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'deleteContent' : function(id, gs_silent) {\n        var data = {\n            args : {\n                id : JSON.stringify(id),\n            },\n            method: 'deleteContent',\n            interfaceName: 'app.content.IContentManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getAllContent' : function(gs_silent) {\n        var data = {\n            args : {\n            },\n            method: 'getAllContent',\n            interfaceName: 'app.content.IContentManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getContent' : function(id, gs_silent) {\n        var data = {\n            args : {\n                id : JSON.stringify(id),\n            },\n            method: 'getContent',\n            interfaceName: 'app.content.IContentManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'saveContent' : function(id,content, gs_silent) {\n        var data = {\n            args : {\n                id : JSON.stringify(id),\n                content : JSON.stringify(content),\n            },\n            method: 'saveContent',\n            interfaceName: 'app.content.IContentManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n}\nGetShopApiWebSocket.FooterManager = function(communication) {\n    this.communication = communication;\n}\n\nGetShopApiWebSocket.FooterManager.prototype = {\n    'getConfiguration' : function(gs_silent) {\n        var data = {\n            args : {\n            },\n            method: 'getConfiguration',\n            interfaceName: 'app.footer.IFooterManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'setLayout' : function(numberOfColumns, gs_silent) {\n        var data = {\n            args : {\n                numberOfColumns : JSON.stringify(numberOfColumns),\n            },\n            method: 'setLayout',\n            interfaceName: 'app.footer.IFooterManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'setType' : function(column,type, gs_silent) {\n        var data = {\n            args : {\n                column : JSON.stringify(column),\n                type : JSON.stringify(type),\n            },\n            method: 'setType',\n            interfaceName: 'app.footer.IFooterManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n}\nGetShopApiWebSocket.LogoManager = function(communication) {\n    this.communication = communication;\n}\n\nGetShopApiWebSocket.LogoManager.prototype = {\n    'deleteLogo' : function(gs_silent) {\n        var data = {\n            args : {\n            },\n            method: 'deleteLogo',\n            interfaceName: 'app.logo.ILogoManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getLogo' : function(gs_silent) {\n        var data = {\n            args : {\n            },\n            method: 'getLogo',\n            interfaceName: 'app.logo.ILogoManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'setLogo' : function(fileId, gs_silent) {\n        var data = {\n            args : {\n                fileId : JSON.stringify(fileId),\n            },\n            method: 'setLogo',\n            interfaceName: 'app.logo.ILogoManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n}\nGetShopApiWebSocket.NewsManager = function(communication) {\n    this.communication = communication;\n}\n\nGetShopApiWebSocket.NewsManager.prototype = {\n    'addNews' : function(newsEntry,newsListId, gs_silent) {\n        var data = {\n            args : {\n                newsEntry : JSON.stringify(newsEntry),\n                newsListId : JSON.stringify(newsListId),\n            },\n            method: 'addNews',\n            interfaceName: 'app.news.INewsManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'addSubscriber' : function(email, gs_silent) {\n        var data = {\n            args : {\n                email : JSON.stringify(email),\n            },\n            method: 'addSubscriber',\n            interfaceName: 'app.news.INewsManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'applyUserFilter' : function(newsListId,userId, gs_silent) {\n        var data = {\n            args : {\n                newsListId : JSON.stringify(newsListId),\n                userId : JSON.stringify(userId),\n            },\n            method: 'applyUserFilter',\n            interfaceName: 'app.news.INewsManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'deleteNews' : function(id, gs_silent) {\n        var data = {\n            args : {\n                id : JSON.stringify(id),\n            },\n            method: 'deleteNews',\n            interfaceName: 'app.news.INewsManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getAllNews' : function(newsListId, gs_silent) {\n        var data = {\n            args : {\n                newsListId : JSON.stringify(newsListId),\n            },\n            method: 'getAllNews',\n            interfaceName: 'app.news.INewsManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getAllSubscribers' : function(gs_silent) {\n        var data = {\n            args : {\n            },\n            method: 'getAllSubscribers',\n            interfaceName: 'app.news.INewsManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getNewsForPage' : function(id, gs_silent) {\n        var data = {\n            args : {\n                id : JSON.stringify(id),\n            },\n            method: 'getNewsForPage',\n            interfaceName: 'app.news.INewsManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getNewsUsers' : function(newsListId, gs_silent) {\n        var data = {\n            args : {\n                newsListId : JSON.stringify(newsListId),\n            },\n            method: 'getNewsUsers',\n            interfaceName: 'app.news.INewsManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'isFiltered' : function(newsListId,userId, gs_silent) {\n        var data = {\n            args : {\n                newsListId : JSON.stringify(newsListId),\n                userId : JSON.stringify(userId),\n            },\n            method: 'isFiltered',\n            interfaceName: 'app.news.INewsManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'publishNews' : function(id, gs_silent) {\n        var data = {\n            args : {\n                id : JSON.stringify(id),\n            },\n            method: 'publishNews',\n            interfaceName: 'app.news.INewsManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'removeSubscriber' : function(subscriberId, gs_silent) {\n        var data = {\n            args : {\n                subscriberId : JSON.stringify(subscriberId),\n            },\n            method: 'removeSubscriber',\n            interfaceName: 'app.news.INewsManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n}\nGetShopApiWebSocket.AccountingManager = function(communication) {\n    this.communication = communication;\n}\n\nGetShopApiWebSocket.AccountingManager.prototype = {\n    'createCombinedOrderFile' : function(newUsersOnly, gs_silent) {\n        var data = {\n            args : {\n                newUsersOnly : JSON.stringify(newUsersOnly),\n            },\n            method: 'createCombinedOrderFile',\n            interfaceName: 'core.accountingmanager.IAccountingManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'createCreditorFile' : function(newOnly, gs_silent) {\n        var data = {\n            args : {\n                newOnly : JSON.stringify(newOnly),\n            },\n            method: 'createCreditorFile',\n            interfaceName: 'core.accountingmanager.IAccountingManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'createOrderFile' : function(gs_silent) {\n        var data = {\n            args : {\n            },\n            method: 'createOrderFile',\n            interfaceName: 'core.accountingmanager.IAccountingManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'createUserFile' : function(newOnly, gs_silent) {\n        var data = {\n            args : {\n                newOnly : JSON.stringify(newOnly),\n            },\n            method: 'createUserFile',\n            interfaceName: 'core.accountingmanager.IAccountingManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'deleteFile' : function(fileId, gs_silent) {\n        var data = {\n            args : {\n                fileId : JSON.stringify(fileId),\n            },\n            method: 'deleteFile',\n            interfaceName: 'core.accountingmanager.IAccountingManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'downloadOrderFileNewType' : function(configId,start,end, gs_silent) {\n        var data = {\n            args : {\n                configId : JSON.stringify(configId),\n                start : JSON.stringify(start),\n                end : JSON.stringify(end),\n            },\n            method: 'downloadOrderFileNewType',\n            interfaceName: 'core.accountingmanager.IAccountingManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getAccountingConfig' : function(configId, gs_silent) {\n        var data = {\n            args : {\n                configId : JSON.stringify(configId),\n            },\n            method: 'getAccountingConfig',\n            interfaceName: 'core.accountingmanager.IAccountingManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getAccountingManagerConfig' : function(gs_silent) {\n        var data = {\n            args : {\n            },\n            method: 'getAccountingManagerConfig',\n            interfaceName: 'core.accountingmanager.IAccountingManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getAllConfigs' : function(gs_silent) {\n        var data = {\n            args : {\n            },\n            method: 'getAllConfigs',\n            interfaceName: 'core.accountingmanager.IAccountingManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getAllFiles' : function(gs_silent) {\n        var data = {\n            args : {\n            },\n            method: 'getAllFiles',\n            interfaceName: 'core.accountingmanager.IAccountingManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getAllFilesNotTransferredToAccounting' : function(gs_silent) {\n        var data = {\n            args : {\n            },\n            method: 'getAllFilesNotTransferredToAccounting',\n            interfaceName: 'core.accountingmanager.IAccountingManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getFile' : function(id, gs_silent) {\n        var data = {\n            args : {\n                id : JSON.stringify(id),\n            },\n            method: 'getFile',\n            interfaceName: 'core.accountingmanager.IAccountingManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getFileById' : function(id, gs_silent) {\n        var data = {\n            args : {\n                id : JSON.stringify(id),\n            },\n            method: 'getFileById',\n            interfaceName: 'core.accountingmanager.IAccountingManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getFileByIdResend' : function(id, gs_silent) {\n        var data = {\n            args : {\n                id : JSON.stringify(id),\n            },\n            method: 'getFileByIdResend',\n            interfaceName: 'core.accountingmanager.IAccountingManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getLatestLogEntries' : function(gs_silent) {\n        var data = {\n            args : {\n            },\n            method: 'getLatestLogEntries',\n            interfaceName: 'core.accountingmanager.IAccountingManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getNewFile' : function(type, gs_silent) {\n        var data = {\n            args : {\n                type : JSON.stringify(type),\n            },\n            method: 'getNewFile',\n            interfaceName: 'core.accountingmanager.IAccountingManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getStats' : function(configId, gs_silent) {\n        var data = {\n            args : {\n                configId : JSON.stringify(configId),\n            },\n            method: 'getStats',\n            interfaceName: 'core.accountingmanager.IAccountingManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'markAsTransferredToAccounting' : function(id, gs_silent) {\n        var data = {\n            args : {\n                id : JSON.stringify(id),\n            },\n            method: 'markAsTransferredToAccounting',\n            interfaceName: 'core.accountingmanager.IAccountingManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'removeTransferConfig' : function(id, gs_silent) {\n        var data = {\n            args : {\n                id : JSON.stringify(id),\n            },\n            method: 'removeTransferConfig',\n            interfaceName: 'core.accountingmanager.IAccountingManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'resetAllAccounting' : function(gs_silent) {\n        var data = {\n            args : {\n            },\n            method: 'resetAllAccounting',\n            interfaceName: 'core.accountingmanager.IAccountingManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'saveConfig' : function(config, gs_silent) {\n        var data = {\n            args : {\n                config : JSON.stringify(config),\n            },\n            method: 'saveConfig',\n            interfaceName: 'core.accountingmanager.IAccountingManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'setAccountingManagerConfig' : function(config, gs_silent) {\n        var data = {\n            args : {\n                config : JSON.stringify(config),\n            },\n            method: 'setAccountingManagerConfig',\n            interfaceName: 'core.accountingmanager.IAccountingManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'transferFiles' : function(type, gs_silent) {\n        var data = {\n            args : {\n                type : JSON.stringify(type),\n            },\n            method: 'transferFiles',\n            interfaceName: 'core.accountingmanager.IAccountingManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'transferFilesToAccounting' : function(gs_silent) {\n        var data = {\n            args : {\n            },\n            method: 'transferFilesToAccounting',\n            interfaceName: 'core.accountingmanager.IAccountingManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'transferSingleOrders' : function(configId,incOrderIds, gs_silent) {\n        var data = {\n            args : {\n                configId : JSON.stringify(configId),\n                incOrderIds : JSON.stringify(incOrderIds),\n            },\n            method: 'transferSingleOrders',\n            interfaceName: 'core.accountingmanager.IAccountingManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n}\nGetShopApiWebSocket.AmestoManager = function(communication) {\n    this.communication = communication;\n}\n\nGetShopApiWebSocket.AmestoManager.prototype = {\n    'syncAllCostumers' : function(hostname, gs_silent) {\n        var data = {\n            args : {\n                hostname : JSON.stringify(hostname),\n            },\n            method: 'syncAllCostumers',\n            interfaceName: 'core.amesto.IAmestoManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'syncAllOrders' : function(hostname, gs_silent) {\n        var data = {\n            args : {\n                hostname : JSON.stringify(hostname),\n            },\n            method: 'syncAllOrders',\n            interfaceName: 'core.amesto.IAmestoManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'syncAllStockQuantity' : function(hostname, gs_silent) {\n        var data = {\n            args : {\n                hostname : JSON.stringify(hostname),\n            },\n            method: 'syncAllStockQuantity',\n            interfaceName: 'core.amesto.IAmestoManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n}\nGetShopApiWebSocket.GetShopApplicationPool = function(communication) {\n    this.communication = communication;\n}\n\nGetShopApiWebSocket.GetShopApplicationPool.prototype = {\n    'deleteApplication' : function(applicationId, gs_silent) {\n        var data = {\n            args : {\n                applicationId : JSON.stringify(applicationId),\n            },\n            method: 'deleteApplication',\n            interfaceName: 'core.applications.IGetShopApplicationPool',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'get' : function(applicationId, gs_silent) {\n        var data = {\n            args : {\n                applicationId : JSON.stringify(applicationId),\n            },\n            method: 'get',\n            interfaceName: 'core.applications.IGetShopApplicationPool',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getApplications' : function(gs_silent) {\n        var data = {\n            args : {\n            },\n            method: 'getApplications',\n            interfaceName: 'core.applications.IGetShopApplicationPool',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'saveApplication' : function(application, gs_silent) {\n        var data = {\n            args : {\n                application : JSON.stringify(application),\n            },\n            method: 'saveApplication',\n            interfaceName: 'core.applications.IGetShopApplicationPool',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n}\nGetShopApiWebSocket.StoreApplicationInstancePool = function(communication) {\n    this.communication = communication;\n}\n\nGetShopApiWebSocket.StoreApplicationInstancePool.prototype = {\n    'createNewInstance' : function(applicationId, gs_silent) {\n        var data = {\n            args : {\n                applicationId : JSON.stringify(applicationId),\n            },\n            method: 'createNewInstance',\n            interfaceName: 'core.applications.IStoreApplicationInstancePool',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getApplicationInstance' : function(applicationInstanceId, gs_silent) {\n        var data = {\n            args : {\n                applicationInstanceId : JSON.stringify(applicationInstanceId),\n            },\n            method: 'getApplicationInstance',\n            interfaceName: 'core.applications.IStoreApplicationInstancePool',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getApplicationInstances' : function(applicationId, gs_silent) {\n        var data = {\n            args : {\n                applicationId : JSON.stringify(applicationId),\n            },\n            method: 'getApplicationInstances',\n            interfaceName: 'core.applications.IStoreApplicationInstancePool',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'setApplicationSettings' : function(settings, gs_silent) {\n        var data = {\n            args : {\n                settings : JSON.stringify(settings),\n            },\n            method: 'setApplicationSettings',\n            interfaceName: 'core.applications.IStoreApplicationInstancePool',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n}\nGetShopApiWebSocket.StoreApplicationPool = function(communication) {\n    this.communication = communication;\n}\n\nGetShopApiWebSocket.StoreApplicationPool.prototype = {\n    'activateApplication' : function(applicationId, gs_silent) {\n        var data = {\n            args : {\n                applicationId : JSON.stringify(applicationId),\n            },\n            method: 'activateApplication',\n            interfaceName: 'core.applications.IStoreApplicationPool',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'activateModule' : function(module, gs_silent) {\n        var data = {\n            args : {\n                module : JSON.stringify(module),\n            },\n            method: 'activateModule',\n            interfaceName: 'core.applications.IStoreApplicationPool',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'deactivateApplication' : function(applicationId, gs_silent) {\n        var data = {\n            args : {\n                applicationId : JSON.stringify(applicationId),\n            },\n            method: 'deactivateApplication',\n            interfaceName: 'core.applications.IStoreApplicationPool',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getActivatedModules' : function(gs_silent) {\n        var data = {\n            args : {\n            },\n            method: 'getActivatedModules',\n            interfaceName: 'core.applications.IStoreApplicationPool',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getActivatedPaymentApplications' : function(gs_silent) {\n        var data = {\n            args : {\n            },\n            method: 'getActivatedPaymentApplications',\n            interfaceName: 'core.applications.IStoreApplicationPool',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getAllAvailableModules' : function(gs_silent) {\n        var data = {\n            args : {\n            },\n            method: 'getAllAvailableModules',\n            interfaceName: 'core.applications.IStoreApplicationPool',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getApplication' : function(id, gs_silent) {\n        var data = {\n            args : {\n                id : JSON.stringify(id),\n            },\n            method: 'getApplication',\n            interfaceName: 'core.applications.IStoreApplicationPool',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getApplications' : function(gs_silent) {\n        var data = {\n            args : {\n            },\n            method: 'getApplications',\n            interfaceName: 'core.applications.IStoreApplicationPool',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getAvailableApplications' : function(gs_silent) {\n        var data = {\n            args : {\n            },\n            method: 'getAvailableApplications',\n            interfaceName: 'core.applications.IStoreApplicationPool',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getAvailableApplicationsThatIsNotActivated' : function(gs_silent) {\n        var data = {\n            args : {\n            },\n            method: 'getAvailableApplicationsThatIsNotActivated',\n            interfaceName: 'core.applications.IStoreApplicationPool',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getAvailableThemeApplications' : function(gs_silent) {\n        var data = {\n            args : {\n            },\n            method: 'getAvailableThemeApplications',\n            interfaceName: 'core.applications.IStoreApplicationPool',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getPaymentSettingsApplication' : function(gs_silent) {\n        var data = {\n            args : {\n            },\n            method: 'getPaymentSettingsApplication',\n            interfaceName: 'core.applications.IStoreApplicationPool',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getShippingApplications' : function(gs_silent) {\n        var data = {\n            args : {\n            },\n            method: 'getShippingApplications',\n            interfaceName: 'core.applications.IStoreApplicationPool',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getThemeApplication' : function(gs_silent) {\n        var data = {\n            args : {\n            },\n            method: 'getThemeApplication',\n            interfaceName: 'core.applications.IStoreApplicationPool',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'isActivated' : function(appId, gs_silent) {\n        var data = {\n            args : {\n                appId : JSON.stringify(appId),\n            },\n            method: 'isActivated',\n            interfaceName: 'core.applications.IStoreApplicationPool',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'setSetting' : function(applicationId,settings, gs_silent) {\n        var data = {\n            args : {\n                applicationId : JSON.stringify(applicationId),\n                settings : JSON.stringify(settings),\n            },\n            method: 'setSetting',\n            interfaceName: 'core.applications.IStoreApplicationPool',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'setThemeApplication' : function(applicationId, gs_silent) {\n        var data = {\n            args : {\n                applicationId : JSON.stringify(applicationId),\n            },\n            method: 'setThemeApplication',\n            interfaceName: 'core.applications.IStoreApplicationPool',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n}\nGetShopApiWebSocket.DoorManager = function(communication) {\n    this.communication = communication;\n}\n\nGetShopApiWebSocket.DoorManager.prototype = {\n    'addCard' : function(multilevelname, personId,card, gs_silent) {\n        var data = {\n            args : {\n                personId : JSON.stringify(personId),\n                card : JSON.stringify(card),\n            },\n            method: 'addCard',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.arx.IDoorManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'clearDoorCache' : function(multilevelname, gs_silent) {\n        var data = {\n            args : {\n            },\n            method: 'clearDoorCache',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.arx.IDoorManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'closeAllForTheDay' : function(multilevelname, gs_silent) {\n        var data = {\n            args : {\n            },\n            method: 'closeAllForTheDay',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.arx.IDoorManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'doorAction' : function(multilevelname, externalId,state, gs_silent) {\n        var data = {\n            args : {\n                externalId : JSON.stringify(externalId),\n                state : JSON.stringify(state),\n            },\n            method: 'doorAction',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.arx.IDoorManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'generateDoorLogForAllDoorsFromResult' : function(multilevelname, resultFromArx, gs_silent) {\n        var data = {\n            args : {\n                resultFromArx : JSON.stringify(resultFromArx),\n            },\n            method: 'generateDoorLogForAllDoorsFromResult',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.arx.IDoorManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getAllAccessCategories' : function(multilevelname, gs_silent) {\n        var data = {\n            args : {\n            },\n            method: 'getAllAccessCategories',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.arx.IDoorManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getAllDoors' : function(multilevelname, gs_silent) {\n        var data = {\n            args : {\n            },\n            method: 'getAllDoors',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.arx.IDoorManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getAllPersons' : function(multilevelname, gs_silent) {\n        var data = {\n            args : {\n            },\n            method: 'getAllPersons',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.arx.IDoorManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getLogForAllDoor' : function(multilevelname, start,end, gs_silent) {\n        var data = {\n            args : {\n                start : JSON.stringify(start),\n                end : JSON.stringify(end),\n            },\n            method: 'getLogForAllDoor',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.arx.IDoorManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getLogForDoor' : function(multilevelname, externalId,start,end, gs_silent) {\n        var data = {\n            args : {\n                externalId : JSON.stringify(externalId),\n                start : JSON.stringify(start),\n                end : JSON.stringify(end),\n            },\n            method: 'getLogForDoor',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.arx.IDoorManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getPerson' : function(multilevelname, id, gs_silent) {\n        var data = {\n            args : {\n                id : JSON.stringify(id),\n            },\n            method: 'getPerson',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.arx.IDoorManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'pmsDoorAction' : function(multilevelname, code,type, gs_silent) {\n        var data = {\n            args : {\n                code : JSON.stringify(code),\n                type : JSON.stringify(type),\n            },\n            method: 'pmsDoorAction',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.arx.IDoorManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'updatePerson' : function(multilevelname, person, gs_silent) {\n        var data = {\n            args : {\n                person : JSON.stringify(person),\n            },\n            method: 'updatePerson',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.arx.IDoorManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n}\nGetShopApiWebSocket.AsanaManager = function(communication) {\n    this.communication = communication;\n}\n\nGetShopApiWebSocket.AsanaManager.prototype = {\n    'getProjects' : function(gs_silent) {\n        var data = {\n            args : {\n            },\n            method: 'getProjects',\n            interfaceName: 'core.asanamanager.IAsanaManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getTasks' : function(projectId,year,month, gs_silent) {\n        var data = {\n            args : {\n                projectId : JSON.stringify(projectId),\n                year : JSON.stringify(year),\n                month : JSON.stringify(month),\n            },\n            method: 'getTasks',\n            interfaceName: 'core.asanamanager.IAsanaManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n}\nGetShopApiWebSocket.BamboraManager = function(communication) {\n    this.communication = communication;\n}\n\nGetShopApiWebSocket.BamboraManager.prototype = {\n    'checkForOrdersToCapture' : function(gs_silent) {\n        var data = {\n            args : {\n            },\n            method: 'checkForOrdersToCapture',\n            interfaceName: 'core.bambora.IBamboraManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getCheckoutUrl' : function(orderId, gs_silent) {\n        var data = {\n            args : {\n                orderId : JSON.stringify(orderId),\n            },\n            method: 'getCheckoutUrl',\n            interfaceName: 'core.bambora.IBamboraManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n}\nGetShopApiWebSocket.BigStock = function(communication) {\n    this.communication = communication;\n}\n\nGetShopApiWebSocket.BigStock.prototype = {\n    'addGetShopImageIdToBigStockOrder' : function(downloadUrl,imageId, gs_silent) {\n        var data = {\n            args : {\n                downloadUrl : JSON.stringify(downloadUrl),\n                imageId : JSON.stringify(imageId),\n            },\n            method: 'addGetShopImageIdToBigStockOrder',\n            interfaceName: 'core.bigstock.IBigStock',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getAvailableCredits' : function(gs_silent) {\n        var data = {\n            args : {\n            },\n            method: 'getAvailableCredits',\n            interfaceName: 'core.bigstock.IBigStock',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'purchaseImage' : function(imageId,sizeCode, gs_silent) {\n        var data = {\n            args : {\n                imageId : JSON.stringify(imageId),\n                sizeCode : JSON.stringify(sizeCode),\n            },\n            method: 'purchaseImage',\n            interfaceName: 'core.bigstock.IBigStock',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'setCreditAccount' : function(credits,password, gs_silent) {\n        var data = {\n            args : {\n                credits : JSON.stringify(credits),\n                password : JSON.stringify(password),\n            },\n            method: 'setCreditAccount',\n            interfaceName: 'core.bigstock.IBigStock',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n}\nGetShopApiWebSocket.BookingEngine = function(communication) {\n    this.communication = communication;\n}\n\nGetShopApiWebSocket.BookingEngine.prototype = {\n    'changeBookingItemAndDateOnBooking' : function(multilevelname, booking,item,start,end, gs_silent) {\n        var data = {\n            args : {\n                booking : JSON.stringify(booking),\n                item : JSON.stringify(item),\n                start : JSON.stringify(start),\n                end : JSON.stringify(end),\n            },\n            method: 'changeBookingItemAndDateOnBooking',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.bookingengine.IBookingEngine',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'changeBookingItemOnBooking' : function(multilevelname, booking,item, gs_silent) {\n        var data = {\n            args : {\n                booking : JSON.stringify(booking),\n                item : JSON.stringify(item),\n            },\n            method: 'changeBookingItemOnBooking',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.bookingengine.IBookingEngine',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'changeBookingItemType' : function(multilevelname, itemId,newTypeId, gs_silent) {\n        var data = {\n            args : {\n                itemId : JSON.stringify(itemId),\n                newTypeId : JSON.stringify(newTypeId),\n            },\n            method: 'changeBookingItemType',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.bookingengine.IBookingEngine',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'changeDatesOnBooking' : function(multilevelname, bookingId,start,end, gs_silent) {\n        var data = {\n            args : {\n                bookingId : JSON.stringify(bookingId),\n                start : JSON.stringify(start),\n                end : JSON.stringify(end),\n            },\n            method: 'changeDatesOnBooking',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.bookingengine.IBookingEngine',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'changeSourceOnBooking' : function(multilevelname, bookingId,source, gs_silent) {\n        var data = {\n            args : {\n                bookingId : JSON.stringify(bookingId),\n                source : JSON.stringify(source),\n            },\n            method: 'changeSourceOnBooking',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.bookingengine.IBookingEngine',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'changeTypeOnBooking' : function(multilevelname, bookingId,itemTypeId, gs_silent) {\n        var data = {\n            args : {\n                bookingId : JSON.stringify(bookingId),\n                itemTypeId : JSON.stringify(itemTypeId),\n            },\n            method: 'changeTypeOnBooking',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.bookingengine.IBookingEngine',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'checkConsistency' : function(multilevelname, gs_silent) {\n        var data = {\n            args : {\n            },\n            method: 'checkConsistency',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.bookingengine.IBookingEngine',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'createABookingItemType' : function(multilevelname, name, gs_silent) {\n        var data = {\n            args : {\n                name : JSON.stringify(name),\n            },\n            method: 'createABookingItemType',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.bookingengine.IBookingEngine',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'deleteBooking' : function(multilevelname, id, gs_silent) {\n        var data = {\n            args : {\n                id : JSON.stringify(id),\n            },\n            method: 'deleteBooking',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.bookingengine.IBookingEngine',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'deleteBookingItem' : function(multilevelname, id, gs_silent) {\n        var data = {\n            args : {\n                id : JSON.stringify(id),\n            },\n            method: 'deleteBookingItem',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.bookingengine.IBookingEngine',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'deleteBookingItemType' : function(multilevelname, id, gs_silent) {\n        var data = {\n            args : {\n                id : JSON.stringify(id),\n            },\n            method: 'deleteBookingItemType',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.bookingengine.IBookingEngine',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'deleteOpeningHours' : function(multilevelname, repeaterId, gs_silent) {\n        var data = {\n            args : {\n                repeaterId : JSON.stringify(repeaterId),\n            },\n            method: 'deleteOpeningHours',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.bookingengine.IBookingEngine',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'forceUnassignBookingInfuture' : function(multilevelname, gs_silent) {\n        var data = {\n            args : {\n            },\n            method: 'forceUnassignBookingInfuture',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.bookingengine.IBookingEngine',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getAllAvailbleItems' : function(multilevelname, start,end, gs_silent) {\n        var data = {\n            args : {\n                start : JSON.stringify(start),\n                end : JSON.stringify(end),\n            },\n            method: 'getAllAvailbleItems',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.bookingengine.IBookingEngine',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getAllAvailbleItemsWithBookingConsidered' : function(multilevelname, start,end,bookingid, gs_silent) {\n        var data = {\n            args : {\n                start : JSON.stringify(start),\n                end : JSON.stringify(end),\n                bookingid : JSON.stringify(bookingid),\n            },\n            method: 'getAllAvailbleItemsWithBookingConsidered',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.bookingengine.IBookingEngine',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getAllBookings' : function(multilevelname, gs_silent) {\n        var data = {\n            args : {\n            },\n            method: 'getAllBookings',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.bookingengine.IBookingEngine',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getAllBookingsByBookingItem' : function(multilevelname, bookingItemId, gs_silent) {\n        var data = {\n            args : {\n                bookingItemId : JSON.stringify(bookingItemId),\n            },\n            method: 'getAllBookingsByBookingItem',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.bookingengine.IBookingEngine',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getAvailbleItems' : function(multilevelname, typeId,start,end, gs_silent) {\n        var data = {\n            args : {\n                typeId : JSON.stringify(typeId),\n                start : JSON.stringify(start),\n                end : JSON.stringify(end),\n            },\n            method: 'getAvailbleItems',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.bookingengine.IBookingEngine',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getAvailbleItemsWithBookingConsidered' : function(multilevelname, typeId,start,end,bookingId, gs_silent) {\n        var data = {\n            args : {\n                typeId : JSON.stringify(typeId),\n                start : JSON.stringify(start),\n                end : JSON.stringify(end),\n                bookingId : JSON.stringify(bookingId),\n            },\n            method: 'getAvailbleItemsWithBookingConsidered',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.bookingengine.IBookingEngine',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getBooking' : function(multilevelname, bookingId, gs_silent) {\n        var data = {\n            args : {\n                bookingId : JSON.stringify(bookingId),\n            },\n            method: 'getBooking',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.bookingengine.IBookingEngine',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getBookingItem' : function(multilevelname, id, gs_silent) {\n        var data = {\n            args : {\n                id : JSON.stringify(id),\n            },\n            method: 'getBookingItem',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.bookingengine.IBookingEngine',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getBookingItemType' : function(multilevelname, id, gs_silent) {\n        var data = {\n            args : {\n                id : JSON.stringify(id),\n            },\n            method: 'getBookingItemType',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.bookingengine.IBookingEngine',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getBookingItemTypes' : function(multilevelname, gs_silent) {\n        var data = {\n            args : {\n            },\n            method: 'getBookingItemTypes',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.bookingengine.IBookingEngine',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getBookingItems' : function(multilevelname, gs_silent) {\n        var data = {\n            args : {\n            },\n            method: 'getBookingItems',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.bookingengine.IBookingEngine',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getConfig' : function(multilevelname, gs_silent) {\n        var data = {\n            args : {\n            },\n            method: 'getConfig',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.bookingengine.IBookingEngine',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getDefaultRegistrationRules' : function(multilevelname, gs_silent) {\n        var data = {\n            args : {\n            },\n            method: 'getDefaultRegistrationRules',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.bookingengine.IBookingEngine',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getNumberOfAvailable' : function(multilevelname, itemType,start,end, gs_silent) {\n        var data = {\n            args : {\n                itemType : JSON.stringify(itemType),\n                start : JSON.stringify(start),\n                end : JSON.stringify(end),\n            },\n            method: 'getNumberOfAvailable',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.bookingengine.IBookingEngine',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getOpeningHours' : function(multilevelname, itemId, gs_silent) {\n        var data = {\n            args : {\n                itemId : JSON.stringify(itemId),\n            },\n            method: 'getOpeningHours',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.bookingengine.IBookingEngine',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getTimelines' : function(multilevelname, id,startDate,endDate, gs_silent) {\n        var data = {\n            args : {\n                id : JSON.stringify(id),\n                startDate : JSON.stringify(startDate),\n                endDate : JSON.stringify(endDate),\n            },\n            method: 'getTimelines',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.bookingengine.IBookingEngine',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getTimelinesDirect' : function(multilevelname, start,end,itemTypeId, gs_silent) {\n        var data = {\n            args : {\n                start : JSON.stringify(start),\n                end : JSON.stringify(end),\n                itemTypeId : JSON.stringify(itemTypeId),\n            },\n            method: 'getTimelinesDirect',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.bookingengine.IBookingEngine',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'saveBookingItem' : function(multilevelname, item, gs_silent) {\n        var data = {\n            args : {\n                item : JSON.stringify(item),\n            },\n            method: 'saveBookingItem',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.bookingengine.IBookingEngine',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'saveDefaultRegistrationRules' : function(multilevelname, rules, gs_silent) {\n        var data = {\n            args : {\n                rules : JSON.stringify(rules),\n            },\n            method: 'saveDefaultRegistrationRules',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.bookingengine.IBookingEngine',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'saveOpeningHours' : function(multilevelname, time,itemId, gs_silent) {\n        var data = {\n            args : {\n                time : JSON.stringify(time),\n                itemId : JSON.stringify(itemId),\n            },\n            method: 'saveOpeningHours',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.bookingengine.IBookingEngine',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'setConfirmationRequired' : function(multilevelname, confirmationRequired, gs_silent) {\n        var data = {\n            args : {\n                confirmationRequired : JSON.stringify(confirmationRequired),\n            },\n            method: 'setConfirmationRequired',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.bookingengine.IBookingEngine',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'updateBookingItemType' : function(multilevelname, type, gs_silent) {\n        var data = {\n            args : {\n                type : JSON.stringify(type),\n            },\n            method: 'updateBookingItemType',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.bookingengine.IBookingEngine',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n}\nGetShopApiWebSocket.BrainTreeManager = function(communication) {\n    this.communication = communication;\n}\n\nGetShopApiWebSocket.BrainTreeManager.prototype = {\n    'getClientToken' : function(gs_silent) {\n        var data = {\n            args : {\n            },\n            method: 'getClientToken',\n            interfaceName: 'core.braintree.IBrainTreeManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'pay' : function(paymentMethodNonce,orderId, gs_silent) {\n        var data = {\n            args : {\n                paymentMethodNonce : JSON.stringify(paymentMethodNonce),\n                orderId : JSON.stringify(orderId),\n            },\n            method: 'pay',\n            interfaceName: 'core.braintree.IBrainTreeManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n}\nGetShopApiWebSocket.C3Manager = function(communication) {\n    this.communication = communication;\n}\n\nGetShopApiWebSocket.C3Manager.prototype = {\n    'addForskningsUserPeriode' : function(periode, gs_silent) {\n        var data = {\n            args : {\n                periode : JSON.stringify(periode),\n            },\n            method: 'addForskningsUserPeriode',\n            interfaceName: 'core.c3.IC3Manager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'addHour' : function(hour, gs_silent) {\n        var data = {\n            args : {\n                hour : JSON.stringify(hour),\n            },\n            method: 'addHour',\n            interfaceName: 'core.c3.IC3Manager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'addTimeRate' : function(name,rate, gs_silent) {\n        var data = {\n            args : {\n                name : JSON.stringify(name),\n                rate : JSON.stringify(rate),\n            },\n            method: 'addTimeRate',\n            interfaceName: 'core.c3.IC3Manager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'addUserProjectPeriode' : function(projectPeriode, gs_silent) {\n        var data = {\n            args : {\n                projectPeriode : JSON.stringify(projectPeriode),\n            },\n            method: 'addUserProjectPeriode',\n            interfaceName: 'core.c3.IC3Manager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'allowedFixedHourCosts' : function(userId, gs_silent) {\n        var data = {\n            args : {\n                userId : JSON.stringify(userId),\n            },\n            method: 'allowedFixedHourCosts',\n            interfaceName: 'core.c3.IC3Manager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'allowedNfrHour' : function(userId, gs_silent) {\n        var data = {\n            args : {\n                userId : JSON.stringify(userId),\n            },\n            method: 'allowedNfrHour',\n            interfaceName: 'core.c3.IC3Manager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'allowedNfrHourCurrentUser' : function(gs_silent) {\n        var data = {\n            args : {\n            },\n            method: 'allowedNfrHourCurrentUser',\n            interfaceName: 'core.c3.IC3Manager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'allowedNfrOtherCost' : function(userId, gs_silent) {\n        var data = {\n            args : {\n                userId : JSON.stringify(userId),\n            },\n            method: 'allowedNfrOtherCost',\n            interfaceName: 'core.c3.IC3Manager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'allowedNfrOtherCostCurrentUser' : function(gs_silent) {\n        var data = {\n            args : {\n            },\n            method: 'allowedNfrOtherCostCurrentUser',\n            interfaceName: 'core.c3.IC3Manager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'assignProjectToCompany' : function(companyId,projectId, gs_silent) {\n        var data = {\n            args : {\n                companyId : JSON.stringify(companyId),\n                projectId : JSON.stringify(projectId),\n            },\n            method: 'assignProjectToCompany',\n            interfaceName: 'core.c3.IC3Manager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'calculateSum' : function(periodeId, gs_silent) {\n        var data = {\n            args : {\n                periodeId : JSON.stringify(periodeId),\n            },\n            method: 'calculateSum',\n            interfaceName: 'core.c3.IC3Manager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'canAdd' : function(hour, gs_silent) {\n        var data = {\n            args : {\n                hour : JSON.stringify(hour),\n            },\n            method: 'canAdd',\n            interfaceName: 'core.c3.IC3Manager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'deleteForskningsUserPeriode' : function(periodeId, gs_silent) {\n        var data = {\n            args : {\n                periodeId : JSON.stringify(periodeId),\n            },\n            method: 'deleteForskningsUserPeriode',\n            interfaceName: 'core.c3.IC3Manager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'deleteProject' : function(projectId, gs_silent) {\n        var data = {\n            args : {\n                projectId : JSON.stringify(projectId),\n            },\n            method: 'deleteProject',\n            interfaceName: 'core.c3.IC3Manager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'deleteProjectCost' : function(projectCostId, gs_silent) {\n        var data = {\n            args : {\n                projectCostId : JSON.stringify(projectCostId),\n            },\n            method: 'deleteProjectCost',\n            interfaceName: 'core.c3.IC3Manager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'deleteTimeRate' : function(id, gs_silent) {\n        var data = {\n            args : {\n                id : JSON.stringify(id),\n            },\n            method: 'deleteTimeRate',\n            interfaceName: 'core.c3.IC3Manager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'deleteWorkPackage' : function(workPackageId, gs_silent) {\n        var data = {\n            args : {\n                workPackageId : JSON.stringify(workPackageId),\n            },\n            method: 'deleteWorkPackage',\n            interfaceName: 'core.c3.IC3Manager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getAcceListForUser' : function(userId, gs_silent) {\n        var data = {\n            args : {\n                userId : JSON.stringify(userId),\n            },\n            method: 'getAcceListForUser',\n            interfaceName: 'core.c3.IC3Manager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getAccessList' : function(gs_silent) {\n        var data = {\n            args : {\n            },\n            method: 'getAccessList',\n            interfaceName: 'core.c3.IC3Manager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getAccessListByProjectId' : function(projectId, gs_silent) {\n        var data = {\n            args : {\n                projectId : JSON.stringify(projectId),\n            },\n            method: 'getAccessListByProjectId',\n            interfaceName: 'core.c3.IC3Manager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getActivePeriode' : function(gs_silent) {\n        var data = {\n            args : {\n            },\n            method: 'getActivePeriode',\n            interfaceName: 'core.c3.IC3Manager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getAllProjectsConnectedToCompany' : function(compnayId, gs_silent) {\n        var data = {\n            args : {\n                compnayId : JSON.stringify(compnayId),\n            },\n            method: 'getAllProjectsConnectedToCompany',\n            interfaceName: 'core.c3.IC3Manager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getAllProjectsConnectedToWorkPackage' : function(wpId, gs_silent) {\n        var data = {\n            args : {\n                wpId : JSON.stringify(wpId),\n            },\n            method: 'getAllProjectsConnectedToWorkPackage',\n            interfaceName: 'core.c3.IC3Manager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getBase64ESAExcelReport' : function(start,end, gs_silent) {\n        var data = {\n            args : {\n                start : JSON.stringify(start),\n                end : JSON.stringify(end),\n            },\n            method: 'getBase64ESAExcelReport',\n            interfaceName: 'core.c3.IC3Manager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getBase64SFIExcelReport' : function(companyId,start,end, gs_silent) {\n        var data = {\n            args : {\n                companyId : JSON.stringify(companyId),\n                start : JSON.stringify(start),\n                end : JSON.stringify(end),\n            },\n            method: 'getBase64SFIExcelReport',\n            interfaceName: 'core.c3.IC3Manager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getBase64SFIExcelReportTotal' : function(companyId,start,end, gs_silent) {\n        var data = {\n            args : {\n                companyId : JSON.stringify(companyId),\n                start : JSON.stringify(start),\n                end : JSON.stringify(end),\n            },\n            method: 'getBase64SFIExcelReportTotal',\n            interfaceName: 'core.c3.IC3Manager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getCurrentForskningsPeriode' : function(gs_silent) {\n        var data = {\n            args : {\n            },\n            method: 'getCurrentForskningsPeriode',\n            interfaceName: 'core.c3.IC3Manager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getForskningsPeriodesForUser' : function(userId, gs_silent) {\n        var data = {\n            args : {\n                userId : JSON.stringify(userId),\n            },\n            method: 'getForskningsPeriodesForUser',\n            interfaceName: 'core.c3.IC3Manager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getGroupInformation' : function(groupId, gs_silent) {\n        var data = {\n            args : {\n                groupId : JSON.stringify(groupId),\n            },\n            method: 'getGroupInformation',\n            interfaceName: 'core.c3.IC3Manager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getHourById' : function(hourId, gs_silent) {\n        var data = {\n            args : {\n                hourId : JSON.stringify(hourId),\n            },\n            method: 'getHourById',\n            interfaceName: 'core.c3.IC3Manager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getOtherCost' : function(otherCostId, gs_silent) {\n        var data = {\n            args : {\n                otherCostId : JSON.stringify(otherCostId),\n            },\n            method: 'getOtherCost',\n            interfaceName: 'core.c3.IC3Manager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getPeriodes' : function(gs_silent) {\n        var data = {\n            args : {\n            },\n            method: 'getPeriodes',\n            interfaceName: 'core.c3.IC3Manager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getPeriodesForProject' : function(projectId, gs_silent) {\n        var data = {\n            args : {\n                projectId : JSON.stringify(projectId),\n            },\n            method: 'getPeriodesForProject',\n            interfaceName: 'core.c3.IC3Manager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getProject' : function(id, gs_silent) {\n        var data = {\n            args : {\n                id : JSON.stringify(id),\n            },\n            method: 'getProject',\n            interfaceName: 'core.c3.IC3Manager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getProjectCostsForAllUsersInCompany' : function(projectId,from,to, gs_silent) {\n        var data = {\n            args : {\n                projectId : JSON.stringify(projectId),\n                from : JSON.stringify(from),\n                to : JSON.stringify(to),\n            },\n            method: 'getProjectCostsForAllUsersInCompany',\n            interfaceName: 'core.c3.IC3Manager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getProjectCostsForCurrentUser' : function(projectId,from,to, gs_silent) {\n        var data = {\n            args : {\n                projectId : JSON.stringify(projectId),\n                from : JSON.stringify(from),\n                to : JSON.stringify(to),\n            },\n            method: 'getProjectCostsForCurrentUser',\n            interfaceName: 'core.c3.IC3Manager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getProjects' : function(gs_silent) {\n        var data = {\n            args : {\n            },\n            method: 'getProjects',\n            interfaceName: 'core.c3.IC3Manager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getReportForUserProject' : function(userId,projectId,start,end,forWorkPackageId, gs_silent) {\n        var data = {\n            args : {\n                userId : JSON.stringify(userId),\n                projectId : JSON.stringify(projectId),\n                start : JSON.stringify(start),\n                end : JSON.stringify(end),\n                forWorkPackageId : JSON.stringify(forWorkPackageId),\n            },\n            method: 'getReportForUserProject',\n            interfaceName: 'core.c3.IC3Manager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getRoundSum' : function(year, gs_silent) {\n        var data = {\n            args : {\n                year : JSON.stringify(year),\n            },\n            method: 'getRoundSum',\n            interfaceName: 'core.c3.IC3Manager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getTimeRate' : function(userId, gs_silent) {\n        var data = {\n            args : {\n                userId : JSON.stringify(userId),\n            },\n            method: 'getTimeRate',\n            interfaceName: 'core.c3.IC3Manager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getTimeRates' : function(gs_silent) {\n        var data = {\n            args : {\n            },\n            method: 'getTimeRates',\n            interfaceName: 'core.c3.IC3Manager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getUserProjectPeriodeById' : function(id, gs_silent) {\n        var data = {\n            args : {\n                id : JSON.stringify(id),\n            },\n            method: 'getUserProjectPeriodeById',\n            interfaceName: 'core.c3.IC3Manager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getWorkPackage' : function(id, gs_silent) {\n        var data = {\n            args : {\n                id : JSON.stringify(id),\n            },\n            method: 'getWorkPackage',\n            interfaceName: 'core.c3.IC3Manager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getWorkPackages' : function(gs_silent) {\n        var data = {\n            args : {\n            },\n            method: 'getWorkPackages',\n            interfaceName: 'core.c3.IC3Manager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'removeCompanyAccess' : function(projectId,companyId, gs_silent) {\n        var data = {\n            args : {\n                projectId : JSON.stringify(projectId),\n                companyId : JSON.stringify(companyId),\n            },\n            method: 'removeCompanyAccess',\n            interfaceName: 'core.c3.IC3Manager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'removeContract' : function(companyId,projectId,workPackageId,contractId, gs_silent) {\n        var data = {\n            args : {\n                companyId : JSON.stringify(companyId),\n                projectId : JSON.stringify(projectId),\n                workPackageId : JSON.stringify(workPackageId),\n                contractId : JSON.stringify(contractId),\n            },\n            method: 'removeContract',\n            interfaceName: 'core.c3.IC3Manager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'saveGroupInfo' : function(groupId,type,value, gs_silent) {\n        var data = {\n            args : {\n                groupId : JSON.stringify(groupId),\n                type : JSON.stringify(type),\n                value : JSON.stringify(value),\n            },\n            method: 'saveGroupInfo',\n            interfaceName: 'core.c3.IC3Manager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'saveOtherCosts' : function(otherCost, gs_silent) {\n        var data = {\n            args : {\n                otherCost : JSON.stringify(otherCost),\n            },\n            method: 'saveOtherCosts',\n            interfaceName: 'core.c3.IC3Manager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'savePeriode' : function(periode, gs_silent) {\n        var data = {\n            args : {\n                periode : JSON.stringify(periode),\n            },\n            method: 'savePeriode',\n            interfaceName: 'core.c3.IC3Manager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'saveProject' : function(project, gs_silent) {\n        var data = {\n            args : {\n                project : JSON.stringify(project),\n            },\n            method: 'saveProject',\n            interfaceName: 'core.c3.IC3Manager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'saveRate' : function(rate, gs_silent) {\n        var data = {\n            args : {\n                rate : JSON.stringify(rate),\n            },\n            method: 'saveRate',\n            interfaceName: 'core.c3.IC3Manager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'saveWorkPackage' : function(workPackage, gs_silent) {\n        var data = {\n            args : {\n                workPackage : JSON.stringify(workPackage),\n            },\n            method: 'saveWorkPackage',\n            interfaceName: 'core.c3.IC3Manager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'search' : function(searchText, gs_silent) {\n        var data = {\n            args : {\n                searchText : JSON.stringify(searchText),\n            },\n            method: 'search',\n            interfaceName: 'core.c3.IC3Manager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'setActivePeriode' : function(periodeId, gs_silent) {\n        var data = {\n            args : {\n                periodeId : JSON.stringify(periodeId),\n            },\n            method: 'setActivePeriode',\n            interfaceName: 'core.c3.IC3Manager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'setC3RoundSum' : function(year,sum, gs_silent) {\n        var data = {\n            args : {\n                year : JSON.stringify(year),\n                sum : JSON.stringify(sum),\n            },\n            method: 'setC3RoundSum',\n            interfaceName: 'core.c3.IC3Manager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'setNfrAccess' : function(access, gs_silent) {\n        var data = {\n            args : {\n                access : JSON.stringify(access),\n            },\n            method: 'setNfrAccess',\n            interfaceName: 'core.c3.IC3Manager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'setProjectAccess' : function(companyId,projectId,workPackageId,value, gs_silent) {\n        var data = {\n            args : {\n                companyId : JSON.stringify(companyId),\n                projectId : JSON.stringify(projectId),\n                workPackageId : JSON.stringify(workPackageId),\n                value : JSON.stringify(value),\n            },\n            method: 'setProjectAccess',\n            interfaceName: 'core.c3.IC3Manager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'setProjectCust' : function(companyId,projectId,workPackageId,start,end,price,contractId, gs_silent) {\n        var data = {\n            args : {\n                companyId : JSON.stringify(companyId),\n                projectId : JSON.stringify(projectId),\n                workPackageId : JSON.stringify(workPackageId),\n                start : JSON.stringify(start),\n                end : JSON.stringify(end),\n                price : JSON.stringify(price),\n                contractId : JSON.stringify(contractId),\n            },\n            method: 'setProjectCust',\n            interfaceName: 'core.c3.IC3Manager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'setRateToUser' : function(userId,rateId, gs_silent) {\n        var data = {\n            args : {\n                userId : JSON.stringify(userId),\n                rateId : JSON.stringify(rateId),\n            },\n            method: 'setRateToUser',\n            interfaceName: 'core.c3.IC3Manager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n}\nGetShopApiWebSocket.CalendarManager = function(communication) {\n    this.communication = communication;\n}\n\nGetShopApiWebSocket.CalendarManager.prototype = {\n    'addEvent' : function(event, gs_silent) {\n        var data = {\n            args : {\n                event : JSON.stringify(event),\n            },\n            method: 'addEvent',\n            interfaceName: 'core.calendar.ICalendarManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'addUserSilentlyToEvent' : function(eventId,userId, gs_silent) {\n        var data = {\n            args : {\n                eventId : JSON.stringify(eventId),\n                userId : JSON.stringify(userId),\n            },\n            method: 'addUserSilentlyToEvent',\n            interfaceName: 'core.calendar.ICalendarManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'addUserToEvent' : function(userId,eventId,password,username,source, gs_silent) {\n        var data = {\n            args : {\n                userId : JSON.stringify(userId),\n                eventId : JSON.stringify(eventId),\n                password : JSON.stringify(password),\n                username : JSON.stringify(username),\n                source : JSON.stringify(source),\n            },\n            method: 'addUserToEvent',\n            interfaceName: 'core.calendar.ICalendarManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'addUserToPageEvent' : function(userId,bookingAppId, gs_silent) {\n        var data = {\n            args : {\n                userId : JSON.stringify(userId),\n                bookingAppId : JSON.stringify(bookingAppId),\n            },\n            method: 'addUserToPageEvent',\n            interfaceName: 'core.calendar.ICalendarManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'applyFilter' : function(filters, gs_silent) {\n        var data = {\n            args : {\n                filters : JSON.stringify(filters),\n            },\n            method: 'applyFilter',\n            interfaceName: 'core.calendar.ICalendarManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'confirmEntry' : function(entryId, gs_silent) {\n        var data = {\n            args : {\n                entryId : JSON.stringify(entryId),\n            },\n            method: 'confirmEntry',\n            interfaceName: 'core.calendar.ICalendarManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'createEntry' : function(year,month,day, gs_silent) {\n        var data = {\n            args : {\n                year : JSON.stringify(year),\n                month : JSON.stringify(month),\n                day : JSON.stringify(day),\n            },\n            method: 'createEntry',\n            interfaceName: 'core.calendar.ICalendarManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'deleteEntry' : function(id, gs_silent) {\n        var data = {\n            args : {\n                id : JSON.stringify(id),\n            },\n            method: 'deleteEntry',\n            interfaceName: 'core.calendar.ICalendarManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'deleteLocation' : function(locationId, gs_silent) {\n        var data = {\n            args : {\n                locationId : JSON.stringify(locationId),\n            },\n            method: 'deleteLocation',\n            interfaceName: 'core.calendar.ICalendarManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getActiveFilters' : function(gs_silent) {\n        var data = {\n            args : {\n            },\n            method: 'getActiveFilters',\n            interfaceName: 'core.calendar.ICalendarManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getAllEventsConnectedToPage' : function(pageId, gs_silent) {\n        var data = {\n            args : {\n                pageId : JSON.stringify(pageId),\n            },\n            method: 'getAllEventsConnectedToPage',\n            interfaceName: 'core.calendar.ICalendarManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getAllLocations' : function(gs_silent) {\n        var data = {\n            args : {\n            },\n            method: 'getAllLocations',\n            interfaceName: 'core.calendar.ICalendarManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getEntries' : function(year,month,day,filters, gs_silent) {\n        var data = {\n            args : {\n                year : JSON.stringify(year),\n                month : JSON.stringify(month),\n                day : JSON.stringify(day),\n                filters : JSON.stringify(filters),\n            },\n            method: 'getEntries',\n            interfaceName: 'core.calendar.ICalendarManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getEntriesByUserId' : function(userId, gs_silent) {\n        var data = {\n            args : {\n                userId : JSON.stringify(userId),\n            },\n            method: 'getEntriesByUserId',\n            interfaceName: 'core.calendar.ICalendarManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getEntry' : function(entryId, gs_silent) {\n        var data = {\n            args : {\n                entryId : JSON.stringify(entryId),\n            },\n            method: 'getEntry',\n            interfaceName: 'core.calendar.ICalendarManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getEvent' : function(eventId, gs_silent) {\n        var data = {\n            args : {\n                eventId : JSON.stringify(eventId),\n            },\n            method: 'getEvent',\n            interfaceName: 'core.calendar.ICalendarManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getEventPartitipatedData' : function(pageId, gs_silent) {\n        var data = {\n            args : {\n                pageId : JSON.stringify(pageId),\n            },\n            method: 'getEventPartitipatedData',\n            interfaceName: 'core.calendar.ICalendarManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getEvents' : function(gs_silent) {\n        var data = {\n            args : {\n            },\n            method: 'getEvents',\n            interfaceName: 'core.calendar.ICalendarManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getEventsGroupedByPageId' : function(gs_silent) {\n        var data = {\n            args : {\n            },\n            method: 'getEventsGroupedByPageId',\n            interfaceName: 'core.calendar.ICalendarManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getFilters' : function(gs_silent) {\n        var data = {\n            args : {\n            },\n            method: 'getFilters',\n            interfaceName: 'core.calendar.ICalendarManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getHistory' : function(eventId, gs_silent) {\n        var data = {\n            args : {\n                eventId : JSON.stringify(eventId),\n            },\n            method: 'getHistory',\n            interfaceName: 'core.calendar.ICalendarManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getMonth' : function(year,month,includeExtraEvents, gs_silent) {\n        var data = {\n            args : {\n                year : JSON.stringify(year),\n                month : JSON.stringify(month),\n                includeExtraEvents : JSON.stringify(includeExtraEvents),\n            },\n            method: 'getMonth',\n            interfaceName: 'core.calendar.ICalendarManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getMonths' : function(gs_silent) {\n        var data = {\n            args : {\n            },\n            method: 'getMonths',\n            interfaceName: 'core.calendar.ICalendarManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getMonthsAfter' : function(year,month, gs_silent) {\n        var data = {\n            args : {\n                year : JSON.stringify(year),\n                month : JSON.stringify(month),\n            },\n            method: 'getMonthsAfter',\n            interfaceName: 'core.calendar.ICalendarManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getSignature' : function(id, gs_silent) {\n        var data = {\n            args : {\n                id : JSON.stringify(id),\n            },\n            method: 'getSignature',\n            interfaceName: 'core.calendar.ICalendarManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'placeOrder' : function(order, gs_silent) {\n        var data = {\n            args : {\n                order : JSON.stringify(order),\n            },\n            method: 'placeOrder',\n            interfaceName: 'core.calendar.ICalendarManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'removeUserFromEvent' : function(userId,eventId, gs_silent) {\n        var data = {\n            args : {\n                userId : JSON.stringify(userId),\n                eventId : JSON.stringify(eventId),\n            },\n            method: 'removeUserFromEvent',\n            interfaceName: 'core.calendar.ICalendarManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'saveEntry' : function(entry, gs_silent) {\n        var data = {\n            args : {\n                entry : JSON.stringify(entry),\n            },\n            method: 'saveEntry',\n            interfaceName: 'core.calendar.ICalendarManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'saveLocation' : function(location, gs_silent) {\n        var data = {\n            args : {\n                location : JSON.stringify(location),\n            },\n            method: 'saveLocation',\n            interfaceName: 'core.calendar.ICalendarManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'sendReminderToUser' : function(byEmail,bySMS,users,text,subject,eventId,attachment,sendReminderToUser, gs_silent) {\n        var data = {\n            args : {\n                byEmail : JSON.stringify(byEmail),\n                bySMS : JSON.stringify(bySMS),\n                users : JSON.stringify(users),\n                text : JSON.stringify(text),\n                subject : JSON.stringify(subject),\n                eventId : JSON.stringify(eventId),\n                attachment : JSON.stringify(attachment),\n                sendReminderToUser : JSON.stringify(sendReminderToUser),\n            },\n            method: 'sendReminderToUser',\n            interfaceName: 'core.calendar.ICalendarManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'setEventPartitipatedData' : function(eventData, gs_silent) {\n        var data = {\n            args : {\n                eventData : JSON.stringify(eventData),\n            },\n            method: 'setEventPartitipatedData',\n            interfaceName: 'core.calendar.ICalendarManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'setSignature' : function(userid,signature, gs_silent) {\n        var data = {\n            args : {\n                userid : JSON.stringify(userid),\n                signature : JSON.stringify(signature),\n            },\n            method: 'setSignature',\n            interfaceName: 'core.calendar.ICalendarManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'transferFromWaitingList' : function(entryId,userId, gs_silent) {\n        var data = {\n            args : {\n                entryId : JSON.stringify(entryId),\n                userId : JSON.stringify(userId),\n            },\n            method: 'transferFromWaitingList',\n            interfaceName: 'core.calendar.ICalendarManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'transferUser' : function(fromEventId,toEventId,userId, gs_silent) {\n        var data = {\n            args : {\n                fromEventId : JSON.stringify(fromEventId),\n                toEventId : JSON.stringify(toEventId),\n                userId : JSON.stringify(userId),\n            },\n            method: 'transferUser',\n            interfaceName: 'core.calendar.ICalendarManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n}\nGetShopApiWebSocket.CartManager = function(communication) {\n    this.communication = communication;\n}\n\nGetShopApiWebSocket.CartManager.prototype = {\n    'addCoupon' : function(coupon, gs_silent) {\n        var data = {\n            args : {\n                coupon : JSON.stringify(coupon),\n            },\n            method: 'addCoupon',\n            interfaceName: 'core.cartmanager.ICartManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'addMetaDataToProduct' : function(cartItemId,metaData, gs_silent) {\n        var data = {\n            args : {\n                cartItemId : JSON.stringify(cartItemId),\n                metaData : JSON.stringify(metaData),\n            },\n            method: 'addMetaDataToProduct',\n            interfaceName: 'core.cartmanager.ICartManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'addProduct' : function(productId,count,variations, gs_silent) {\n        var data = {\n            args : {\n                productId : JSON.stringify(productId),\n                count : JSON.stringify(count),\n                variations : JSON.stringify(variations),\n            },\n            method: 'addProduct',\n            interfaceName: 'core.cartmanager.ICartManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'addProductItem' : function(productId,count, gs_silent) {\n        var data = {\n            args : {\n                productId : JSON.stringify(productId),\n                count : JSON.stringify(count),\n            },\n            method: 'addProductItem',\n            interfaceName: 'core.cartmanager.ICartManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'addProductWithSource' : function(productId,count,source, gs_silent) {\n        var data = {\n            args : {\n                productId : JSON.stringify(productId),\n                count : JSON.stringify(count),\n                source : JSON.stringify(source),\n            },\n            method: 'addProductWithSource',\n            interfaceName: 'core.cartmanager.ICartManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'applyCouponToCurrentCart' : function(code, gs_silent) {\n        var data = {\n            args : {\n                code : JSON.stringify(code),\n            },\n            method: 'applyCouponToCurrentCart',\n            interfaceName: 'core.cartmanager.ICartManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'calculateTotalCost' : function(cart, gs_silent) {\n        var data = {\n            args : {\n                cart : JSON.stringify(cart),\n            },\n            method: 'calculateTotalCost',\n            interfaceName: 'core.cartmanager.ICartManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'calculateTotalCount' : function(cart, gs_silent) {\n        var data = {\n            args : {\n                cart : JSON.stringify(cart),\n            },\n            method: 'calculateTotalCount',\n            interfaceName: 'core.cartmanager.ICartManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'clear' : function(gs_silent) {\n        var data = {\n            args : {\n            },\n            method: 'clear',\n            interfaceName: 'core.cartmanager.ICartManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getCart' : function(gs_silent) {\n        var data = {\n            args : {\n            },\n            method: 'getCart',\n            interfaceName: 'core.cartmanager.ICartManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getCartTotalAmount' : function(gs_silent) {\n        var data = {\n            args : {\n            },\n            method: 'getCartTotalAmount',\n            interfaceName: 'core.cartmanager.ICartManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getCoupon' : function(couponCode, gs_silent) {\n        var data = {\n            args : {\n                couponCode : JSON.stringify(couponCode),\n            },\n            method: 'getCoupon',\n            interfaceName: 'core.cartmanager.ICartManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getCouponById' : function(couponId, gs_silent) {\n        var data = {\n            args : {\n                couponId : JSON.stringify(couponId),\n            },\n            method: 'getCouponById',\n            interfaceName: 'core.cartmanager.ICartManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getCoupons' : function(gs_silent) {\n        var data = {\n            args : {\n            },\n            method: 'getCoupons',\n            interfaceName: 'core.cartmanager.ICartManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getPartnershipCoupons' : function(gs_silent) {\n        var data = {\n            args : {\n            },\n            method: 'getPartnershipCoupons',\n            interfaceName: 'core.cartmanager.ICartManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getShippingCost' : function(gs_silent) {\n        var data = {\n            args : {\n            },\n            method: 'getShippingCost',\n            interfaceName: 'core.cartmanager.ICartManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getShippingPriceBasis' : function(gs_silent) {\n        var data = {\n            args : {\n            },\n            method: 'getShippingPriceBasis',\n            interfaceName: 'core.cartmanager.ICartManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getTaxes' : function(gs_silent) {\n        var data = {\n            args : {\n            },\n            method: 'getTaxes',\n            interfaceName: 'core.cartmanager.ICartManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'hasCoupons' : function(gs_silent) {\n        var data = {\n            args : {\n            },\n            method: 'hasCoupons',\n            interfaceName: 'core.cartmanager.ICartManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'removeAllCoupons' : function(gs_silent) {\n        var data = {\n            args : {\n            },\n            method: 'removeAllCoupons',\n            interfaceName: 'core.cartmanager.ICartManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'removeCartItem' : function(cartItemId, gs_silent) {\n        var data = {\n            args : {\n                cartItemId : JSON.stringify(cartItemId),\n            },\n            method: 'removeCartItem',\n            interfaceName: 'core.cartmanager.ICartManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'removeCoupon' : function(code, gs_silent) {\n        var data = {\n            args : {\n                code : JSON.stringify(code),\n            },\n            method: 'removeCoupon',\n            interfaceName: 'core.cartmanager.ICartManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'removeProduct' : function(cartItemId, gs_silent) {\n        var data = {\n            args : {\n                cartItemId : JSON.stringify(cartItemId),\n            },\n            method: 'removeProduct',\n            interfaceName: 'core.cartmanager.ICartManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'setAddress' : function(address, gs_silent) {\n        var data = {\n            args : {\n                address : JSON.stringify(address),\n            },\n            method: 'setAddress',\n            interfaceName: 'core.cartmanager.ICartManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'setReference' : function(reference, gs_silent) {\n        var data = {\n            args : {\n                reference : JSON.stringify(reference),\n            },\n            method: 'setReference',\n            interfaceName: 'core.cartmanager.ICartManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'setShippingCost' : function(shippingCost, gs_silent) {\n        var data = {\n            args : {\n                shippingCost : JSON.stringify(shippingCost),\n            },\n            method: 'setShippingCost',\n            interfaceName: 'core.cartmanager.ICartManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'updateCartItem' : function(item, gs_silent) {\n        var data = {\n            args : {\n                item : JSON.stringify(item),\n            },\n            method: 'updateCartItem',\n            interfaceName: 'core.cartmanager.ICartManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'updateProductCount' : function(cartItemId,count, gs_silent) {\n        var data = {\n            args : {\n                cartItemId : JSON.stringify(cartItemId),\n                count : JSON.stringify(count),\n            },\n            method: 'updateProductCount',\n            interfaceName: 'core.cartmanager.ICartManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n}\nGetShopApiWebSocket.CarTuningManager = function(communication) {\n    this.communication = communication;\n}\n\nGetShopApiWebSocket.CarTuningManager.prototype = {\n    'getCarTuningData' : function(id, gs_silent) {\n        var data = {\n            args : {\n                id : JSON.stringify(id),\n            },\n            method: 'getCarTuningData',\n            interfaceName: 'core.cartuning.ICarTuningManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'saveCarTuningData' : function(carList, gs_silent) {\n        var data = {\n            args : {\n                carList : JSON.stringify(carList),\n            },\n            method: 'saveCarTuningData',\n            interfaceName: 'core.cartuning.ICarTuningManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n}\nGetShopApiWebSocket.CertegoManager = function(communication) {\n    this.communication = communication;\n}\n\nGetShopApiWebSocket.CertegoManager.prototype = {\n    'deleteSystem' : function(systemId, gs_silent) {\n        var data = {\n            args : {\n                systemId : JSON.stringify(systemId),\n            },\n            method: 'deleteSystem',\n            interfaceName: 'core.certego.ICertegoManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getOrders' : function(gs_silent) {\n        var data = {\n            args : {\n            },\n            method: 'getOrders',\n            interfaceName: 'core.certego.ICertegoManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getSystems' : function(gs_silent) {\n        var data = {\n            args : {\n            },\n            method: 'getSystems',\n            interfaceName: 'core.certego.ICertegoManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getSystemsFiltered' : function(filterOptions, gs_silent) {\n        var data = {\n            args : {\n                filterOptions : JSON.stringify(filterOptions),\n            },\n            method: 'getSystemsFiltered',\n            interfaceName: 'core.certego.ICertegoManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getSystemsForGroup' : function(group, gs_silent) {\n        var data = {\n            args : {\n                group : JSON.stringify(group),\n            },\n            method: 'getSystemsForGroup',\n            interfaceName: 'core.certego.ICertegoManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'saveOrder' : function(order, gs_silent) {\n        var data = {\n            args : {\n                order : JSON.stringify(order),\n            },\n            method: 'saveOrder',\n            interfaceName: 'core.certego.ICertegoManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'saveSystem' : function(system, gs_silent) {\n        var data = {\n            args : {\n                system : JSON.stringify(system),\n            },\n            method: 'saveSystem',\n            interfaceName: 'core.certego.ICertegoManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'search' : function(searchWord, gs_silent) {\n        var data = {\n            args : {\n                searchWord : JSON.stringify(searchWord),\n            },\n            method: 'search',\n            interfaceName: 'core.certego.ICertegoManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n}\nGetShopApiWebSocket.ChatManager = function(communication) {\n    this.communication = communication;\n}\n\nGetShopApiWebSocket.ChatManager.prototype = {\n    'closeChat' : function(id, gs_silent) {\n        var data = {\n            args : {\n                id : JSON.stringify(id),\n            },\n            method: 'closeChat',\n            interfaceName: 'core.chat.IChatManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getChatters' : function(gs_silent) {\n        var data = {\n            args : {\n            },\n            method: 'getChatters',\n            interfaceName: 'core.chat.IChatManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getMessages' : function(gs_silent) {\n        var data = {\n            args : {\n            },\n            method: 'getMessages',\n            interfaceName: 'core.chat.IChatManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'pingMobileChat' : function(chatterid, gs_silent) {\n        var data = {\n            args : {\n                chatterid : JSON.stringify(chatterid),\n            },\n            method: 'pingMobileChat',\n            interfaceName: 'core.chat.IChatManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'replyToChat' : function(id,message, gs_silent) {\n        var data = {\n            args : {\n                id : JSON.stringify(id),\n                message : JSON.stringify(message),\n            },\n            method: 'replyToChat',\n            interfaceName: 'core.chat.IChatManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'sendMessage' : function(message, gs_silent) {\n        var data = {\n            args : {\n                message : JSON.stringify(message),\n            },\n            method: 'sendMessage',\n            interfaceName: 'core.chat.IChatManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n}\nGetShopApiWebSocket.DBBackupManager = function(communication) {\n    this.communication = communication;\n}\n\nGetShopApiWebSocket.DBBackupManager.prototype = {\n    'getChanges' : function(className, gs_silent) {\n        var data = {\n            args : {\n                className : JSON.stringify(className),\n            },\n            method: 'getChanges',\n            interfaceName: 'core.dbbackupmanager.IDBBackupManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getChangesById' : function(className,id, gs_silent) {\n        var data = {\n            args : {\n                className : JSON.stringify(className),\n                id : JSON.stringify(id),\n            },\n            method: 'getChangesById',\n            interfaceName: 'core.dbbackupmanager.IDBBackupManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getDiff' : function(className,id1,id2, gs_silent) {\n        var data = {\n            args : {\n                className : JSON.stringify(className),\n                id1 : JSON.stringify(id1),\n                id2 : JSON.stringify(id2),\n            },\n            method: 'getDiff',\n            interfaceName: 'core.dbbackupmanager.IDBBackupManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n}\nGetShopApiWebSocket.DibsManager = function(communication) {\n    this.communication = communication;\n}\n\nGetShopApiWebSocket.DibsManager.prototype = {\n    'checkForOrdersToCapture' : function(gs_silent) {\n        var data = {\n            args : {\n            },\n            method: 'checkForOrdersToCapture',\n            interfaceName: 'core.dibs.IDibsManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n}\nGetShopApiWebSocket.EpayManager = function(communication) {\n    this.communication = communication;\n}\n\nGetShopApiWebSocket.EpayManager.prototype = {\n    'checkForOrdersToCapture' : function(gs_silent) {\n        var data = {\n            args : {\n            },\n            method: 'checkForOrdersToCapture',\n            interfaceName: 'core.epay.IEpayManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n}\nGetShopApiWebSocket.EventBookingManager = function(communication) {\n    this.communication = communication;\n}\n\nGetShopApiWebSocket.EventBookingManager.prototype = {\n    'addExternalCertificate' : function(multilevelname, userId,fileId,eventId, gs_silent) {\n        var data = {\n            args : {\n                userId : JSON.stringify(userId),\n                fileId : JSON.stringify(fileId),\n                eventId : JSON.stringify(eventId),\n            },\n            method: 'addExternalCertificate',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.eventbooking.IEventBookingManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'addLocationFilter' : function(multilevelname, locationId, gs_silent) {\n        var data = {\n            args : {\n                locationId : JSON.stringify(locationId),\n            },\n            method: 'addLocationFilter',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.eventbooking.IEventBookingManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'addManuallyParticipatedEvent' : function(multilevelname, man, gs_silent) {\n        var data = {\n            args : {\n                man : JSON.stringify(man),\n            },\n            method: 'addManuallyParticipatedEvent',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.eventbooking.IEventBookingManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'addTypeFilter' : function(multilevelname, bookingItemTypeId, gs_silent) {\n        var data = {\n            args : {\n                bookingItemTypeId : JSON.stringify(bookingItemTypeId),\n            },\n            method: 'addTypeFilter',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.eventbooking.IEventBookingManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'addUserComment' : function(multilevelname, userId,eventId,comment, gs_silent) {\n        var data = {\n            args : {\n                userId : JSON.stringify(userId),\n                eventId : JSON.stringify(eventId),\n                comment : JSON.stringify(comment),\n            },\n            method: 'addUserComment',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.eventbooking.IEventBookingManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'addUserToEvent' : function(multilevelname, eventId,userId,silent,source, gs_silent) {\n        var data = {\n            args : {\n                eventId : JSON.stringify(eventId),\n                userId : JSON.stringify(userId),\n                silent : JSON.stringify(silent),\n                source : JSON.stringify(source),\n            },\n            method: 'addUserToEvent',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.eventbooking.IEventBookingManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'bookCurrentUserToEvent' : function(multilevelname, eventId,source, gs_silent) {\n        var data = {\n            args : {\n                eventId : JSON.stringify(eventId),\n                source : JSON.stringify(source),\n            },\n            method: 'bookCurrentUserToEvent',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.eventbooking.IEventBookingManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'canDownloadCertificate' : function(multilevelname, eventId, gs_silent) {\n        var data = {\n            args : {\n                eventId : JSON.stringify(eventId),\n            },\n            method: 'canDownloadCertificate',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.eventbooking.IEventBookingManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'cancelEvent' : function(multilevelname, eventId, gs_silent) {\n        var data = {\n            args : {\n                eventId : JSON.stringify(eventId),\n            },\n            method: 'cancelEvent',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.eventbooking.IEventBookingManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'checkToSendReminders' : function(multilevelname, gs_silent) {\n        var data = {\n            args : {\n            },\n            method: 'checkToSendReminders',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.eventbooking.IEventBookingManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'clearEventBookingManagerForAllData' : function(multilevelname, gs_silent) {\n        var data = {\n            args : {\n            },\n            method: 'clearEventBookingManagerForAllData',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.eventbooking.IEventBookingManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'clearFilters' : function(multilevelname, gs_silent) {\n        var data = {\n            args : {\n            },\n            method: 'clearFilters',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.eventbooking.IEventBookingManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'clearLocationFilters' : function(multilevelname, gs_silent) {\n        var data = {\n            args : {\n            },\n            method: 'clearLocationFilters',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.eventbooking.IEventBookingManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'createEvent' : function(multilevelname, event, gs_silent) {\n        var data = {\n            args : {\n                event : JSON.stringify(event),\n            },\n            method: 'createEvent',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.eventbooking.IEventBookingManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'deleteCertificate' : function(multilevelname, certificateId, gs_silent) {\n        var data = {\n            args : {\n                certificateId : JSON.stringify(certificateId),\n            },\n            method: 'deleteCertificate',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.eventbooking.IEventBookingManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'deleteEvent' : function(multilevelname, eventId, gs_silent) {\n        var data = {\n            args : {\n                eventId : JSON.stringify(eventId),\n            },\n            method: 'deleteEvent',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.eventbooking.IEventBookingManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'deleteExternalCertificates' : function(multilevelname, userId,fileId,eventId, gs_silent) {\n        var data = {\n            args : {\n                userId : JSON.stringify(userId),\n                fileId : JSON.stringify(fileId),\n                eventId : JSON.stringify(eventId),\n            },\n            method: 'deleteExternalCertificates',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.eventbooking.IEventBookingManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'deleteInvoiceGroup' : function(multilevelname, groupId, gs_silent) {\n        var data = {\n            args : {\n                groupId : JSON.stringify(groupId),\n            },\n            method: 'deleteInvoiceGroup',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.eventbooking.IEventBookingManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'deleteLocation' : function(multilevelname, locationId, gs_silent) {\n        var data = {\n            args : {\n                locationId : JSON.stringify(locationId),\n            },\n            method: 'deleteLocation',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.eventbooking.IEventBookingManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'deleteManullyParticipatedEvent' : function(multilevelname, id, gs_silent) {\n        var data = {\n            args : {\n                id : JSON.stringify(id),\n            },\n            method: 'deleteManullyParticipatedEvent',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.eventbooking.IEventBookingManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'deleteReminderTemplate' : function(multilevelname, templateId, gs_silent) {\n        var data = {\n            args : {\n                templateId : JSON.stringify(templateId),\n            },\n            method: 'deleteReminderTemplate',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.eventbooking.IEventBookingManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'deleteSubLocation' : function(multilevelname, subLocationId, gs_silent) {\n        var data = {\n            args : {\n                subLocationId : JSON.stringify(subLocationId),\n            },\n            method: 'deleteSubLocation',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.eventbooking.IEventBookingManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'deleteUserComment' : function(multilevelname, userId,eventId,commentId, gs_silent) {\n        var data = {\n            args : {\n                userId : JSON.stringify(userId),\n                eventId : JSON.stringify(eventId),\n                commentId : JSON.stringify(commentId),\n            },\n            method: 'deleteUserComment',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.eventbooking.IEventBookingManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getActiveLocations' : function(multilevelname, gs_silent) {\n        var data = {\n            args : {\n            },\n            method: 'getActiveLocations',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.eventbooking.IEventBookingManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getAllEvents' : function(multilevelname, gs_silent) {\n        var data = {\n            args : {\n            },\n            method: 'getAllEvents',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.eventbooking.IEventBookingManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getAllLocations' : function(multilevelname, gs_silent) {\n        var data = {\n            args : {\n            },\n            method: 'getAllLocations',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.eventbooking.IEventBookingManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getBookingItemTypeByPageId' : function(multilevelname, pageId, gs_silent) {\n        var data = {\n            args : {\n                pageId : JSON.stringify(pageId),\n            },\n            method: 'getBookingItemTypeByPageId',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.eventbooking.IEventBookingManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getBookingItemTypes' : function(multilevelname, gs_silent) {\n        var data = {\n            args : {\n            },\n            method: 'getBookingItemTypes',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.eventbooking.IEventBookingManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getBookingTypeMetaData' : function(multilevelname, id, gs_silent) {\n        var data = {\n            args : {\n                id : JSON.stringify(id),\n            },\n            method: 'getBookingTypeMetaData',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.eventbooking.IEventBookingManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getBookingsByPageId' : function(multilevelname, pageId,showOnlyNew, gs_silent) {\n        var data = {\n            args : {\n                pageId : JSON.stringify(pageId),\n                showOnlyNew : JSON.stringify(showOnlyNew),\n            },\n            method: 'getBookingsByPageId',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.eventbooking.IEventBookingManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getCertificate' : function(multilevelname, certificateId, gs_silent) {\n        var data = {\n            args : {\n                certificateId : JSON.stringify(certificateId),\n            },\n            method: 'getCertificate',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.eventbooking.IEventBookingManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getCertificateForEvent' : function(multilevelname, eventId,userId, gs_silent) {\n        var data = {\n            args : {\n                eventId : JSON.stringify(eventId),\n                userId : JSON.stringify(userId),\n            },\n            method: 'getCertificateForEvent',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.eventbooking.IEventBookingManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getCertificates' : function(multilevelname, gs_silent) {\n        var data = {\n            args : {\n            },\n            method: 'getCertificates',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.eventbooking.IEventBookingManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getCompaniesWhereNoCanditasHasCompletedTests' : function(multilevelname, testIds, gs_silent) {\n        var data = {\n            args : {\n                testIds : JSON.stringify(testIds),\n            },\n            method: 'getCompaniesWhereNoCanditasHasCompletedTests',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.eventbooking.IEventBookingManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getEvent' : function(multilevelname, eventId, gs_silent) {\n        var data = {\n            args : {\n                eventId : JSON.stringify(eventId),\n            },\n            method: 'getEvent',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.eventbooking.IEventBookingManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getEventByPageId' : function(multilevelname, eventId, gs_silent) {\n        var data = {\n            args : {\n                eventId : JSON.stringify(eventId),\n            },\n            method: 'getEventByPageId',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.eventbooking.IEventBookingManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getEventLog' : function(multilevelname, eventId, gs_silent) {\n        var data = {\n            args : {\n                eventId : JSON.stringify(eventId),\n            },\n            method: 'getEventLog',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.eventbooking.IEventBookingManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getEventRequest' : function(multilevelname, id, gs_silent) {\n        var data = {\n            args : {\n                id : JSON.stringify(id),\n            },\n            method: 'getEventRequest',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.eventbooking.IEventBookingManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getEvents' : function(multilevelname, gs_silent) {\n        var data = {\n            args : {\n            },\n            method: 'getEvents',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.eventbooking.IEventBookingManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getEventsByLocation' : function(multilevelname, locationId, gs_silent) {\n        var data = {\n            args : {\n                locationId : JSON.stringify(locationId),\n            },\n            method: 'getEventsByLocation',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.eventbooking.IEventBookingManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getEventsByType' : function(multilevelname, eventTypeId, gs_silent) {\n        var data = {\n            args : {\n                eventTypeId : JSON.stringify(eventTypeId),\n            },\n            method: 'getEventsByType',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.eventbooking.IEventBookingManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getEventsForDay' : function(multilevelname, year,month,day, gs_silent) {\n        var data = {\n            args : {\n                year : JSON.stringify(year),\n                month : JSON.stringify(month),\n                day : JSON.stringify(day),\n            },\n            method: 'getEventsForDay',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.eventbooking.IEventBookingManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getEventsForUser' : function(multilevelname, userId, gs_silent) {\n        var data = {\n            args : {\n                userId : JSON.stringify(userId),\n            },\n            method: 'getEventsForUser',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.eventbooking.IEventBookingManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getEventsWhereEndDateBetween' : function(multilevelname, from,to, gs_silent) {\n        var data = {\n            args : {\n                from : JSON.stringify(from),\n                to : JSON.stringify(to),\n            },\n            method: 'getEventsWhereEndDateBetween',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.eventbooking.IEventBookingManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getExternalCertificates' : function(multilevelname, userId,eventId, gs_silent) {\n        var data = {\n            args : {\n                userId : JSON.stringify(userId),\n                eventId : JSON.stringify(eventId),\n            },\n            method: 'getExternalCertificates',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.eventbooking.IEventBookingManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getFilteredLocations' : function(multilevelname, gs_silent) {\n        var data = {\n            args : {\n            },\n            method: 'getFilteredLocations',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.eventbooking.IEventBookingManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getFromDateTimeFilter' : function(multilevelname, gs_silent) {\n        var data = {\n            args : {\n            },\n            method: 'getFromDateTimeFilter',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.eventbooking.IEventBookingManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getInterests' : function(multilevelname, gs_silent) {\n        var data = {\n            args : {\n            },\n            method: 'getInterests',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.eventbooking.IEventBookingManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getInvoiceGroup' : function(multilevelname, groupId, gs_silent) {\n        var data = {\n            args : {\n                groupId : JSON.stringify(groupId),\n            },\n            method: 'getInvoiceGroup',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.eventbooking.IEventBookingManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getInvoiceGroups' : function(multilevelname, eventId, gs_silent) {\n        var data = {\n            args : {\n                eventId : JSON.stringify(eventId),\n            },\n            method: 'getInvoiceGroups',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.eventbooking.IEventBookingManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getLocation' : function(multilevelname, locationId, gs_silent) {\n        var data = {\n            args : {\n                locationId : JSON.stringify(locationId),\n            },\n            method: 'getLocation',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.eventbooking.IEventBookingManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getMandatoryCourses' : function(multilevelname, userId, gs_silent) {\n        var data = {\n            args : {\n                userId : JSON.stringify(userId),\n            },\n            method: 'getMandatoryCourses',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.eventbooking.IEventBookingManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getManuallyAddedEventParticipant' : function(multilevelname, id, gs_silent) {\n        var data = {\n            args : {\n                id : JSON.stringify(id),\n            },\n            method: 'getManuallyAddedEventParticipant',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.eventbooking.IEventBookingManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getManuallyAddedEvents' : function(multilevelname, userId, gs_silent) {\n        var data = {\n            args : {\n                userId : JSON.stringify(userId),\n            },\n            method: 'getManuallyAddedEvents',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.eventbooking.IEventBookingManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getMyEvents' : function(multilevelname, gs_silent) {\n        var data = {\n            args : {\n            },\n            method: 'getMyEvents',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.eventbooking.IEventBookingManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getPriceForEventType' : function(multilevelname, bookingItemTypeId, gs_silent) {\n        var data = {\n            args : {\n                bookingItemTypeId : JSON.stringify(bookingItemTypeId),\n            },\n            method: 'getPriceForEventType',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.eventbooking.IEventBookingManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getPriceForEventTypeAndUserId' : function(multilevelname, eventId,userId, gs_silent) {\n        var data = {\n            args : {\n                eventId : JSON.stringify(eventId),\n                userId : JSON.stringify(userId),\n            },\n            method: 'getPriceForEventTypeAndUserId',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.eventbooking.IEventBookingManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getReminder' : function(multilevelname, reminderId, gs_silent) {\n        var data = {\n            args : {\n                reminderId : JSON.stringify(reminderId),\n            },\n            method: 'getReminder',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.eventbooking.IEventBookingManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getReminderTemplate' : function(multilevelname, id, gs_silent) {\n        var data = {\n            args : {\n                id : JSON.stringify(id),\n            },\n            method: 'getReminderTemplate',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.eventbooking.IEventBookingManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getReminderTemplates' : function(multilevelname, gs_silent) {\n        var data = {\n            args : {\n            },\n            method: 'getReminderTemplates',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.eventbooking.IEventBookingManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getReminders' : function(multilevelname, eventId, gs_silent) {\n        var data = {\n            args : {\n                eventId : JSON.stringify(eventId),\n            },\n            method: 'getReminders',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.eventbooking.IEventBookingManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getSource' : function(multilevelname, eventId,userId, gs_silent) {\n        var data = {\n            args : {\n                eventId : JSON.stringify(eventId),\n                userId : JSON.stringify(userId),\n            },\n            method: 'getSource',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.eventbooking.IEventBookingManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getStatistic' : function(multilevelname, startDate,stopDate,groupIds,eventTypeIds, gs_silent) {\n        var data = {\n            args : {\n                startDate : JSON.stringify(startDate),\n                stopDate : JSON.stringify(stopDate),\n                groupIds : JSON.stringify(groupIds),\n                eventTypeIds : JSON.stringify(eventTypeIds),\n            },\n            method: 'getStatistic',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.eventbooking.IEventBookingManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getStatisticGroupedByLocations' : function(multilevelname, startDate,stopDate,groupIds,eventTypeIds, gs_silent) {\n        var data = {\n            args : {\n                startDate : JSON.stringify(startDate),\n                stopDate : JSON.stringify(stopDate),\n                groupIds : JSON.stringify(groupIds),\n                eventTypeIds : JSON.stringify(eventTypeIds),\n            },\n            method: 'getStatisticGroupedByLocations',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.eventbooking.IEventBookingManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getToDateTimeFilter' : function(multilevelname, gs_silent) {\n        var data = {\n            args : {\n            },\n            method: 'getToDateTimeFilter',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.eventbooking.IEventBookingManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getUsersForEvent' : function(multilevelname, eventId, gs_silent) {\n        var data = {\n            args : {\n                eventId : JSON.stringify(eventId),\n            },\n            method: 'getUsersForEvent',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.eventbooking.IEventBookingManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getUsersForEventWaitinglist' : function(multilevelname, eventId, gs_silent) {\n        var data = {\n            args : {\n                eventId : JSON.stringify(eventId),\n            },\n            method: 'getUsersForEventWaitinglist',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.eventbooking.IEventBookingManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'handleEventRequest' : function(multilevelname, id,accepted, gs_silent) {\n        var data = {\n            args : {\n                id : JSON.stringify(id),\n                accepted : JSON.stringify(accepted),\n            },\n            method: 'handleEventRequest',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.eventbooking.IEventBookingManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'hasCompletedMandatoryEvent' : function(multilevelname, eventTypeId,userId, gs_silent) {\n        var data = {\n            args : {\n                eventTypeId : JSON.stringify(eventTypeId),\n                userId : JSON.stringify(userId),\n            },\n            method: 'hasCompletedMandatoryEvent',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.eventbooking.IEventBookingManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'hasForcedMandatoryTest' : function(multilevelname, eventTypeId,userId, gs_silent) {\n        var data = {\n            args : {\n                eventTypeId : JSON.stringify(eventTypeId),\n                userId : JSON.stringify(userId),\n            },\n            method: 'hasForcedMandatoryTest',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.eventbooking.IEventBookingManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'isUserSignedUpForEvent' : function(multilevelname, eventId,userId, gs_silent) {\n        var data = {\n            args : {\n                eventId : JSON.stringify(eventId),\n                userId : JSON.stringify(userId),\n            },\n            method: 'isUserSignedUpForEvent',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.eventbooking.IEventBookingManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'isWaitingForConfirmation' : function(multilevelname, eventId,userId, gs_silent) {\n        var data = {\n            args : {\n                eventId : JSON.stringify(eventId),\n                userId : JSON.stringify(userId),\n            },\n            method: 'isWaitingForConfirmation',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.eventbooking.IEventBookingManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'markAsReady' : function(multilevelname, eventId, gs_silent) {\n        var data = {\n            args : {\n                eventId : JSON.stringify(eventId),\n            },\n            method: 'markAsReady',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.eventbooking.IEventBookingManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'markQuestBackSent' : function(multilevelname, eventId, gs_silent) {\n        var data = {\n            args : {\n                eventId : JSON.stringify(eventId),\n            },\n            method: 'markQuestBackSent',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.eventbooking.IEventBookingManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'moveUserToEvent' : function(multilevelname, userId,fromEventId,toEventId, gs_silent) {\n        var data = {\n            args : {\n                userId : JSON.stringify(userId),\n                fromEventId : JSON.stringify(fromEventId),\n                toEventId : JSON.stringify(toEventId),\n            },\n            method: 'moveUserToEvent',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.eventbooking.IEventBookingManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'registerEventIntrest' : function(multilevelname, interest, gs_silent) {\n        var data = {\n            args : {\n                interest : JSON.stringify(interest),\n            },\n            method: 'registerEventIntrest',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.eventbooking.IEventBookingManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'removeInterest' : function(multilevelname, bookingItemTypeId,userId, gs_silent) {\n        var data = {\n            args : {\n                bookingItemTypeId : JSON.stringify(bookingItemTypeId),\n                userId : JSON.stringify(userId),\n            },\n            method: 'removeInterest',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.eventbooking.IEventBookingManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'removeUserFromEvent' : function(multilevelname, eventId,userId,silent, gs_silent) {\n        var data = {\n            args : {\n                eventId : JSON.stringify(eventId),\n                userId : JSON.stringify(userId),\n                silent : JSON.stringify(silent),\n            },\n            method: 'removeUserFromEvent',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.eventbooking.IEventBookingManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'saveBookingTypeMetaData' : function(multilevelname, bookingItemTypeMetadata, gs_silent) {\n        var data = {\n            args : {\n                bookingItemTypeMetadata : JSON.stringify(bookingItemTypeMetadata),\n            },\n            method: 'saveBookingTypeMetaData',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.eventbooking.IEventBookingManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'saveCertificate' : function(multilevelname, certificate, gs_silent) {\n        var data = {\n            args : {\n                certificate : JSON.stringify(certificate),\n            },\n            method: 'saveCertificate',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.eventbooking.IEventBookingManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'saveEvent' : function(multilevelname, event, gs_silent) {\n        var data = {\n            args : {\n                event : JSON.stringify(event),\n            },\n            method: 'saveEvent',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.eventbooking.IEventBookingManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'saveGroupInvoicing' : function(multilevelname, invoiceGroup, gs_silent) {\n        var data = {\n            args : {\n                invoiceGroup : JSON.stringify(invoiceGroup),\n            },\n            method: 'saveGroupInvoicing',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.eventbooking.IEventBookingManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'saveLocation' : function(multilevelname, location, gs_silent) {\n        var data = {\n            args : {\n                location : JSON.stringify(location),\n            },\n            method: 'saveLocation',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.eventbooking.IEventBookingManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'saveReminderTemplate' : function(multilevelname, template, gs_silent) {\n        var data = {\n            args : {\n                template : JSON.stringify(template),\n            },\n            method: 'saveReminderTemplate',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.eventbooking.IEventBookingManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'sendDiplomas' : function(multilevelname, reminder,userid,base64, gs_silent) {\n        var data = {\n            args : {\n                reminder : JSON.stringify(reminder),\n                userid : JSON.stringify(userid),\n                base64 : JSON.stringify(base64),\n            },\n            method: 'sendDiplomas',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.eventbooking.IEventBookingManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'sendReminder' : function(multilevelname, reminder, gs_silent) {\n        var data = {\n            args : {\n                reminder : JSON.stringify(reminder),\n            },\n            method: 'sendReminder',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.eventbooking.IEventBookingManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'setForcedMandatoryAccess' : function(multilevelname, userId,bookingItemIds, gs_silent) {\n        var data = {\n            args : {\n                userId : JSON.stringify(userId),\n                bookingItemIds : JSON.stringify(bookingItemIds),\n            },\n            method: 'setForcedMandatoryAccess',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.eventbooking.IEventBookingManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'setGroupInvoiceingStatus' : function(multilevelname, eventId,userId,groupId, gs_silent) {\n        var data = {\n            args : {\n                eventId : JSON.stringify(eventId),\n                userId : JSON.stringify(userId),\n                groupId : JSON.stringify(groupId),\n            },\n            method: 'setGroupInvoiceingStatus',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.eventbooking.IEventBookingManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'setParticipationStatus' : function(multilevelname, eventId,userId,status, gs_silent) {\n        var data = {\n            args : {\n                eventId : JSON.stringify(eventId),\n                userId : JSON.stringify(userId),\n                status : JSON.stringify(status),\n            },\n            method: 'setParticipationStatus',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.eventbooking.IEventBookingManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'setTimeFilter' : function(multilevelname, from,to, gs_silent) {\n        var data = {\n            args : {\n                from : JSON.stringify(from),\n                to : JSON.stringify(to),\n            },\n            method: 'setTimeFilter',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.eventbooking.IEventBookingManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'startScheduler' : function(multilevelname, scheduler, gs_silent) {\n        var data = {\n            args : {\n                scheduler : JSON.stringify(scheduler),\n            },\n            method: 'startScheduler',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.eventbooking.IEventBookingManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'toggleHide' : function(multilevelname, eventId, gs_silent) {\n        var data = {\n            args : {\n                eventId : JSON.stringify(eventId),\n            },\n            method: 'toggleHide',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.eventbooking.IEventBookingManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'toggleLocked' : function(multilevelname, eventId, gs_silent) {\n        var data = {\n            args : {\n                eventId : JSON.stringify(eventId),\n            },\n            method: 'toggleLocked',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.eventbooking.IEventBookingManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'transferUserFromWaitingToEvent' : function(multilevelname, userId,eventId, gs_silent) {\n        var data = {\n            args : {\n                userId : JSON.stringify(userId),\n                eventId : JSON.stringify(eventId),\n            },\n            method: 'transferUserFromWaitingToEvent',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.eventbooking.IEventBookingManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'unCancelEvent' : function(multilevelname, eventId, gs_silent) {\n        var data = {\n            args : {\n                eventId : JSON.stringify(eventId),\n            },\n            method: 'unCancelEvent',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.eventbooking.IEventBookingManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n}\nGetShopApiWebSocket.FileManager = function(communication) {\n    this.communication = communication;\n}\n\nGetShopApiWebSocket.FileManager.prototype = {\n    'addFileEntry' : function(listId,entry, gs_silent) {\n        var data = {\n            args : {\n                listId : JSON.stringify(listId),\n                entry : JSON.stringify(entry),\n            },\n            method: 'addFileEntry',\n            interfaceName: 'core.filemanager.IFileManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'deleteFileEntry' : function(fileId, gs_silent) {\n        var data = {\n            args : {\n                fileId : JSON.stringify(fileId),\n            },\n            method: 'deleteFileEntry',\n            interfaceName: 'core.filemanager.IFileManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getFile' : function(fileId, gs_silent) {\n        var data = {\n            args : {\n                fileId : JSON.stringify(fileId),\n            },\n            method: 'getFile',\n            interfaceName: 'core.filemanager.IFileManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getFiles' : function(listId, gs_silent) {\n        var data = {\n            args : {\n                listId : JSON.stringify(listId),\n            },\n            method: 'getFiles',\n            interfaceName: 'core.filemanager.IFileManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'renameFileEntry' : function(fileId,newName, gs_silent) {\n        var data = {\n            args : {\n                fileId : JSON.stringify(fileId),\n                newName : JSON.stringify(newName),\n            },\n            method: 'renameFileEntry',\n            interfaceName: 'core.filemanager.IFileManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n}\nGetShopApiWebSocket.FtpManager = function(communication) {\n    this.communication = communication;\n}\n\nGetShopApiWebSocket.FtpManager.prototype = {\n}\nGetShopApiWebSocket.GalleryManager = function(communication) {\n    this.communication = communication;\n}\n\nGetShopApiWebSocket.GalleryManager.prototype = {\n    'addImageToGallery' : function(galleryId,imageId,description,title, gs_silent) {\n        var data = {\n            args : {\n                galleryId : JSON.stringify(galleryId),\n                imageId : JSON.stringify(imageId),\n                description : JSON.stringify(description),\n                title : JSON.stringify(title),\n            },\n            method: 'addImageToGallery',\n            interfaceName: 'core.gallerymanager.IGalleryManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'createImageGallery' : function(gs_silent) {\n        var data = {\n            args : {\n            },\n            method: 'createImageGallery',\n            interfaceName: 'core.gallerymanager.IGalleryManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'deleteImage' : function(entryId, gs_silent) {\n        var data = {\n            args : {\n                entryId : JSON.stringify(entryId),\n            },\n            method: 'deleteImage',\n            interfaceName: 'core.gallerymanager.IGalleryManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getAllImages' : function(id, gs_silent) {\n        var data = {\n            args : {\n                id : JSON.stringify(id),\n            },\n            method: 'getAllImages',\n            interfaceName: 'core.gallerymanager.IGalleryManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getEntry' : function(id, gs_silent) {\n        var data = {\n            args : {\n                id : JSON.stringify(id),\n            },\n            method: 'getEntry',\n            interfaceName: 'core.gallerymanager.IGalleryManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'saveEntry' : function(entry, gs_silent) {\n        var data = {\n            args : {\n                entry : JSON.stringify(entry),\n            },\n            method: 'saveEntry',\n            interfaceName: 'core.gallerymanager.IGalleryManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n}\nGetShopApiWebSocket.GetShop = function(communication) {\n    this.communication = communication;\n}\n\nGetShopApiWebSocket.GetShop.prototype = {\n    'addUserToPartner' : function(userId,partner,password, gs_silent) {\n        var data = {\n            args : {\n                userId : JSON.stringify(userId),\n                partner : JSON.stringify(partner),\n                password : JSON.stringify(password),\n            },\n            method: 'addUserToPartner',\n            interfaceName: 'core.getshop.IGetShop',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'createWebPage' : function(webpageData, gs_silent) {\n        var data = {\n            args : {\n                webpageData : JSON.stringify(webpageData),\n            },\n            method: 'createWebPage',\n            interfaceName: 'core.getshop.IGetShop',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'findAddressForApplication' : function(uuid, gs_silent) {\n        var data = {\n            args : {\n                uuid : JSON.stringify(uuid),\n            },\n            method: 'findAddressForApplication',\n            interfaceName: 'core.getshop.IGetShop',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'findAddressForUUID' : function(uuid, gs_silent) {\n        var data = {\n            args : {\n                uuid : JSON.stringify(uuid),\n            },\n            method: 'findAddressForUUID',\n            interfaceName: 'core.getshop.IGetShop',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getBase64EncodedPDFWebPage' : function(urlToPage, gs_silent) {\n        var data = {\n            args : {\n                urlToPage : JSON.stringify(urlToPage),\n            },\n            method: 'getBase64EncodedPDFWebPage',\n            interfaceName: 'core.getshop.IGetShop',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getPartnerData' : function(partnerId,password, gs_silent) {\n        var data = {\n            args : {\n                partnerId : JSON.stringify(partnerId),\n                password : JSON.stringify(password),\n            },\n            method: 'getPartnerData',\n            interfaceName: 'core.getshop.IGetShop',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getStores' : function(code, gs_silent) {\n        var data = {\n            args : {\n                code : JSON.stringify(code),\n            },\n            method: 'getStores',\n            interfaceName: 'core.getshop.IGetShop',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'saveSmsCallback' : function(smsResponses, gs_silent) {\n        var data = {\n            args : {\n                smsResponses : JSON.stringify(smsResponses),\n            },\n            method: 'saveSmsCallback',\n            interfaceName: 'core.getshop.IGetShop',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'setApplicationList' : function(ids,partnerId,password, gs_silent) {\n        var data = {\n            args : {\n                ids : JSON.stringify(ids),\n                partnerId : JSON.stringify(partnerId),\n                password : JSON.stringify(password),\n            },\n            method: 'setApplicationList',\n            interfaceName: 'core.getshop.IGetShop',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'startStoreFromStore' : function(startData, gs_silent) {\n        var data = {\n            args : {\n                startData : JSON.stringify(startData),\n            },\n            method: 'startStoreFromStore',\n            interfaceName: 'core.getshop.IGetShop',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n}\nGetShopApiWebSocket.GetShopLockManager = function(communication) {\n    this.communication = communication;\n}\n\nGetShopApiWebSocket.GetShopLockManager.prototype = {\n    'accessEvent' : function(multilevelname, id,code,domain, gs_silent) {\n        var data = {\n            args : {\n                id : JSON.stringify(id),\n                code : JSON.stringify(code),\n                domain : JSON.stringify(domain),\n            },\n            method: 'accessEvent',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.getshoplock.IGetShopLockManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'changeZWaveId' : function(multilevelname, lockId,newId, gs_silent) {\n        var data = {\n            args : {\n                lockId : JSON.stringify(lockId),\n                newId : JSON.stringify(newId),\n            },\n            method: 'changeZWaveId',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.getshoplock.IGetShopLockManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'checkIfAllIsOk' : function(multilevelname, gs_silent) {\n        var data = {\n            args : {\n            },\n            method: 'checkIfAllIsOk',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.getshoplock.IGetShopLockManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'deleteAllDevices' : function(multilevelname, password,source, gs_silent) {\n        var data = {\n            args : {\n                password : JSON.stringify(password),\n                source : JSON.stringify(source),\n            },\n            method: 'deleteAllDevices',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.getshoplock.IGetShopLockManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'deleteLock' : function(multilevelname, code,lockId, gs_silent) {\n        var data = {\n            args : {\n                code : JSON.stringify(code),\n                lockId : JSON.stringify(lockId),\n            },\n            method: 'deleteLock',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.getshoplock.IGetShopLockManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'finalizeLocks' : function(multilevelname, gs_silent) {\n        var data = {\n            args : {\n            },\n            method: 'finalizeLocks',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.getshoplock.IGetShopLockManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getAllLocks' : function(multilevelname, serverSource, gs_silent) {\n        var data = {\n            args : {\n                serverSource : JSON.stringify(serverSource),\n            },\n            method: 'getAllLocks',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.getshoplock.IGetShopLockManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getCodeForLock' : function(multilevelname, lockId, gs_silent) {\n        var data = {\n            args : {\n                lockId : JSON.stringify(lockId),\n            },\n            method: 'getCodeForLock',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.getshoplock.IGetShopLockManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getCodesInUse' : function(multilevelname, gs_silent) {\n        var data = {\n            args : {\n            },\n            method: 'getCodesInUse',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.getshoplock.IGetShopLockManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getDevice' : function(multilevelname, deviceId, gs_silent) {\n        var data = {\n            args : {\n                deviceId : JSON.stringify(deviceId),\n            },\n            method: 'getDevice',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.getshoplock.IGetShopLockManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getMasterCodes' : function(multilevelname, gs_silent) {\n        var data = {\n            args : {\n            },\n            method: 'getMasterCodes',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.getshoplock.IGetShopLockManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getUpdatesOnLock' : function(multilevelname, gs_silent) {\n        var data = {\n            args : {\n            },\n            method: 'getUpdatesOnLock',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.getshoplock.IGetShopLockManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'openLock' : function(multilevelname, lockId, gs_silent) {\n        var data = {\n            args : {\n                lockId : JSON.stringify(lockId),\n            },\n            method: 'openLock',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.getshoplock.IGetShopLockManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'pingLock' : function(multilevelname, lockId, gs_silent) {\n        var data = {\n            args : {\n                lockId : JSON.stringify(lockId),\n            },\n            method: 'pingLock',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.getshoplock.IGetShopLockManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'pushCode' : function(multilevelname, id,door,code,start,end, gs_silent) {\n        var data = {\n            args : {\n                id : JSON.stringify(id),\n                door : JSON.stringify(door),\n                code : JSON.stringify(code),\n                start : JSON.stringify(start),\n                end : JSON.stringify(end),\n            },\n            method: 'pushCode',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.getshoplock.IGetShopLockManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'refreshAllLocks' : function(multilevelname, source, gs_silent) {\n        var data = {\n            args : {\n                source : JSON.stringify(source),\n            },\n            method: 'refreshAllLocks',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.getshoplock.IGetShopLockManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'refreshLock' : function(multilevelname, lockId, gs_silent) {\n        var data = {\n            args : {\n                lockId : JSON.stringify(lockId),\n            },\n            method: 'refreshLock',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.getshoplock.IGetShopLockManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'removeAllUnusedLocks' : function(multilevelname, source, gs_silent) {\n        var data = {\n            args : {\n                source : JSON.stringify(source),\n            },\n            method: 'removeAllUnusedLocks',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.getshoplock.IGetShopLockManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'removeCodeOnLock' : function(multilevelname, lockId,room, gs_silent) {\n        var data = {\n            args : {\n                lockId : JSON.stringify(lockId),\n                room : JSON.stringify(room),\n            },\n            method: 'removeCodeOnLock',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.getshoplock.IGetShopLockManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'saveLock' : function(multilevelname, lock, gs_silent) {\n        var data = {\n            args : {\n                lock : JSON.stringify(lock),\n            },\n            method: 'saveLock',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.getshoplock.IGetShopLockManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'saveMastercodes' : function(multilevelname, codes, gs_silent) {\n        var data = {\n            args : {\n                codes : JSON.stringify(codes),\n            },\n            method: 'saveMastercodes',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.getshoplock.IGetShopLockManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'setMasterCode' : function(multilevelname, slot,code, gs_silent) {\n        var data = {\n            args : {\n                slot : JSON.stringify(slot),\n                code : JSON.stringify(code),\n            },\n            method: 'setMasterCode',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.getshoplock.IGetShopLockManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'stopUpdatesOnLock' : function(multilevelname, gs_silent) {\n        var data = {\n            args : {\n            },\n            method: 'stopUpdatesOnLock',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.getshoplock.IGetShopLockManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n}\nGetShopApiWebSocket.InformationScreenManager = function(communication) {\n    this.communication = communication;\n}\n\nGetShopApiWebSocket.InformationScreenManager.prototype = {\n    'addSlider' : function(slider,tvId, gs_silent) {\n        var data = {\n            args : {\n                slider : JSON.stringify(slider),\n                tvId : JSON.stringify(tvId),\n            },\n            method: 'addSlider',\n            interfaceName: 'core.informationscreenmanager.IInformationScreenManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'deleteSlider' : function(sliderId,tvId, gs_silent) {\n        var data = {\n            args : {\n                sliderId : JSON.stringify(sliderId),\n                tvId : JSON.stringify(tvId),\n            },\n            method: 'deleteSlider',\n            interfaceName: 'core.informationscreenmanager.IInformationScreenManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getHolders' : function(gs_silent) {\n        var data = {\n            args : {\n            },\n            method: 'getHolders',\n            interfaceName: 'core.informationscreenmanager.IInformationScreenManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getInformationScreens' : function(gs_silent) {\n        var data = {\n            args : {\n            },\n            method: 'getInformationScreens',\n            interfaceName: 'core.informationscreenmanager.IInformationScreenManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getNews' : function(gs_silent) {\n        var data = {\n            args : {\n            },\n            method: 'getNews',\n            interfaceName: 'core.informationscreenmanager.IInformationScreenManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getScreen' : function(id, gs_silent) {\n        var data = {\n            args : {\n                id : JSON.stringify(id),\n            },\n            method: 'getScreen',\n            interfaceName: 'core.informationscreenmanager.IInformationScreenManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getTypes' : function(gs_silent) {\n        var data = {\n            args : {\n            },\n            method: 'getTypes',\n            interfaceName: 'core.informationscreenmanager.IInformationScreenManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'registerTv' : function(customerId, gs_silent) {\n        var data = {\n            args : {\n                customerId : JSON.stringify(customerId),\n            },\n            method: 'registerTv',\n            interfaceName: 'core.informationscreenmanager.IInformationScreenManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'saveTv' : function(tv, gs_silent) {\n        var data = {\n            args : {\n                tv : JSON.stringify(tv),\n            },\n            method: 'saveTv',\n            interfaceName: 'core.informationscreenmanager.IInformationScreenManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n}\nGetShopApiWebSocket.ListManager = function(communication) {\n    this.communication = communication;\n}\n\nGetShopApiWebSocket.ListManager.prototype = {\n    'addEntry' : function(listId,entry,parentPageId, gs_silent) {\n        var data = {\n            args : {\n                listId : JSON.stringify(listId),\n                entry : JSON.stringify(entry),\n                parentPageId : JSON.stringify(parentPageId),\n            },\n            method: 'addEntry',\n            interfaceName: 'core.listmanager.IListManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'addUnsecureEntry' : function(listId,entry, gs_silent) {\n        var data = {\n            args : {\n                listId : JSON.stringify(listId),\n                entry : JSON.stringify(entry),\n            },\n            method: 'addUnsecureEntry',\n            interfaceName: 'core.listmanager.IListManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'askConfirmationOnEntry' : function(entryId,text, gs_silent) {\n        var data = {\n            args : {\n                entryId : JSON.stringify(entryId),\n                text : JSON.stringify(text),\n            },\n            method: 'askConfirmationOnEntry',\n            interfaceName: 'core.listmanager.IListManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'clearList' : function(listId, gs_silent) {\n        var data = {\n            args : {\n                listId : JSON.stringify(listId),\n            },\n            method: 'clearList',\n            interfaceName: 'core.listmanager.IListManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'combineList' : function(toListId,newListId, gs_silent) {\n        var data = {\n            args : {\n                toListId : JSON.stringify(toListId),\n                newListId : JSON.stringify(newListId),\n            },\n            method: 'combineList',\n            interfaceName: 'core.listmanager.IListManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'confirmEntry' : function(entryId, gs_silent) {\n        var data = {\n            args : {\n                entryId : JSON.stringify(entryId),\n            },\n            method: 'confirmEntry',\n            interfaceName: 'core.listmanager.IListManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'createListId' : function(gs_silent) {\n        var data = {\n            args : {\n            },\n            method: 'createListId',\n            interfaceName: 'core.listmanager.IListManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'createMenuList' : function(menuApplicationId, gs_silent) {\n        var data = {\n            args : {\n                menuApplicationId : JSON.stringify(menuApplicationId),\n            },\n            method: 'createMenuList',\n            interfaceName: 'core.listmanager.IListManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'deleteEntry' : function(id,listId, gs_silent) {\n        var data = {\n            args : {\n                id : JSON.stringify(id),\n                listId : JSON.stringify(listId),\n            },\n            method: 'deleteEntry',\n            interfaceName: 'core.listmanager.IListManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'deleteMenu' : function(appId,listId, gs_silent) {\n        var data = {\n            args : {\n                appId : JSON.stringify(appId),\n                listId : JSON.stringify(listId),\n            },\n            method: 'deleteMenu',\n            interfaceName: 'core.listmanager.IListManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getAllListsByType' : function(type, gs_silent) {\n        var data = {\n            args : {\n                type : JSON.stringify(type),\n            },\n            method: 'getAllListsByType',\n            interfaceName: 'core.listmanager.IListManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getCombinedLists' : function(listId, gs_silent) {\n        var data = {\n            args : {\n                listId : JSON.stringify(listId),\n            },\n            method: 'getCombinedLists',\n            interfaceName: 'core.listmanager.IListManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getEntryByPageId' : function(pageId, gs_silent) {\n        var data = {\n            args : {\n                pageId : JSON.stringify(pageId),\n            },\n            method: 'getEntryByPageId',\n            interfaceName: 'core.listmanager.IListManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getJSTreeNode' : function(nodeId, gs_silent) {\n        var data = {\n            args : {\n                nodeId : JSON.stringify(nodeId),\n            },\n            method: 'getJSTreeNode',\n            interfaceName: 'core.listmanager.IListManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getJsTree' : function(name, gs_silent) {\n        var data = {\n            args : {\n                name : JSON.stringify(name),\n            },\n            method: 'getJsTree',\n            interfaceName: 'core.listmanager.IListManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getList' : function(listId, gs_silent) {\n        var data = {\n            args : {\n                listId : JSON.stringify(listId),\n            },\n            method: 'getList',\n            interfaceName: 'core.listmanager.IListManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getListEntry' : function(id, gs_silent) {\n        var data = {\n            args : {\n                id : JSON.stringify(id),\n            },\n            method: 'getListEntry',\n            interfaceName: 'core.listmanager.IListManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getLists' : function(gs_silent) {\n        var data = {\n            args : {\n            },\n            method: 'getLists',\n            interfaceName: 'core.listmanager.IListManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getMenues' : function(applicationInstanceId, gs_silent) {\n        var data = {\n            args : {\n                applicationInstanceId : JSON.stringify(applicationInstanceId),\n            },\n            method: 'getMenues',\n            interfaceName: 'core.listmanager.IListManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getPageIdByName' : function(name, gs_silent) {\n        var data = {\n            args : {\n                name : JSON.stringify(name),\n            },\n            method: 'getPageIdByName',\n            interfaceName: 'core.listmanager.IListManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'orderEntry' : function(id,after,parentId, gs_silent) {\n        var data = {\n            args : {\n                id : JSON.stringify(id),\n                after : JSON.stringify(after),\n                parentId : JSON.stringify(parentId),\n            },\n            method: 'orderEntry',\n            interfaceName: 'core.listmanager.IListManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'saveJsTree' : function(name,list, gs_silent) {\n        var data = {\n            args : {\n                name : JSON.stringify(name),\n                list : JSON.stringify(list),\n            },\n            method: 'saveJsTree',\n            interfaceName: 'core.listmanager.IListManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'saveMenu' : function(appId,listId,entries,name, gs_silent) {\n        var data = {\n            args : {\n                appId : JSON.stringify(appId),\n                listId : JSON.stringify(listId),\n                entries : JSON.stringify(entries),\n                name : JSON.stringify(name),\n            },\n            method: 'saveMenu',\n            interfaceName: 'core.listmanager.IListManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'setEntries' : function(listId,entries, gs_silent) {\n        var data = {\n            args : {\n                listId : JSON.stringify(listId),\n                entries : JSON.stringify(entries),\n            },\n            method: 'setEntries',\n            interfaceName: 'core.listmanager.IListManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'translateEntries' : function(entryIds, gs_silent) {\n        var data = {\n            args : {\n                entryIds : JSON.stringify(entryIds),\n            },\n            method: 'translateEntries',\n            interfaceName: 'core.listmanager.IListManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'unCombineList' : function(fromListId,toRemoveId, gs_silent) {\n        var data = {\n            args : {\n                fromListId : JSON.stringify(fromListId),\n                toRemoveId : JSON.stringify(toRemoveId),\n            },\n            method: 'unCombineList',\n            interfaceName: 'core.listmanager.IListManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'updateEntry' : function(entry, gs_silent) {\n        var data = {\n            args : {\n                entry : JSON.stringify(entry),\n            },\n            method: 'updateEntry',\n            interfaceName: 'core.listmanager.IListManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n}\nGetShopApiWebSocket.MecaManager = function(communication) {\n    this.communication = communication;\n}\n\nGetShopApiWebSocket.MecaManager.prototype = {\n    'answerControlRequest' : function(carId,answer, gs_silent) {\n        var data = {\n            args : {\n                carId : JSON.stringify(carId),\n                answer : JSON.stringify(answer),\n            },\n            method: 'answerControlRequest',\n            interfaceName: 'core.mecamanager.IMecaManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'answerServiceRequest' : function(carId,answer, gs_silent) {\n        var data = {\n            args : {\n                carId : JSON.stringify(carId),\n                answer : JSON.stringify(answer),\n            },\n            method: 'answerServiceRequest',\n            interfaceName: 'core.mecamanager.IMecaManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'callMe' : function(cellPhone, gs_silent) {\n        var data = {\n            args : {\n                cellPhone : JSON.stringify(cellPhone),\n            },\n            method: 'callMe',\n            interfaceName: 'core.mecamanager.IMecaManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'createFleet' : function(fleet, gs_silent) {\n        var data = {\n            args : {\n                fleet : JSON.stringify(fleet),\n            },\n            method: 'createFleet',\n            interfaceName: 'core.mecamanager.IMecaManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'deleteCar' : function(carId, gs_silent) {\n        var data = {\n            args : {\n                carId : JSON.stringify(carId),\n            },\n            method: 'deleteCar',\n            interfaceName: 'core.mecamanager.IMecaManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'deleteFleet' : function(fleetId, gs_silent) {\n        var data = {\n            args : {\n                fleetId : JSON.stringify(fleetId),\n            },\n            method: 'deleteFleet',\n            interfaceName: 'core.mecamanager.IMecaManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getBase64ExcelReport' : function(pageId, gs_silent) {\n        var data = {\n            args : {\n                pageId : JSON.stringify(pageId),\n            },\n            method: 'getBase64ExcelReport',\n            interfaceName: 'core.mecamanager.IMecaManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getCar' : function(id, gs_silent) {\n        var data = {\n            args : {\n                id : JSON.stringify(id),\n            },\n            method: 'getCar',\n            interfaceName: 'core.mecamanager.IMecaManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getCarByPageId' : function(pageId, gs_silent) {\n        var data = {\n            args : {\n                pageId : JSON.stringify(pageId),\n            },\n            method: 'getCarByPageId',\n            interfaceName: 'core.mecamanager.IMecaManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getCarsByCellphone' : function(cellPhone, gs_silent) {\n        var data = {\n            args : {\n                cellPhone : JSON.stringify(cellPhone),\n            },\n            method: 'getCarsByCellphone',\n            interfaceName: 'core.mecamanager.IMecaManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getCarsForMecaFleet' : function(pageId, gs_silent) {\n        var data = {\n            args : {\n                pageId : JSON.stringify(pageId),\n            },\n            method: 'getCarsForMecaFleet',\n            interfaceName: 'core.mecamanager.IMecaManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getCarsPKKList' : function(gs_silent) {\n        var data = {\n            args : {\n            },\n            method: 'getCarsPKKList',\n            interfaceName: 'core.mecamanager.IMecaManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getCarsServiceList' : function(needService, gs_silent) {\n        var data = {\n            args : {\n                needService : JSON.stringify(needService),\n            },\n            method: 'getCarsServiceList',\n            interfaceName: 'core.mecamanager.IMecaManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getFleetByCar' : function(car, gs_silent) {\n        var data = {\n            args : {\n                car : JSON.stringify(car),\n            },\n            method: 'getFleetByCar',\n            interfaceName: 'core.mecamanager.IMecaManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getFleetPageId' : function(pageId, gs_silent) {\n        var data = {\n            args : {\n                pageId : JSON.stringify(pageId),\n            },\n            method: 'getFleetPageId',\n            interfaceName: 'core.mecamanager.IMecaManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getFleets' : function(gs_silent) {\n        var data = {\n            args : {\n            },\n            method: 'getFleets',\n            interfaceName: 'core.mecamanager.IMecaManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'markControlAsCompleted' : function(carId, gs_silent) {\n        var data = {\n            args : {\n                carId : JSON.stringify(carId),\n            },\n            method: 'markControlAsCompleted',\n            interfaceName: 'core.mecamanager.IMecaManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'noShowPkk' : function(carId, gs_silent) {\n        var data = {\n            args : {\n                carId : JSON.stringify(carId),\n            },\n            method: 'noShowPkk',\n            interfaceName: 'core.mecamanager.IMecaManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'noShowService' : function(carId, gs_silent) {\n        var data = {\n            args : {\n                carId : JSON.stringify(carId),\n            },\n            method: 'noShowService',\n            interfaceName: 'core.mecamanager.IMecaManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'notifyByPush' : function(phoneNumber,message, gs_silent) {\n        var data = {\n            args : {\n                phoneNumber : JSON.stringify(phoneNumber),\n                message : JSON.stringify(message),\n            },\n            method: 'notifyByPush',\n            interfaceName: 'core.mecamanager.IMecaManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'registerDeviceToCar' : function(deviceId,cellPhone, gs_silent) {\n        var data = {\n            args : {\n                deviceId : JSON.stringify(deviceId),\n                cellPhone : JSON.stringify(cellPhone),\n            },\n            method: 'registerDeviceToCar',\n            interfaceName: 'core.mecamanager.IMecaManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'requestNextControl' : function(carId,date, gs_silent) {\n        var data = {\n            args : {\n                carId : JSON.stringify(carId),\n                date : JSON.stringify(date),\n            },\n            method: 'requestNextControl',\n            interfaceName: 'core.mecamanager.IMecaManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'requestNextService' : function(carId,date, gs_silent) {\n        var data = {\n            args : {\n                carId : JSON.stringify(carId),\n                date : JSON.stringify(date),\n            },\n            method: 'requestNextService',\n            interfaceName: 'core.mecamanager.IMecaManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'resetServiceInterval' : function(carId,date,kilometers, gs_silent) {\n        var data = {\n            args : {\n                carId : JSON.stringify(carId),\n                date : JSON.stringify(date),\n                kilometers : JSON.stringify(kilometers),\n            },\n            method: 'resetServiceInterval',\n            interfaceName: 'core.mecamanager.IMecaManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'runNotificationCheck' : function(gs_silent) {\n        var data = {\n            args : {\n            },\n            method: 'runNotificationCheck',\n            interfaceName: 'core.mecamanager.IMecaManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'saveFleet' : function(fleet, gs_silent) {\n        var data = {\n            args : {\n                fleet : JSON.stringify(fleet),\n            },\n            method: 'saveFleet',\n            interfaceName: 'core.mecamanager.IMecaManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'saveFleetCar' : function(pageId,car, gs_silent) {\n        var data = {\n            args : {\n                pageId : JSON.stringify(pageId),\n                car : JSON.stringify(car),\n            },\n            method: 'saveFleetCar',\n            interfaceName: 'core.mecamanager.IMecaManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'saveMecaFleetSettings' : function(settings, gs_silent) {\n        var data = {\n            args : {\n                settings : JSON.stringify(settings),\n            },\n            method: 'saveMecaFleetSettings',\n            interfaceName: 'core.mecamanager.IMecaManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'sendEmail' : function(cellPhone,message, gs_silent) {\n        var data = {\n            args : {\n                cellPhone : JSON.stringify(cellPhone),\n                message : JSON.stringify(message),\n            },\n            method: 'sendEmail',\n            interfaceName: 'core.mecamanager.IMecaManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'sendInvite' : function(mecaCarId, gs_silent) {\n        var data = {\n            args : {\n                mecaCarId : JSON.stringify(mecaCarId),\n            },\n            method: 'sendInvite',\n            interfaceName: 'core.mecamanager.IMecaManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'sendKilometerRequest' : function(carId, gs_silent) {\n        var data = {\n            args : {\n                carId : JSON.stringify(carId),\n            },\n            method: 'sendKilometerRequest',\n            interfaceName: 'core.mecamanager.IMecaManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'sendKilometers' : function(cellPhone,kilometers, gs_silent) {\n        var data = {\n            args : {\n                cellPhone : JSON.stringify(cellPhone),\n                kilometers : JSON.stringify(kilometers),\n            },\n            method: 'sendKilometers',\n            interfaceName: 'core.mecamanager.IMecaManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'sendNotificationToStoreOwner' : function(gs_silent) {\n        var data = {\n            args : {\n            },\n            method: 'sendNotificationToStoreOwner',\n            interfaceName: 'core.mecamanager.IMecaManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'suggestDate' : function(carId,date, gs_silent) {\n        var data = {\n            args : {\n                carId : JSON.stringify(carId),\n                date : JSON.stringify(date),\n            },\n            method: 'suggestDate',\n            interfaceName: 'core.mecamanager.IMecaManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n}\nGetShopApiWebSocket.MekonomenManager = function(communication) {\n    this.communication = communication;\n}\n\nGetShopApiWebSocket.MekonomenManager.prototype = {\n    'searchForUser' : function(name, gs_silent) {\n        var data = {\n            args : {\n                name : JSON.stringify(name),\n            },\n            method: 'searchForUser',\n            interfaceName: 'core.mekonomen.IMekonomenManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n}\nGetShopApiWebSocket.MessageManager = function(communication) {\n    this.communication = communication;\n}\n\nGetShopApiWebSocket.MessageManager.prototype = {\n    'collectEmail' : function(email, gs_silent) {\n        var data = {\n            args : {\n                email : JSON.stringify(email),\n            },\n            method: 'collectEmail',\n            interfaceName: 'core.messagemanager.IMessageManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getAllSmsMessages' : function(start,end, gs_silent) {\n        var data = {\n            args : {\n                start : JSON.stringify(start),\n                end : JSON.stringify(end),\n            },\n            method: 'getAllSmsMessages',\n            interfaceName: 'core.messagemanager.IMessageManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getCollectedEmails' : function(gs_silent) {\n        var data = {\n            args : {\n            },\n            method: 'getCollectedEmails',\n            interfaceName: 'core.messagemanager.IMessageManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getMailMessage' : function(mailMessageId, gs_silent) {\n        var data = {\n            args : {\n                mailMessageId : JSON.stringify(mailMessageId),\n            },\n            method: 'getMailMessage',\n            interfaceName: 'core.messagemanager.IMessageManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getMailSent' : function(from,to,toEmailAddress, gs_silent) {\n        var data = {\n            args : {\n                from : JSON.stringify(from),\n                to : JSON.stringify(to),\n                toEmailAddress : JSON.stringify(toEmailAddress),\n            },\n            method: 'getMailSent',\n            interfaceName: 'core.messagemanager.IMessageManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getSmsCount' : function(year,month, gs_silent) {\n        var data = {\n            args : {\n                year : JSON.stringify(year),\n                month : JSON.stringify(month),\n            },\n            method: 'getSmsCount',\n            interfaceName: 'core.messagemanager.IMessageManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getSmsMessage' : function(smsMessageId, gs_silent) {\n        var data = {\n            args : {\n                smsMessageId : JSON.stringify(smsMessageId),\n            },\n            method: 'getSmsMessage',\n            interfaceName: 'core.messagemanager.IMessageManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'sendMail' : function(to,toName,subject,content,from,fromName, gs_silent) {\n        var data = {\n            args : {\n                to : JSON.stringify(to),\n                toName : JSON.stringify(toName),\n                subject : JSON.stringify(subject),\n                content : JSON.stringify(content),\n                from : JSON.stringify(from),\n                fromName : JSON.stringify(fromName),\n            },\n            method: 'sendMail',\n            interfaceName: 'core.messagemanager.IMessageManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'sendMailWithAttachments' : function(to,toName,subject,content,from,fromName,attachments, gs_silent) {\n        var data = {\n            args : {\n                to : JSON.stringify(to),\n                toName : JSON.stringify(toName),\n                subject : JSON.stringify(subject),\n                content : JSON.stringify(content),\n                from : JSON.stringify(from),\n                fromName : JSON.stringify(fromName),\n                attachments : JSON.stringify(attachments),\n            },\n            method: 'sendMailWithAttachments',\n            interfaceName: 'core.messagemanager.IMessageManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'sendMessageToStoreOwner' : function(message,subject, gs_silent) {\n        var data = {\n            args : {\n                message : JSON.stringify(message),\n                subject : JSON.stringify(subject),\n            },\n            method: 'sendMessageToStoreOwner',\n            interfaceName: 'core.messagemanager.IMessageManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n}\nGetShopApiWebSocket.NewsLetterManager = function(communication) {\n    this.communication = communication;\n}\n\nGetShopApiWebSocket.NewsLetterManager.prototype = {\n    'sendNewsLetter' : function(group, gs_silent) {\n        var data = {\n            args : {\n                group : JSON.stringify(group),\n            },\n            method: 'sendNewsLetter',\n            interfaceName: 'core.messagemanager.INewsLetterManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'sendNewsLetterPreview' : function(group, gs_silent) {\n        var data = {\n            args : {\n                group : JSON.stringify(group),\n            },\n            method: 'sendNewsLetterPreview',\n            interfaceName: 'core.messagemanager.INewsLetterManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n}\nGetShopApiWebSocket.MobileManager = function(communication) {\n    this.communication = communication;\n}\n\nGetShopApiWebSocket.MobileManager.prototype = {\n    'clearBadged' : function(tokenId, gs_silent) {\n        var data = {\n            args : {\n                tokenId : JSON.stringify(tokenId),\n            },\n            method: 'clearBadged',\n            interfaceName: 'core.mobilemanager.IMobileManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'registerToken' : function(token, gs_silent) {\n        var data = {\n            args : {\n                token : JSON.stringify(token),\n            },\n            method: 'registerToken',\n            interfaceName: 'core.mobilemanager.IMobileManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'sendMessageToAll' : function(message, gs_silent) {\n        var data = {\n            args : {\n                message : JSON.stringify(message),\n            },\n            method: 'sendMessageToAll',\n            interfaceName: 'core.mobilemanager.IMobileManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'sendMessageToAllTestUnits' : function(message, gs_silent) {\n        var data = {\n            args : {\n                message : JSON.stringify(message),\n            },\n            method: 'sendMessageToAllTestUnits',\n            interfaceName: 'core.mobilemanager.IMobileManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n}\nGetShopApiWebSocket.OrderManager = function(communication) {\n    this.communication = communication;\n}\n\nGetShopApiWebSocket.OrderManager.prototype = {\n    'addClosedPeriode' : function(closed, gs_silent) {\n        var data = {\n            args : {\n                closed : JSON.stringify(closed),\n            },\n            method: 'addClosedPeriode',\n            interfaceName: 'core.ordermanager.IOrderManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'addProductToOrder' : function(orderId,productId,count, gs_silent) {\n        var data = {\n            args : {\n                orderId : JSON.stringify(orderId),\n                productId : JSON.stringify(productId),\n                count : JSON.stringify(count),\n            },\n            method: 'addProductToOrder',\n            interfaceName: 'core.ordermanager.IOrderManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'changeOrderStatus' : function(id,status, gs_silent) {\n        var data = {\n            args : {\n                id : JSON.stringify(id),\n                status : JSON.stringify(status),\n            },\n            method: 'changeOrderStatus',\n            interfaceName: 'core.ordermanager.IOrderManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'changeOrderType' : function(orderId,paymentTypeId, gs_silent) {\n        var data = {\n            args : {\n                orderId : JSON.stringify(orderId),\n                paymentTypeId : JSON.stringify(paymentTypeId),\n            },\n            method: 'changeOrderType',\n            interfaceName: 'core.ordermanager.IOrderManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'checkForOrdersToAutoPay' : function(daysToTryAfterOrderHasStarted, gs_silent) {\n        var data = {\n            args : {\n                daysToTryAfterOrderHasStarted : JSON.stringify(daysToTryAfterOrderHasStarted),\n            },\n            method: 'checkForOrdersToAutoPay',\n            interfaceName: 'core.ordermanager.IOrderManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'checkForOrdersToCapture' : function(gs_silent) {\n        var data = {\n            args : {\n            },\n            method: 'checkForOrdersToCapture',\n            interfaceName: 'core.ordermanager.IOrderManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'createOrder' : function(address, gs_silent) {\n        var data = {\n            args : {\n                address : JSON.stringify(address),\n            },\n            method: 'createOrder',\n            interfaceName: 'core.ordermanager.IOrderManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'createOrderByCustomerReference' : function(referenceKey, gs_silent) {\n        var data = {\n            args : {\n                referenceKey : JSON.stringify(referenceKey),\n            },\n            method: 'createOrderByCustomerReference',\n            interfaceName: 'core.ordermanager.IOrderManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'createOrderForUser' : function(userId, gs_silent) {\n        var data = {\n            args : {\n                userId : JSON.stringify(userId),\n            },\n            method: 'createOrderForUser',\n            interfaceName: 'core.ordermanager.IOrderManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'createRegisterCardOrder' : function(paymentType, gs_silent) {\n        var data = {\n            args : {\n                paymentType : JSON.stringify(paymentType),\n            },\n            method: 'createRegisterCardOrder',\n            interfaceName: 'core.ordermanager.IOrderManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'creditOrder' : function(orderId, gs_silent) {\n        var data = {\n            args : {\n                orderId : JSON.stringify(orderId),\n            },\n            method: 'creditOrder',\n            interfaceName: 'core.ordermanager.IOrderManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'deleteAllVirtualOrders' : function(gs_silent) {\n        var data = {\n            args : {\n            },\n            method: 'deleteAllVirtualOrders',\n            interfaceName: 'core.ordermanager.IOrderManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'forceDeleteOrder' : function(orderId,password, gs_silent) {\n        var data = {\n            args : {\n                orderId : JSON.stringify(orderId),\n                password : JSON.stringify(password),\n            },\n            method: 'forceDeleteOrder',\n            interfaceName: 'core.ordermanager.IOrderManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getAllOrdersForUser' : function(userId, gs_silent) {\n        var data = {\n            args : {\n                userId : JSON.stringify(userId),\n            },\n            method: 'getAllOrdersForUser',\n            interfaceName: 'core.ordermanager.IOrderManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getAllOrdersOnProduct' : function(productId, gs_silent) {\n        var data = {\n            args : {\n                productId : JSON.stringify(productId),\n            },\n            method: 'getAllOrdersOnProduct',\n            interfaceName: 'core.ordermanager.IOrderManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getAllUnpaid' : function(paymentMethod, gs_silent) {\n        var data = {\n            args : {\n                paymentMethod : JSON.stringify(paymentMethod),\n            },\n            method: 'getAllUnpaid',\n            interfaceName: 'core.ordermanager.IOrderManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getAllUnpaidInvoices' : function(gs_silent) {\n        var data = {\n            args : {\n            },\n            method: 'getAllUnpaidInvoices',\n            interfaceName: 'core.ordermanager.IOrderManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getItemDates' : function(start,end, gs_silent) {\n        var data = {\n            args : {\n                start : JSON.stringify(start),\n                end : JSON.stringify(end),\n            },\n            method: 'getItemDates',\n            interfaceName: 'core.ordermanager.IOrderManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getMostSoldProducts' : function(numberOfProducts, gs_silent) {\n        var data = {\n            args : {\n                numberOfProducts : JSON.stringify(numberOfProducts),\n            },\n            method: 'getMostSoldProducts',\n            interfaceName: 'core.ordermanager.IOrderManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getMyPrefferedPaymentMethod' : function(gs_silent) {\n        var data = {\n            args : {\n            },\n            method: 'getMyPrefferedPaymentMethod',\n            interfaceName: 'core.ordermanager.IOrderManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getOrder' : function(orderId, gs_silent) {\n        var data = {\n            args : {\n                orderId : JSON.stringify(orderId),\n            },\n            method: 'getOrder',\n            interfaceName: 'core.ordermanager.IOrderManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getOrderByReference' : function(referenceId, gs_silent) {\n        var data = {\n            args : {\n                referenceId : JSON.stringify(referenceId),\n            },\n            method: 'getOrderByReference',\n            interfaceName: 'core.ordermanager.IOrderManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getOrderByincrementOrderId' : function(id, gs_silent) {\n        var data = {\n            args : {\n                id : JSON.stringify(id),\n            },\n            method: 'getOrderByincrementOrderId',\n            interfaceName: 'core.ordermanager.IOrderManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getOrderSecure' : function(orderId, gs_silent) {\n        var data = {\n            args : {\n                orderId : JSON.stringify(orderId),\n            },\n            method: 'getOrderSecure',\n            interfaceName: 'core.ordermanager.IOrderManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getOrders' : function(orderIds,page,pageSize, gs_silent) {\n        var data = {\n            args : {\n                orderIds : JSON.stringify(orderIds),\n                page : JSON.stringify(page),\n                pageSize : JSON.stringify(pageSize),\n            },\n            method: 'getOrders',\n            interfaceName: 'core.ordermanager.IOrderManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getOrdersFiltered' : function(filterOptions, gs_silent) {\n        var data = {\n            args : {\n                filterOptions : JSON.stringify(filterOptions),\n            },\n            method: 'getOrdersFiltered',\n            interfaceName: 'core.ordermanager.IOrderManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getOrdersFromPeriode' : function(start,end,statistics, gs_silent) {\n        var data = {\n            args : {\n                start : JSON.stringify(start),\n                end : JSON.stringify(end),\n                statistics : JSON.stringify(statistics),\n            },\n            method: 'getOrdersFromPeriode',\n            interfaceName: 'core.ordermanager.IOrderManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getOrdersNotTransferredToAccountingSystem' : function(gs_silent) {\n        var data = {\n            args : {\n            },\n            method: 'getOrdersNotTransferredToAccountingSystem',\n            interfaceName: 'core.ordermanager.IOrderManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getOrdersPaid' : function(paymentId,userId,from,to, gs_silent) {\n        var data = {\n            args : {\n                paymentId : JSON.stringify(paymentId),\n                userId : JSON.stringify(userId),\n                from : JSON.stringify(from),\n                to : JSON.stringify(to),\n            },\n            method: 'getOrdersPaid',\n            interfaceName: 'core.ordermanager.IOrderManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getOrdersToCapture' : function(gs_silent) {\n        var data = {\n            args : {\n            },\n            method: 'getOrdersToCapture',\n            interfaceName: 'core.ordermanager.IOrderManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getPageCount' : function(pageSize,searchWord, gs_silent) {\n        var data = {\n            args : {\n                pageSize : JSON.stringify(pageSize),\n                searchWord : JSON.stringify(searchWord),\n            },\n            method: 'getPageCount',\n            interfaceName: 'core.ordermanager.IOrderManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getSalesNumber' : function(year, gs_silent) {\n        var data = {\n            args : {\n                year : JSON.stringify(year),\n            },\n            method: 'getSalesNumber',\n            interfaceName: 'core.ordermanager.IOrderManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getSalesStatistics' : function(startDate,endDate,type, gs_silent) {\n        var data = {\n            args : {\n                startDate : JSON.stringify(startDate),\n                endDate : JSON.stringify(endDate),\n                type : JSON.stringify(type),\n            },\n            method: 'getSalesStatistics',\n            interfaceName: 'core.ordermanager.IOrderManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getStorePreferredPayementMethod' : function(gs_silent) {\n        var data = {\n            args : {\n            },\n            method: 'getStorePreferredPayementMethod',\n            interfaceName: 'core.ordermanager.IOrderManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getTaxes' : function(order, gs_silent) {\n        var data = {\n            args : {\n                order : JSON.stringify(order),\n            },\n            method: 'getTaxes',\n            interfaceName: 'core.ordermanager.IOrderManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getTotalAmount' : function(order, gs_silent) {\n        var data = {\n            args : {\n                order : JSON.stringify(order),\n            },\n            method: 'getTotalAmount',\n            interfaceName: 'core.ordermanager.IOrderManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getTotalAmountExTaxes' : function(order, gs_silent) {\n        var data = {\n            args : {\n                order : JSON.stringify(order),\n            },\n            method: 'getTotalAmountExTaxes',\n            interfaceName: 'core.ordermanager.IOrderManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getTotalForOrderById' : function(orderId, gs_silent) {\n        var data = {\n            args : {\n                orderId : JSON.stringify(orderId),\n            },\n            method: 'getTotalForOrderById',\n            interfaceName: 'core.ordermanager.IOrderManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getTotalSalesAmount' : function(year,month,week,day,type, gs_silent) {\n        var data = {\n            args : {\n                year : JSON.stringify(year),\n                month : JSON.stringify(month),\n                week : JSON.stringify(week),\n                day : JSON.stringify(day),\n                type : JSON.stringify(type),\n            },\n            method: 'getTotalSalesAmount',\n            interfaceName: 'core.ordermanager.IOrderManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getUserPrefferedPaymentMethod' : function(userId, gs_silent) {\n        var data = {\n            args : {\n                userId : JSON.stringify(userId),\n            },\n            method: 'getUserPrefferedPaymentMethod',\n            interfaceName: 'core.ordermanager.IOrderManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'logTransactionEntry' : function(orderId,entry, gs_silent) {\n        var data = {\n            args : {\n                orderId : JSON.stringify(orderId),\n                entry : JSON.stringify(entry),\n            },\n            method: 'logTransactionEntry',\n            interfaceName: 'core.ordermanager.IOrderManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'markAsInvoicePayment' : function(orderId, gs_silent) {\n        var data = {\n            args : {\n                orderId : JSON.stringify(orderId),\n            },\n            method: 'markAsInvoicePayment',\n            interfaceName: 'core.ordermanager.IOrderManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'markAsPaid' : function(orderId,date, gs_silent) {\n        var data = {\n            args : {\n                orderId : JSON.stringify(orderId),\n                date : JSON.stringify(date),\n            },\n            method: 'markAsPaid',\n            interfaceName: 'core.ordermanager.IOrderManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'mergeAndCreateNewOrder' : function(userId,orderIds,paymentMethod,note, gs_silent) {\n        var data = {\n            args : {\n                userId : JSON.stringify(userId),\n                orderIds : JSON.stringify(orderIds),\n                paymentMethod : JSON.stringify(paymentMethod),\n                note : JSON.stringify(note),\n            },\n            method: 'mergeAndCreateNewOrder',\n            interfaceName: 'core.ordermanager.IOrderManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'payWithCard' : function(orderId,cardId, gs_silent) {\n        var data = {\n            args : {\n                orderId : JSON.stringify(orderId),\n                cardId : JSON.stringify(cardId),\n            },\n            method: 'payWithCard',\n            interfaceName: 'core.ordermanager.IOrderManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'printInvoice' : function(orderId,printerId, gs_silent) {\n        var data = {\n            args : {\n                orderId : JSON.stringify(orderId),\n                printerId : JSON.stringify(printerId),\n            },\n            method: 'printInvoice',\n            interfaceName: 'core.ordermanager.IOrderManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'saveOrder' : function(order, gs_silent) {\n        var data = {\n            args : {\n                order : JSON.stringify(order),\n            },\n            method: 'saveOrder',\n            interfaceName: 'core.ordermanager.IOrderManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'searchForOrders' : function(searchWord,page,pageSize, gs_silent) {\n        var data = {\n            args : {\n                searchWord : JSON.stringify(searchWord),\n                page : JSON.stringify(page),\n                pageSize : JSON.stringify(pageSize),\n            },\n            method: 'searchForOrders',\n            interfaceName: 'core.ordermanager.IOrderManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'sendReciept' : function(orderId,email, gs_silent) {\n        var data = {\n            args : {\n                orderId : JSON.stringify(orderId),\n                email : JSON.stringify(email),\n            },\n            method: 'sendReciept',\n            interfaceName: 'core.ordermanager.IOrderManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'sendRecieptWithText' : function(orderId,email,subject,text, gs_silent) {\n        var data = {\n            args : {\n                orderId : JSON.stringify(orderId),\n                email : JSON.stringify(email),\n                subject : JSON.stringify(subject),\n                text : JSON.stringify(text),\n            },\n            method: 'sendRecieptWithText',\n            interfaceName: 'core.ordermanager.IOrderManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'setExternalRefOnCartItem' : function(cartItem,externalId, gs_silent) {\n        var data = {\n            args : {\n                cartItem : JSON.stringify(cartItem),\n                externalId : JSON.stringify(externalId),\n            },\n            method: 'setExternalRefOnCartItem',\n            interfaceName: 'core.ordermanager.IOrderManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'setOrderStatus' : function(password,orderId,currency,price,status, gs_silent) {\n        var data = {\n            args : {\n                password : JSON.stringify(password),\n                orderId : JSON.stringify(orderId),\n                currency : JSON.stringify(currency),\n                price : JSON.stringify(price),\n                status : JSON.stringify(status),\n            },\n            method: 'setOrderStatus',\n            interfaceName: 'core.ordermanager.IOrderManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'updateCountForOrderLine' : function(cartItemId,orderId,count, gs_silent) {\n        var data = {\n            args : {\n                cartItemId : JSON.stringify(cartItemId),\n                orderId : JSON.stringify(orderId),\n                count : JSON.stringify(count),\n            },\n            method: 'updateCountForOrderLine',\n            interfaceName: 'core.ordermanager.IOrderManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'updatePriceForOrderLine' : function(cartItemId,orderId,price, gs_silent) {\n        var data = {\n            args : {\n                cartItemId : JSON.stringify(cartItemId),\n                orderId : JSON.stringify(orderId),\n                price : JSON.stringify(price),\n            },\n            method: 'updatePriceForOrderLine',\n            interfaceName: 'core.ordermanager.IOrderManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n}\nGetShopApiWebSocket.PageManager = function(communication) {\n    this.communication = communication;\n}\n\nGetShopApiWebSocket.PageManager.prototype = {\n    'accessDenied' : function(pageId, gs_silent) {\n        var data = {\n            args : {\n                pageId : JSON.stringify(pageId),\n            },\n            method: 'accessDenied',\n            interfaceName: 'core.pagemanager.IPageManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'addApplication' : function(applicationId,pageCellId,pageId, gs_silent) {\n        var data = {\n            args : {\n                applicationId : JSON.stringify(applicationId),\n                pageCellId : JSON.stringify(pageCellId),\n                pageId : JSON.stringify(pageId),\n            },\n            method: 'addApplication',\n            interfaceName: 'core.pagemanager.IPageManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'addComment' : function(pageComment, gs_silent) {\n        var data = {\n            args : {\n                pageComment : JSON.stringify(pageComment),\n            },\n            method: 'addComment',\n            interfaceName: 'core.pagemanager.IPageManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'addExistingApplicationToPageArea' : function(pageId,appId,area, gs_silent) {\n        var data = {\n            args : {\n                pageId : JSON.stringify(pageId),\n                appId : JSON.stringify(appId),\n                area : JSON.stringify(area),\n            },\n            method: 'addExistingApplicationToPageArea',\n            interfaceName: 'core.pagemanager.IPageManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'addLayoutCell' : function(pageId,incell,beforecell,direction,area, gs_silent) {\n        var data = {\n            args : {\n                pageId : JSON.stringify(pageId),\n                incell : JSON.stringify(incell),\n                beforecell : JSON.stringify(beforecell),\n                direction : JSON.stringify(direction),\n                area : JSON.stringify(area),\n            },\n            method: 'addLayoutCell',\n            interfaceName: 'core.pagemanager.IPageManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'changePageUserLevel' : function(pageId,userLevel, gs_silent) {\n        var data = {\n            args : {\n                pageId : JSON.stringify(pageId),\n                userLevel : JSON.stringify(userLevel),\n            },\n            method: 'changePageUserLevel',\n            interfaceName: 'core.pagemanager.IPageManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'clearPage' : function(pageId, gs_silent) {\n        var data = {\n            args : {\n                pageId : JSON.stringify(pageId),\n            },\n            method: 'clearPage',\n            interfaceName: 'core.pagemanager.IPageManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'clearPageArea' : function(pageId,pageArea, gs_silent) {\n        var data = {\n            args : {\n                pageId : JSON.stringify(pageId),\n                pageArea : JSON.stringify(pageArea),\n            },\n            method: 'clearPageArea',\n            interfaceName: 'core.pagemanager.IPageManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'createHeaderFooter' : function(type, gs_silent) {\n        var data = {\n            args : {\n                type : JSON.stringify(type),\n            },\n            method: 'createHeaderFooter',\n            interfaceName: 'core.pagemanager.IPageManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'createModal' : function(modalName, gs_silent) {\n        var data = {\n            args : {\n                modalName : JSON.stringify(modalName),\n            },\n            method: 'createModal',\n            interfaceName: 'core.pagemanager.IPageManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'createNewRow' : function(pageId, gs_silent) {\n        var data = {\n            args : {\n                pageId : JSON.stringify(pageId),\n            },\n            method: 'createNewRow',\n            interfaceName: 'core.pagemanager.IPageManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'createPage' : function(gs_silent) {\n        var data = {\n            args : {\n            },\n            method: 'createPage',\n            interfaceName: 'core.pagemanager.IPageManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'deleteApplication' : function(id, gs_silent) {\n        var data = {\n            args : {\n                id : JSON.stringify(id),\n            },\n            method: 'deleteApplication',\n            interfaceName: 'core.pagemanager.IPageManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'deleteComment' : function(commentId, gs_silent) {\n        var data = {\n            args : {\n                commentId : JSON.stringify(commentId),\n            },\n            method: 'deleteComment',\n            interfaceName: 'core.pagemanager.IPageManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'deletePage' : function(id, gs_silent) {\n        var data = {\n            args : {\n                id : JSON.stringify(id),\n            },\n            method: 'deletePage',\n            interfaceName: 'core.pagemanager.IPageManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'dropCell' : function(pageId,cellId, gs_silent) {\n        var data = {\n            args : {\n                pageId : JSON.stringify(pageId),\n                cellId : JSON.stringify(cellId),\n            },\n            method: 'dropCell',\n            interfaceName: 'core.pagemanager.IPageManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'flattenMobileLayout' : function(pageId, gs_silent) {\n        var data = {\n            args : {\n                pageId : JSON.stringify(pageId),\n            },\n            method: 'flattenMobileLayout',\n            interfaceName: 'core.pagemanager.IPageManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getApplications' : function(gs_silent) {\n        var data = {\n            args : {\n            },\n            method: 'getApplications',\n            interfaceName: 'core.pagemanager.IPageManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getApplicationsBasedOnApplicationSettingsId' : function(appSettingsId, gs_silent) {\n        var data = {\n            args : {\n                appSettingsId : JSON.stringify(appSettingsId),\n            },\n            method: 'getApplicationsBasedOnApplicationSettingsId',\n            interfaceName: 'core.pagemanager.IPageManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getApplicationsByPageAreaAndSettingsId' : function(appSettingsId,pageArea, gs_silent) {\n        var data = {\n            args : {\n                appSettingsId : JSON.stringify(appSettingsId),\n                pageArea : JSON.stringify(pageArea),\n            },\n            method: 'getApplicationsByPageAreaAndSettingsId',\n            interfaceName: 'core.pagemanager.IPageManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getApplicationsByType' : function(type, gs_silent) {\n        var data = {\n            args : {\n                type : JSON.stringify(type),\n            },\n            method: 'getApplicationsByType',\n            interfaceName: 'core.pagemanager.IPageManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getApplicationsForPage' : function(pageId, gs_silent) {\n        var data = {\n            args : {\n                pageId : JSON.stringify(pageId),\n            },\n            method: 'getApplicationsForPage',\n            interfaceName: 'core.pagemanager.IPageManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getCell' : function(pageId,cellId, gs_silent) {\n        var data = {\n            args : {\n                pageId : JSON.stringify(pageId),\n                cellId : JSON.stringify(cellId),\n            },\n            method: 'getCell',\n            interfaceName: 'core.pagemanager.IPageManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getComments' : function(pageId, gs_silent) {\n        var data = {\n            args : {\n                pageId : JSON.stringify(pageId),\n            },\n            method: 'getComments',\n            interfaceName: 'core.pagemanager.IPageManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getLeftSideBarNames' : function(gs_silent) {\n        var data = {\n            args : {\n            },\n            method: 'getLeftSideBarNames',\n            interfaceName: 'core.pagemanager.IPageManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getLooseCell' : function(pageId,cellId, gs_silent) {\n        var data = {\n            args : {\n                pageId : JSON.stringify(pageId),\n                cellId : JSON.stringify(cellId),\n            },\n            method: 'getLooseCell',\n            interfaceName: 'core.pagemanager.IPageManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getMobileBody' : function(pageId, gs_silent) {\n        var data = {\n            args : {\n                pageId : JSON.stringify(pageId),\n            },\n            method: 'getMobileBody',\n            interfaceName: 'core.pagemanager.IPageManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getMobileLink' : function(gs_silent) {\n        var data = {\n            args : {\n            },\n            method: 'getMobileLink',\n            interfaceName: 'core.pagemanager.IPageManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getModalNames' : function(gs_silent) {\n        var data = {\n            args : {\n            },\n            method: 'getModalNames',\n            interfaceName: 'core.pagemanager.IPageManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getPage' : function(id, gs_silent) {\n        var data = {\n            args : {\n                id : JSON.stringify(id),\n            },\n            method: 'getPage',\n            interfaceName: 'core.pagemanager.IPageManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getPagesForApplication' : function(appId, gs_silent) {\n        var data = {\n            args : {\n                appId : JSON.stringify(appId),\n            },\n            method: 'getPagesForApplication',\n            interfaceName: 'core.pagemanager.IPageManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getSecuredSettings' : function(applicationInstanceId, gs_silent) {\n        var data = {\n            args : {\n                applicationInstanceId : JSON.stringify(applicationInstanceId),\n            },\n            method: 'getSecuredSettings',\n            interfaceName: 'core.pagemanager.IPageManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getSecuredSettingsInternal' : function(appName, gs_silent) {\n        var data = {\n            args : {\n                appName : JSON.stringify(appName),\n            },\n            method: 'getSecuredSettingsInternal',\n            interfaceName: 'core.pagemanager.IPageManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'linkPageCell' : function(pageId,cellId,link, gs_silent) {\n        var data = {\n            args : {\n                pageId : JSON.stringify(pageId),\n                cellId : JSON.stringify(cellId),\n                link : JSON.stringify(link),\n            },\n            method: 'linkPageCell',\n            interfaceName: 'core.pagemanager.IPageManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'moveCell' : function(pageId,cellId,up, gs_silent) {\n        var data = {\n            args : {\n                pageId : JSON.stringify(pageId),\n                cellId : JSON.stringify(cellId),\n                up : JSON.stringify(up),\n            },\n            method: 'moveCell',\n            interfaceName: 'core.pagemanager.IPageManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'moveCellMobile' : function(pageId,cellId,moveUp, gs_silent) {\n        var data = {\n            args : {\n                pageId : JSON.stringify(pageId),\n                cellId : JSON.stringify(cellId),\n                moveUp : JSON.stringify(moveUp),\n            },\n            method: 'moveCellMobile',\n            interfaceName: 'core.pagemanager.IPageManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'removeAppFromCell' : function(pageId,cellid, gs_silent) {\n        var data = {\n            args : {\n                pageId : JSON.stringify(pageId),\n                cellid : JSON.stringify(cellid),\n            },\n            method: 'removeAppFromCell',\n            interfaceName: 'core.pagemanager.IPageManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'resetMobileLayout' : function(pageId, gs_silent) {\n        var data = {\n            args : {\n                pageId : JSON.stringify(pageId),\n            },\n            method: 'resetMobileLayout',\n            interfaceName: 'core.pagemanager.IPageManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'restoreLayout' : function(pageId,fromTime, gs_silent) {\n        var data = {\n            args : {\n                pageId : JSON.stringify(pageId),\n                fromTime : JSON.stringify(fromTime),\n            },\n            method: 'restoreLayout',\n            interfaceName: 'core.pagemanager.IPageManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'saveApplicationConfiguration' : function(config, gs_silent) {\n        var data = {\n            args : {\n                config : JSON.stringify(config),\n            },\n            method: 'saveApplicationConfiguration',\n            interfaceName: 'core.pagemanager.IPageManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'saveCell' : function(pageId,cell, gs_silent) {\n        var data = {\n            args : {\n                pageId : JSON.stringify(pageId),\n                cell : JSON.stringify(cell),\n            },\n            method: 'saveCell',\n            interfaceName: 'core.pagemanager.IPageManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'saveCellPosition' : function(pageId,cellId,data, gs_silent) {\n        var data = {\n            args : {\n                pageId : JSON.stringify(pageId),\n                cellId : JSON.stringify(cellId),\n                data : JSON.stringify(data),\n            },\n            method: 'saveCellPosition',\n            interfaceName: 'core.pagemanager.IPageManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'saveMobileLink' : function(link, gs_silent) {\n        var data = {\n            args : {\n                link : JSON.stringify(link),\n            },\n            method: 'saveMobileLink',\n            interfaceName: 'core.pagemanager.IPageManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'savePage' : function(page, gs_silent) {\n        var data = {\n            args : {\n                page : JSON.stringify(page),\n            },\n            method: 'savePage',\n            interfaceName: 'core.pagemanager.IPageManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'savePageCellGroupAccess' : function(pageId,cellId,groupAccess, gs_silent) {\n        var data = {\n            args : {\n                pageId : JSON.stringify(pageId),\n                cellId : JSON.stringify(cellId),\n                groupAccess : JSON.stringify(groupAccess),\n            },\n            method: 'savePageCellGroupAccess',\n            interfaceName: 'core.pagemanager.IPageManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'savePageCellSettings' : function(pageId,cellId,settings, gs_silent) {\n        var data = {\n            args : {\n                pageId : JSON.stringify(pageId),\n                cellId : JSON.stringify(cellId),\n                settings : JSON.stringify(settings),\n            },\n            method: 'savePageCellSettings',\n            interfaceName: 'core.pagemanager.IPageManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'setCarouselConfig' : function(pageId,cellId,config, gs_silent) {\n        var data = {\n            args : {\n                pageId : JSON.stringify(pageId),\n                cellId : JSON.stringify(cellId),\n                config : JSON.stringify(config),\n            },\n            method: 'setCarouselConfig',\n            interfaceName: 'core.pagemanager.IPageManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'setCellMode' : function(pageId,cellId,mode, gs_silent) {\n        var data = {\n            args : {\n                pageId : JSON.stringify(pageId),\n                cellId : JSON.stringify(cellId),\n                mode : JSON.stringify(mode),\n            },\n            method: 'setCellMode',\n            interfaceName: 'core.pagemanager.IPageManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'setCellName' : function(pageId,cellId,cellName, gs_silent) {\n        var data = {\n            args : {\n                pageId : JSON.stringify(pageId),\n                cellId : JSON.stringify(cellId),\n                cellName : JSON.stringify(cellName),\n            },\n            method: 'setCellName',\n            interfaceName: 'core.pagemanager.IPageManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'setPageDescription' : function(pageId,description, gs_silent) {\n        var data = {\n            args : {\n                pageId : JSON.stringify(pageId),\n                description : JSON.stringify(description),\n            },\n            method: 'setPageDescription',\n            interfaceName: 'core.pagemanager.IPageManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'setParentPage' : function(pageId,parentPageId, gs_silent) {\n        var data = {\n            args : {\n                pageId : JSON.stringify(pageId),\n                parentPageId : JSON.stringify(parentPageId),\n            },\n            method: 'setParentPage',\n            interfaceName: 'core.pagemanager.IPageManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'setStylesOnCell' : function(pageId,cellId,styles,innerStyles,width, gs_silent) {\n        var data = {\n            args : {\n                pageId : JSON.stringify(pageId),\n                cellId : JSON.stringify(cellId),\n                styles : JSON.stringify(styles),\n                innerStyles : JSON.stringify(innerStyles),\n                width : JSON.stringify(width),\n            },\n            method: 'setStylesOnCell',\n            interfaceName: 'core.pagemanager.IPageManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'setWidth' : function(pageId,cellId,outerWidth,outerWidthWithMargins, gs_silent) {\n        var data = {\n            args : {\n                pageId : JSON.stringify(pageId),\n                cellId : JSON.stringify(cellId),\n                outerWidth : JSON.stringify(outerWidth),\n                outerWidthWithMargins : JSON.stringify(outerWidthWithMargins),\n            },\n            method: 'setWidth',\n            interfaceName: 'core.pagemanager.IPageManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'startLoadPage' : function(gs_silent) {\n        var data = {\n            args : {\n            },\n            method: 'startLoadPage',\n            interfaceName: 'core.pagemanager.IPageManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'swapAppWithCell' : function(pageId,fromCellId,toCellId, gs_silent) {\n        var data = {\n            args : {\n                pageId : JSON.stringify(pageId),\n                fromCellId : JSON.stringify(fromCellId),\n                toCellId : JSON.stringify(toCellId),\n            },\n            method: 'swapAppWithCell',\n            interfaceName: 'core.pagemanager.IPageManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'toggleHiddenOnMobile' : function(pageId,cellId,hide, gs_silent) {\n        var data = {\n            args : {\n                pageId : JSON.stringify(pageId),\n                cellId : JSON.stringify(cellId),\n                hide : JSON.stringify(hide),\n            },\n            method: 'toggleHiddenOnMobile',\n            interfaceName: 'core.pagemanager.IPageManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'toggleLeftSideBar' : function(pageId,columnName, gs_silent) {\n        var data = {\n            args : {\n                pageId : JSON.stringify(pageId),\n                columnName : JSON.stringify(columnName),\n            },\n            method: 'toggleLeftSideBar',\n            interfaceName: 'core.pagemanager.IPageManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'togglePinArea' : function(pageId,cellId, gs_silent) {\n        var data = {\n            args : {\n                pageId : JSON.stringify(pageId),\n                cellId : JSON.stringify(cellId),\n            },\n            method: 'togglePinArea',\n            interfaceName: 'core.pagemanager.IPageManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'translatePages' : function(pages, gs_silent) {\n        var data = {\n            args : {\n                pages : JSON.stringify(pages),\n            },\n            method: 'translatePages',\n            interfaceName: 'core.pagemanager.IPageManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'updateCellLayout' : function(layout,pageId,cellId, gs_silent) {\n        var data = {\n            args : {\n                layout : JSON.stringify(layout),\n                pageId : JSON.stringify(pageId),\n                cellId : JSON.stringify(cellId),\n            },\n            method: 'updateCellLayout',\n            interfaceName: 'core.pagemanager.IPageManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n}\nGetShopApiWebSocket.InvoiceManager = function(communication) {\n    this.communication = communication;\n}\n\nGetShopApiWebSocket.InvoiceManager.prototype = {\n    'createInvoice' : function(orderId, gs_silent) {\n        var data = {\n            args : {\n                orderId : JSON.stringify(orderId),\n            },\n            method: 'createInvoice',\n            interfaceName: 'core.pdf.IInvoiceManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getBase64EncodedInvoice' : function(orderId, gs_silent) {\n        var data = {\n            args : {\n                orderId : JSON.stringify(orderId),\n            },\n            method: 'getBase64EncodedInvoice',\n            interfaceName: 'core.pdf.IInvoiceManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n}\nGetShopApiWebSocket.LasGruppenPDFGenerator = function(communication) {\n    this.communication = communication;\n}\n\nGetShopApiWebSocket.LasGruppenPDFGenerator.prototype = {\n    'generatePdf' : function(gs_silent) {\n        var data = {\n            args : {\n            },\n            method: 'generatePdf',\n            interfaceName: 'core.pdf.ILasGruppenPDFGenerator',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n}\nGetShopApiWebSocket.PkkControlManager = function(communication) {\n    this.communication = communication;\n}\n\nGetShopApiWebSocket.PkkControlManager.prototype = {\n    'getPkkControlData' : function(licensePlate, gs_silent) {\n        var data = {\n            args : {\n                licensePlate : JSON.stringify(licensePlate),\n            },\n            method: 'getPkkControlData',\n            interfaceName: 'core.pkk.IPkkControlManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getPkkControls' : function(gs_silent) {\n        var data = {\n            args : {\n            },\n            method: 'getPkkControls',\n            interfaceName: 'core.pkk.IPkkControlManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'registerPkkControl' : function(data, gs_silent) {\n        var data = {\n            args : {\n                data : JSON.stringify(data),\n            },\n            method: 'registerPkkControl',\n            interfaceName: 'core.pkk.IPkkControlManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'removePkkControl' : function(id, gs_silent) {\n        var data = {\n            args : {\n                id : JSON.stringify(id),\n            },\n            method: 'removePkkControl',\n            interfaceName: 'core.pkk.IPkkControlManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n}\nGetShopApiWebSocket.PmsEventManager = function(communication) {\n    this.communication = communication;\n}\n\nGetShopApiWebSocket.PmsEventManager.prototype = {\n    'createEvent' : function(multilevelname, id, gs_silent) {\n        var data = {\n            args : {\n                id : JSON.stringify(id),\n            },\n            method: 'createEvent',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.pmseventmanager.IPmsEventManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'deleteEntry' : function(multilevelname, entryId,day, gs_silent) {\n        var data = {\n            args : {\n                entryId : JSON.stringify(entryId),\n                day : JSON.stringify(day),\n            },\n            method: 'deleteEntry',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.pmseventmanager.IPmsEventManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getEntry' : function(multilevelname, entryId,day, gs_silent) {\n        var data = {\n            args : {\n                entryId : JSON.stringify(entryId),\n                day : JSON.stringify(day),\n            },\n            method: 'getEntry',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.pmseventmanager.IPmsEventManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getEntryShort' : function(multilevelname, shortId,day, gs_silent) {\n        var data = {\n            args : {\n                shortId : JSON.stringify(shortId),\n                day : JSON.stringify(day),\n            },\n            method: 'getEntryShort',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.pmseventmanager.IPmsEventManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getEventEntries' : function(multilevelname, filter, gs_silent) {\n        var data = {\n            args : {\n                filter : JSON.stringify(filter),\n            },\n            method: 'getEventEntries',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.pmseventmanager.IPmsEventManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getEventList' : function(multilevelname, gs_silent) {\n        var data = {\n            args : {\n            },\n            method: 'getEventList',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.pmseventmanager.IPmsEventManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getEventListWithDeleted' : function(multilevelname, gs_silent) {\n        var data = {\n            args : {\n            },\n            method: 'getEventListWithDeleted',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.pmseventmanager.IPmsEventManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'saveEntry' : function(multilevelname, entry,day, gs_silent) {\n        var data = {\n            args : {\n                entry : JSON.stringify(entry),\n                day : JSON.stringify(day),\n            },\n            method: 'saveEntry',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.pmseventmanager.IPmsEventManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n}\nGetShopApiWebSocket.PmsInvoiceManager = function(communication) {\n    this.communication = communication;\n}\n\nGetShopApiWebSocket.PmsInvoiceManager.prototype = {\n    'clearOrder' : function(multilevelname, bookingId,orderId, gs_silent) {\n        var data = {\n            args : {\n                bookingId : JSON.stringify(bookingId),\n                orderId : JSON.stringify(orderId),\n            },\n            method: 'clearOrder',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.pmsmanager.IPmsInvoiceManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'createOrder' : function(multilevelname, bookingId,filter, gs_silent) {\n        var data = {\n            args : {\n                bookingId : JSON.stringify(bookingId),\n                filter : JSON.stringify(filter),\n            },\n            method: 'createOrder',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.pmsmanager.IPmsInvoiceManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'createOrderOnUnsettledAmount' : function(multilevelname, bookingId, gs_silent) {\n        var data = {\n            args : {\n                bookingId : JSON.stringify(bookingId),\n            },\n            method: 'createOrderOnUnsettledAmount',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.pmsmanager.IPmsInvoiceManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'createPeriodeInvoice' : function(multilevelname, start,end,amount,roomId, gs_silent) {\n        var data = {\n            args : {\n                start : JSON.stringify(start),\n                end : JSON.stringify(end),\n                amount : JSON.stringify(amount),\n                roomId : JSON.stringify(roomId),\n            },\n            method: 'createPeriodeInvoice',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.pmsmanager.IPmsInvoiceManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'createRegisterCardOrder' : function(multilevelname, item, gs_silent) {\n        var data = {\n            args : {\n                item : JSON.stringify(item),\n            },\n            method: 'createRegisterCardOrder',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.pmsmanager.IPmsInvoiceManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'creditOrder' : function(multilevelname, bookingId,orderId, gs_silent) {\n        var data = {\n            args : {\n                bookingId : JSON.stringify(bookingId),\n                orderId : JSON.stringify(orderId),\n            },\n            method: 'creditOrder',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.pmsmanager.IPmsInvoiceManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'deleteStatisticsFilter' : function(multilevelname, id, gs_silent) {\n        var data = {\n            args : {\n                id : JSON.stringify(id),\n            },\n            method: 'deleteStatisticsFilter',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.pmsmanager.IPmsInvoiceManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'generateStatistics' : function(multilevelname, filter, gs_silent) {\n        var data = {\n            args : {\n                filter : JSON.stringify(filter),\n            },\n            method: 'generateStatistics',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.pmsmanager.IPmsInvoiceManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getAllStatisticsFilters' : function(multilevelname, gs_silent) {\n        var data = {\n            args : {\n            },\n            method: 'getAllStatisticsFilters',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.pmsmanager.IPmsInvoiceManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getDiscountsForUser' : function(multilevelname, userId, gs_silent) {\n        var data = {\n            args : {\n                userId : JSON.stringify(userId),\n            },\n            method: 'getDiscountsForUser',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.pmsmanager.IPmsInvoiceManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getOrdersForRoomToPay' : function(multilevelname, pmsRoomId, gs_silent) {\n        var data = {\n            args : {\n                pmsRoomId : JSON.stringify(pmsRoomId),\n            },\n            method: 'getOrdersForRoomToPay',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.pmsmanager.IPmsInvoiceManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getPaymentLinkConfig' : function(multilevelname, gs_silent) {\n        var data = {\n            args : {\n            },\n            method: 'getPaymentLinkConfig',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.pmsmanager.IPmsInvoiceManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getPreferredPaymentMethod' : function(multilevelname, bookingId,filter, gs_silent) {\n        var data = {\n            args : {\n                bookingId : JSON.stringify(bookingId),\n                filter : JSON.stringify(filter),\n            },\n            method: 'getPreferredPaymentMethod',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.pmsmanager.IPmsInvoiceManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getSubscriptionOverview' : function(multilevelname, start,end, gs_silent) {\n        var data = {\n            args : {\n                start : JSON.stringify(start),\n                end : JSON.stringify(end),\n            },\n            method: 'getSubscriptionOverview',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.pmsmanager.IPmsInvoiceManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'isRoomPaidFor' : function(multilevelname, pmsRoomId, gs_silent) {\n        var data = {\n            args : {\n                pmsRoomId : JSON.stringify(pmsRoomId),\n            },\n            method: 'isRoomPaidFor',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.pmsmanager.IPmsInvoiceManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'markOrderAsPaid' : function(multilevelname, bookingId,orderId, gs_silent) {\n        var data = {\n            args : {\n                bookingId : JSON.stringify(bookingId),\n                orderId : JSON.stringify(orderId),\n            },\n            method: 'markOrderAsPaid',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.pmsmanager.IPmsInvoiceManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'removeDuplicateOrderLines' : function(multilevelname, order, gs_silent) {\n        var data = {\n            args : {\n                order : JSON.stringify(order),\n            },\n            method: 'removeDuplicateOrderLines',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.pmsmanager.IPmsInvoiceManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'removeOrderLinesOnOrdersForBooking' : function(multilevelname, id,roomIds, gs_silent) {\n        var data = {\n            args : {\n                id : JSON.stringify(id),\n                roomIds : JSON.stringify(roomIds),\n            },\n            method: 'removeOrderLinesOnOrdersForBooking',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.pmsmanager.IPmsInvoiceManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'saveDiscounts' : function(multilevelname, discounts, gs_silent) {\n        var data = {\n            args : {\n                discounts : JSON.stringify(discounts),\n            },\n            method: 'saveDiscounts',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.pmsmanager.IPmsInvoiceManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'savePaymentLinkConfig' : function(multilevelname, config, gs_silent) {\n        var data = {\n            args : {\n                config : JSON.stringify(config),\n            },\n            method: 'savePaymentLinkConfig',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.pmsmanager.IPmsInvoiceManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'saveStatisticsFilter' : function(multilevelname, filter, gs_silent) {\n        var data = {\n            args : {\n                filter : JSON.stringify(filter),\n            },\n            method: 'saveStatisticsFilter',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.pmsmanager.IPmsInvoiceManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'sendRecieptOrInvoice' : function(multilevelname, orderId,email,bookingId, gs_silent) {\n        var data = {\n            args : {\n                orderId : JSON.stringify(orderId),\n                email : JSON.stringify(email),\n                bookingId : JSON.stringify(bookingId),\n            },\n            method: 'sendRecieptOrInvoice',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.pmsmanager.IPmsInvoiceManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'supportsDailyPmsInvoiceing' : function(multilevelname, bookingId, gs_silent) {\n        var data = {\n            args : {\n                bookingId : JSON.stringify(bookingId),\n            },\n            method: 'supportsDailyPmsInvoiceing',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.pmsmanager.IPmsInvoiceManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'validateAllInvoiceToDates' : function(multilevelname, gs_silent) {\n        var data = {\n            args : {\n            },\n            method: 'validateAllInvoiceToDates',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.pmsmanager.IPmsInvoiceManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n}\nGetShopApiWebSocket.PmsManager = function(communication) {\n    this.communication = communication;\n}\n\nGetShopApiWebSocket.PmsManager.prototype = {\n    'addAddonToCurrentBooking' : function(multilevelname, itemtypeId, gs_silent) {\n        var data = {\n            args : {\n                itemtypeId : JSON.stringify(itemtypeId),\n            },\n            method: 'addAddonToCurrentBooking',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.pmsmanager.IPmsManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'addAddonsToBooking' : function(multilevelname, type,roomId,remove, gs_silent) {\n        var data = {\n            args : {\n                type : JSON.stringify(type),\n                roomId : JSON.stringify(roomId),\n                remove : JSON.stringify(remove),\n            },\n            method: 'addAddonsToBooking',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.pmsmanager.IPmsManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'addBookingItem' : function(multilevelname, bookingId,item,start,end, gs_silent) {\n        var data = {\n            args : {\n                bookingId : JSON.stringify(bookingId),\n                item : JSON.stringify(item),\n                start : JSON.stringify(start),\n                end : JSON.stringify(end),\n            },\n            method: 'addBookingItem',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.pmsmanager.IPmsManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'addBookingItemType' : function(multilevelname, bookingId,item,start,end,guestInfoFromRoom, gs_silent) {\n        var data = {\n            args : {\n                bookingId : JSON.stringify(bookingId),\n                item : JSON.stringify(item),\n                start : JSON.stringify(start),\n                end : JSON.stringify(end),\n                guestInfoFromRoom : JSON.stringify(guestInfoFromRoom),\n            },\n            method: 'addBookingItemType',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.pmsmanager.IPmsManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'addCartItemToRoom' : function(multilevelname, item,pmsBookingRoomId,addedBy, gs_silent) {\n        var data = {\n            args : {\n                item : JSON.stringify(item),\n                pmsBookingRoomId : JSON.stringify(pmsBookingRoomId),\n                addedBy : JSON.stringify(addedBy),\n            },\n            method: 'addCartItemToRoom',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.pmsmanager.IPmsManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'addComment' : function(multilevelname, bookingId,comment, gs_silent) {\n        var data = {\n            args : {\n                bookingId : JSON.stringify(bookingId),\n                comment : JSON.stringify(comment),\n            },\n            method: 'addComment',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.pmsmanager.IPmsManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'addProductToRoom' : function(multilevelname, productId,pmsRoomId,count, gs_silent) {\n        var data = {\n            args : {\n                productId : JSON.stringify(productId),\n                pmsRoomId : JSON.stringify(pmsRoomId),\n                count : JSON.stringify(count),\n            },\n            method: 'addProductToRoom',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.pmsmanager.IPmsManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'addRepeatingData' : function(multilevelname, data, gs_silent) {\n        var data = {\n            args : {\n                data : JSON.stringify(data),\n            },\n            method: 'addRepeatingData',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.pmsmanager.IPmsManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'changeDates' : function(multilevelname, roomId,bookingId,start,end, gs_silent) {\n        var data = {\n            args : {\n                roomId : JSON.stringify(roomId),\n                bookingId : JSON.stringify(bookingId),\n                start : JSON.stringify(start),\n                end : JSON.stringify(end),\n            },\n            method: 'changeDates',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.pmsmanager.IPmsManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'changeInvoiceDate' : function(multilevelname, roomId,newDate, gs_silent) {\n        var data = {\n            args : {\n                roomId : JSON.stringify(roomId),\n                newDate : JSON.stringify(newDate),\n            },\n            method: 'changeInvoiceDate',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.pmsmanager.IPmsManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'checkDoorStatusControl' : function(multilevelname, gs_silent) {\n        var data = {\n            args : {\n            },\n            method: 'checkDoorStatusControl',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.pmsmanager.IPmsManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'checkForRoomsToClose' : function(multilevelname, gs_silent) {\n        var data = {\n            args : {\n            },\n            method: 'checkForRoomsToClose',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.pmsmanager.IPmsManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'checkIfGuestHasArrived' : function(multilevelname, gs_silent) {\n        var data = {\n            args : {\n            },\n            method: 'checkIfGuestHasArrived',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.pmsmanager.IPmsManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'checkOutRoom' : function(multilevelname, pmsBookingRoomId, gs_silent) {\n        var data = {\n            args : {\n                pmsBookingRoomId : JSON.stringify(pmsBookingRoomId),\n            },\n            method: 'checkOutRoom',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.pmsmanager.IPmsManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'closeItem' : function(multilevelname, id,start,end,source, gs_silent) {\n        var data = {\n            args : {\n                id : JSON.stringify(id),\n                start : JSON.stringify(start),\n                end : JSON.stringify(end),\n                source : JSON.stringify(source),\n            },\n            method: 'closeItem',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.pmsmanager.IPmsManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'completeCareTakerJob' : function(multilevelname, id, gs_silent) {\n        var data = {\n            args : {\n                id : JSON.stringify(id),\n            },\n            method: 'completeCareTakerJob',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.pmsmanager.IPmsManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'completeCurrentBooking' : function(multilevelname, gs_silent) {\n        var data = {\n            args : {\n            },\n            method: 'completeCurrentBooking',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.pmsmanager.IPmsManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'confirmBooking' : function(multilevelname, bookingId,message, gs_silent) {\n        var data = {\n            args : {\n                bookingId : JSON.stringify(bookingId),\n                message : JSON.stringify(message),\n            },\n            method: 'confirmBooking',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.pmsmanager.IPmsManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'convertTextDate' : function(multilevelname, text, gs_silent) {\n        var data = {\n            args : {\n                text : JSON.stringify(text),\n            },\n            method: 'convertTextDate',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.pmsmanager.IPmsManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'createAllVirtualOrders' : function(multilevelname, gs_silent) {\n        var data = {\n            args : {\n            },\n            method: 'createAllVirtualOrders',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.pmsmanager.IPmsManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'createChannel' : function(multilevelname, channel, gs_silent) {\n        var data = {\n            args : {\n                channel : JSON.stringify(channel),\n            },\n            method: 'createChannel',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.pmsmanager.IPmsManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'createNewPricePlan' : function(multilevelname, code, gs_silent) {\n        var data = {\n            args : {\n                code : JSON.stringify(code),\n            },\n            method: 'createNewPricePlan',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.pmsmanager.IPmsManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'createOrder' : function(multilevelname, bookingId,filter, gs_silent) {\n        var data = {\n            args : {\n                bookingId : JSON.stringify(bookingId),\n                filter : JSON.stringify(filter),\n            },\n            method: 'createOrder',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.pmsmanager.IPmsManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'createPrepaymentOrder' : function(multilevelname, bookingId, gs_silent) {\n        var data = {\n            args : {\n                bookingId : JSON.stringify(bookingId),\n            },\n            method: 'createPrepaymentOrder',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.pmsmanager.IPmsManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'deleteAllBookings' : function(multilevelname, code, gs_silent) {\n        var data = {\n            args : {\n                code : JSON.stringify(code),\n            },\n            method: 'deleteAllBookings',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.pmsmanager.IPmsManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'deleteBooking' : function(multilevelname, bookingId, gs_silent) {\n        var data = {\n            args : {\n                bookingId : JSON.stringify(bookingId),\n            },\n            method: 'deleteBooking',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.pmsmanager.IPmsManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'deleteDeliveryLogEntry' : function(multilevelname, id, gs_silent) {\n        var data = {\n            args : {\n                id : JSON.stringify(id),\n            },\n            method: 'deleteDeliveryLogEntry',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.pmsmanager.IPmsManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'deletePmsFilter' : function(multilevelname, name, gs_silent) {\n        var data = {\n            args : {\n                name : JSON.stringify(name),\n            },\n            method: 'deletePmsFilter',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.pmsmanager.IPmsManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'deletePricePlan' : function(multilevelname, code, gs_silent) {\n        var data = {\n            args : {\n                code : JSON.stringify(code),\n            },\n            method: 'deletePricePlan',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.pmsmanager.IPmsManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'doNotification' : function(multilevelname, key,bookingId, gs_silent) {\n        var data = {\n            args : {\n                key : JSON.stringify(key),\n                bookingId : JSON.stringify(bookingId),\n            },\n            method: 'doNotification',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.pmsmanager.IPmsManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'endRoom' : function(multilevelname, roomId, gs_silent) {\n        var data = {\n            args : {\n                roomId : JSON.stringify(roomId),\n            },\n            method: 'endRoom',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.pmsmanager.IPmsManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'endRoomWithDate' : function(multilevelname, pmsRoomId,date, gs_silent) {\n        var data = {\n            args : {\n                pmsRoomId : JSON.stringify(pmsRoomId),\n                date : JSON.stringify(date),\n            },\n            method: 'endRoomWithDate',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.pmsmanager.IPmsManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'failedChargeCard' : function(multilevelname, orderId,bookingId, gs_silent) {\n        var data = {\n            args : {\n                orderId : JSON.stringify(orderId),\n                bookingId : JSON.stringify(bookingId),\n            },\n            method: 'failedChargeCard',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.pmsmanager.IPmsManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'forceMarkRoomAsCleaned' : function(multilevelname, itemId, gs_silent) {\n        var data = {\n            args : {\n                itemId : JSON.stringify(itemId),\n            },\n            method: 'forceMarkRoomAsCleaned',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.pmsmanager.IPmsManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'freezeSubscription' : function(multilevelname, pmsBookingRoomId,freezeUntil, gs_silent) {\n        var data = {\n            args : {\n                pmsBookingRoomId : JSON.stringify(pmsBookingRoomId),\n                freezeUntil : JSON.stringify(freezeUntil),\n            },\n            method: 'freezeSubscription',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.pmsmanager.IPmsManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'generateNewCodeForRoom' : function(multilevelname, roomId, gs_silent) {\n        var data = {\n            args : {\n                roomId : JSON.stringify(roomId),\n            },\n            method: 'generateNewCodeForRoom',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.pmsmanager.IPmsManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getAdditionalInfo' : function(multilevelname, itemId, gs_silent) {\n        var data = {\n            args : {\n                itemId : JSON.stringify(itemId),\n            },\n            method: 'getAdditionalInfo',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.pmsmanager.IPmsManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getAdditionalTypeInformation' : function(multilevelname, gs_silent) {\n        var data = {\n            args : {\n            },\n            method: 'getAdditionalTypeInformation',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.pmsmanager.IPmsManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getAdditionalTypeInformationById' : function(multilevelname, typeId, gs_silent) {\n        var data = {\n            args : {\n                typeId : JSON.stringify(typeId),\n            },\n            method: 'getAdditionalTypeInformationById',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.pmsmanager.IPmsManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getAddonsAvailable' : function(multilevelname, gs_silent) {\n        var data = {\n            args : {\n            },\n            method: 'getAddonsAvailable',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.pmsmanager.IPmsManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getAddonsForRoom' : function(multilevelname, roomId, gs_silent) {\n        var data = {\n            args : {\n                roomId : JSON.stringify(roomId),\n            },\n            method: 'getAddonsForRoom',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.pmsmanager.IPmsManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getAddonsWithDiscount' : function(multilevelname, pmsBookingRoomId, gs_silent) {\n        var data = {\n            args : {\n                pmsBookingRoomId : JSON.stringify(pmsBookingRoomId),\n            },\n            method: 'getAddonsWithDiscount',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.pmsmanager.IPmsManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getAllAdditionalInformationOnRooms' : function(multilevelname, gs_silent) {\n        var data = {\n            args : {\n            },\n            method: 'getAllAdditionalInformationOnRooms',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.pmsmanager.IPmsManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getAllBookings' : function(multilevelname, state, gs_silent) {\n        var data = {\n            args : {\n                state : JSON.stringify(state),\n            },\n            method: 'getAllBookings',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.pmsmanager.IPmsManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getAllBookingsForLoggedOnUser' : function(multilevelname, gs_silent) {\n        var data = {\n            args : {\n            },\n            method: 'getAllBookingsForLoggedOnUser',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.pmsmanager.IPmsManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getAllBookingsUnsecure' : function(multilevelname, state, gs_silent) {\n        var data = {\n            args : {\n                state : JSON.stringify(state),\n            },\n            method: 'getAllBookingsUnsecure',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.pmsmanager.IPmsManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getAllPmsFilters' : function(multilevelname, gs_silent) {\n        var data = {\n            args : {\n            },\n            method: 'getAllPmsFilters',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.pmsmanager.IPmsManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getAllRoomTypes' : function(multilevelname, start,end, gs_silent) {\n        var data = {\n            args : {\n                start : JSON.stringify(start),\n                end : JSON.stringify(end),\n            },\n            method: 'getAllRoomTypes',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.pmsmanager.IPmsManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getAllRoomsNeedCleaningToday' : function(multilevelname, gs_silent) {\n        var data = {\n            args : {\n            },\n            method: 'getAllRoomsNeedCleaningToday',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.pmsmanager.IPmsManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getAllRoomsThatHasAddonsOfType' : function(multilevelname, type, gs_silent) {\n        var data = {\n            args : {\n                type : JSON.stringify(type),\n            },\n            method: 'getAllRoomsThatHasAddonsOfType',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.pmsmanager.IPmsManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getAvailabilityForType' : function(multilevelname, bookingItemId,startTime,endTime,intervalInMinutes, gs_silent) {\n        var data = {\n            args : {\n                bookingItemId : JSON.stringify(bookingItemId),\n                startTime : JSON.stringify(startTime),\n                endTime : JSON.stringify(endTime),\n                intervalInMinutes : JSON.stringify(intervalInMinutes),\n            },\n            method: 'getAvailabilityForType',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.pmsmanager.IPmsManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getBooking' : function(multilevelname, bookingId, gs_silent) {\n        var data = {\n            args : {\n                bookingId : JSON.stringify(bookingId),\n            },\n            method: 'getBooking',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.pmsmanager.IPmsManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getBookingFromBookingEngineId' : function(multilevelname, bookingEngineId, gs_silent) {\n        var data = {\n            args : {\n                bookingEngineId : JSON.stringify(bookingEngineId),\n            },\n            method: 'getBookingFromBookingEngineId',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.pmsmanager.IPmsManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getBookingFromRoom' : function(multilevelname, pmsBookingRoomId, gs_silent) {\n        var data = {\n            args : {\n                pmsBookingRoomId : JSON.stringify(pmsBookingRoomId),\n            },\n            method: 'getBookingFromRoom',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.pmsmanager.IPmsManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getBookingFromRoomIgnoreDeleted' : function(multilevelname, roomId, gs_silent) {\n        var data = {\n            args : {\n                roomId : JSON.stringify(roomId),\n            },\n            method: 'getBookingFromRoomIgnoreDeleted',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.pmsmanager.IPmsManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getBookingWithOrderId' : function(multilevelname, orderId, gs_silent) {\n        var data = {\n            args : {\n                orderId : JSON.stringify(orderId),\n            },\n            method: 'getBookingWithOrderId',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.pmsmanager.IPmsManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getCareTakerJob' : function(multilevelname, id, gs_silent) {\n        var data = {\n            args : {\n                id : JSON.stringify(id),\n            },\n            method: 'getCareTakerJob',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.pmsmanager.IPmsManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getCareTakerJobs' : function(multilevelname, gs_silent) {\n        var data = {\n            args : {\n            },\n            method: 'getCareTakerJobs',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.pmsmanager.IPmsManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getChannelMatrix' : function(multilevelname, gs_silent) {\n        var data = {\n            args : {\n            },\n            method: 'getChannelMatrix',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.pmsmanager.IPmsManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getCleaningStatistics' : function(multilevelname, start,end, gs_silent) {\n        var data = {\n            args : {\n                start : JSON.stringify(start),\n                end : JSON.stringify(end),\n            },\n            method: 'getCleaningStatistics',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.pmsmanager.IPmsManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getConferenceData' : function(multilevelname, bookingId, gs_silent) {\n        var data = {\n            args : {\n                bookingId : JSON.stringify(bookingId),\n            },\n            method: 'getConferenceData',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.pmsmanager.IPmsManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getConfiguration' : function(multilevelname, gs_silent) {\n        var data = {\n            args : {\n            },\n            method: 'getConfiguration',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.pmsmanager.IPmsManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getContract' : function(multilevelname, bookingId, gs_silent) {\n        var data = {\n            args : {\n                bookingId : JSON.stringify(bookingId),\n            },\n            method: 'getContract',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.pmsmanager.IPmsManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getCurrenctContract' : function(multilevelname, gs_silent) {\n        var data = {\n            args : {\n            },\n            method: 'getCurrenctContract',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.pmsmanager.IPmsManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getCurrentBooking' : function(multilevelname, gs_silent) {\n        var data = {\n            args : {\n            },\n            method: 'getCurrentBooking',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.pmsmanager.IPmsManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getDefaultDateRange' : function(multilevelname, gs_silent) {\n        var data = {\n            args : {\n            },\n            method: 'getDefaultDateRange',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.pmsmanager.IPmsManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getDefaultMessage' : function(multilevelname, bookingId, gs_silent) {\n        var data = {\n            args : {\n                bookingId : JSON.stringify(bookingId),\n            },\n            method: 'getDefaultMessage',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.pmsmanager.IPmsManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getDeliveryLog' : function(multilevelname, productIds,start,end, gs_silent) {\n        var data = {\n            args : {\n                productIds : JSON.stringify(productIds),\n                start : JSON.stringify(start),\n                end : JSON.stringify(end),\n            },\n            method: 'getDeliveryLog',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.pmsmanager.IPmsManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getDeliveryLogByView' : function(multilevelname, viewId,start,end, gs_silent) {\n        var data = {\n            args : {\n                viewId : JSON.stringify(viewId),\n                start : JSON.stringify(start),\n                end : JSON.stringify(end),\n            },\n            method: 'getDeliveryLogByView',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.pmsmanager.IPmsManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getEarliestEndDate' : function(multilevelname, pmsBookingRoomId, gs_silent) {\n        var data = {\n            args : {\n                pmsBookingRoomId : JSON.stringify(pmsBookingRoomId),\n            },\n            method: 'getEarliestEndDate',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.pmsmanager.IPmsManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getFutureConferenceData' : function(multilevelname, gs_silent) {\n        var data = {\n            args : {\n            },\n            method: 'getFutureConferenceData',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.pmsmanager.IPmsManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getGroupedConferenceData' : function(multilevelname, gs_silent) {\n        var data = {\n            args : {\n            },\n            method: 'getGroupedConferenceData',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.pmsmanager.IPmsManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getIntervalAvailability' : function(multilevelname, filter, gs_silent) {\n        var data = {\n            args : {\n                filter : JSON.stringify(filter),\n            },\n            method: 'getIntervalAvailability',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.pmsmanager.IPmsManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getItemsForView' : function(multilevelname, viewId,date, gs_silent) {\n        var data = {\n            args : {\n                viewId : JSON.stringify(viewId),\n                date : JSON.stringify(date),\n            },\n            method: 'getItemsForView',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.pmsmanager.IPmsManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getLogEntries' : function(multilevelname, filter, gs_silent) {\n        var data = {\n            args : {\n                filter : JSON.stringify(filter),\n            },\n            method: 'getLogEntries',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.pmsmanager.IPmsManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getMyRooms' : function(multilevelname, gs_silent) {\n        var data = {\n            args : {\n            },\n            method: 'getMyRooms',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.pmsmanager.IPmsManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getNumberOfAvailable' : function(multilevelname, itemType,start,end, gs_silent) {\n        var data = {\n            args : {\n                itemType : JSON.stringify(itemType),\n                start : JSON.stringify(start),\n                end : JSON.stringify(end),\n            },\n            method: 'getNumberOfAvailable',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.pmsmanager.IPmsManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getPmsBookingFilter' : function(multilevelname, name, gs_silent) {\n        var data = {\n            args : {\n                name : JSON.stringify(name),\n            },\n            method: 'getPmsBookingFilter',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.pmsmanager.IPmsManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getPrices' : function(multilevelname, start,end, gs_silent) {\n        var data = {\n            args : {\n                start : JSON.stringify(start),\n                end : JSON.stringify(end),\n            },\n            method: 'getPrices',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.pmsmanager.IPmsManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getPricesByCode' : function(multilevelname, code,start,end, gs_silent) {\n        var data = {\n            args : {\n                code : JSON.stringify(code),\n                start : JSON.stringify(start),\n                end : JSON.stringify(end),\n            },\n            method: 'getPricesByCode',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.pmsmanager.IPmsManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getRoomForItem' : function(multilevelname, itemId,atTime, gs_silent) {\n        var data = {\n            args : {\n                itemId : JSON.stringify(itemId),\n                atTime : JSON.stringify(atTime),\n            },\n            method: 'getRoomForItem',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.pmsmanager.IPmsManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getRoomsNeedingCheckoutCleaning' : function(multilevelname, day, gs_silent) {\n        var data = {\n            args : {\n                day : JSON.stringify(day),\n            },\n            method: 'getRoomsNeedingCheckoutCleaning',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.pmsmanager.IPmsManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getRoomsNeedingIntervalCleaning' : function(multilevelname, day, gs_silent) {\n        var data = {\n            args : {\n                day : JSON.stringify(day),\n            },\n            method: 'getRoomsNeedingIntervalCleaning',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.pmsmanager.IPmsManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getRoomsNeedingIntervalCleaningSimple' : function(multilevelname, day, gs_silent) {\n        var data = {\n            args : {\n                day : JSON.stringify(day),\n            },\n            method: 'getRoomsNeedingIntervalCleaningSimple',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.pmsmanager.IPmsManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getRoomsToSwap' : function(multilevelname, roomId,moveToType, gs_silent) {\n        var data = {\n            args : {\n                roomId : JSON.stringify(roomId),\n                moveToType : JSON.stringify(moveToType),\n            },\n            method: 'getRoomsToSwap',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.pmsmanager.IPmsManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getSimpleInventoryList' : function(multilevelname, roomName, gs_silent) {\n        var data = {\n            args : {\n                roomName : JSON.stringify(roomName),\n            },\n            method: 'getSimpleInventoryList',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.pmsmanager.IPmsManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getSimpleRooms' : function(multilevelname, filter, gs_silent) {\n        var data = {\n            args : {\n                filter : JSON.stringify(filter),\n            },\n            method: 'getSimpleRooms',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.pmsmanager.IPmsManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getStatistics' : function(multilevelname, filter, gs_silent) {\n        var data = {\n            args : {\n                filter : JSON.stringify(filter),\n            },\n            method: 'getStatistics',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.pmsmanager.IPmsManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getpriceCodes' : function(multilevelname, gs_silent) {\n        var data = {\n            args : {\n            },\n            method: 'getpriceCodes',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.pmsmanager.IPmsManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'hourlyProcessor' : function(multilevelname, gs_silent) {\n        var data = {\n            args : {\n            },\n            method: 'hourlyProcessor',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.pmsmanager.IPmsManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'initBookingRules' : function(multilevelname, gs_silent) {\n        var data = {\n            args : {\n            },\n            method: 'initBookingRules',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.pmsmanager.IPmsManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'isActive' : function(multilevelname, gs_silent) {\n        var data = {\n            args : {\n            },\n            method: 'isActive',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.pmsmanager.IPmsManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'isClean' : function(multilevelname, itemId, gs_silent) {\n        var data = {\n            args : {\n                itemId : JSON.stringify(itemId),\n            },\n            method: 'isClean',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.pmsmanager.IPmsManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'isUsedToday' : function(multilevelname, itemId, gs_silent) {\n        var data = {\n            args : {\n                itemId : JSON.stringify(itemId),\n            },\n            method: 'isUsedToday',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.pmsmanager.IPmsManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'logEntry' : function(multilevelname, logText,bookingId,itemId, gs_silent) {\n        var data = {\n            args : {\n                logText : JSON.stringify(logText),\n                bookingId : JSON.stringify(bookingId),\n                itemId : JSON.stringify(itemId),\n            },\n            method: 'logEntry',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.pmsmanager.IPmsManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'logEntryObject' : function(multilevelname, log, gs_silent) {\n        var data = {\n            args : {\n                log : JSON.stringify(log),\n            },\n            method: 'logEntryObject',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.pmsmanager.IPmsManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'markAddonDelivered' : function(multilevelname, id, gs_silent) {\n        var data = {\n            args : {\n                id : JSON.stringify(id),\n            },\n            method: 'markAddonDelivered',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.pmsmanager.IPmsManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'markKeyDeliveredForAllEndedRooms' : function(multilevelname, gs_silent) {\n        var data = {\n            args : {\n            },\n            method: 'markKeyDeliveredForAllEndedRooms',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.pmsmanager.IPmsManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'markRoomAsCleaned' : function(multilevelname, itemId, gs_silent) {\n        var data = {\n            args : {\n                itemId : JSON.stringify(itemId),\n            },\n            method: 'markRoomAsCleaned',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.pmsmanager.IPmsManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'markRoomDirty' : function(multilevelname, itemId, gs_silent) {\n        var data = {\n            args : {\n                itemId : JSON.stringify(itemId),\n            },\n            method: 'markRoomDirty',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.pmsmanager.IPmsManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'massUpdatePrices' : function(multilevelname, price,bookingId, gs_silent) {\n        var data = {\n            args : {\n                price : JSON.stringify(price),\n                bookingId : JSON.stringify(bookingId),\n            },\n            method: 'massUpdatePrices',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.pmsmanager.IPmsManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'mergeBookingsOnOrders' : function(multilevelname, gs_silent) {\n        var data = {\n            args : {\n            },\n            method: 'mergeBookingsOnOrders',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.pmsmanager.IPmsManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'processor' : function(multilevelname, gs_silent) {\n        var data = {\n            args : {\n            },\n            method: 'processor',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.pmsmanager.IPmsManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'removeAddonFromRoom' : function(multilevelname, id,pmsBookingRooms, gs_silent) {\n        var data = {\n            args : {\n                id : JSON.stringify(id),\n                pmsBookingRooms : JSON.stringify(pmsBookingRooms),\n            },\n            method: 'removeAddonFromRoom',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.pmsmanager.IPmsManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'removeAddonFromRoomById' : function(multilevelname, addonId,roomId, gs_silent) {\n        var data = {\n            args : {\n                addonId : JSON.stringify(addonId),\n                roomId : JSON.stringify(roomId),\n            },\n            method: 'removeAddonFromRoomById',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.pmsmanager.IPmsManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'removeCareTakerJob' : function(multilevelname, jobId, gs_silent) {\n        var data = {\n            args : {\n                jobId : JSON.stringify(jobId),\n            },\n            method: 'removeCareTakerJob',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.pmsmanager.IPmsManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'removeChannel' : function(multilevelname, channel, gs_silent) {\n        var data = {\n            args : {\n                channel : JSON.stringify(channel),\n            },\n            method: 'removeChannel',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.pmsmanager.IPmsManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'removeFromBooking' : function(multilevelname, bookingId,roomId, gs_silent) {\n        var data = {\n            args : {\n                bookingId : JSON.stringify(bookingId),\n                roomId : JSON.stringify(roomId),\n            },\n            method: 'removeFromBooking',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.pmsmanager.IPmsManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'removeFromCurrentBooking' : function(multilevelname, roomId, gs_silent) {\n        var data = {\n            args : {\n                roomId : JSON.stringify(roomId),\n            },\n            method: 'removeFromCurrentBooking',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.pmsmanager.IPmsManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'reportMissingInventory' : function(multilevelname, inventories,itemId,roomId, gs_silent) {\n        var data = {\n            args : {\n                inventories : JSON.stringify(inventories),\n                itemId : JSON.stringify(itemId),\n                roomId : JSON.stringify(roomId),\n            },\n            method: 'reportMissingInventory',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.pmsmanager.IPmsManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'resetPriceForRoom' : function(multilevelname, pmsRoomId, gs_silent) {\n        var data = {\n            args : {\n                pmsRoomId : JSON.stringify(pmsRoomId),\n            },\n            method: 'resetPriceForRoom',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.pmsmanager.IPmsManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'returnedKey' : function(multilevelname, roomId, gs_silent) {\n        var data = {\n            args : {\n                roomId : JSON.stringify(roomId),\n            },\n            method: 'returnedKey',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.pmsmanager.IPmsManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'saveAdditionalTypeInformation' : function(multilevelname, info, gs_silent) {\n        var data = {\n            args : {\n                info : JSON.stringify(info),\n            },\n            method: 'saveAdditionalTypeInformation',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.pmsmanager.IPmsManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'saveBooking' : function(multilevelname, booking, gs_silent) {\n        var data = {\n            args : {\n                booking : JSON.stringify(booking),\n            },\n            method: 'saveBooking',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.pmsmanager.IPmsManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'saveCareTakerJob' : function(multilevelname, job, gs_silent) {\n        var data = {\n            args : {\n                job : JSON.stringify(job),\n            },\n            method: 'saveCareTakerJob',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.pmsmanager.IPmsManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'saveConferenceData' : function(multilevelname, data, gs_silent) {\n        var data = {\n            args : {\n                data : JSON.stringify(data),\n            },\n            method: 'saveConferenceData',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.pmsmanager.IPmsManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'saveConfiguration' : function(multilevelname, notifications, gs_silent) {\n        var data = {\n            args : {\n                notifications : JSON.stringify(notifications),\n            },\n            method: 'saveConfiguration',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.pmsmanager.IPmsManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'saveFilter' : function(multilevelname, name,filter, gs_silent) {\n        var data = {\n            args : {\n                name : JSON.stringify(name),\n                filter : JSON.stringify(filter),\n            },\n            method: 'saveFilter',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.pmsmanager.IPmsManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'sendCode' : function(multilevelname, prefix,phoneNumber,roomId, gs_silent) {\n        var data = {\n            args : {\n                prefix : JSON.stringify(prefix),\n                phoneNumber : JSON.stringify(phoneNumber),\n                roomId : JSON.stringify(roomId),\n            },\n            method: 'sendCode',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.pmsmanager.IPmsManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'sendConfirmation' : function(multilevelname, email,bookingId, gs_silent) {\n        var data = {\n            args : {\n                email : JSON.stringify(email),\n                bookingId : JSON.stringify(bookingId),\n            },\n            method: 'sendConfirmation',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.pmsmanager.IPmsManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'sendMessage' : function(multilevelname, bookingId,email,title,message, gs_silent) {\n        var data = {\n            args : {\n                bookingId : JSON.stringify(bookingId),\n                email : JSON.stringify(email),\n                title : JSON.stringify(title),\n                message : JSON.stringify(message),\n            },\n            method: 'sendMessage',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.pmsmanager.IPmsManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'sendMessageToAllTodaysGuests' : function(multilevelname, message, gs_silent) {\n        var data = {\n            args : {\n                message : JSON.stringify(message),\n            },\n            method: 'sendMessageToAllTodaysGuests',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.pmsmanager.IPmsManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'sendMissingPayment' : function(multilevelname, orderId,bookingId, gs_silent) {\n        var data = {\n            args : {\n                orderId : JSON.stringify(orderId),\n                bookingId : JSON.stringify(bookingId),\n            },\n            method: 'sendMissingPayment',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.pmsmanager.IPmsManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'sendPaymentLink' : function(multilevelname, orderId,bookingId,email,prefix,phone, gs_silent) {\n        var data = {\n            args : {\n                orderId : JSON.stringify(orderId),\n                bookingId : JSON.stringify(bookingId),\n                email : JSON.stringify(email),\n                prefix : JSON.stringify(prefix),\n                phone : JSON.stringify(phone),\n            },\n            method: 'sendPaymentLink',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.pmsmanager.IPmsManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'sendSmsToGuest' : function(multilevelname, guestId,message, gs_silent) {\n        var data = {\n            args : {\n                guestId : JSON.stringify(guestId),\n                message : JSON.stringify(message),\n            },\n            method: 'sendSmsToGuest',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.pmsmanager.IPmsManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'sendStatistics' : function(multilevelname, gs_silent) {\n        var data = {\n            args : {\n            },\n            method: 'sendStatistics',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.pmsmanager.IPmsManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'setBooking' : function(multilevelname, addons, gs_silent) {\n        var data = {\n            args : {\n                addons : JSON.stringify(addons),\n            },\n            method: 'setBooking',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.pmsmanager.IPmsManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'setBookingItem' : function(multilevelname, roomId,bookingId,itemId,split, gs_silent) {\n        var data = {\n            args : {\n                roomId : JSON.stringify(roomId),\n                bookingId : JSON.stringify(bookingId),\n                itemId : JSON.stringify(itemId),\n                split : JSON.stringify(split),\n            },\n            method: 'setBookingItem',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.pmsmanager.IPmsManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'setBookingItemAndDate' : function(multilevelname, roomId,itemId,split,start,end, gs_silent) {\n        var data = {\n            args : {\n                roomId : JSON.stringify(roomId),\n                itemId : JSON.stringify(itemId),\n                split : JSON.stringify(split),\n                start : JSON.stringify(start),\n                end : JSON.stringify(end),\n            },\n            method: 'setBookingItemAndDate',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.pmsmanager.IPmsManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'setGuestOnRoom' : function(multilevelname, guests,bookingId,roomId, gs_silent) {\n        var data = {\n            args : {\n                guests : JSON.stringify(guests),\n                bookingId : JSON.stringify(bookingId),\n                roomId : JSON.stringify(roomId),\n            },\n            method: 'setGuestOnRoom',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.pmsmanager.IPmsManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'setNewCleaningIntervalOnRoom' : function(multilevelname, roomId,interval, gs_silent) {\n        var data = {\n            args : {\n                roomId : JSON.stringify(roomId),\n                interval : JSON.stringify(interval),\n            },\n            method: 'setNewCleaningIntervalOnRoom',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.pmsmanager.IPmsManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'setNewRoomType' : function(multilevelname, roomId,bookingId,newType, gs_silent) {\n        var data = {\n            args : {\n                roomId : JSON.stringify(roomId),\n                bookingId : JSON.stringify(bookingId),\n                newType : JSON.stringify(newType),\n            },\n            method: 'setNewRoomType',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.pmsmanager.IPmsManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'setPrices' : function(multilevelname, code,prices, gs_silent) {\n        var data = {\n            args : {\n                code : JSON.stringify(code),\n                prices : JSON.stringify(prices),\n            },\n            method: 'setPrices',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.pmsmanager.IPmsManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'splitBooking' : function(multilevelname, roomIds, gs_silent) {\n        var data = {\n            args : {\n                roomIds : JSON.stringify(roomIds),\n            },\n            method: 'splitBooking',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.pmsmanager.IPmsManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'startBooking' : function(multilevelname, gs_silent) {\n        var data = {\n            args : {\n            },\n            method: 'startBooking',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.pmsmanager.IPmsManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'swapRoom' : function(multilevelname, roomId,roomIds, gs_silent) {\n        var data = {\n            args : {\n                roomId : JSON.stringify(roomId),\n                roomIds : JSON.stringify(roomIds),\n            },\n            method: 'swapRoom',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.pmsmanager.IPmsManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'toggleAddon' : function(multilevelname, itemId, gs_silent) {\n        var data = {\n            args : {\n                itemId : JSON.stringify(itemId),\n            },\n            method: 'toggleAddon',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.pmsmanager.IPmsManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'tryAddToEngine' : function(multilevelname, pmsBookingRoomId, gs_silent) {\n        var data = {\n            args : {\n                pmsBookingRoomId : JSON.stringify(pmsBookingRoomId),\n            },\n            method: 'tryAddToEngine',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.pmsmanager.IPmsManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'unConfirmBooking' : function(multilevelname, bookingId,message, gs_silent) {\n        var data = {\n            args : {\n                bookingId : JSON.stringify(bookingId),\n                message : JSON.stringify(message),\n            },\n            method: 'unConfirmBooking',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.pmsmanager.IPmsManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'undeleteBooking' : function(multilevelname, bookingId, gs_silent) {\n        var data = {\n            args : {\n                bookingId : JSON.stringify(bookingId),\n            },\n            method: 'undeleteBooking',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.pmsmanager.IPmsManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'undoLastCleaning' : function(multilevelname, itemId, gs_silent) {\n        var data = {\n            args : {\n                itemId : JSON.stringify(itemId),\n            },\n            method: 'undoLastCleaning',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.pmsmanager.IPmsManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'updateAdditionalInformationOnRooms' : function(multilevelname, info, gs_silent) {\n        var data = {\n            args : {\n                info : JSON.stringify(info),\n            },\n            method: 'updateAdditionalInformationOnRooms',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.pmsmanager.IPmsManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'updateAddons' : function(multilevelname, items,bookingId, gs_silent) {\n        var data = {\n            args : {\n                items : JSON.stringify(items),\n                bookingId : JSON.stringify(bookingId),\n            },\n            method: 'updateAddons',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.pmsmanager.IPmsManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'updateAddonsBasedOnGuestCount' : function(multilevelname, pmsRoomId, gs_silent) {\n        var data = {\n            args : {\n                pmsRoomId : JSON.stringify(pmsRoomId),\n            },\n            method: 'updateAddonsBasedOnGuestCount',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.pmsmanager.IPmsManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'updateAddonsCountToBooking' : function(multilevelname, type,roomId,count, gs_silent) {\n        var data = {\n            args : {\n                type : JSON.stringify(type),\n                roomId : JSON.stringify(roomId),\n                count : JSON.stringify(count),\n            },\n            method: 'updateAddonsCountToBooking',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.pmsmanager.IPmsManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'updateRepeatingDataForBooking' : function(multilevelname, data,bookingId, gs_silent) {\n        var data = {\n            args : {\n                data : JSON.stringify(data),\n                bookingId : JSON.stringify(bookingId),\n            },\n            method: 'updateRepeatingDataForBooking',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.pmsmanager.IPmsManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'updateRoomByUser' : function(multilevelname, bookingId,room, gs_silent) {\n        var data = {\n            args : {\n                bookingId : JSON.stringify(bookingId),\n                room : JSON.stringify(room),\n            },\n            method: 'updateRoomByUser',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.pmsmanager.IPmsManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n}\nGetShopApiWebSocket.PmsManagerProcessor = function(communication) {\n    this.communication = communication;\n}\n\nGetShopApiWebSocket.PmsManagerProcessor.prototype = {\n    'doProcessing' : function(multilevelname, gs_silent) {\n        var data = {\n            args : {\n            },\n            method: 'doProcessing',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.pmsmanager.IPmsManagerProcessor',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n}\nGetShopApiWebSocket.PmsReportManager = function(communication) {\n    this.communication = communication;\n}\n\nGetShopApiWebSocket.PmsReportManager.prototype = {\n    'getConferenceStatistics' : function(multilevelname, start,end, gs_silent) {\n        var data = {\n            args : {\n                start : JSON.stringify(start),\n                end : JSON.stringify(end),\n            },\n            method: 'getConferenceStatistics',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.pmsmanager.IPmsReportManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getReport' : function(multilevelname, start,end,compareTo, gs_silent) {\n        var data = {\n            args : {\n                start : JSON.stringify(start),\n                end : JSON.stringify(end),\n                compareTo : JSON.stringify(compareTo),\n            },\n            method: 'getReport',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.pmsmanager.IPmsReportManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getRoomCoverage' : function(multilevelname, start,end, gs_silent) {\n        var data = {\n            args : {\n                start : JSON.stringify(start),\n                end : JSON.stringify(end),\n            },\n            method: 'getRoomCoverage',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.pmsmanager.IPmsReportManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getUsage' : function(multilevelname, start,end, gs_silent) {\n        var data = {\n            args : {\n                start : JSON.stringify(start),\n                end : JSON.stringify(end),\n            },\n            method: 'getUsage',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.pmsmanager.IPmsReportManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n}\nGetShopApiWebSocket.PrintManager = function(communication) {\n    this.communication = communication;\n}\n\nGetShopApiWebSocket.PrintManager.prototype = {\n    'getPrintJobs' : function(printerId, gs_silent) {\n        var data = {\n            args : {\n                printerId : JSON.stringify(printerId),\n            },\n            method: 'getPrintJobs',\n            interfaceName: 'core.printmanager.IPrintManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n}\nGetShopApiWebSocket.StorePrintManager = function(communication) {\n    this.communication = communication;\n}\n\nGetShopApiWebSocket.StorePrintManager.prototype = {\n    'deletePrinter' : function(id, gs_silent) {\n        var data = {\n            args : {\n                id : JSON.stringify(id),\n            },\n            method: 'deletePrinter',\n            interfaceName: 'core.printmanager.IStorePrintManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getPrinters' : function(gs_silent) {\n        var data = {\n            args : {\n            },\n            method: 'getPrinters',\n            interfaceName: 'core.printmanager.IStorePrintManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'savePrinter' : function(printer, gs_silent) {\n        var data = {\n            args : {\n                printer : JSON.stringify(printer),\n            },\n            method: 'savePrinter',\n            interfaceName: 'core.printmanager.IStorePrintManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n}\nGetShopApiWebSocket.ProductManager = function(communication) {\n    this.communication = communication;\n}\n\nGetShopApiWebSocket.ProductManager.prototype = {\n    'changeStockQuantity' : function(productId,count, gs_silent) {\n        var data = {\n            args : {\n                productId : JSON.stringify(productId),\n                count : JSON.stringify(count),\n            },\n            method: 'changeStockQuantity',\n            interfaceName: 'core.productmanager.IProductManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'copyProduct' : function(fromProductId,newName, gs_silent) {\n        var data = {\n            args : {\n                fromProductId : JSON.stringify(fromProductId),\n                newName : JSON.stringify(newName),\n            },\n            method: 'copyProduct',\n            interfaceName: 'core.productmanager.IProductManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'createProduct' : function(gs_silent) {\n        var data = {\n            args : {\n            },\n            method: 'createProduct',\n            interfaceName: 'core.productmanager.IProductManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'createProductList' : function(listName, gs_silent) {\n        var data = {\n            args : {\n                listName : JSON.stringify(listName),\n            },\n            method: 'createProductList',\n            interfaceName: 'core.productmanager.IProductManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'deleteCategory' : function(categoryId, gs_silent) {\n        var data = {\n            args : {\n                categoryId : JSON.stringify(categoryId),\n            },\n            method: 'deleteCategory',\n            interfaceName: 'core.productmanager.IProductManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'deleteProductList' : function(listId, gs_silent) {\n        var data = {\n            args : {\n                listId : JSON.stringify(listId),\n            },\n            method: 'deleteProductList',\n            interfaceName: 'core.productmanager.IProductManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getAllCategories' : function(gs_silent) {\n        var data = {\n            args : {\n            },\n            method: 'getAllCategories',\n            interfaceName: 'core.productmanager.IProductManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getAllProducts' : function(gs_silent) {\n        var data = {\n            args : {\n            },\n            method: 'getAllProducts',\n            interfaceName: 'core.productmanager.IProductManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getAllProductsIncDeleted' : function(gs_silent) {\n        var data = {\n            args : {\n            },\n            method: 'getAllProductsIncDeleted',\n            interfaceName: 'core.productmanager.IProductManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getAllProductsLight' : function(gs_silent) {\n        var data = {\n            args : {\n            },\n            method: 'getAllProductsLight',\n            interfaceName: 'core.productmanager.IProductManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getCategory' : function(categoryId, gs_silent) {\n        var data = {\n            args : {\n                categoryId : JSON.stringify(categoryId),\n            },\n            method: 'getCategory',\n            interfaceName: 'core.productmanager.IProductManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getDeletedProduct' : function(id, gs_silent) {\n        var data = {\n            args : {\n                id : JSON.stringify(id),\n            },\n            method: 'getDeletedProduct',\n            interfaceName: 'core.productmanager.IProductManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getLatestProducts' : function(count, gs_silent) {\n        var data = {\n            args : {\n                count : JSON.stringify(count),\n            },\n            method: 'getLatestProducts',\n            interfaceName: 'core.productmanager.IProductManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getPageIdByName' : function(productName, gs_silent) {\n        var data = {\n            args : {\n                productName : JSON.stringify(productName),\n            },\n            method: 'getPageIdByName',\n            interfaceName: 'core.productmanager.IProductManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getPrice' : function(productId,variations, gs_silent) {\n        var data = {\n            args : {\n                productId : JSON.stringify(productId),\n                variations : JSON.stringify(variations),\n            },\n            method: 'getPrice',\n            interfaceName: 'core.productmanager.IProductManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getProduct' : function(id, gs_silent) {\n        var data = {\n            args : {\n                id : JSON.stringify(id),\n            },\n            method: 'getProduct',\n            interfaceName: 'core.productmanager.IProductManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getProductByPage' : function(id, gs_silent) {\n        var data = {\n            args : {\n                id : JSON.stringify(id),\n            },\n            method: 'getProductByPage',\n            interfaceName: 'core.productmanager.IProductManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getProductFromApplicationId' : function(app_uuid, gs_silent) {\n        var data = {\n            args : {\n                app_uuid : JSON.stringify(app_uuid),\n            },\n            method: 'getProductFromApplicationId',\n            interfaceName: 'core.productmanager.IProductManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getProductList' : function(listId, gs_silent) {\n        var data = {\n            args : {\n                listId : JSON.stringify(listId),\n            },\n            method: 'getProductList',\n            interfaceName: 'core.productmanager.IProductManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getProductLists' : function(gs_silent) {\n        var data = {\n            args : {\n            },\n            method: 'getProductLists',\n            interfaceName: 'core.productmanager.IProductManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getProducts' : function(productCriteria, gs_silent) {\n        var data = {\n            args : {\n                productCriteria : JSON.stringify(productCriteria),\n            },\n            method: 'getProducts',\n            interfaceName: 'core.productmanager.IProductManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getRandomProducts' : function(fetchSize,ignoreProductId, gs_silent) {\n        var data = {\n            args : {\n                fetchSize : JSON.stringify(fetchSize),\n                ignoreProductId : JSON.stringify(ignoreProductId),\n            },\n            method: 'getRandomProducts',\n            interfaceName: 'core.productmanager.IProductManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getTaxes' : function(gs_silent) {\n        var data = {\n            args : {\n            },\n            method: 'getTaxes',\n            interfaceName: 'core.productmanager.IProductManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'removeProduct' : function(productId, gs_silent) {\n        var data = {\n            args : {\n                productId : JSON.stringify(productId),\n            },\n            method: 'removeProduct',\n            interfaceName: 'core.productmanager.IProductManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'saveCategory' : function(categories, gs_silent) {\n        var data = {\n            args : {\n                categories : JSON.stringify(categories),\n            },\n            method: 'saveCategory',\n            interfaceName: 'core.productmanager.IProductManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'saveProduct' : function(product, gs_silent) {\n        var data = {\n            args : {\n                product : JSON.stringify(product),\n            },\n            method: 'saveProduct',\n            interfaceName: 'core.productmanager.IProductManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'saveProductList' : function(productList, gs_silent) {\n        var data = {\n            args : {\n                productList : JSON.stringify(productList),\n            },\n            method: 'saveProductList',\n            interfaceName: 'core.productmanager.IProductManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'search' : function(searchWord,pageSize,page, gs_silent) {\n        var data = {\n            args : {\n                searchWord : JSON.stringify(searchWord),\n                pageSize : JSON.stringify(pageSize),\n                page : JSON.stringify(page),\n            },\n            method: 'search',\n            interfaceName: 'core.productmanager.IProductManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'setMainImage' : function(productId,imageId, gs_silent) {\n        var data = {\n            args : {\n                productId : JSON.stringify(productId),\n                imageId : JSON.stringify(imageId),\n            },\n            method: 'setMainImage',\n            interfaceName: 'core.productmanager.IProductManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'setProductDynamicPrice' : function(productId,count, gs_silent) {\n        var data = {\n            args : {\n                productId : JSON.stringify(productId),\n                count : JSON.stringify(count),\n            },\n            method: 'setProductDynamicPrice',\n            interfaceName: 'core.productmanager.IProductManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'setTaxes' : function(group, gs_silent) {\n        var data = {\n            args : {\n                group : JSON.stringify(group),\n            },\n            method: 'setTaxes',\n            interfaceName: 'core.productmanager.IProductManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'translateEntries' : function(entryIds, gs_silent) {\n        var data = {\n            args : {\n                entryIds : JSON.stringify(entryIds),\n            },\n            method: 'translateEntries',\n            interfaceName: 'core.productmanager.IProductManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n}\nGetShopApiWebSocket.PullServerManager = function(communication) {\n    this.communication = communication;\n}\n\nGetShopApiWebSocket.PullServerManager.prototype = {\n    'getPullMessages' : function(keyId,storeId, gs_silent) {\n        var data = {\n            args : {\n                keyId : JSON.stringify(keyId),\n                storeId : JSON.stringify(storeId),\n            },\n            method: 'getPullMessages',\n            interfaceName: 'core.pullserver.IPullServerManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'markMessageAsReceived' : function(messageId,storeId, gs_silent) {\n        var data = {\n            args : {\n                messageId : JSON.stringify(messageId),\n                storeId : JSON.stringify(storeId),\n            },\n            method: 'markMessageAsReceived',\n            interfaceName: 'core.pullserver.IPullServerManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'savePullMessage' : function(pullMessage, gs_silent) {\n        var data = {\n            args : {\n                pullMessage : JSON.stringify(pullMessage),\n            },\n            method: 'savePullMessage',\n            interfaceName: 'core.pullserver.IPullServerManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n}\nGetShopApiWebSocket.QuestBackManager = function(communication) {\n    this.communication = communication;\n}\n\nGetShopApiWebSocket.QuestBackManager.prototype = {\n    'answerQuestions' : function(testId,applicationId,pageId,answers, gs_silent) {\n        var data = {\n            args : {\n                testId : JSON.stringify(testId),\n                applicationId : JSON.stringify(applicationId),\n                pageId : JSON.stringify(pageId),\n                answers : JSON.stringify(answers),\n            },\n            method: 'answerQuestions',\n            interfaceName: 'core.questback.IQuestBackManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'assignTestsToUsers' : function(testIds,userids, gs_silent) {\n        var data = {\n            args : {\n                testIds : JSON.stringify(testIds),\n                userids : JSON.stringify(userids),\n            },\n            method: 'assignTestsToUsers',\n            interfaceName: 'core.questback.IQuestBackManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'assignUserToTest' : function(testId,userId, gs_silent) {\n        var data = {\n            args : {\n                testId : JSON.stringify(testId),\n                userId : JSON.stringify(userId),\n            },\n            method: 'assignUserToTest',\n            interfaceName: 'core.questback.IQuestBackManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'createTemplatePageIfNotExists' : function(gs_silent) {\n        var data = {\n            args : {\n            },\n            method: 'createTemplatePageIfNotExists',\n            interfaceName: 'core.questback.IQuestBackManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'createTest' : function(testName, gs_silent) {\n        var data = {\n            args : {\n                testName : JSON.stringify(testName),\n            },\n            method: 'createTest',\n            interfaceName: 'core.questback.IQuestBackManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'deleteTest' : function(testId, gs_silent) {\n        var data = {\n            args : {\n                testId : JSON.stringify(testId),\n            },\n            method: 'deleteTest',\n            interfaceName: 'core.questback.IQuestBackManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getAllTests' : function(gs_silent) {\n        var data = {\n            args : {\n            },\n            method: 'getAllTests',\n            interfaceName: 'core.questback.IQuestBackManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getBestCategoryResultForCompany' : function(userId,catId, gs_silent) {\n        var data = {\n            args : {\n                userId : JSON.stringify(userId),\n                catId : JSON.stringify(catId),\n            },\n            method: 'getBestCategoryResultForCompany',\n            interfaceName: 'core.questback.IQuestBackManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getCategories' : function(gs_silent) {\n        var data = {\n            args : {\n            },\n            method: 'getCategories',\n            interfaceName: 'core.questback.IQuestBackManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getCategoriesForTest' : function(testId, gs_silent) {\n        var data = {\n            args : {\n                testId : JSON.stringify(testId),\n            },\n            method: 'getCategoriesForTest',\n            interfaceName: 'core.questback.IQuestBackManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getCompanyScoreForTestForCurrentUser' : function(testId, gs_silent) {\n        var data = {\n            args : {\n                testId : JSON.stringify(testId),\n            },\n            method: 'getCompanyScoreForTestForCurrentUser',\n            interfaceName: 'core.questback.IQuestBackManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getNextQuestionPage' : function(testId, gs_silent) {\n        var data = {\n            args : {\n                testId : JSON.stringify(testId),\n            },\n            method: 'getNextQuestionPage',\n            interfaceName: 'core.questback.IQuestBackManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getOptionsByPageId' : function(pageId, gs_silent) {\n        var data = {\n            args : {\n                pageId : JSON.stringify(pageId),\n            },\n            method: 'getOptionsByPageId',\n            interfaceName: 'core.questback.IQuestBackManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getPageId' : function(questionId, gs_silent) {\n        var data = {\n            args : {\n                questionId : JSON.stringify(questionId),\n            },\n            method: 'getPageId',\n            interfaceName: 'core.questback.IQuestBackManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getProgress' : function(testId, gs_silent) {\n        var data = {\n            args : {\n                testId : JSON.stringify(testId),\n            },\n            method: 'getProgress',\n            interfaceName: 'core.questback.IQuestBackManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getProgressForUser' : function(userId,testId, gs_silent) {\n        var data = {\n            args : {\n                userId : JSON.stringify(userId),\n                testId : JSON.stringify(testId),\n            },\n            method: 'getProgressForUser',\n            interfaceName: 'core.questback.IQuestBackManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getQuestion' : function(id, gs_silent) {\n        var data = {\n            args : {\n                id : JSON.stringify(id),\n            },\n            method: 'getQuestion',\n            interfaceName: 'core.questback.IQuestBackManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getQuestionTitle' : function(pageId, gs_silent) {\n        var data = {\n            args : {\n                pageId : JSON.stringify(pageId),\n            },\n            method: 'getQuestionTitle',\n            interfaceName: 'core.questback.IQuestBackManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getResult' : function(testId, gs_silent) {\n        var data = {\n            args : {\n                testId : JSON.stringify(testId),\n            },\n            method: 'getResult',\n            interfaceName: 'core.questback.IQuestBackManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getResultRequirement' : function(gs_silent) {\n        var data = {\n            args : {\n            },\n            method: 'getResultRequirement',\n            interfaceName: 'core.questback.IQuestBackManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getResultWithReference' : function(testId,referenceId, gs_silent) {\n        var data = {\n            args : {\n                testId : JSON.stringify(testId),\n                referenceId : JSON.stringify(referenceId),\n            },\n            method: 'getResultWithReference',\n            interfaceName: 'core.questback.IQuestBackManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getScoreForTest' : function(userId,testId, gs_silent) {\n        var data = {\n            args : {\n                userId : JSON.stringify(userId),\n                testId : JSON.stringify(testId),\n            },\n            method: 'getScoreForTest',\n            interfaceName: 'core.questback.IQuestBackManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getTest' : function(testId, gs_silent) {\n        var data = {\n            args : {\n                testId : JSON.stringify(testId),\n            },\n            method: 'getTest',\n            interfaceName: 'core.questback.IQuestBackManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getTestResult' : function(testId, gs_silent) {\n        var data = {\n            args : {\n                testId : JSON.stringify(testId),\n            },\n            method: 'getTestResult',\n            interfaceName: 'core.questback.IQuestBackManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getTestResultForUser' : function(testId,userId, gs_silent) {\n        var data = {\n            args : {\n                testId : JSON.stringify(testId),\n                userId : JSON.stringify(userId),\n            },\n            method: 'getTestResultForUser',\n            interfaceName: 'core.questback.IQuestBackManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getTestResults' : function(userId,testId, gs_silent) {\n        var data = {\n            args : {\n                userId : JSON.stringify(userId),\n                testId : JSON.stringify(testId),\n            },\n            method: 'getTestResults',\n            interfaceName: 'core.questback.IQuestBackManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getTests' : function(gs_silent) {\n        var data = {\n            args : {\n            },\n            method: 'getTests',\n            interfaceName: 'core.questback.IQuestBackManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getTestsForUser' : function(userId, gs_silent) {\n        var data = {\n            args : {\n                userId : JSON.stringify(userId),\n            },\n            method: 'getTestsForUser',\n            interfaceName: 'core.questback.IQuestBackManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getTypeByPageId' : function(pageId, gs_silent) {\n        var data = {\n            args : {\n                pageId : JSON.stringify(pageId),\n            },\n            method: 'getTypeByPageId',\n            interfaceName: 'core.questback.IQuestBackManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'hasAnswered' : function(pageId,testId, gs_silent) {\n        var data = {\n            args : {\n                pageId : JSON.stringify(pageId),\n                testId : JSON.stringify(testId),\n            },\n            method: 'hasAnswered',\n            interfaceName: 'core.questback.IQuestBackManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'isQuestBackSent' : function(userId,testId,reference, gs_silent) {\n        var data = {\n            args : {\n                userId : JSON.stringify(userId),\n                testId : JSON.stringify(testId),\n                reference : JSON.stringify(reference),\n            },\n            method: 'isQuestBackSent',\n            interfaceName: 'core.questback.IQuestBackManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'questionTreeChanged' : function(applicationId, gs_silent) {\n        var data = {\n            args : {\n                applicationId : JSON.stringify(applicationId),\n            },\n            method: 'questionTreeChanged',\n            interfaceName: 'core.questback.IQuestBackManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'saveQuestBackAnswerResponse' : function(answerId,answer, gs_silent) {\n        var data = {\n            args : {\n                answerId : JSON.stringify(answerId),\n                answer : JSON.stringify(answer),\n            },\n            method: 'saveQuestBackAnswerResponse',\n            interfaceName: 'core.questback.IQuestBackManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'saveQuestBackResultRequirement' : function(requirement, gs_silent) {\n        var data = {\n            args : {\n                requirement : JSON.stringify(requirement),\n            },\n            method: 'saveQuestBackResultRequirement',\n            interfaceName: 'core.questback.IQuestBackManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'saveTest' : function(test, gs_silent) {\n        var data = {\n            args : {\n                test : JSON.stringify(test),\n            },\n            method: 'saveTest',\n            interfaceName: 'core.questback.IQuestBackManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'sendQuestBack' : function(testId,userId,reference,event, gs_silent) {\n        var data = {\n            args : {\n                testId : JSON.stringify(testId),\n                userId : JSON.stringify(userId),\n                reference : JSON.stringify(reference),\n                event : JSON.stringify(event),\n            },\n            method: 'sendQuestBack',\n            interfaceName: 'core.questback.IQuestBackManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n}\nGetShopApiWebSocket.BookingComRateManagerManager = function(communication) {\n    this.communication = communication;\n}\n\nGetShopApiWebSocket.BookingComRateManagerManager.prototype = {\n    'getRateManagerConfig' : function(multilevelname, gs_silent) {\n        var data = {\n            args : {\n            },\n            method: 'getRateManagerConfig',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.ratemanager.IBookingComRateManagerManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'pushAllBookings' : function(multilevelname, gs_silent) {\n        var data = {\n            args : {\n            },\n            method: 'pushAllBookings',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.ratemanager.IBookingComRateManagerManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'pushInventoryList' : function(multilevelname, gs_silent) {\n        var data = {\n            args : {\n            },\n            method: 'pushInventoryList',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.ratemanager.IBookingComRateManagerManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'saveRateManagerConfig' : function(multilevelname, config, gs_silent) {\n        var data = {\n            args : {\n                config : JSON.stringify(config),\n            },\n            method: 'saveRateManagerConfig',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.ratemanager.IBookingComRateManagerManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'updateRate' : function(multilevelname, start,end,roomId,rate, gs_silent) {\n        var data = {\n            args : {\n                start : JSON.stringify(start),\n                end : JSON.stringify(end),\n                roomId : JSON.stringify(roomId),\n                rate : JSON.stringify(rate),\n            },\n            method: 'updateRate',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.ratemanager.IBookingComRateManagerManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n}\nGetShopApiWebSocket.ReportingManager = function(communication) {\n    this.communication = communication;\n}\n\nGetShopApiWebSocket.ReportingManager.prototype = {\n    'getAllEventsFromSession' : function(startDate,stopDate,searchSessionId, gs_silent) {\n        var data = {\n            args : {\n                startDate : JSON.stringify(startDate),\n                stopDate : JSON.stringify(stopDate),\n                searchSessionId : JSON.stringify(searchSessionId),\n            },\n            method: 'getAllEventsFromSession',\n            interfaceName: 'core.reportingmanager.IReportingManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getConnectedUsers' : function(startdate,stopDate,filter, gs_silent) {\n        var data = {\n            args : {\n                startdate : JSON.stringify(startdate),\n                stopDate : JSON.stringify(stopDate),\n                filter : JSON.stringify(filter),\n            },\n            method: 'getConnectedUsers',\n            interfaceName: 'core.reportingmanager.IReportingManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getOrdersCreated' : function(startDate,stopDate, gs_silent) {\n        var data = {\n            args : {\n                startDate : JSON.stringify(startDate),\n                stopDate : JSON.stringify(stopDate),\n            },\n            method: 'getOrdersCreated',\n            interfaceName: 'core.reportingmanager.IReportingManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getPageViews' : function(startDate,stopDate, gs_silent) {\n        var data = {\n            args : {\n                startDate : JSON.stringify(startDate),\n                stopDate : JSON.stringify(stopDate),\n            },\n            method: 'getPageViews',\n            interfaceName: 'core.reportingmanager.IReportingManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getProductViewed' : function(startDate,stopDate, gs_silent) {\n        var data = {\n            args : {\n                startDate : JSON.stringify(startDate),\n                stopDate : JSON.stringify(stopDate),\n            },\n            method: 'getProductViewed',\n            interfaceName: 'core.reportingmanager.IReportingManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getReport' : function(startDate,stopDate,type, gs_silent) {\n        var data = {\n            args : {\n                startDate : JSON.stringify(startDate),\n                stopDate : JSON.stringify(stopDate),\n                type : JSON.stringify(type),\n            },\n            method: 'getReport',\n            interfaceName: 'core.reportingmanager.IReportingManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getUserLoggedOn' : function(startDate,stopDate, gs_silent) {\n        var data = {\n            args : {\n                startDate : JSON.stringify(startDate),\n                stopDate : JSON.stringify(stopDate),\n            },\n            method: 'getUserLoggedOn',\n            interfaceName: 'core.reportingmanager.IReportingManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n}\nGetShopApiWebSocket.ResturantManager = function(communication) {\n    this.communication = communication;\n}\n\nGetShopApiWebSocket.ResturantManager.prototype = {\n    'addCartItems' : function(cartItems,tableId, gs_silent) {\n        var data = {\n            args : {\n                cartItems : JSON.stringify(cartItems),\n                tableId : JSON.stringify(tableId),\n            },\n            method: 'addCartItems',\n            interfaceName: 'core.resturantmanager.IResturantManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'changeToDifferentSession' : function(sessionId,tableId, gs_silent) {\n        var data = {\n            args : {\n                sessionId : JSON.stringify(sessionId),\n                tableId : JSON.stringify(tableId),\n            },\n            method: 'changeToDifferentSession',\n            interfaceName: 'core.resturantmanager.IResturantManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'completePayment' : function(paymentMethodId,cartItemIds, gs_silent) {\n        var data = {\n            args : {\n                paymentMethodId : JSON.stringify(paymentMethodId),\n                cartItemIds : JSON.stringify(cartItemIds),\n            },\n            method: 'completePayment',\n            interfaceName: 'core.resturantmanager.IResturantManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'createRoom' : function(roomName, gs_silent) {\n        var data = {\n            args : {\n                roomName : JSON.stringify(roomName),\n            },\n            method: 'createRoom',\n            interfaceName: 'core.resturantmanager.IResturantManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'createTable' : function(roomId,tableId, gs_silent) {\n        var data = {\n            args : {\n                roomId : JSON.stringify(roomId),\n                tableId : JSON.stringify(tableId),\n            },\n            method: 'createTable',\n            interfaceName: 'core.resturantmanager.IResturantManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'createTableSession' : function(tableId, gs_silent) {\n        var data = {\n            args : {\n                tableId : JSON.stringify(tableId),\n            },\n            method: 'createTableSession',\n            interfaceName: 'core.resturantmanager.IResturantManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'deleteTable' : function(tableId, gs_silent) {\n        var data = {\n            args : {\n                tableId : JSON.stringify(tableId),\n            },\n            method: 'deleteTable',\n            interfaceName: 'core.resturantmanager.IResturantManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getAllSessions' : function(gs_silent) {\n        var data = {\n            args : {\n            },\n            method: 'getAllSessions',\n            interfaceName: 'core.resturantmanager.IResturantManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getAllSessionsForTable' : function(tableId, gs_silent) {\n        var data = {\n            args : {\n                tableId : JSON.stringify(tableId),\n            },\n            method: 'getAllSessionsForTable',\n            interfaceName: 'core.resturantmanager.IResturantManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getCurrentTableData' : function(tableId, gs_silent) {\n        var data = {\n            args : {\n                tableId : JSON.stringify(tableId),\n            },\n            method: 'getCurrentTableData',\n            interfaceName: 'core.resturantmanager.IResturantManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getRoomById' : function(roomId, gs_silent) {\n        var data = {\n            args : {\n                roomId : JSON.stringify(roomId),\n            },\n            method: 'getRoomById',\n            interfaceName: 'core.resturantmanager.IResturantManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getRooms' : function(gs_silent) {\n        var data = {\n            args : {\n            },\n            method: 'getRooms',\n            interfaceName: 'core.resturantmanager.IResturantManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getTableById' : function(tableId, gs_silent) {\n        var data = {\n            args : {\n                tableId : JSON.stringify(tableId),\n            },\n            method: 'getTableById',\n            interfaceName: 'core.resturantmanager.IResturantManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'isOrderPriceCorrect' : function(paymentMethodId,cartItems,price, gs_silent) {\n        var data = {\n            args : {\n                paymentMethodId : JSON.stringify(paymentMethodId),\n                cartItems : JSON.stringify(cartItems),\n                price : JSON.stringify(price),\n            },\n            method: 'isOrderPriceCorrect',\n            interfaceName: 'core.resturantmanager.IResturantManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'payOnRoom' : function(room,cartItemsIds, gs_silent) {\n        var data = {\n            args : {\n                room : JSON.stringify(room),\n                cartItemsIds : JSON.stringify(cartItemsIds),\n            },\n            method: 'payOnRoom',\n            interfaceName: 'core.resturantmanager.IResturantManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n}\nGetShopApiWebSocket.SalesManager = function(communication) {\n    this.communication = communication;\n}\n\nGetShopApiWebSocket.SalesManager.prototype = {\n    'findCustomer' : function(key,type, gs_silent) {\n        var data = {\n            args : {\n                key : JSON.stringify(key),\n                type : JSON.stringify(type),\n            },\n            method: 'findCustomer',\n            interfaceName: 'core.sales.ISalesManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getCustomer' : function(orgId, gs_silent) {\n        var data = {\n            args : {\n                orgId : JSON.stringify(orgId),\n            },\n            method: 'getCustomer',\n            interfaceName: 'core.sales.ISalesManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getEvent' : function(eventId, gs_silent) {\n        var data = {\n            args : {\n                eventId : JSON.stringify(eventId),\n            },\n            method: 'getEvent',\n            interfaceName: 'core.sales.ISalesManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getEventsForCustomer' : function(orgId, gs_silent) {\n        var data = {\n            args : {\n                orgId : JSON.stringify(orgId),\n            },\n            method: 'getEventsForCustomer',\n            interfaceName: 'core.sales.ISalesManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getEventsForDay' : function(day, gs_silent) {\n        var data = {\n            args : {\n                day : JSON.stringify(day),\n            },\n            method: 'getEventsForDay',\n            interfaceName: 'core.sales.ISalesManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getLatestCustomer' : function(gs_silent) {\n        var data = {\n            args : {\n            },\n            method: 'getLatestCustomer',\n            interfaceName: 'core.sales.ISalesManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getLatestEvent' : function(gs_silent) {\n        var data = {\n            args : {\n            },\n            method: 'getLatestEvent',\n            interfaceName: 'core.sales.ISalesManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'saveCustomer' : function(customer, gs_silent) {\n        var data = {\n            args : {\n                customer : JSON.stringify(customer),\n            },\n            method: 'saveCustomer',\n            interfaceName: 'core.sales.ISalesManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'saveEvent' : function(event, gs_silent) {\n        var data = {\n            args : {\n                event : JSON.stringify(event),\n            },\n            method: 'saveEvent',\n            interfaceName: 'core.sales.ISalesManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n}\nGetShopApiWebSocket.ScormManager = function(communication) {\n    this.communication = communication;\n}\n\nGetShopApiWebSocket.ScormManager.prototype = {\n    'deleteScormPackage' : function(packageId, gs_silent) {\n        var data = {\n            args : {\n                packageId : JSON.stringify(packageId),\n            },\n            method: 'deleteScormPackage',\n            interfaceName: 'core.scormmanager.IScormManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getAllPackages' : function(gs_silent) {\n        var data = {\n            args : {\n            },\n            method: 'getAllPackages',\n            interfaceName: 'core.scormmanager.IScormManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getMandatoryPackages' : function(userId, gs_silent) {\n        var data = {\n            args : {\n                userId : JSON.stringify(userId),\n            },\n            method: 'getMandatoryPackages',\n            interfaceName: 'core.scormmanager.IScormManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getMyScorm' : function(userId, gs_silent) {\n        var data = {\n            args : {\n                userId : JSON.stringify(userId),\n            },\n            method: 'getMyScorm',\n            interfaceName: 'core.scormmanager.IScormManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getPackage' : function(packageId, gs_silent) {\n        var data = {\n            args : {\n                packageId : JSON.stringify(packageId),\n            },\n            method: 'getPackage',\n            interfaceName: 'core.scormmanager.IScormManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getScormCertificateContent' : function(id, gs_silent) {\n        var data = {\n            args : {\n                id : JSON.stringify(id),\n            },\n            method: 'getScormCertificateContent',\n            interfaceName: 'core.scormmanager.IScormManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getScormForCurrentUser' : function(scormId,userId, gs_silent) {\n        var data = {\n            args : {\n                scormId : JSON.stringify(scormId),\n                userId : JSON.stringify(userId),\n            },\n            method: 'getScormForCurrentUser',\n            interfaceName: 'core.scormmanager.IScormManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'saveScormCertificateContent' : function(content, gs_silent) {\n        var data = {\n            args : {\n                content : JSON.stringify(content),\n            },\n            method: 'saveScormCertificateContent',\n            interfaceName: 'core.scormmanager.IScormManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'saveSetup' : function(scormPackage, gs_silent) {\n        var data = {\n            args : {\n                scormPackage : JSON.stringify(scormPackage),\n            },\n            method: 'saveSetup',\n            interfaceName: 'core.scormmanager.IScormManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'syncMoodle' : function(gs_silent) {\n        var data = {\n            args : {\n            },\n            method: 'syncMoodle',\n            interfaceName: 'core.scormmanager.IScormManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'updateResult' : function(inResult, gs_silent) {\n        var data = {\n            args : {\n                inResult : JSON.stringify(inResult),\n            },\n            method: 'updateResult',\n            interfaceName: 'core.scormmanager.IScormManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n}\nGetShopApiWebSocket.SearchManager = function(communication) {\n    this.communication = communication;\n}\n\nGetShopApiWebSocket.SearchManager.prototype = {\n    'search' : function(searchWord, gs_silent) {\n        var data = {\n            args : {\n                searchWord : JSON.stringify(searchWord),\n            },\n            method: 'search',\n            interfaceName: 'core.searchmanager.ISearchManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n}\nGetShopApiWebSocket.SedoxProductManager = function(communication) {\n    this.communication = communication;\n}\n\nGetShopApiWebSocket.SedoxProductManager.prototype = {\n    'addCommentToUser' : function(userId,comment, gs_silent) {\n        var data = {\n            args : {\n                userId : JSON.stringify(userId),\n                comment : JSON.stringify(comment),\n            },\n            method: 'addCommentToUser',\n            interfaceName: 'core.sedox.ISedoxProductManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'addCreditToSlave' : function(slaveId,amount, gs_silent) {\n        var data = {\n            args : {\n                slaveId : JSON.stringify(slaveId),\n                amount : JSON.stringify(amount),\n            },\n            method: 'addCreditToSlave',\n            interfaceName: 'core.sedox.ISedoxProductManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'addFileToProduct' : function(base64EncodedFile,fileName,fileType,productId,options, gs_silent) {\n        var data = {\n            args : {\n                base64EncodedFile : JSON.stringify(base64EncodedFile),\n                fileName : JSON.stringify(fileName),\n                fileType : JSON.stringify(fileType),\n                productId : JSON.stringify(productId),\n                options : JSON.stringify(options),\n            },\n            method: 'addFileToProduct',\n            interfaceName: 'core.sedox.ISedoxProductManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'addFileToProductAsync' : function(sedoxBinaryFile,fileType,fileName,productId, gs_silent) {\n        var data = {\n            args : {\n                sedoxBinaryFile : JSON.stringify(sedoxBinaryFile),\n                fileType : JSON.stringify(fileType),\n                fileName : JSON.stringify(fileName),\n                productId : JSON.stringify(productId),\n            },\n            method: 'addFileToProductAsync',\n            interfaceName: 'core.sedox.ISedoxProductManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'addReference' : function(productId,reference, gs_silent) {\n        var data = {\n            args : {\n                productId : JSON.stringify(productId),\n                reference : JSON.stringify(reference),\n            },\n            method: 'addReference',\n            interfaceName: 'core.sedox.ISedoxProductManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'addSlaveToUser' : function(masterUserId,slaveUserId, gs_silent) {\n        var data = {\n            args : {\n                masterUserId : JSON.stringify(masterUserId),\n                slaveUserId : JSON.stringify(slaveUserId),\n            },\n            method: 'addSlaveToUser',\n            interfaceName: 'core.sedox.ISedoxProductManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'addUserCredit' : function(id,description,amount, gs_silent) {\n        var data = {\n            args : {\n                id : JSON.stringify(id),\n                description : JSON.stringify(description),\n                amount : JSON.stringify(amount),\n            },\n            method: 'addUserCredit',\n            interfaceName: 'core.sedox.ISedoxProductManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'changeDeveloperStatus' : function(userId,disabled, gs_silent) {\n        var data = {\n            args : {\n                userId : JSON.stringify(userId),\n                disabled : JSON.stringify(disabled),\n            },\n            method: 'changeDeveloperStatus',\n            interfaceName: 'core.sedox.ISedoxProductManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'clearManager' : function(gs_silent) {\n        var data = {\n            args : {\n            },\n            method: 'clearManager',\n            interfaceName: 'core.sedox.ISedoxProductManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'createSedoxProduct' : function(sedoxProduct,base64encodedOriginalFile,originalFileName,forSlaveId,origin,comment,useCredit,options,reference, gs_silent) {\n        var data = {\n            args : {\n                sedoxProduct : JSON.stringify(sedoxProduct),\n                base64encodedOriginalFile : JSON.stringify(base64encodedOriginalFile),\n                originalFileName : JSON.stringify(originalFileName),\n                forSlaveId : JSON.stringify(forSlaveId),\n                origin : JSON.stringify(origin),\n                comment : JSON.stringify(comment),\n                useCredit : JSON.stringify(useCredit),\n                options : JSON.stringify(options),\n                reference : JSON.stringify(reference),\n            },\n            method: 'createSedoxProduct',\n            interfaceName: 'core.sedox.ISedoxProductManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'finishUpload' : function(forSlaveId,sharedProduct,useCredit,comment,originalFile,cmdEncryptedFile,options,base64EncodeString,originalFileName,origin,fromUserId,referenceId, gs_silent) {\n        var data = {\n            args : {\n                forSlaveId : JSON.stringify(forSlaveId),\n                sharedProduct : JSON.stringify(sharedProduct),\n                useCredit : JSON.stringify(useCredit),\n                comment : JSON.stringify(comment),\n                originalFile : JSON.stringify(originalFile),\n                cmdEncryptedFile : JSON.stringify(cmdEncryptedFile),\n                options : JSON.stringify(options),\n                base64EncodeString : JSON.stringify(base64EncodeString),\n                originalFileName : JSON.stringify(originalFileName),\n                origin : JSON.stringify(origin),\n                fromUserId : JSON.stringify(fromUserId),\n                referenceId : JSON.stringify(referenceId),\n            },\n            method: 'finishUpload',\n            interfaceName: 'core.sedox.ISedoxProductManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getAllUsers' : function(gs_silent) {\n        var data = {\n            args : {\n            },\n            method: 'getAllUsers',\n            interfaceName: 'core.sedox.ISedoxProductManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getAllUsersAsTreeNodes' : function(gs_silent) {\n        var data = {\n            args : {\n            },\n            method: 'getAllUsersAsTreeNodes',\n            interfaceName: 'core.sedox.ISedoxProductManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getAllUsersWithNegativeCreditLimit' : function(gs_silent) {\n        var data = {\n            args : {\n            },\n            method: 'getAllUsersWithNegativeCreditLimit',\n            interfaceName: 'core.sedox.ISedoxProductManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getCurrentUserCreditHistory' : function(filterData, gs_silent) {\n        var data = {\n            args : {\n                filterData : JSON.stringify(filterData),\n            },\n            method: 'getCurrentUserCreditHistory',\n            interfaceName: 'core.sedox.ISedoxProductManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getCurrentUserCreditHistoryCount' : function(filterData, gs_silent) {\n        var data = {\n            args : {\n                filterData : JSON.stringify(filterData),\n            },\n            method: 'getCurrentUserCreditHistoryCount',\n            interfaceName: 'core.sedox.ISedoxProductManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getDevelopers' : function(gs_silent) {\n        var data = {\n            args : {\n            },\n            method: 'getDevelopers',\n            interfaceName: 'core.sedox.ISedoxProductManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getExtraInformationForFile' : function(productId,fileId, gs_silent) {\n        var data = {\n            args : {\n                productId : JSON.stringify(productId),\n                fileId : JSON.stringify(fileId),\n            },\n            method: 'getExtraInformationForFile',\n            interfaceName: 'core.sedox.ISedoxProductManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getFileNotProcessedToDayCount' : function(daysBack, gs_silent) {\n        var data = {\n            args : {\n                daysBack : JSON.stringify(daysBack),\n            },\n            method: 'getFileNotProcessedToDayCount',\n            interfaceName: 'core.sedox.ISedoxProductManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getLatestProductsList' : function(count, gs_silent) {\n        var data = {\n            args : {\n                count : JSON.stringify(count),\n            },\n            method: 'getLatestProductsList',\n            interfaceName: 'core.sedox.ISedoxProductManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getNextFileId' : function(gs_silent) {\n        var data = {\n            args : {\n            },\n            method: 'getNextFileId',\n            interfaceName: 'core.sedox.ISedoxProductManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getOrders' : function(filterData, gs_silent) {\n        var data = {\n            args : {\n                filterData : JSON.stringify(filterData),\n            },\n            method: 'getOrders',\n            interfaceName: 'core.sedox.ISedoxProductManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getOrdersPageCount' : function(filterData, gs_silent) {\n        var data = {\n            args : {\n                filterData : JSON.stringify(filterData),\n            },\n            method: 'getOrdersPageCount',\n            interfaceName: 'core.sedox.ISedoxProductManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getPriceForProduct' : function(productId,files, gs_silent) {\n        var data = {\n            args : {\n                productId : JSON.stringify(productId),\n                files : JSON.stringify(files),\n            },\n            method: 'getPriceForProduct',\n            interfaceName: 'core.sedox.ISedoxProductManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getProductById' : function(id, gs_silent) {\n        var data = {\n            args : {\n                id : JSON.stringify(id),\n            },\n            method: 'getProductById',\n            interfaceName: 'core.sedox.ISedoxProductManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getProductIds' : function(gs_silent) {\n        var data = {\n            args : {\n            },\n            method: 'getProductIds',\n            interfaceName: 'core.sedox.ISedoxProductManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getProductsByDaysBack' : function(day, gs_silent) {\n        var data = {\n            args : {\n                day : JSON.stringify(day),\n            },\n            method: 'getProductsByDaysBack',\n            interfaceName: 'core.sedox.ISedoxProductManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getProductsFirstUploadedByCurrentUser' : function(filterData, gs_silent) {\n        var data = {\n            args : {\n                filterData : JSON.stringify(filterData),\n            },\n            method: 'getProductsFirstUploadedByCurrentUser',\n            interfaceName: 'core.sedox.ISedoxProductManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getProductsFirstUploadedByCurrentUserTotalPages' : function(filterData, gs_silent) {\n        var data = {\n            args : {\n                filterData : JSON.stringify(filterData),\n            },\n            method: 'getProductsFirstUploadedByCurrentUserTotalPages',\n            interfaceName: 'core.sedox.ISedoxProductManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getSedoxProductByMd5Sum' : function(md5sum, gs_silent) {\n        var data = {\n            args : {\n                md5sum : JSON.stringify(md5sum),\n            },\n            method: 'getSedoxProductByMd5Sum',\n            interfaceName: 'core.sedox.ISedoxProductManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getSedoxUserAccount' : function(gs_silent) {\n        var data = {\n            args : {\n            },\n            method: 'getSedoxUserAccount',\n            interfaceName: 'core.sedox.ISedoxProductManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getSedoxUserAccountById' : function(userid, gs_silent) {\n        var data = {\n            args : {\n                userid : JSON.stringify(userid),\n            },\n            method: 'getSedoxUserAccountById',\n            interfaceName: 'core.sedox.ISedoxProductManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getSharedProductById' : function(id, gs_silent) {\n        var data = {\n            args : {\n                id : JSON.stringify(id),\n            },\n            method: 'getSharedProductById',\n            interfaceName: 'core.sedox.ISedoxProductManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getSlaves' : function(masterUserId, gs_silent) {\n        var data = {\n            args : {\n                masterUserId : JSON.stringify(masterUserId),\n            },\n            method: 'getSlaves',\n            interfaceName: 'core.sedox.ISedoxProductManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getStatistic' : function(gs_silent) {\n        var data = {\n            args : {\n            },\n            method: 'getStatistic',\n            interfaceName: 'core.sedox.ISedoxProductManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getUploadHistory' : function(gs_silent) {\n        var data = {\n            args : {\n            },\n            method: 'getUploadHistory',\n            interfaceName: 'core.sedox.ISedoxProductManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getUserFileDownloadCount' : function(gs_silent) {\n        var data = {\n            args : {\n            },\n            method: 'getUserFileDownloadCount',\n            interfaceName: 'core.sedox.ISedoxProductManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getUserFileUploadCount' : function(gs_silent) {\n        var data = {\n            args : {\n            },\n            method: 'getUserFileUploadCount',\n            interfaceName: 'core.sedox.ISedoxProductManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'invokeCreditUpdate' : function(gs_silent) {\n        var data = {\n            args : {\n            },\n            method: 'invokeCreditUpdate',\n            interfaceName: 'core.sedox.ISedoxProductManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'login' : function(emailAddress,password, gs_silent) {\n        var data = {\n            args : {\n                emailAddress : JSON.stringify(emailAddress),\n                password : JSON.stringify(password),\n            },\n            method: 'login',\n            interfaceName: 'core.sedox.ISedoxProductManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'markAsFinished' : function(productId,finished, gs_silent) {\n        var data = {\n            args : {\n                productId : JSON.stringify(productId),\n                finished : JSON.stringify(finished),\n            },\n            method: 'markAsFinished',\n            interfaceName: 'core.sedox.ISedoxProductManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'notifyForCustomer' : function(productId,extraText, gs_silent) {\n        var data = {\n            args : {\n                productId : JSON.stringify(productId),\n                extraText : JSON.stringify(extraText),\n            },\n            method: 'notifyForCustomer',\n            interfaceName: 'core.sedox.ISedoxProductManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'purchaseOnlyForCustomer' : function(productId,files, gs_silent) {\n        var data = {\n            args : {\n                productId : JSON.stringify(productId),\n                files : JSON.stringify(files),\n            },\n            method: 'purchaseOnlyForCustomer',\n            interfaceName: 'core.sedox.ISedoxProductManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'purchaseProduct' : function(productId,files, gs_silent) {\n        var data = {\n            args : {\n                productId : JSON.stringify(productId),\n                files : JSON.stringify(files),\n            },\n            method: 'purchaseProduct',\n            interfaceName: 'core.sedox.ISedoxProductManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'refreshEvcCredit' : function(gs_silent) {\n        var data = {\n            args : {\n            },\n            method: 'refreshEvcCredit',\n            interfaceName: 'core.sedox.ISedoxProductManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'removeBinaryFileFromProduct' : function(productId,fileId, gs_silent) {\n        var data = {\n            args : {\n                productId : JSON.stringify(productId),\n                fileId : JSON.stringify(fileId),\n            },\n            method: 'removeBinaryFileFromProduct',\n            interfaceName: 'core.sedox.ISedoxProductManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'removeSlaveFromMaster' : function(slaveId, gs_silent) {\n        var data = {\n            args : {\n                slaveId : JSON.stringify(slaveId),\n            },\n            method: 'removeSlaveFromMaster',\n            interfaceName: 'core.sedox.ISedoxProductManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'requestSpecialFile' : function(productId,comment, gs_silent) {\n        var data = {\n            args : {\n                productId : JSON.stringify(productId),\n                comment : JSON.stringify(comment),\n            },\n            method: 'requestSpecialFile',\n            interfaceName: 'core.sedox.ISedoxProductManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'search' : function(search, gs_silent) {\n        var data = {\n            args : {\n                search : JSON.stringify(search),\n            },\n            method: 'search',\n            interfaceName: 'core.sedox.ISedoxProductManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'searchForUsers' : function(searchString, gs_silent) {\n        var data = {\n            args : {\n                searchString : JSON.stringify(searchString),\n            },\n            method: 'searchForUsers',\n            interfaceName: 'core.sedox.ISedoxProductManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'searchUserFiles' : function(search, gs_silent) {\n        var data = {\n            args : {\n                search : JSON.stringify(search),\n            },\n            method: 'searchUserFiles',\n            interfaceName: 'core.sedox.ISedoxProductManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'sendProductByMail' : function(productId,extraText,files, gs_silent) {\n        var data = {\n            args : {\n                productId : JSON.stringify(productId),\n                extraText : JSON.stringify(extraText),\n                files : JSON.stringify(files),\n            },\n            method: 'sendProductByMail',\n            interfaceName: 'core.sedox.ISedoxProductManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'sendProductToDifferentEmail' : function(productId,emailAddress,files,extraText, gs_silent) {\n        var data = {\n            args : {\n                productId : JSON.stringify(productId),\n                emailAddress : JSON.stringify(emailAddress),\n                files : JSON.stringify(files),\n                extraText : JSON.stringify(extraText),\n            },\n            method: 'sendProductToDifferentEmail',\n            interfaceName: 'core.sedox.ISedoxProductManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'setChecksum' : function(productId,checksum, gs_silent) {\n        var data = {\n            args : {\n                productId : JSON.stringify(productId),\n                checksum : JSON.stringify(checksum),\n            },\n            method: 'setChecksum',\n            interfaceName: 'core.sedox.ISedoxProductManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'setCreditAllowedLimist' : function(userId,creditlimit, gs_silent) {\n        var data = {\n            args : {\n                userId : JSON.stringify(userId),\n                creditlimit : JSON.stringify(creditlimit),\n            },\n            method: 'setCreditAllowedLimist',\n            interfaceName: 'core.sedox.ISedoxProductManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'setEvcId' : function(userId,evcId, gs_silent) {\n        var data = {\n            args : {\n                userId : JSON.stringify(userId),\n                evcId : JSON.stringify(evcId),\n            },\n            method: 'setEvcId',\n            interfaceName: 'core.sedox.ISedoxProductManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'setExtraInformationForFile' : function(productId,fileId,text, gs_silent) {\n        var data = {\n            args : {\n                productId : JSON.stringify(productId),\n                fileId : JSON.stringify(fileId),\n                text : JSON.stringify(text),\n            },\n            method: 'setExtraInformationForFile',\n            interfaceName: 'core.sedox.ISedoxProductManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'setFixedPrice' : function(userId,price, gs_silent) {\n        var data = {\n            args : {\n                userId : JSON.stringify(userId),\n                price : JSON.stringify(price),\n            },\n            method: 'setFixedPrice',\n            interfaceName: 'core.sedox.ISedoxProductManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'setPushoverId' : function(pushover, gs_silent) {\n        var data = {\n            args : {\n                pushover : JSON.stringify(pushover),\n            },\n            method: 'setPushoverId',\n            interfaceName: 'core.sedox.ISedoxProductManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'setPushoverIdForUser' : function(pushover,userId, gs_silent) {\n        var data = {\n            args : {\n                pushover : JSON.stringify(pushover),\n                userId : JSON.stringify(userId),\n            },\n            method: 'setPushoverIdForUser',\n            interfaceName: 'core.sedox.ISedoxProductManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'setSpecialRequestsForFile' : function(productId,fileId,dpf,egr,decat,vmax,adblue,dtc,flaps, gs_silent) {\n        var data = {\n            args : {\n                productId : JSON.stringify(productId),\n                fileId : JSON.stringify(fileId),\n                dpf : JSON.stringify(dpf),\n                egr : JSON.stringify(egr),\n                decat : JSON.stringify(decat),\n                vmax : JSON.stringify(vmax),\n                adblue : JSON.stringify(adblue),\n                dtc : JSON.stringify(dtc),\n                flaps : JSON.stringify(flaps),\n            },\n            method: 'setSpecialRequestsForFile',\n            interfaceName: 'core.sedox.ISedoxProductManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'setType' : function(productId,type, gs_silent) {\n        var data = {\n            args : {\n                productId : JSON.stringify(productId),\n                type : JSON.stringify(type),\n            },\n            method: 'setType',\n            interfaceName: 'core.sedox.ISedoxProductManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'sync' : function(option, gs_silent) {\n        var data = {\n            args : {\n                option : JSON.stringify(option),\n            },\n            method: 'sync',\n            interfaceName: 'core.sedox.ISedoxProductManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'syncFromMagento' : function(userId, gs_silent) {\n        var data = {\n            args : {\n                userId : JSON.stringify(userId),\n            },\n            method: 'syncFromMagento',\n            interfaceName: 'core.sedox.ISedoxProductManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'toggleAllowNegativeCredit' : function(userId,allow, gs_silent) {\n        var data = {\n            args : {\n                userId : JSON.stringify(userId),\n                allow : JSON.stringify(allow),\n            },\n            method: 'toggleAllowNegativeCredit',\n            interfaceName: 'core.sedox.ISedoxProductManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'toggleAllowWindowsApp' : function(userId,allow, gs_silent) {\n        var data = {\n            args : {\n                userId : JSON.stringify(userId),\n                allow : JSON.stringify(allow),\n            },\n            method: 'toggleAllowWindowsApp',\n            interfaceName: 'core.sedox.ISedoxProductManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'toggleBadCustomer' : function(userId,badCustomer, gs_silent) {\n        var data = {\n            args : {\n                userId : JSON.stringify(userId),\n                badCustomer : JSON.stringify(badCustomer),\n            },\n            method: 'toggleBadCustomer',\n            interfaceName: 'core.sedox.ISedoxProductManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'toggleIsNorwegian' : function(userId,isNorwegian, gs_silent) {\n        var data = {\n            args : {\n                userId : JSON.stringify(userId),\n                isNorwegian : JSON.stringify(isNorwegian),\n            },\n            method: 'toggleIsNorwegian',\n            interfaceName: 'core.sedox.ISedoxProductManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'togglePassiveSlaveMode' : function(userId,toggle, gs_silent) {\n        var data = {\n            args : {\n                userId : JSON.stringify(userId),\n                toggle : JSON.stringify(toggle),\n            },\n            method: 'togglePassiveSlaveMode',\n            interfaceName: 'core.sedox.ISedoxProductManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'toggleSaleableProduct' : function(productId,saleable, gs_silent) {\n        var data = {\n            args : {\n                productId : JSON.stringify(productId),\n                saleable : JSON.stringify(saleable),\n            },\n            method: 'toggleSaleableProduct',\n            interfaceName: 'core.sedox.ISedoxProductManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'toggleStartStop' : function(productId,toggle, gs_silent) {\n        var data = {\n            args : {\n                productId : JSON.stringify(productId),\n                toggle : JSON.stringify(toggle),\n            },\n            method: 'toggleStartStop',\n            interfaceName: 'core.sedox.ISedoxProductManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'transferCreditToSlave' : function(slaveId,amount, gs_silent) {\n        var data = {\n            args : {\n                slaveId : JSON.stringify(slaveId),\n                amount : JSON.stringify(amount),\n            },\n            method: 'transferCreditToSlave',\n            interfaceName: 'core.sedox.ISedoxProductManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'updateEvcCreditAccounts' : function(gs_silent) {\n        var data = {\n            args : {\n            },\n            method: 'updateEvcCreditAccounts',\n            interfaceName: 'core.sedox.ISedoxProductManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n}\nGetShopApiWebSocket.SimpleEventManager = function(communication) {\n    this.communication = communication;\n}\n\nGetShopApiWebSocket.SimpleEventManager.prototype = {\n    'addUserToEvent' : function(pageId,userId, gs_silent) {\n        var data = {\n            args : {\n                pageId : JSON.stringify(pageId),\n                userId : JSON.stringify(userId),\n            },\n            method: 'addUserToEvent',\n            interfaceName: 'core.simpleeventmanager.ISimpleEventManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'deleteEvent' : function(eventId, gs_silent) {\n        var data = {\n            args : {\n                eventId : JSON.stringify(eventId),\n            },\n            method: 'deleteEvent',\n            interfaceName: 'core.simpleeventmanager.ISimpleEventManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getAllEvents' : function(listPageId, gs_silent) {\n        var data = {\n            args : {\n                listPageId : JSON.stringify(listPageId),\n            },\n            method: 'getAllEvents',\n            interfaceName: 'core.simpleeventmanager.ISimpleEventManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getEventById' : function(eventId, gs_silent) {\n        var data = {\n            args : {\n                eventId : JSON.stringify(eventId),\n            },\n            method: 'getEventById',\n            interfaceName: 'core.simpleeventmanager.ISimpleEventManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getEventByPageId' : function(pageId, gs_silent) {\n        var data = {\n            args : {\n                pageId : JSON.stringify(pageId),\n            },\n            method: 'getEventByPageId',\n            interfaceName: 'core.simpleeventmanager.ISimpleEventManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getEventsInFuture' : function(listPageId, gs_silent) {\n        var data = {\n            args : {\n                listPageId : JSON.stringify(listPageId),\n            },\n            method: 'getEventsInFuture',\n            interfaceName: 'core.simpleeventmanager.ISimpleEventManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'saveEvent' : function(simpleEvent, gs_silent) {\n        var data = {\n            args : {\n                simpleEvent : JSON.stringify(simpleEvent),\n            },\n            method: 'saveEvent',\n            interfaceName: 'core.simpleeventmanager.ISimpleEventManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n}\nGetShopApiWebSocket.StoreManager = function(communication) {\n    this.communication = communication;\n}\n\nGetShopApiWebSocket.StoreManager.prototype = {\n    'autoCreateStore' : function(hostname, gs_silent) {\n        var data = {\n            args : {\n                hostname : JSON.stringify(hostname),\n            },\n            method: 'autoCreateStore',\n            interfaceName: 'core.storemanager.IStoreManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'createStore' : function(hostname,email,password,notify, gs_silent) {\n        var data = {\n            args : {\n                hostname : JSON.stringify(hostname),\n                email : JSON.stringify(email),\n                password : JSON.stringify(password),\n                notify : JSON.stringify(notify),\n            },\n            method: 'createStore',\n            interfaceName: 'core.storemanager.IStoreManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'delete' : function(gs_silent) {\n        var data = {\n            args : {\n            },\n            method: 'delete',\n            interfaceName: 'core.storemanager.IStoreManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'enableExtendedMode' : function(toggle,password, gs_silent) {\n        var data = {\n            args : {\n                toggle : JSON.stringify(toggle),\n                password : JSON.stringify(password),\n            },\n            method: 'enableExtendedMode',\n            interfaceName: 'core.storemanager.IStoreManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'enableSMSAccess' : function(toggle,password, gs_silent) {\n        var data = {\n            args : {\n                toggle : JSON.stringify(toggle),\n                password : JSON.stringify(password),\n            },\n            method: 'enableSMSAccess',\n            interfaceName: 'core.storemanager.IStoreManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'generateStoreId' : function(gs_silent) {\n        var data = {\n            args : {\n            },\n            method: 'generateStoreId',\n            interfaceName: 'core.storemanager.IStoreManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getAllEnvironments' : function(gs_silent) {\n        var data = {\n            args : {\n            },\n            method: 'getAllEnvironments',\n            interfaceName: 'core.storemanager.IStoreManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getCurrentSession' : function(gs_silent) {\n        var data = {\n            args : {\n            },\n            method: 'getCurrentSession',\n            interfaceName: 'core.storemanager.IStoreManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getKey' : function(key, gs_silent) {\n        var data = {\n            args : {\n                key : JSON.stringify(key),\n            },\n            method: 'getKey',\n            interfaceName: 'core.storemanager.IStoreManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getKeySecure' : function(key,password, gs_silent) {\n        var data = {\n            args : {\n                key : JSON.stringify(key),\n                password : JSON.stringify(password),\n            },\n            method: 'getKeySecure',\n            interfaceName: 'core.storemanager.IStoreManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getMultiLevelNames' : function(gs_silent) {\n        var data = {\n            args : {\n            },\n            method: 'getMultiLevelNames',\n            interfaceName: 'core.storemanager.IStoreManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getMyStore' : function(gs_silent) {\n        var data = {\n            args : {\n            },\n            method: 'getMyStore',\n            interfaceName: 'core.storemanager.IStoreManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getStoreId' : function(gs_silent) {\n        var data = {\n            args : {\n            },\n            method: 'getStoreId',\n            interfaceName: 'core.storemanager.IStoreManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'initializeStore' : function(webAddress,initSessionId, gs_silent) {\n        var data = {\n            args : {\n                webAddress : JSON.stringify(webAddress),\n                initSessionId : JSON.stringify(initSessionId),\n            },\n            method: 'initializeStore',\n            interfaceName: 'core.storemanager.IStoreManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'initializeStoreByStoreId' : function(storeId,initSessionId, gs_silent) {\n        var data = {\n            args : {\n                storeId : JSON.stringify(storeId),\n                initSessionId : JSON.stringify(initSessionId),\n            },\n            method: 'initializeStoreByStoreId',\n            interfaceName: 'core.storemanager.IStoreManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'isAddressTaken' : function(address, gs_silent) {\n        var data = {\n            args : {\n                address : JSON.stringify(address),\n            },\n            method: 'isAddressTaken',\n            interfaceName: 'core.storemanager.IStoreManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'isProductMode' : function(gs_silent) {\n        var data = {\n            args : {\n            },\n            method: 'isProductMode',\n            interfaceName: 'core.storemanager.IStoreManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'receiveSyncData' : function(json, gs_silent) {\n        var data = {\n            args : {\n                json : JSON.stringify(json),\n            },\n            method: 'receiveSyncData',\n            interfaceName: 'core.storemanager.IStoreManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'removeDomainName' : function(domainName, gs_silent) {\n        var data = {\n            args : {\n                domainName : JSON.stringify(domainName),\n            },\n            method: 'removeDomainName',\n            interfaceName: 'core.storemanager.IStoreManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'removeKey' : function(key, gs_silent) {\n        var data = {\n            args : {\n                key : JSON.stringify(key),\n            },\n            method: 'removeKey',\n            interfaceName: 'core.storemanager.IStoreManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'saveKey' : function(key,value,secure, gs_silent) {\n        var data = {\n            args : {\n                key : JSON.stringify(key),\n                value : JSON.stringify(value),\n                secure : JSON.stringify(secure),\n            },\n            method: 'saveKey',\n            interfaceName: 'core.storemanager.IStoreManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'saveStore' : function(config, gs_silent) {\n        var data = {\n            args : {\n                config : JSON.stringify(config),\n            },\n            method: 'saveStore',\n            interfaceName: 'core.storemanager.IStoreManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'setImageIdToFavicon' : function(id, gs_silent) {\n        var data = {\n            args : {\n                id : JSON.stringify(id),\n            },\n            method: 'setImageIdToFavicon',\n            interfaceName: 'core.storemanager.IStoreManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'setIntroductionRead' : function(gs_silent) {\n        var data = {\n            args : {\n            },\n            method: 'setIntroductionRead',\n            interfaceName: 'core.storemanager.IStoreManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'setIsTemplate' : function(storeId,isTemplate, gs_silent) {\n        var data = {\n            args : {\n                storeId : JSON.stringify(storeId),\n                isTemplate : JSON.stringify(isTemplate),\n            },\n            method: 'setIsTemplate',\n            interfaceName: 'core.storemanager.IStoreManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'setPrimaryDomainName' : function(domainName, gs_silent) {\n        var data = {\n            args : {\n                domainName : JSON.stringify(domainName),\n            },\n            method: 'setPrimaryDomainName',\n            interfaceName: 'core.storemanager.IStoreManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'setSessionLanguage' : function(id, gs_silent) {\n        var data = {\n            args : {\n                id : JSON.stringify(id),\n            },\n            method: 'setSessionLanguage',\n            interfaceName: 'core.storemanager.IStoreManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'setStoreIdentifier' : function(identifier, gs_silent) {\n        var data = {\n            args : {\n                identifier : JSON.stringify(identifier),\n            },\n            method: 'setStoreIdentifier',\n            interfaceName: 'core.storemanager.IStoreManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'syncData' : function(environment,username,password, gs_silent) {\n        var data = {\n            args : {\n                environment : JSON.stringify(environment),\n                username : JSON.stringify(username),\n                password : JSON.stringify(password),\n            },\n            method: 'syncData',\n            interfaceName: 'core.storemanager.IStoreManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'toggleIgnoreBookingErrors' : function(password, gs_silent) {\n        var data = {\n            args : {\n                password : JSON.stringify(password),\n            },\n            method: 'toggleIgnoreBookingErrors',\n            interfaceName: 'core.storemanager.IStoreManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n}\nGetShopApiWebSocket.TimeRegisteringManager = function(communication) {\n    this.communication = communication;\n}\n\nGetShopApiWebSocket.TimeRegisteringManager.prototype = {\n    'deleteTimeUnsecure' : function(id, gs_silent) {\n        var data = {\n            args : {\n                id : JSON.stringify(id),\n            },\n            method: 'deleteTimeUnsecure',\n            interfaceName: 'core.timeregisteringmanager.ITimeRegisteringManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getAllTimesRegistered' : function(gs_silent) {\n        var data = {\n            args : {\n            },\n            method: 'getAllTimesRegistered',\n            interfaceName: 'core.timeregisteringmanager.ITimeRegisteringManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getMyHours' : function(gs_silent) {\n        var data = {\n            args : {\n            },\n            method: 'getMyHours',\n            interfaceName: 'core.timeregisteringmanager.ITimeRegisteringManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getRegisteredHoursForUser' : function(userId,start,end, gs_silent) {\n        var data = {\n            args : {\n                userId : JSON.stringify(userId),\n                start : JSON.stringify(start),\n                end : JSON.stringify(end),\n            },\n            method: 'getRegisteredHoursForUser',\n            interfaceName: 'core.timeregisteringmanager.ITimeRegisteringManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'registerTime' : function(start,end,comment, gs_silent) {\n        var data = {\n            args : {\n                start : JSON.stringify(start),\n                end : JSON.stringify(end),\n                comment : JSON.stringify(comment),\n            },\n            method: 'registerTime',\n            interfaceName: 'core.timeregisteringmanager.ITimeRegisteringManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n}\nGetShopApiWebSocket.TrackAndTraceManager = function(communication) {\n    this.communication = communication;\n}\n\nGetShopApiWebSocket.TrackAndTraceManager.prototype = {\n    'acceptTodaysInstruction' : function(routeId, gs_silent) {\n        var data = {\n            args : {\n                routeId : JSON.stringify(routeId),\n            },\n            method: 'acceptTodaysInstruction',\n            interfaceName: 'core.trackandtrace.ITrackAndTraceManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'acknowledgeDriverMessage' : function(msgId, gs_silent) {\n        var data = {\n            args : {\n                msgId : JSON.stringify(msgId),\n            },\n            method: 'acknowledgeDriverMessage',\n            interfaceName: 'core.trackandtrace.ITrackAndTraceManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'addDeliveryTaskToDestionation' : function(destionatId,task, gs_silent) {\n        var data = {\n            args : {\n                destionatId : JSON.stringify(destionatId),\n                task : JSON.stringify(task),\n            },\n            method: 'addDeliveryTaskToDestionation',\n            interfaceName: 'core.trackandtrace.ITrackAndTraceManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'addDriverToRoute' : function(userId,routeId, gs_silent) {\n        var data = {\n            args : {\n                userId : JSON.stringify(userId),\n                routeId : JSON.stringify(routeId),\n            },\n            method: 'addDriverToRoute',\n            interfaceName: 'core.trackandtrace.ITrackAndTraceManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'addPickupOrder' : function(destnationId,order,inTask, gs_silent) {\n        var data = {\n            args : {\n                destnationId : JSON.stringify(destnationId),\n                order : JSON.stringify(order),\n                inTask : JSON.stringify(inTask),\n            },\n            method: 'addPickupOrder',\n            interfaceName: 'core.trackandtrace.ITrackAndTraceManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'changeCountedDriverCopies' : function(taskId,orderReference,quantity, gs_silent) {\n        var data = {\n            args : {\n                taskId : JSON.stringify(taskId),\n                orderReference : JSON.stringify(orderReference),\n                quantity : JSON.stringify(quantity),\n            },\n            method: 'changeCountedDriverCopies',\n            interfaceName: 'core.trackandtrace.ITrackAndTraceManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'changeQuantity' : function(taskId,orderReference,parcels,containers, gs_silent) {\n        var data = {\n            args : {\n                taskId : JSON.stringify(taskId),\n                orderReference : JSON.stringify(orderReference),\n                parcels : JSON.stringify(parcels),\n                containers : JSON.stringify(containers),\n            },\n            method: 'changeQuantity',\n            interfaceName: 'core.trackandtrace.ITrackAndTraceManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'checkRemovalOfRoutes' : function(gs_silent) {\n        var data = {\n            args : {\n            },\n            method: 'checkRemovalOfRoutes',\n            interfaceName: 'core.trackandtrace.ITrackAndTraceManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'deleteRoute' : function(routeId, gs_silent) {\n        var data = {\n            args : {\n                routeId : JSON.stringify(routeId),\n            },\n            method: 'deleteRoute',\n            interfaceName: 'core.trackandtrace.ITrackAndTraceManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getAllExportedDataForRoute' : function(routeId, gs_silent) {\n        var data = {\n            args : {\n                routeId : JSON.stringify(routeId),\n            },\n            method: 'getAllExportedDataForRoute',\n            interfaceName: 'core.trackandtrace.ITrackAndTraceManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getAllRoutes' : function(gs_silent) {\n        var data = {\n            args : {\n            },\n            method: 'getAllRoutes',\n            interfaceName: 'core.trackandtrace.ITrackAndTraceManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getDestinationById' : function(destinationId, gs_silent) {\n        var data = {\n            args : {\n                destinationId : JSON.stringify(destinationId),\n            },\n            method: 'getDestinationById',\n            interfaceName: 'core.trackandtrace.ITrackAndTraceManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getDriverMessage' : function(msgId, gs_silent) {\n        var data = {\n            args : {\n                msgId : JSON.stringify(msgId),\n            },\n            method: 'getDriverMessage',\n            interfaceName: 'core.trackandtrace.ITrackAndTraceManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getDriverMessages' : function(userId, gs_silent) {\n        var data = {\n            args : {\n                userId : JSON.stringify(userId),\n            },\n            method: 'getDriverMessages',\n            interfaceName: 'core.trackandtrace.ITrackAndTraceManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getExceptions' : function(gs_silent) {\n        var data = {\n            args : {\n            },\n            method: 'getExceptions',\n            interfaceName: 'core.trackandtrace.ITrackAndTraceManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getExport' : function(routeId,currentState, gs_silent) {\n        var data = {\n            args : {\n                routeId : JSON.stringify(routeId),\n                currentState : JSON.stringify(currentState),\n            },\n            method: 'getExport',\n            interfaceName: 'core.trackandtrace.ITrackAndTraceManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getExportedData' : function(start,end, gs_silent) {\n        var data = {\n            args : {\n                start : JSON.stringify(start),\n                end : JSON.stringify(end),\n            },\n            method: 'getExportedData',\n            interfaceName: 'core.trackandtrace.ITrackAndTraceManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getLoadStatus' : function(statusId, gs_silent) {\n        var data = {\n            args : {\n                statusId : JSON.stringify(statusId),\n            },\n            method: 'getLoadStatus',\n            interfaceName: 'core.trackandtrace.ITrackAndTraceManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getLoadStatuses' : function(gs_silent) {\n        var data = {\n            args : {\n            },\n            method: 'getLoadStatuses',\n            interfaceName: 'core.trackandtrace.ITrackAndTraceManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getMyRoutes' : function(gs_silent) {\n        var data = {\n            args : {\n            },\n            method: 'getMyRoutes',\n            interfaceName: 'core.trackandtrace.ITrackAndTraceManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getPooledDestiontions' : function(gs_silent) {\n        var data = {\n            args : {\n            },\n            method: 'getPooledDestiontions',\n            interfaceName: 'core.trackandtrace.ITrackAndTraceManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getPooledDestiontionsByUsersDepotId' : function(gs_silent) {\n        var data = {\n            args : {\n            },\n            method: 'getPooledDestiontionsByUsersDepotId',\n            interfaceName: 'core.trackandtrace.ITrackAndTraceManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getRoutesById' : function(routeId, gs_silent) {\n        var data = {\n            args : {\n                routeId : JSON.stringify(routeId),\n            },\n            method: 'getRoutesById',\n            interfaceName: 'core.trackandtrace.ITrackAndTraceManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getRoutesCompletedPast24Hours' : function(gs_silent) {\n        var data = {\n            args : {\n            },\n            method: 'getRoutesCompletedPast24Hours',\n            interfaceName: 'core.trackandtrace.ITrackAndTraceManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'loadData' : function(base64,fileName, gs_silent) {\n        var data = {\n            args : {\n                base64 : JSON.stringify(base64),\n                fileName : JSON.stringify(fileName),\n            },\n            method: 'loadData',\n            interfaceName: 'core.trackandtrace.ITrackAndTraceManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'markAsArrived' : function(destinationId,startedTimeStamp,lon,lat, gs_silent) {\n        var data = {\n            args : {\n                destinationId : JSON.stringify(destinationId),\n                startedTimeStamp : JSON.stringify(startedTimeStamp),\n                lon : JSON.stringify(lon),\n                lat : JSON.stringify(lat),\n            },\n            method: 'markAsArrived',\n            interfaceName: 'core.trackandtrace.ITrackAndTraceManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'markAsCompleted' : function(routeId,lat,lon, gs_silent) {\n        var data = {\n            args : {\n                routeId : JSON.stringify(routeId),\n                lat : JSON.stringify(lat),\n                lon : JSON.stringify(lon),\n            },\n            method: 'markAsCompleted',\n            interfaceName: 'core.trackandtrace.ITrackAndTraceManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'markAsCompletedWithTimeStamp' : function(routeId,lat,lon,date, gs_silent) {\n        var data = {\n            args : {\n                routeId : JSON.stringify(routeId),\n                lat : JSON.stringify(lat),\n                lon : JSON.stringify(lon),\n                date : JSON.stringify(date),\n            },\n            method: 'markAsCompletedWithTimeStamp',\n            interfaceName: 'core.trackandtrace.ITrackAndTraceManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'markAsCompletedWithTimeStampAndPassword' : function(routeId,lat,lon,date,password, gs_silent) {\n        var data = {\n            args : {\n                routeId : JSON.stringify(routeId),\n                lat : JSON.stringify(lat),\n                lon : JSON.stringify(lon),\n                date : JSON.stringify(date),\n                password : JSON.stringify(password),\n            },\n            method: 'markAsCompletedWithTimeStampAndPassword',\n            interfaceName: 'core.trackandtrace.ITrackAndTraceManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'markAsDeliverd' : function(taskId, gs_silent) {\n        var data = {\n            args : {\n                taskId : JSON.stringify(taskId),\n            },\n            method: 'markAsDeliverd',\n            interfaceName: 'core.trackandtrace.ITrackAndTraceManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'markDeparting' : function(destinationId,latitude,longitude,timeStamp,signatureImage,typedSignature, gs_silent) {\n        var data = {\n            args : {\n                destinationId : JSON.stringify(destinationId),\n                latitude : JSON.stringify(latitude),\n                longitude : JSON.stringify(longitude),\n                timeStamp : JSON.stringify(timeStamp),\n                signatureImage : JSON.stringify(signatureImage),\n                typedSignature : JSON.stringify(typedSignature),\n            },\n            method: 'markDeparting',\n            interfaceName: 'core.trackandtrace.ITrackAndTraceManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'markOrderWithException' : function(taskId,orderReferenceNumber,exceptionId, gs_silent) {\n        var data = {\n            args : {\n                taskId : JSON.stringify(taskId),\n                orderReferenceNumber : JSON.stringify(orderReferenceNumber),\n                exceptionId : JSON.stringify(exceptionId),\n            },\n            method: 'markOrderWithException',\n            interfaceName: 'core.trackandtrace.ITrackAndTraceManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'markRouteAsStarted' : function(routeId,startedTimeStamp,lon,lat, gs_silent) {\n        var data = {\n            args : {\n                routeId : JSON.stringify(routeId),\n                startedTimeStamp : JSON.stringify(startedTimeStamp),\n                lon : JSON.stringify(lon),\n                lat : JSON.stringify(lat),\n            },\n            method: 'markRouteAsStarted',\n            interfaceName: 'core.trackandtrace.ITrackAndTraceManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'markTaskWithExceptionDeliverd' : function(taskId,exceptionId, gs_silent) {\n        var data = {\n            args : {\n                taskId : JSON.stringify(taskId),\n                exceptionId : JSON.stringify(exceptionId),\n            },\n            method: 'markTaskWithExceptionDeliverd',\n            interfaceName: 'core.trackandtrace.ITrackAndTraceManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'moveDesitinationToPool' : function(routeId,destinationId, gs_silent) {\n        var data = {\n            args : {\n                routeId : JSON.stringify(routeId),\n                destinationId : JSON.stringify(destinationId),\n            },\n            method: 'moveDesitinationToPool',\n            interfaceName: 'core.trackandtrace.ITrackAndTraceManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'moveDestinationFromPoolToRoute' : function(destId,routeId, gs_silent) {\n        var data = {\n            args : {\n                destId : JSON.stringify(destId),\n                routeId : JSON.stringify(routeId),\n            },\n            method: 'moveDestinationFromPoolToRoute',\n            interfaceName: 'core.trackandtrace.ITrackAndTraceManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'removeDriverToRoute' : function(userId,routeId, gs_silent) {\n        var data = {\n            args : {\n                userId : JSON.stringify(userId),\n                routeId : JSON.stringify(routeId),\n            },\n            method: 'removeDriverToRoute',\n            interfaceName: 'core.trackandtrace.ITrackAndTraceManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'saveDestination' : function(destination, gs_silent) {\n        var data = {\n            args : {\n                destination : JSON.stringify(destination),\n            },\n            method: 'saveDestination',\n            interfaceName: 'core.trackandtrace.ITrackAndTraceManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'saveException' : function(exception, gs_silent) {\n        var data = {\n            args : {\n                exception : JSON.stringify(exception),\n            },\n            method: 'saveException',\n            interfaceName: 'core.trackandtrace.ITrackAndTraceManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'saveRoute' : function(route, gs_silent) {\n        var data = {\n            args : {\n                route : JSON.stringify(route),\n            },\n            method: 'saveRoute',\n            interfaceName: 'core.trackandtrace.ITrackAndTraceManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'sendMessageToDriver' : function(driverId,message, gs_silent) {\n        var data = {\n            args : {\n                driverId : JSON.stringify(driverId),\n                message : JSON.stringify(message),\n            },\n            method: 'sendMessageToDriver',\n            interfaceName: 'core.trackandtrace.ITrackAndTraceManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'setCagesOrPalletCount' : function(taskId,quantity, gs_silent) {\n        var data = {\n            args : {\n                taskId : JSON.stringify(taskId),\n                quantity : JSON.stringify(quantity),\n            },\n            method: 'setCagesOrPalletCount',\n            interfaceName: 'core.trackandtrace.ITrackAndTraceManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'setDesitionationException' : function(destinationId,exceptionId,lon,lat, gs_silent) {\n        var data = {\n            args : {\n                destinationId : JSON.stringify(destinationId),\n                exceptionId : JSON.stringify(exceptionId),\n                lon : JSON.stringify(lon),\n                lat : JSON.stringify(lat),\n            },\n            method: 'setDesitionationException',\n            interfaceName: 'core.trackandtrace.ITrackAndTraceManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'setInstructionOnDestination' : function(routeId,destinationId,message, gs_silent) {\n        var data = {\n            args : {\n                routeId : JSON.stringify(routeId),\n                destinationId : JSON.stringify(destinationId),\n                message : JSON.stringify(message),\n            },\n            method: 'setInstructionOnDestination',\n            interfaceName: 'core.trackandtrace.ITrackAndTraceManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'setScannedBarcodes' : function(taskId,orderReference,barcodes,barcodeEnteredManually, gs_silent) {\n        var data = {\n            args : {\n                taskId : JSON.stringify(taskId),\n                orderReference : JSON.stringify(orderReference),\n                barcodes : JSON.stringify(barcodes),\n                barcodeEnteredManually : JSON.stringify(barcodeEnteredManually),\n            },\n            method: 'setScannedBarcodes',\n            interfaceName: 'core.trackandtrace.ITrackAndTraceManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'setSequence' : function(exceptionId,sequence, gs_silent) {\n        var data = {\n            args : {\n                exceptionId : JSON.stringify(exceptionId),\n                sequence : JSON.stringify(sequence),\n            },\n            method: 'setSequence',\n            interfaceName: 'core.trackandtrace.ITrackAndTraceManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'unsetSkippedReason' : function(destinationId, gs_silent) {\n        var data = {\n            args : {\n                destinationId : JSON.stringify(destinationId),\n            },\n            method: 'unsetSkippedReason',\n            interfaceName: 'core.trackandtrace.ITrackAndTraceManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n}\nGetShopApiWebSocket.UserManager = function(communication) {\n    this.communication = communication;\n}\n\nGetShopApiWebSocket.UserManager.prototype = {\n    'addComment' : function(userId,comment, gs_silent) {\n        var data = {\n            args : {\n                userId : JSON.stringify(userId),\n                comment : JSON.stringify(comment),\n            },\n            method: 'addComment',\n            interfaceName: 'core.usermanager.IUserManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'addGroupToUser' : function(userId,groupId, gs_silent) {\n        var data = {\n            args : {\n                userId : JSON.stringify(userId),\n                groupId : JSON.stringify(groupId),\n            },\n            method: 'addGroupToUser',\n            interfaceName: 'core.usermanager.IUserManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'addMetaData' : function(userId,key,value, gs_silent) {\n        var data = {\n            args : {\n                userId : JSON.stringify(userId),\n                key : JSON.stringify(key),\n                value : JSON.stringify(value),\n            },\n            method: 'addMetaData',\n            interfaceName: 'core.usermanager.IUserManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'addUserPrivilege' : function(userId,managerName,managerFunction, gs_silent) {\n        var data = {\n            args : {\n                userId : JSON.stringify(userId),\n                managerName : JSON.stringify(managerName),\n                managerFunction : JSON.stringify(managerFunction),\n            },\n            method: 'addUserPrivilege',\n            interfaceName: 'core.usermanager.IUserManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'assignCompanyToGroup' : function(company,groupId, gs_silent) {\n        var data = {\n            args : {\n                company : JSON.stringify(company),\n                groupId : JSON.stringify(groupId),\n            },\n            method: 'assignCompanyToGroup',\n            interfaceName: 'core.usermanager.IUserManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'assignCompanyToUser' : function(company,userId, gs_silent) {\n        var data = {\n            args : {\n                company : JSON.stringify(company),\n                userId : JSON.stringify(userId),\n            },\n            method: 'assignCompanyToUser',\n            interfaceName: 'core.usermanager.IUserManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'assignMetaDataToVirtualSessionUser' : function(key,value, gs_silent) {\n        var data = {\n            args : {\n                key : JSON.stringify(key),\n                value : JSON.stringify(value),\n            },\n            method: 'assignMetaDataToVirtualSessionUser',\n            interfaceName: 'core.usermanager.IUserManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'assignReferenceToCompany' : function(companyId,companyReference, gs_silent) {\n        var data = {\n            args : {\n                companyId : JSON.stringify(companyId),\n                companyReference : JSON.stringify(companyReference),\n            },\n            method: 'assignReferenceToCompany',\n            interfaceName: 'core.usermanager.IUserManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'canCreateUser' : function(user, gs_silent) {\n        var data = {\n            args : {\n                user : JSON.stringify(user),\n            },\n            method: 'canCreateUser',\n            interfaceName: 'core.usermanager.IUserManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'cancelImpersonating' : function(gs_silent) {\n        var data = {\n            args : {\n            },\n            method: 'cancelImpersonating',\n            interfaceName: 'core.usermanager.IUserManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'checkIfFieldOnUserIsOkey' : function(field,value, gs_silent) {\n        var data = {\n            args : {\n                field : JSON.stringify(field),\n                value : JSON.stringify(value),\n            },\n            method: 'checkIfFieldOnUserIsOkey',\n            interfaceName: 'core.usermanager.IUserManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'checkUserNameAndPassword' : function(username,password, gs_silent) {\n        var data = {\n            args : {\n                username : JSON.stringify(username),\n                password : JSON.stringify(password),\n            },\n            method: 'checkUserNameAndPassword',\n            interfaceName: 'core.usermanager.IUserManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'clearUserManagerForAllData' : function(gs_silent) {\n        var data = {\n            args : {\n            },\n            method: 'clearUserManagerForAllData',\n            interfaceName: 'core.usermanager.IUserManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'confirmCompanyOwner' : function(userId, gs_silent) {\n        var data = {\n            args : {\n                userId : JSON.stringify(userId),\n            },\n            method: 'confirmCompanyOwner',\n            interfaceName: 'core.usermanager.IUserManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'createUser' : function(user, gs_silent) {\n        var data = {\n            args : {\n                user : JSON.stringify(user),\n            },\n            method: 'createUser',\n            interfaceName: 'core.usermanager.IUserManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'deleteCompany' : function(companyId, gs_silent) {\n        var data = {\n            args : {\n                companyId : JSON.stringify(companyId),\n            },\n            method: 'deleteCompany',\n            interfaceName: 'core.usermanager.IUserManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'deleteExtraAddressToGroup' : function(groupId,addressId, gs_silent) {\n        var data = {\n            args : {\n                groupId : JSON.stringify(groupId),\n                addressId : JSON.stringify(addressId),\n            },\n            method: 'deleteExtraAddressToGroup',\n            interfaceName: 'core.usermanager.IUserManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'deleteUser' : function(userId, gs_silent) {\n        var data = {\n            args : {\n                userId : JSON.stringify(userId),\n            },\n            method: 'deleteUser',\n            interfaceName: 'core.usermanager.IUserManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'deleteUserRole' : function(roleId, gs_silent) {\n        var data = {\n            args : {\n                roleId : JSON.stringify(roleId),\n            },\n            method: 'deleteUserRole',\n            interfaceName: 'core.usermanager.IUserManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'doEmailExists' : function(email, gs_silent) {\n        var data = {\n            args : {\n                email : JSON.stringify(email),\n            },\n            method: 'doEmailExists',\n            interfaceName: 'core.usermanager.IUserManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'doesUserExistsOnReferenceNumber' : function(number, gs_silent) {\n        var data = {\n            args : {\n                number : JSON.stringify(number),\n            },\n            method: 'doesUserExistsOnReferenceNumber',\n            interfaceName: 'core.usermanager.IUserManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'findUsers' : function(searchCriteria, gs_silent) {\n        var data = {\n            args : {\n                searchCriteria : JSON.stringify(searchCriteria),\n            },\n            method: 'findUsers',\n            interfaceName: 'core.usermanager.IUserManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'forceCompanyOwner' : function(userId,isCompanyOwner, gs_silent) {\n        var data = {\n            args : {\n                userId : JSON.stringify(userId),\n                isCompanyOwner : JSON.stringify(isCompanyOwner),\n            },\n            method: 'forceCompanyOwner',\n            interfaceName: 'core.usermanager.IUserManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getAdministratorCount' : function(gs_silent) {\n        var data = {\n            args : {\n            },\n            method: 'getAdministratorCount',\n            interfaceName: 'core.usermanager.IUserManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getAllCompanies' : function(gs_silent) {\n        var data = {\n            args : {\n            },\n            method: 'getAllCompanies',\n            interfaceName: 'core.usermanager.IUserManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getAllCompaniesForGroup' : function(groupId, gs_silent) {\n        var data = {\n            args : {\n                groupId : JSON.stringify(groupId),\n            },\n            method: 'getAllCompaniesForGroup',\n            interfaceName: 'core.usermanager.IUserManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getAllCompanyFiltered' : function(filter, gs_silent) {\n        var data = {\n            args : {\n                filter : JSON.stringify(filter),\n            },\n            method: 'getAllCompanyFiltered',\n            interfaceName: 'core.usermanager.IUserManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getAllGroups' : function(gs_silent) {\n        var data = {\n            args : {\n            },\n            method: 'getAllGroups',\n            interfaceName: 'core.usermanager.IUserManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getAllGroupsFiletered' : function(filter, gs_silent) {\n        var data = {\n            args : {\n                filter : JSON.stringify(filter),\n            },\n            method: 'getAllGroupsFiletered',\n            interfaceName: 'core.usermanager.IUserManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getAllUsers' : function(gs_silent) {\n        var data = {\n            args : {\n            },\n            method: 'getAllUsers',\n            interfaceName: 'core.usermanager.IUserManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getAllUsersFiltered' : function(filter, gs_silent) {\n        var data = {\n            args : {\n                filter : JSON.stringify(filter),\n            },\n            method: 'getAllUsersFiltered',\n            interfaceName: 'core.usermanager.IUserManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getAllUsersWithCommentToApp' : function(appId, gs_silent) {\n        var data = {\n            args : {\n                appId : JSON.stringify(appId),\n            },\n            method: 'getAllUsersWithCommentToApp',\n            interfaceName: 'core.usermanager.IUserManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getCompaniesConnectedToGroupCount' : function(groupId, gs_silent) {\n        var data = {\n            args : {\n                groupId : JSON.stringify(groupId),\n            },\n            method: 'getCompaniesConnectedToGroupCount',\n            interfaceName: 'core.usermanager.IUserManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getCompany' : function(id, gs_silent) {\n        var data = {\n            args : {\n                id : JSON.stringify(id),\n            },\n            method: 'getCompany',\n            interfaceName: 'core.usermanager.IUserManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getCompanyByReference' : function(companyReference, gs_silent) {\n        var data = {\n            args : {\n                companyReference : JSON.stringify(companyReference),\n            },\n            method: 'getCompanyByReference',\n            interfaceName: 'core.usermanager.IUserManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getCustomersCount' : function(gs_silent) {\n        var data = {\n            args : {\n            },\n            method: 'getCustomersCount',\n            interfaceName: 'core.usermanager.IUserManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getEditorCount' : function(gs_silent) {\n        var data = {\n            args : {\n            },\n            method: 'getEditorCount',\n            interfaceName: 'core.usermanager.IUserManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getGroup' : function(groupId, gs_silent) {\n        var data = {\n            args : {\n                groupId : JSON.stringify(groupId),\n            },\n            method: 'getGroup',\n            interfaceName: 'core.usermanager.IUserManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getLoggedOnUser' : function(gs_silent) {\n        var data = {\n            args : {\n            },\n            method: 'getLoggedOnUser',\n            interfaceName: 'core.usermanager.IUserManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getLogins' : function(year, gs_silent) {\n        var data = {\n            args : {\n                year : JSON.stringify(year),\n            },\n            method: 'getLogins',\n            interfaceName: 'core.usermanager.IUserManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getPingoutTime' : function(gs_silent) {\n        var data = {\n            args : {\n            },\n            method: 'getPingoutTime',\n            interfaceName: 'core.usermanager.IUserManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getUnconfirmedCompanyOwners' : function(gs_silent) {\n        var data = {\n            args : {\n            },\n            method: 'getUnconfirmedCompanyOwners',\n            interfaceName: 'core.usermanager.IUserManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getUserById' : function(id, gs_silent) {\n        var data = {\n            args : {\n                id : JSON.stringify(id),\n            },\n            method: 'getUserById',\n            interfaceName: 'core.usermanager.IUserManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getUserList' : function(userIds, gs_silent) {\n        var data = {\n            args : {\n                userIds : JSON.stringify(userIds),\n            },\n            method: 'getUserList',\n            interfaceName: 'core.usermanager.IUserManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getUserRoles' : function(gs_silent) {\n        var data = {\n            args : {\n            },\n            method: 'getUserRoles',\n            interfaceName: 'core.usermanager.IUserManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getUserWithPermissionCheck' : function(userId, gs_silent) {\n        var data = {\n            args : {\n                userId : JSON.stringify(userId),\n            },\n            method: 'getUserWithPermissionCheck',\n            interfaceName: 'core.usermanager.IUserManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getUsersBasedOnGroupId' : function(groupId, gs_silent) {\n        var data = {\n            args : {\n                groupId : JSON.stringify(groupId),\n            },\n            method: 'getUsersBasedOnGroupId',\n            interfaceName: 'core.usermanager.IUserManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getUsersByCompanyId' : function(companyId, gs_silent) {\n        var data = {\n            args : {\n                companyId : JSON.stringify(companyId),\n            },\n            method: 'getUsersByCompanyId',\n            interfaceName: 'core.usermanager.IUserManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getUsersByType' : function(type, gs_silent) {\n        var data = {\n            args : {\n                type : JSON.stringify(type),\n            },\n            method: 'getUsersByType',\n            interfaceName: 'core.usermanager.IUserManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'impersonateUser' : function(userId, gs_silent) {\n        var data = {\n            args : {\n                userId : JSON.stringify(userId),\n            },\n            method: 'impersonateUser',\n            interfaceName: 'core.usermanager.IUserManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'isCaptain' : function(id, gs_silent) {\n        var data = {\n            args : {\n                id : JSON.stringify(id),\n            },\n            method: 'isCaptain',\n            interfaceName: 'core.usermanager.IUserManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'isImpersonating' : function(gs_silent) {\n        var data = {\n            args : {\n            },\n            method: 'isImpersonating',\n            interfaceName: 'core.usermanager.IUserManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'isLoggedIn' : function(gs_silent) {\n        var data = {\n            args : {\n            },\n            method: 'isLoggedIn',\n            interfaceName: 'core.usermanager.IUserManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'logLogout' : function(gs_silent) {\n        var data = {\n            args : {\n            },\n            method: 'logLogout',\n            interfaceName: 'core.usermanager.IUserManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'logOn' : function(username,password, gs_silent) {\n        var data = {\n            args : {\n                username : JSON.stringify(username),\n                password : JSON.stringify(password),\n            },\n            method: 'logOn',\n            interfaceName: 'core.usermanager.IUserManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'loginWithPincode' : function(username,password,pinCode, gs_silent) {\n        var data = {\n            args : {\n                username : JSON.stringify(username),\n                password : JSON.stringify(password),\n                pinCode : JSON.stringify(pinCode),\n            },\n            method: 'loginWithPincode',\n            interfaceName: 'core.usermanager.IUserManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'logonUsingKey' : function(logonKey, gs_silent) {\n        var data = {\n            args : {\n                logonKey : JSON.stringify(logonKey),\n            },\n            method: 'logonUsingKey',\n            interfaceName: 'core.usermanager.IUserManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'logonUsingRefNumber' : function(refCode, gs_silent) {\n        var data = {\n            args : {\n                refCode : JSON.stringify(refCode),\n            },\n            method: 'logonUsingRefNumber',\n            interfaceName: 'core.usermanager.IUserManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'logout' : function(gs_silent) {\n        var data = {\n            args : {\n            },\n            method: 'logout',\n            interfaceName: 'core.usermanager.IUserManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'mergeUsers' : function(userIds,properties, gs_silent) {\n        var data = {\n            args : {\n                userIds : JSON.stringify(userIds),\n                properties : JSON.stringify(properties),\n            },\n            method: 'mergeUsers',\n            interfaceName: 'core.usermanager.IUserManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'removeComment' : function(userId,commentId, gs_silent) {\n        var data = {\n            args : {\n                userId : JSON.stringify(userId),\n                commentId : JSON.stringify(commentId),\n            },\n            method: 'removeComment',\n            interfaceName: 'core.usermanager.IUserManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'removeGroup' : function(groupId, gs_silent) {\n        var data = {\n            args : {\n                groupId : JSON.stringify(groupId),\n            },\n            method: 'removeGroup',\n            interfaceName: 'core.usermanager.IUserManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'removeGroupFromUser' : function(userId,groupId, gs_silent) {\n        var data = {\n            args : {\n                userId : JSON.stringify(userId),\n                groupId : JSON.stringify(groupId),\n            },\n            method: 'removeGroupFromUser',\n            interfaceName: 'core.usermanager.IUserManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'removeMetaData' : function(userId,key, gs_silent) {\n        var data = {\n            args : {\n                userId : JSON.stringify(userId),\n                key : JSON.stringify(key),\n            },\n            method: 'removeMetaData',\n            interfaceName: 'core.usermanager.IUserManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'removeUserFromCompany' : function(companyId,userId, gs_silent) {\n        var data = {\n            args : {\n                companyId : JSON.stringify(companyId),\n                userId : JSON.stringify(userId),\n            },\n            method: 'removeUserFromCompany',\n            interfaceName: 'core.usermanager.IUserManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'requestAdminRight' : function(managerName,managerFunction,applicationInstanceId, gs_silent) {\n        var data = {\n            args : {\n                managerName : JSON.stringify(managerName),\n                managerFunction : JSON.stringify(managerFunction),\n                applicationInstanceId : JSON.stringify(applicationInstanceId),\n            },\n            method: 'requestAdminRight',\n            interfaceName: 'core.usermanager.IUserManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'requestNewPincode' : function(username,password, gs_silent) {\n        var data = {\n            args : {\n                username : JSON.stringify(username),\n                password : JSON.stringify(password),\n            },\n            method: 'requestNewPincode',\n            interfaceName: 'core.usermanager.IUserManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'resetPassword' : function(resetCode,username,newPassword, gs_silent) {\n        var data = {\n            args : {\n                resetCode : JSON.stringify(resetCode),\n                username : JSON.stringify(username),\n                newPassword : JSON.stringify(newPassword),\n            },\n            method: 'resetPassword',\n            interfaceName: 'core.usermanager.IUserManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'saveCompany' : function(company, gs_silent) {\n        var data = {\n            args : {\n                company : JSON.stringify(company),\n            },\n            method: 'saveCompany',\n            interfaceName: 'core.usermanager.IUserManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'saveExtraAddressToGroup' : function(group,address, gs_silent) {\n        var data = {\n            args : {\n                group : JSON.stringify(group),\n                address : JSON.stringify(address),\n            },\n            method: 'saveExtraAddressToGroup',\n            interfaceName: 'core.usermanager.IUserManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'saveGroup' : function(group, gs_silent) {\n        var data = {\n            args : {\n                group : JSON.stringify(group),\n            },\n            method: 'saveGroup',\n            interfaceName: 'core.usermanager.IUserManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'saveUser' : function(user, gs_silent) {\n        var data = {\n            args : {\n                user : JSON.stringify(user),\n            },\n            method: 'saveUser',\n            interfaceName: 'core.usermanager.IUserManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'saveUserRole' : function(role, gs_silent) {\n        var data = {\n            args : {\n                role : JSON.stringify(role),\n            },\n            method: 'saveUserRole',\n            interfaceName: 'core.usermanager.IUserManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'searchForCompanies' : function(searchWord, gs_silent) {\n        var data = {\n            args : {\n                searchWord : JSON.stringify(searchWord),\n            },\n            method: 'searchForCompanies',\n            interfaceName: 'core.usermanager.IUserManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'searchForGroup' : function(searchCriteria, gs_silent) {\n        var data = {\n            args : {\n                searchCriteria : JSON.stringify(searchCriteria),\n            },\n            method: 'searchForGroup',\n            interfaceName: 'core.usermanager.IUserManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'sendResetCode' : function(title,text,username, gs_silent) {\n        var data = {\n            args : {\n                title : JSON.stringify(title),\n                text : JSON.stringify(text),\n                username : JSON.stringify(username),\n            },\n            method: 'sendResetCode',\n            interfaceName: 'core.usermanager.IUserManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'setPasswordDirect' : function(userId,encryptedPassword, gs_silent) {\n        var data = {\n            args : {\n                userId : JSON.stringify(userId),\n                encryptedPassword : JSON.stringify(encryptedPassword),\n            },\n            method: 'setPasswordDirect',\n            interfaceName: 'core.usermanager.IUserManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'setSessionCompany' : function(companyId, gs_silent) {\n        var data = {\n            args : {\n                companyId : JSON.stringify(companyId),\n            },\n            method: 'setSessionCompany',\n            interfaceName: 'core.usermanager.IUserManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'toggleMainContact' : function(userId, gs_silent) {\n        var data = {\n            args : {\n                userId : JSON.stringify(userId),\n            },\n            method: 'toggleMainContact',\n            interfaceName: 'core.usermanager.IUserManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'undoSuspension' : function(userId,suspensionId, gs_silent) {\n        var data = {\n            args : {\n                userId : JSON.stringify(userId),\n                suspensionId : JSON.stringify(suspensionId),\n            },\n            method: 'undoSuspension',\n            interfaceName: 'core.usermanager.IUserManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'updatePassword' : function(userId,oldPassword,newPassword, gs_silent) {\n        var data = {\n            args : {\n                userId : JSON.stringify(userId),\n                oldPassword : JSON.stringify(oldPassword),\n                newPassword : JSON.stringify(newPassword),\n            },\n            method: 'updatePassword',\n            interfaceName: 'core.usermanager.IUserManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'updatePasswordSecure' : function(userId,newPassword, gs_silent) {\n        var data = {\n            args : {\n                userId : JSON.stringify(userId),\n                newPassword : JSON.stringify(newPassword),\n            },\n            method: 'updatePasswordSecure',\n            interfaceName: 'core.usermanager.IUserManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'updateUserCounter' : function(counter,password, gs_silent) {\n        var data = {\n            args : {\n                counter : JSON.stringify(counter),\n                password : JSON.stringify(password),\n            },\n            method: 'updateUserCounter',\n            interfaceName: 'core.usermanager.IUserManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'upgradeUserToGetShopAdmin' : function(password, gs_silent) {\n        var data = {\n            args : {\n                password : JSON.stringify(password),\n            },\n            method: 'upgradeUserToGetShopAdmin',\n            interfaceName: 'core.usermanager.IUserManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n}\nGetShopApiWebSocket.ImageManager = function(communication) {\n    this.communication = communication;\n}\n\nGetShopApiWebSocket.ImageManager.prototype = {\n    'getBase64EncodedImageLocally' : function(imageId, gs_silent) {\n        var data = {\n            args : {\n                imageId : JSON.stringify(imageId),\n            },\n            method: 'getBase64EncodedImageLocally',\n            interfaceName: 'core.utils.IImageManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n}\nGetShopApiWebSocket.UtilManager = function(communication) {\n    this.communication = communication;\n}\n\nGetShopApiWebSocket.UtilManager.prototype = {\n    'getBase64EncodedPDFWebPage' : function(urlToPage, gs_silent) {\n        var data = {\n            args : {\n                urlToPage : JSON.stringify(urlToPage),\n            },\n            method: 'getBase64EncodedPDFWebPage',\n            interfaceName: 'core.utils.IUtilManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getCompaniesFromBrReg' : function(search, gs_silent) {\n        var data = {\n            args : {\n                search : JSON.stringify(search),\n            },\n            method: 'getCompaniesFromBrReg',\n            interfaceName: 'core.utils.IUtilManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getCompanyFree' : function(companyVatNumber, gs_silent) {\n        var data = {\n            args : {\n                companyVatNumber : JSON.stringify(companyVatNumber),\n            },\n            method: 'getCompanyFree',\n            interfaceName: 'core.utils.IUtilManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getCompanyFromBrReg' : function(companyVatNumber, gs_silent) {\n        var data = {\n            args : {\n                companyVatNumber : JSON.stringify(companyVatNumber),\n            },\n            method: 'getCompanyFromBrReg',\n            interfaceName: 'core.utils.IUtilManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getFile' : function(id, gs_silent) {\n        var data = {\n            args : {\n                id : JSON.stringify(id),\n            },\n            method: 'getFile',\n            interfaceName: 'core.utils.IUtilManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getStartupCount' : function(gs_silent) {\n        var data = {\n            args : {\n            },\n            method: 'getStartupCount',\n            interfaceName: 'core.utils.IUtilManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'isInProductionMode' : function(gs_silent) {\n        var data = {\n            args : {\n            },\n            method: 'isInProductionMode',\n            interfaceName: 'core.utils.IUtilManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'saveFile' : function(file, gs_silent) {\n        var data = {\n            args : {\n                file : JSON.stringify(file),\n            },\n            method: 'saveFile',\n            interfaceName: 'core.utils.IUtilManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n}\nGetShopApiWebSocket.UUIDSecurityManager = function(communication) {\n    this.communication = communication;\n}\n\nGetShopApiWebSocket.UUIDSecurityManager.prototype = {\n    'grantAccess' : function(userId,uuid,read,write, gs_silent) {\n        var data = {\n            args : {\n                userId : JSON.stringify(userId),\n                uuid : JSON.stringify(uuid),\n                read : JSON.stringify(read),\n                write : JSON.stringify(write),\n            },\n            method: 'grantAccess',\n            interfaceName: 'core.uuidsecuritymanager.IUUIDSecurityManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'hasAccess' : function(uuid,read,write, gs_silent) {\n        var data = {\n            args : {\n                uuid : JSON.stringify(uuid),\n                read : JSON.stringify(read),\n                write : JSON.stringify(write),\n            },\n            method: 'hasAccess',\n            interfaceName: 'core.uuidsecuritymanager.IUUIDSecurityManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n}\nGetShopApiWebSocket.WebManager = function(communication) {\n    this.communication = communication;\n}\n\nGetShopApiWebSocket.WebManager.prototype = {\n    'htmlGet' : function(url, gs_silent) {\n        var data = {\n            args : {\n                url : JSON.stringify(url),\n            },\n            method: 'htmlGet',\n            interfaceName: 'core.webmanager.IWebManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'htmlGetJson' : function(url, gs_silent) {\n        var data = {\n            args : {\n                url : JSON.stringify(url),\n            },\n            method: 'htmlGetJson',\n            interfaceName: 'core.webmanager.IWebManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'htmlPost' : function(url,data,jsonPost,encoding, gs_silent) {\n        var data = {\n            args : {\n                url : JSON.stringify(url),\n                data : JSON.stringify(data),\n                jsonPost : JSON.stringify(jsonPost),\n                encoding : JSON.stringify(encoding),\n            },\n            method: 'htmlPost',\n            interfaceName: 'core.webmanager.IWebManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'htmlPostBasicAuth' : function(url,data,jsonPost,encoding,auth, gs_silent) {\n        var data = {\n            args : {\n                url : JSON.stringify(url),\n                data : JSON.stringify(data),\n                jsonPost : JSON.stringify(jsonPost),\n                encoding : JSON.stringify(encoding),\n                auth : JSON.stringify(auth),\n            },\n            method: 'htmlPostBasicAuth',\n            interfaceName: 'core.webmanager.IWebManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'htmlPostJson' : function(url,data,encoding, gs_silent) {\n        var data = {\n            args : {\n                url : JSON.stringify(url),\n                data : JSON.stringify(data),\n                encoding : JSON.stringify(encoding),\n            },\n            method: 'htmlPostJson',\n            interfaceName: 'core.webmanager.IWebManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n}\nGetShopApiWebSocket.WubookManager = function(communication) {\n    this.communication = communication;\n}\n\nGetShopApiWebSocket.WubookManager.prototype = {\n    'addBooking' : function(multilevelname, rcode, gs_silent) {\n        var data = {\n            args : {\n                rcode : JSON.stringify(rcode),\n            },\n            method: 'addBooking',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.wubook.IWubookManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'addNewBookingsPastDays' : function(multilevelname, daysback, gs_silent) {\n        var data = {\n            args : {\n                daysback : JSON.stringify(daysback),\n            },\n            method: 'addNewBookingsPastDays',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.wubook.IWubookManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'addRestriction' : function(multilevelname, restriction, gs_silent) {\n        var data = {\n            args : {\n                restriction : JSON.stringify(restriction),\n            },\n            method: 'addRestriction',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.wubook.IWubookManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'checkForNoShowsAndMark' : function(multilevelname, gs_silent) {\n        var data = {\n            args : {\n            },\n            method: 'checkForNoShowsAndMark',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.wubook.IWubookManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'deleteAllRooms' : function(multilevelname, gs_silent) {\n        var data = {\n            args : {\n            },\n            method: 'deleteAllRooms',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.wubook.IWubookManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'deleteBooking' : function(multilevelname, rcode, gs_silent) {\n        var data = {\n            args : {\n                rcode : JSON.stringify(rcode),\n            },\n            method: 'deleteBooking',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.wubook.IWubookManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'deleteRestriction' : function(multilevelname, id, gs_silent) {\n        var data = {\n            args : {\n                id : JSON.stringify(id),\n            },\n            method: 'deleteRestriction',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.wubook.IWubookManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'doubleCheckDeletedBookings' : function(multilevelname, gs_silent) {\n        var data = {\n            args : {\n            },\n            method: 'doubleCheckDeletedBookings',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.wubook.IWubookManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'fetchAllBookings' : function(multilevelname, daysback, gs_silent) {\n        var data = {\n            args : {\n                daysback : JSON.stringify(daysback),\n            },\n            method: 'fetchAllBookings',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.wubook.IWubookManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'fetchBooking' : function(multilevelname, rcode, gs_silent) {\n        var data = {\n            args : {\n                rcode : JSON.stringify(rcode),\n            },\n            method: 'fetchBooking',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.wubook.IWubookManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'fetchBookingCodes' : function(multilevelname, daysback, gs_silent) {\n        var data = {\n            args : {\n                daysback : JSON.stringify(daysback),\n            },\n            method: 'fetchBookingCodes',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.wubook.IWubookManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'fetchBookings' : function(multilevelname, daysBack,registrations, gs_silent) {\n        var data = {\n            args : {\n                daysBack : JSON.stringify(daysBack),\n                registrations : JSON.stringify(registrations),\n            },\n            method: 'fetchBookings',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.wubook.IWubookManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'fetchNewBookings' : function(multilevelname, gs_silent) {\n        var data = {\n            args : {\n            },\n            method: 'fetchNewBookings',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.wubook.IWubookManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getAllRestriction' : function(multilevelname, gs_silent) {\n        var data = {\n            args : {\n            },\n            method: 'getAllRestriction',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.wubook.IWubookManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getLogEntries' : function(multilevelname, gs_silent) {\n        var data = {\n            args : {\n            },\n            method: 'getLogEntries',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.wubook.IWubookManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'getWubookRoomData' : function(multilevelname, gs_silent) {\n        var data = {\n            args : {\n            },\n            method: 'getWubookRoomData',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.wubook.IWubookManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'insertAllRooms' : function(multilevelname, gs_silent) {\n        var data = {\n            args : {\n            },\n            method: 'insertAllRooms',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.wubook.IWubookManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'markCCInvalid' : function(multilevelname, rcode, gs_silent) {\n        var data = {\n            args : {\n                rcode : JSON.stringify(rcode),\n            },\n            method: 'markCCInvalid',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.wubook.IWubookManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'markNoShow' : function(multilevelname, rcode, gs_silent) {\n        var data = {\n            args : {\n                rcode : JSON.stringify(rcode),\n            },\n            method: 'markNoShow',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.wubook.IWubookManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'saveWubookRoomData' : function(multilevelname, res, gs_silent) {\n        var data = {\n            args : {\n                res : JSON.stringify(res),\n            },\n            method: 'saveWubookRoomData',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.wubook.IWubookManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'testConnection' : function(multilevelname, gs_silent) {\n        var data = {\n            args : {\n            },\n            method: 'testConnection',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.wubook.IWubookManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'updateAvailability' : function(multilevelname, gs_silent) {\n        var data = {\n            args : {\n            },\n            method: 'updateAvailability',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.wubook.IWubookManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'updateMinStay' : function(multilevelname, gs_silent) {\n        var data = {\n            args : {\n            },\n            method: 'updateMinStay',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.wubook.IWubookManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'updatePrices' : function(multilevelname, gs_silent) {\n        var data = {\n            args : {\n            },\n            method: 'updatePrices',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.wubook.IWubookManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n    'updateShortAvailability' : function(multilevelname, gs_silent) {\n        var data = {\n            args : {\n            },\n            method: 'updateShortAvailability',\n            multiLevelName: multilevelname,\n            interfaceName: 'core.wubook.IWubookManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n}\nGetShopApiWebSocket.YouTubeManager = function(communication) {\n    this.communication = communication;\n}\n\nGetShopApiWebSocket.YouTubeManager.prototype = {\n    'searchYoutube' : function(searchword, gs_silent) {\n        var data = {\n            args : {\n                searchword : JSON.stringify(searchword),\n            },\n            method: 'searchYoutube',\n            interfaceName: 'core.youtubemanager.IYouTubeManager',\n        };\n        return this.communication.send(data, gs_silent);\n    },\n\n}\n\nGetShopApiWebSocket.prototype.createManagers = function() {\n    this.BannerManager = new GetShopApiWebSocket.BannerManager(this);\n    this.ContentManager = new GetShopApiWebSocket.ContentManager(this);\n    this.FooterManager = new GetShopApiWebSocket.FooterManager(this);\n    this.LogoManager = new GetShopApiWebSocket.LogoManager(this);\n    this.NewsManager = new GetShopApiWebSocket.NewsManager(this);\n    this.AccountingManager = new GetShopApiWebSocket.AccountingManager(this);\n    this.AmestoManager = new GetShopApiWebSocket.AmestoManager(this);\n    this.GetShopApplicationPool = new GetShopApiWebSocket.GetShopApplicationPool(this);\n    this.StoreApplicationInstancePool = new GetShopApiWebSocket.StoreApplicationInstancePool(this);\n    this.StoreApplicationPool = new GetShopApiWebSocket.StoreApplicationPool(this);\n    this.DoorManager = new GetShopApiWebSocket.DoorManager(this);\n    this.AsanaManager = new GetShopApiWebSocket.AsanaManager(this);\n    this.BamboraManager = new GetShopApiWebSocket.BamboraManager(this);\n    this.BigStock = new GetShopApiWebSocket.BigStock(this);\n    this.BookingEngine = new GetShopApiWebSocket.BookingEngine(this);\n    this.BrainTreeManager = new GetShopApiWebSocket.BrainTreeManager(this);\n    this.C3Manager = new GetShopApiWebSocket.C3Manager(this);\n    this.CalendarManager = new GetShopApiWebSocket.CalendarManager(this);\n    this.CartManager = new GetShopApiWebSocket.CartManager(this);\n    this.CarTuningManager = new GetShopApiWebSocket.CarTuningManager(this);\n    this.CertegoManager = new GetShopApiWebSocket.CertegoManager(this);\n    this.ChatManager = new GetShopApiWebSocket.ChatManager(this);\n    this.DBBackupManager = new GetShopApiWebSocket.DBBackupManager(this);\n    this.DibsManager = new GetShopApiWebSocket.DibsManager(this);\n    this.EpayManager = new GetShopApiWebSocket.EpayManager(this);\n    this.EventBookingManager = new GetShopApiWebSocket.EventBookingManager(this);\n    this.FileManager = new GetShopApiWebSocket.FileManager(this);\n    this.FtpManager = new GetShopApiWebSocket.FtpManager(this);\n    this.GalleryManager = new GetShopApiWebSocket.GalleryManager(this);\n    this.GetShop = new GetShopApiWebSocket.GetShop(this);\n    this.GetShopLockManager = new GetShopApiWebSocket.GetShopLockManager(this);\n    this.InformationScreenManager = new GetShopApiWebSocket.InformationScreenManager(this);\n    this.ListManager = new GetShopApiWebSocket.ListManager(this);\n    this.MecaManager = new GetShopApiWebSocket.MecaManager(this);\n    this.MekonomenManager = new GetShopApiWebSocket.MekonomenManager(this);\n    this.MessageManager = new GetShopApiWebSocket.MessageManager(this);\n    this.NewsLetterManager = new GetShopApiWebSocket.NewsLetterManager(this);\n    this.MobileManager = new GetShopApiWebSocket.MobileManager(this);\n    this.OrderManager = new GetShopApiWebSocket.OrderManager(this);\n    this.PageManager = new GetShopApiWebSocket.PageManager(this);\n    this.InvoiceManager = new GetShopApiWebSocket.InvoiceManager(this);\n    this.LasGruppenPDFGenerator = new GetShopApiWebSocket.LasGruppenPDFGenerator(this);\n    this.PkkControlManager = new GetShopApiWebSocket.PkkControlManager(this);\n    this.PmsEventManager = new GetShopApiWebSocket.PmsEventManager(this);\n    this.PmsInvoiceManager = new GetShopApiWebSocket.PmsInvoiceManager(this);\n    this.PmsManager = new GetShopApiWebSocket.PmsManager(this);\n    this.PmsManagerProcessor = new GetShopApiWebSocket.PmsManagerProcessor(this);\n    this.PmsReportManager = new GetShopApiWebSocket.PmsReportManager(this);\n    this.PrintManager = new GetShopApiWebSocket.PrintManager(this);\n    this.StorePrintManager = new GetShopApiWebSocket.StorePrintManager(this);\n    this.ProductManager = new GetShopApiWebSocket.ProductManager(this);\n    this.PullServerManager = new GetShopApiWebSocket.PullServerManager(this);\n    this.QuestBackManager = new GetShopApiWebSocket.QuestBackManager(this);\n    this.BookingComRateManagerManager = new GetShopApiWebSocket.BookingComRateManagerManager(this);\n    this.ReportingManager = new GetShopApiWebSocket.ReportingManager(this);\n    this.ResturantManager = new GetShopApiWebSocket.ResturantManager(this);\n    this.SalesManager = new GetShopApiWebSocket.SalesManager(this);\n    this.ScormManager = new GetShopApiWebSocket.ScormManager(this);\n    this.SearchManager = new GetShopApiWebSocket.SearchManager(this);\n    this.SedoxProductManager = new GetShopApiWebSocket.SedoxProductManager(this);\n    this.SimpleEventManager = new GetShopApiWebSocket.SimpleEventManager(this);\n    this.StoreManager = new GetShopApiWebSocket.StoreManager(this);\n    this.TimeRegisteringManager = new GetShopApiWebSocket.TimeRegisteringManager(this);\n    this.TrackAndTraceManager = new GetShopApiWebSocket.TrackAndTraceManager(this);\n    this.UserManager = new GetShopApiWebSocket.UserManager(this);\n    this.ImageManager = new GetShopApiWebSocket.ImageManager(this);\n    this.UtilManager = new GetShopApiWebSocket.UtilManager(this);\n    this.UUIDSecurityManager = new GetShopApiWebSocket.UUIDSecurityManager(this);\n    this.WebManager = new GetShopApiWebSocket.WebManager(this);\n    this.WubookManager = new GetShopApiWebSocket.WubookManager(this);\n    this.YouTubeManager = new GetShopApiWebSocket.YouTubeManager(this);\n}\nerrorTextMatrix = {\n\"1\":\"Created user does not have a unique id. (User was not saved to database)\",\n\"2\":\"Full name is empty of the user-object that has been tried to be created\",\n\"3\":\"Lastname is empty of the userobject that has been tried to be created\",\n\"4\":\"Emailaddress is empty of the userobject that has been tried to be created\",\n\"5\":\"Storeid is not set on the sending object.\",\n\"6\":\"The messages sessionId is not set. \",\n\"7\":\"The message storeid is not set.\",\n\"8\":\"User object is null on CreateUser.\",\n\"9\":\"User not found - UserStoreCollection has not been created yet.\",\n\"10\":\"User not found - No user with this the userid on this store.\",\n\"11\":\"Search criteria for find users is not set.\",\n\"12\":\"UserType is not defined.\",\n\"13\":\"Login failed, incorrect username or password.\",\n\"14\":\"Skeleton does not exists.\",\n\"15\":\"The skeleton you are trying to create is invalid.\",\n\"16\":\"Atleast one area has to be specified while creating application.\",\n\"17\":\"Application name is missing.\",\n\"18\":\"Application does not exists.\",\n\"19\":\"Invalid arguments.\",\n\"20\":\"Tried to get an element from the session but the sessionId is blank.\",\n\"21\":\"Initialize message does not have a valid webaddress.\",\n\"22\":\"This session does not have a user logged in.\",\n\"23\":\"Failed to retreive the store from session.\",\n\"24\":\"Product manager tried to save / retreive product from a session that is not valid.\",\n\"25\":\"Failed to send dataobject to database saver, it does not have a valid storeid.\",\n\"26\":\"Access denied, please logon to gain access to this feature.\",\n\"27\":\"The product you try to get does not exists. ( Only thrown internally )\",\n\"28\":\"No products found by the specified ids.\",\n\"29\":\"Invalid appconfiguration object.\",\n\"30\":\"Requested page does not exists.\",\n\"31\":\"Can not add application to this page area, was not able to find the page.\",\n\"32\":\"Could not add application to app area, the specified area was not found.\",\n\"33\":\"Was not able to find the pagearea where to remove the application from.\",\n\"34\":\"Was not able to find the page that the application should be removed from.\",\n\"35\":\"Tried to create a menu entry with a page, but was not able to create a new page.\",\n\"36\":\"Can not change stickyness on a application that does not exists.\",\n\"37\":\"Invalid image to save.\",\n\"38\":\"An error occured while saving the image.\",\n\"39\":\"Invalid height set when fetching an image. (a positive integer, or 0 for default)\",\n\"40\":\"Invalid width set when fetching an image. (a positive integer, or 0 for default)\",\n\"41\":\"The image you tried to fetch, does not exists.\",\n\"42\":\"Invalid arguments.\",\n\"42\":\"Error when loading image from file.\",\n\"44\":\"The product with the specified pageid does not exists.\",\n\"45\":\"Invalid configuration object.\",\n\"46\":\"Was not able to find the store.\",\n\"47\":\"Failed to send email.\",\n\"48\":\"Invalid input when sending an email.\",\n\"49\":\"Invalid input when trying do add additional image.\",\n\"50\":\"Product in order does not exists.\",\n\"51\":\"Product is not null on createOrder message\",\n\"52\":\"Address is not added to createOrder.\",\n\"53\":\"Address is not valid when creating a order.\",\n\"54\":\"Invalid userlist when trying to fetch the userlist.\",\n\"55\":\"Invalid fileid.\",\n\"56\":\"Unable to load file.\",\n\"57\":\"A shop has already been created with an email adress.\",\n\"58\":\"Trying to update settings for a none existing application.\",\n\"59\":\"Its not allowed to update a order to status created with this message.\",\n\"60\":\"Its not allowed to update a order to status payment failed with this message.\",\n\"61\":\"Order does not exists\",\n\"62\":\"Could not find the product to update the product quanity for.\",\n\"63\":\"Arguments are invalid when trying to add an image to a product\",\n\"64\":\"Fatal error, failed to save object to database, please contact getshop support\",\n\"64\":\"Tried to get a shop without id\",\n\"66\":\"Cannot create user, user with same email address already exists.\",\n\"67\":\"You are already signed up for this event\",\n\"68\":\"Its not defined what number sms should be sent from\",\n\"69\":\"Access denied when trying to send sms.\",\n\"70\":\"Invalid password when trying to toggle sms system.\",\n\"71\":\"This event is full, please contact for more information\",\n\"72\":\"Could not send mail, subject not configured\",\n\"73\":\"Could not send mail, email text not configured\",\n\"74\":\"Phone number can not be empty when sending an sms.\",\n\"75\":\"Message can not be empty when sending an sms.\",\n\"76\":\"I am sorry, your email does not exists.\",\n\"77\":\"Ooops, an error occurred when sending confirmation code.\",\n\"78\":\"Failed to reset password, confirmation code is not valid\",\n\"79\":\"Was not able to decode base64 image\",\n\"80\":\"Login failed, your account has expired.\",\n\"81\":\"Object for the execution is not found\",\n\"82\":\"The method you are trying to invoke does not exists\",\n\"83\":\"Invoke java security exception\",\n\"84\":\"Illigal access\",\n\"85\":\"Illigal arguments, check your input arguments\",\n\"86\":\"Unkown error, please check additional information\",\n\"87\":\"The entity you try to save does not exists.\",\n\"88\":\"The password could not be encrypted.\",\n\"89\":\"The old password does not match.\",\n\"90\":\"The page you tried to create already is created\",\n\"91\":\"Please check your email account for more information.\",\n\"92\":\"Multiple theme applications has been added, please contact support\",\n\"93\":\"You have added application that requires payment.\",\n\"94\":\"The web address is already taken\",\n\"95\":\"The store configuration can not be null\",\n\"96\":\"Can not rename attribute to an attribute which already exists.\",\n\"97\":\"The users you try to modify is not in your group.\",\n\"98\":\"Incorrect deepfreeze password.\",\n\"99\":\"The coupon code is invalid.\",\n\"100\":\"Invalid input parameters.\",\n\"101\":\"Was not able to find the user in the waitinglist.\",\n\"102\":\"Insufficient credits.\",\n\"103\":\"Test has been deleted.\",\n\"1000\":\"Left menu entry already exists.\",\n\"1001\":\"Menu entry does not exists.\",\n\"1002\":\"App configuration does not exists.\",\n\"1003\":\"Parent does not exists.\",\n\"1004\":\"Menu entry can not be empty\",\n\"1005\":\"Can not move menu entry to itself.\",\n\"1006\":\"Invalid order id.\",\n\"1007\":\"Can not move a menu entry into one of it children.\",\n\"1008\":\"Invalid auto expand option has to be 0 or 1.\",\n\"1009\":\"Home page cannot be deleted\",\n\"1010\":\"Could not find the image to attach the product to\",\n\"1011\":\"Product does not exists\",\n\"1012\":\"The entry you are trying to update does not exists\",\n\"1013\":\"Product can have only one main image\",\n\"1014\":\"Product must have one main image\",\n\"1015\":\"Could not find the application.\",\n\"1016\":\"Unable to calculate price for product.\",\n\"1017\":\"Unable to find product attribute value.\",\n\"1018\":\"Failed searching youtube.\",\n\"1019\":\"The email can not be empty, and you need atleast one user\",\n\"1020\":\"Can not delete room type since rooms still exists with this type\",\n\"1021\":\"Start date can not be selected before todays date\",\n\"1022\":\"End date is starting before start date\",\n\"1023\":\"An error occured, support has been notified of this problem.\",\n\"1024\":\"Failed to generate md5sum for file.\",\n\"1025\":\"Booking reference does not exists.\",\n\"1026\":\"Failed to create zipfile.\",\n\"1027\":\"Not enough credit.\",\n\"1028\":\"Page area does not exists\",\n\"1029\":\"Did not find the binary file.\",\n\"1030\":\"No mode set.\",\n\"1031\":\"Tried to retreive a singelton application that is not singleton.\",\n\"1032\":\"Not enough rooms available\",\n\"1033\":\"Klarte ikke å genere PDF.\",\n\"1034\":\"New orderstatus invalid, order is already marked as paid.\",\n\"1035\":\"Can not add user to event, the event does not exists\",\n\"1036\":\"Cant delete location, its in use in some events\",\n\"1037\":\"User can not be created, already exists one with same cellphone\",\n\"1038\":\"The time periode is already closed, cannot reclose it\",\n\"1039\":\"Can not save order, its within a closed periode\",\n\"1040\":\"Destination can not be pooled, it has been marked as arrived or serviced.\",\n\"1000001\":\"The name attribute is invalid\",\n\"1000002\":\"The entry you are trying to fecth does not exists.\",\n\"1000003\":\"Could not find list to sort on.\",\n\"1000004\":\"The item you are trying to delete does not exists\",\n\"1000005\":\"The item you are trying to reorder does not exists.\",\n\"1000006\":\"The logo you are trying to remove does not exists.\",\n\"1000007\":\"The entry you are trying to update does not exists\",\n\"1000008\":\"The list which held this entry does not exists.\",\n\"1000009\":\"Invalid start or end date\",\n\"1000010\":\"Store handler not found\",\n\"1000011\":\"Could not find the list to decouple\",\n\"1000012\":\"Invalid application list.\",\n\"1000013\":\"Page list is invalid.\",\n\"1000014\":\"This list does not exists\",\n\"1000015\":\"Booking does not exists\",\n\"1000016\":\"Can not add a destination to a route that should not have it.\",\n\"2000001\":\"You must selected the original encrypted file + the tuningfile you wish to send.\",\n\"2000002\":\"Failed to decrypt file, please check the windows computer where the CMD program is running if it has a error or something.\",\n\"2000003\":\"At least one file needs to be selected when purchasing a product.\",\n}\n","/* \n * To change this license header, choose License Headers in Project Properties.\n * To change this template file, choose Tools | Templates\n * and open the template in the editor.\n */\n\n\nmessagePersister = {\n    messages: [],\n    sentMessageTableSQL: 'CREATE TABLE IF NOT EXISTS SentMessages (id, data, dateCreated DATETIME, sent BOOLEAN)',\n    \n    persist: function(message) {\n        message.sent = false;\n        this.messages.push(message);\n        if (db) {\n            this.addMessageToDatabase(message);\n            this.cleanup();\n        } else {\n            this.save();\n        }\n    },\n    \n    addMessageToDatabase: function(data) {\n        var me = this;\n        db.transaction(function(tx) {\n            tx.executeSql(me.sentMessageTableSQL);\n            tx.executeSql('INSERT INTO SentMessages(id, data, dateCreated, sent) VALUES (?, ?,?, ?)', [data.messageId, JSON.stringify(data), 'CURRENT_TIMESTAMP', false]);\n        }, function(error) {\n            alert('Failed to store data, msg: ' + error.message);\n        }, function() {\n        });\n    },\n    \n    cleanup: function() {\n        var me = this;\n        \n        db.transaction(function(tx) {\n            tx.executeSql(me.sentMessageTableSQL);\n            db.executeSql(\"DELETE FROM SentMessages WHERE dateCreated <= date('now','-7 day')\");\n        });\n    },\n    \n    updateRowFromDatabase: function(message) {\n        db.transaction(function (tx) {\n            var query = \"UPDATE SentMessages SET sent = ? WHERE id = ?\";\n\n            tx.executeSql(query, [true, message.messageId], function(tx, res) {\n            },\n            function(tx, error) {\n                console.log('UPDATE error: ' + error.message);\n            });\n        }, function(error) {\n            console.log('transaction error: ' + error.message);\n        }, function() {\n        });\n    },\n    \n    markAsSent: function(message) {\n        for (var i in this.messages) {\n            var msg = this.messages[i];\n            if (msg.messageId === message.messageId) {\n                msg.sent = true;\n            }\n        }\n        \n        this.messages = [];\n        var i = 0;\n        for (var i in this.messages) {\n            var msg = this.messages[i];\n            if (!msg.sent) {\n                this.messages.push(msg);\n            }\n        }\n        \n        if (db) {\n            this.updateRowFromDatabase(message);\n        } else {\n            this.save();\n        }\n    },\n    \n    getUnsetMessageCount: function() {\n        var j = 0;\n        \n        for (var i in this.messages) {\n            var msg = this.messages[i];\n            if (!msg.sent) {\n                j++;\n            }\n        }\n        \n        return j;\n    },\n    \n    getAllUnsentMessages: function() {\n        var retMsgs = [];\n          \n        for (var i in this.messages) {\n            var msg = this.messages[i];\n            if (!msg.sent) {\n                retMsgs.push(msg);\n            }\n        }\n      \n        return retMsgs;\n    },\n    \n    save: function() {\n        if (typeof(db) === \"undefined\" || !db) {\n            localStorage.setItem(\"sentMessages\", JSON.stringify(this.messages));\n        }\n    },\n    \n    loadFromDb: function($api) {\n        var me = this;\n        \n        db.transaction(function (tx) {\n            var query = \"SELECT id, data, dateCreated, sent FROM SentMessages where sent = ?\";\n\n            tx.executeSql(me.sentMessageTableSQL);\n            \n            tx.executeSql(query, [false], function (tx, resultSet) {\n                \n                for(var x = 0; x < resultSet.rows.length; x++) {\n                    var toAdd = JSON.parse(resultSet.rows.item(x).data);\n                    console.log(toAdd);\n                    me.messages.push(toAdd);\n                }\n                \n                if ($api && $api.getApi()) {\n                    $api.getApi().sendUnsentMessages();\n                }\n            },\n            function (tx, error) {\n                alert('SELECT error: ' + error.message);\n            });\n        }, function (error) {\n            alert('transaction error: ' + error.message);\n        }, function () {\n        });\n    },\n    \n    load: function($api) {\n        if (db) {\n            this.loadFromDb($api);\n        } else {\n            this.messages = JSON.parse(localStorage.getItem(\"sentMessages\"));\n        }\n        \n        if (!this.messages) {\n            this.messages = [];\n        }\n    }\n};\n\nmessagePersister.load();","angular.module('TrackAndTrace')\n.config(['$stateProvider', function ($stateProvider) {\n    $stateProvider.state('base', {\n        url: '',\n        templateUrl: 'components/general/main.html',\n        abstract: true,\n        controller : controllers.BaseController,\n        \n//        views: {\n//            header: {\n//                templateUrl : 'components/header/header.html',\n//                controller : controllers.HeaderController\n//            }\n//        }\n    });\n    \n    $stateProvider.state('base.login', {\n        url: '/login',\n        \n        views: {\n            main: {\n                templateUrl : 'components/login/login.html',\n                controller : controllers.LoginController\n            }\n        }\n    });\n    \n    $stateProvider.state('base.routeoverview', {\n        url: '/routeoverview/:routeId',\n        \n        views: {\n            main: {\n                templateUrl : 'components/routeoverview/routeoverview.html',\n                controller: controllers.RouteOverviewController\n            },\n            footer: {\n                templateUrl : 'components/routeoverview/footer.html',\n                controller: controllers.RouteOverviewController\n            }\n        }\n    });\n    \n    $stateProvider.state('base.home', {\n        url: '/home',\n        \n        params: { \n            action : { refreshData : false } \n        },\n        \n        views: {\n            main: {\n                templateUrl : 'components/home/home.html',\n                controller : controllers.HomeController\n            },\n            footer: {\n                templateUrl : 'components/home/footer.html',\n                controller : controllers.HomeController\n            }\n        }\n    });\n    \n    $stateProvider.state('base.pool', {\n        url: '/pool',\n        \n        views: {\n            main: {\n                templateUrl : 'components/pool/pool.html',\n                controller : controllers.PoolController\n            },\n            footer: {\n                templateUrl : 'components/pool/footer.html',\n                controller : controllers.PoolControllerFooter\n            }\n        }\n    });\n    \n    $stateProvider.state('base.destination', {\n        url: '/destination/:destinationId/:routeId',\n        \n        views: {\n            main: {\n                templateUrl : 'components/destination/destination.html',\n                controller : controllers.DestinationController\n            },\n            footer: {\n                templateUrl : 'components/destination/footer.html',\n                controller : controllers.DestinationController\n            }\n        }\n    });\n    \n    $stateProvider.state('base.destinationsignature', {\n        url: '/destinationsignature/:destinationId/:routeId',\n        \n        views: {\n            main: {\n                templateUrl : 'components/destination/departing.html',\n                controller : controllers.DepartingController\n            },\n            footer: {\n                templateUrl : 'components/destination/footer.html',\n                controller : controllers.DepartingController\n            }\n        }\n    });\n    \n    $stateProvider.state('base.addPickupTask', {\n        url: '/addPickupTask/:destinationId/:routeId',\n        \n        views: {\n            main: {\n                templateUrl : 'components/destination/addPickupTask.html',\n                controller : controllers.AddPickupTaskController\n            }\n        }\n    });\n    \n    $stateProvider.state('base.task', {\n        url: '/destination/:destinationId/:routeId/:taskId',\n        params: { \n            action : { state : 'normal' } \n        },\n        \n        views: {\n            main: {\n                templateUrl : 'components/task/task.html',\n                controller : controllers.TaskController\n            },\n            footer: {\n                templateUrl : 'components/task/footer.html',\n                controller : controllers.TaskFooterController\n            }\n        }\n    });\n    \n    $stateProvider.state('base.keyreference', {\n        url: '/keyreference/:destinationId/:routeId/:taskId',\n        \n        views: {\n            main: {\n                templateUrl : 'components/task/keyreference.html',\n                controller : controllers.KeyReferenceController\n            },\n            footer: {\n                templateUrl : 'components/task/footerkeyreference.html',\n                controller : controllers.KeyReferenceController\n            }\n        }\n    });\n    \n    $stateProvider.state('base.taskexceptions', {\n        url: '/destination/exceptions/:destinationId/:routeId/:taskId',\n        \n        views: {\n            main: {\n                templateUrl : 'components/task/exceptions.html',\n                controller : controllers.TaskController\n            },\n            footer: {\n                templateUrl : 'components/task/footer.html',\n                controller : controllers.TaskController\n            }\n        }\n    });\n    \n    $stateProvider.state('base.pickupexception', {\n        url: '/destination/pickupexception/:destinationId/:routeId/:taskId/:orderId',\n        \n        views: {\n            main: {\n                templateUrl : 'components/task/pickupexceptions.html',\n                controller : controllers.TaskController\n            },\n            footer: {\n                templateUrl : 'components/task/footerpickupexception.html',\n                controller : controllers.TaskController\n            }\n        }\n    });\n    \n    $stateProvider.state('base.destinationexception', {\n        url: '/destinationexception/exceptions/:destinationId/:routeId/:taskId',\n        \n        views: {\n            main: {\n                templateUrl : 'components/destination/exceptions.html',\n                controller : controllers.DestinationExceptionController\n            }\n        }\n    });\n    \n    $stateProvider.state('base.ordercorrection', {\n        url: '/destination/exceptions/:destinationId/:routeId/:taskId/:orderId/:type',\n        \n        views: {\n            main: {\n                templateUrl : 'components/task/correction.html',\n                controller : controllers.TaskCorrectionController\n            }\n        }\n    });\n    \n    $stateProvider.state('base.completeRoute', {\n        url: '/completeRoute/:routeId',\n        \n        views: {\n            main: {\n                templateUrl : 'components/routeoverview/completeRoute.html',\n                controller : controllers.RouteCompleteController\n            }\n        }\n    });\n    \n    $stateProvider.state(\"base.pagenotfound\", {\n        url: \"*path\",\n        views: {\n            main: {\n                templateUrl: \"components/general/pagenotfound.html\"\n            }\n        }\n    });\n}]);\n","/* \n * To change this license header, choose License Headers in Project Properties.\n * To change this template file, choose Tools | Templates\n * and open the template in the editor.\n */\n\nif(typeof(controllers) === \"undefined\") { var controllers = {}; }\n\ncontrollers.AddPickupTaskController = function($scope, datarepository, $stateParams, $api, $state) {\n    $scope.taskType = false;\n    $scope.numbers = \"\";\n    \n    $scope.goBack = function() {\n        $state.transitionTo(\"base.destination\",  { \n            destinationId: $stateParams.destinationId,\n            routeId: $stateParams.routeId \n        });\n    }\n    \n    $scope.setType = function(type) {\n        $scope.taskType = type;\n    }\n    \n    $scope.stopScanner = function() {\n        if (typeof(cordova) === \"undefined\") {\n            return;\n        }\n        \n        cordova.exec(function() {}, function() {}, \"HoneyWellBarcodeReaderE75\", \"stop\", [\"test\"])\n    }\n    \n    $scope.barcodeReceived = function(barcode) {\n        var labelNumber = barcode.substr(barcode.length - 3);\n        var orderReference = barcode.substr(barcode.length - 13, 10);\n        \n        $scope.numbers = orderReference;\n        $scope.createTask(null, $scope.numbers);\n    }\n    \n    $scope.startScanner = function() {\n        \n        if (typeof(cordova) === \"undefined\") {\n            $scope.barcodeReceived('651817211486929100');\n            $scope.i++;\n            return;\n        }\n        \n        $scope.stopScanner();\n        cordova.exec(function(a) { $scope.barcodeReceived(a); }, function(fail) {}, \"HoneyWellBarcodeReaderE75\", \"echo\", [\"test\"])\n    }\n    \n    $scope.getPickupTask = function() {\n        var dest = datarepository.getDestinationById($stateParams.destinationId);\n        for (var i in dest.tasks) {\n            if (dest.tasks[i].className === \"com.thundashop.core.trackandtrace.PickupTask\") {\n                return dest.tasks[i];\n            }\n        }\n        \n        return null;\n    }\n    \n    $scope.generateUUID = function() {\n        var d = new Date().getTime();\n        var uuid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {\n            var r = (d + Math.random()*16)%16 | 0;\n            d = Math.floor(d/16);\n            return (c=='x' ? r : (r&0x3|0x8)).toString(16);\n        });\n        return uuid;\n    };\n\n    $scope.createTask = function($event, numbers) {\n        if (numbers.length !== 10) {\n            alert(\"Must be 10 digits\");\n            return;\n        }\n        \n        var pickupOrder = {\n            mustScanBarcode: false,\n            referenceNumber: numbers,\n            container: $scope.taskType === \"container\",\n            source: \"tnt\"\n        };\n        \n        var pickupTask = $scope.getPickupTask();\n        \n        if (pickupTask === null) {\n            pickupTask = {\n                orders : [],\n                cage : false,\n                completed: false,\n                barcodeValidated: false,\n                dirty: true,\n                id: $scope.generateUUID(),\n                className: \"com.thundashop.core.trackandtrace.PickupTask\",\n                rowCreatedDate: new Date(),\n            }\n        } else {\n            var keyedNumber = numbers;\n            if (pickupTask.orders != null && pickupTask.orders) {\n                for (var i in pickupTask.orders) {\n                    var checkOrder = pickupTask.orders[i];\n                    if (checkOrder.referenceNumber.trim() === keyedNumber.trim()) {\n                        alert(\"The reference you are trying to add already exists, please go to tasks to change it\");\n                        return;\n                    }\n                }\n            }\n        }\n        \n        pickupTask.orders.push(pickupOrder);\n        \n        $api.getApi().TrackAndTraceManager.addPickupOrder($stateParams.destinationId, pickupOrder, pickupTask);\n        var dest = datarepository.getDestinationById($stateParams.destinationId);\n        \n        datarepository.updateTask(dest, pickupTask, $api);\n        \n        $state.go('base.task', { \n            destinationId: $stateParams.destinationId,  \n            routeId: $stateParams.routeId, \n            taskId: pickupTask.id,\n            'action' : { \n                state: 'keyedReference',\n                keyReference : pickupOrder.referenceNumber\n            }\n        });\n    }\n}\n","/* \n * To change this license header, choose License Headers in Project Properties.\n * To change this template file, choose Tools | Templates\n * and open the template in the editor.\n */\n\n\nif(typeof(controllers) === \"undefined\") { var controllers = {}; }\n\ncontrollers.DepartingController = function($scope, datarepository, $stateParams, $api, $state) {\n    $scope.route = datarepository.getRouteById($stateParams.routeId);\n    $scope.destination = datarepository.getDestinationById($stateParams.destinationId);\n    $scope.api = $api;\n    \n    $scope.typedName = \"\";\n    \n    $scope.initSignaturePad = function() {\n        \n        var element = document.getElementById('signature-pad');\n        $(element).attr(\"width\", $('.clearButton').outerWidth());\n        \n        $scope.signaturePad = new SignaturePad(element, {\n            backgroundColor: 'rgba(255, 255, 255, 0)',\n            penColor: 'rgb(0, 0, 255)'\n        });\n        \n        $scope.bankData = $scope.signaturePad.toDataURL(\"image/png\");\n        \n        if ($scope.destination && $scope.destination.signatureImage) {\n            $scope.signaturePad.fromDataURL($scope.destination.signatureImage);\n            if ($scope.destination.signatures && $scope.destination.signatures.length > 0) {\n                $scope.typedName = $scope.destination.signatures[($scope.destination.signatures.length - 1)].typedName;\n            }\n        }\n    }\n    \n    $scope.initSignaturePad();\n    \n    $scope.clearSignature = function() {\n        $scope.startedSignature = false;\n        this.signaturePad.clear();\n    }\n    \n    $scope.doTheBack = function() {\n        $state.go('base.destination', {\n            destinationId:$scope.destination.id,\n            routeId:  $scope.route.id\n        });\n    }\n    \n    $scope.saveSignature = function() {\n        if (!$scope.typedName) {\n            alert(\"The type named can not be blank\");\n            return;\n        }\n        \n        var data = $scope.signaturePad.toDataURL(\"image/png\");\n        \n        if (data === $scope.bankData) {\n            alert(\"The signature can not be blank\");\n            return;\n        }\n        \n        $scope.destination.signatureImage = data;\n        $scope.destination.typedNameForSignature = $scope.typedName;\n        \n        $scope.destination.signatures.push( {\n            typedName: $scope.typedName\n        });\n        datarepository.save();\n\n        navigator.geolocation.getCurrentPosition(function(position) {\n            $scope.saveDeparting(data, position.coords.longitude, position.coords.latitude);\n        }, function(failare, b, c) {\n            $scope.saveDeparting(data, 0, 0);\n        }, {maximumAge:60000, timeout:60000, enableHighAccuracy:true});\n        \n        $state.transitionTo(\"base.routeoverview\", { routeId : $stateParams.routeId } )\n    }\n    \n    $scope.saveDeparting = function(data, longitude, latitude) {\n        $scope.destination.startInfo.completed = true;\n        $scope.destination.startInfo.completedTimeStamp = new Date();\n        $scope.destination.startInfo.completedLon = longitude;\n        $scope.destination.startInfo.completedLat = latitude;  \n            \n        $scope.api.getApi().TrackAndTraceManager.markDeparting($scope.destination.id, latitude, longitude, new Date(), $scope.destination.signatureImage, $scope.destination.typedNameForSignature);\n        $scope.api.getApi().TrackAndTraceManager.unsetSkippedReason($scope.destination.id);\n        $scope.destination.skipInfo.skippedReasonId = \"\";\n        datarepository.save();\n    }\n}","/* \n * To change this license header, choose License Headers in Project Properties.\n * To change this template file, choose Tools | Templates\n * and open the template in the editor.\n */\n\n\nif(typeof(controllers) === \"undefined\") { var controllers = {}; }\n\ncontrollers.DestinationController = function($scope, datarepository, $stateParams, $api, $state) {\n    $scope.route = datarepository.getRouteById($stateParams.routeId);\n    $scope.destination = datarepository.getDestinationById($stateParams.destinationId);\n    \n    if (!$scope.destination) {\n        $state.transitionTo(\"base.home\");\n        return;\n    }\n    \n    $scope.doTheBack = function() {\n        $state.transitionTo('base.routeoverview', { routeId : $stateParams.routeId });\n    };\n    \n    $scope.destinationState = function(state) {\n        if ($scope.destination.startInfo.started) {\n            return \"started\";\n        }\n        \n        return \"unkown\";\n    };\n    \n    \n    $scope.showAddPickupTask = function() {\n        $state.transitionTo(\"base.addPickupTask\",  { \n            destinationId: $stateParams.destinationId,\n            routeId: $stateParams.routeId \n        });\n    },\n    \n      $scope.getCurrentException = function() {\n        var exceptions = datarepository.getDestionationsExceptions();\n        for (var i in exceptions) {\n            if (exceptions[i].id === $scope.destination.skipInfo.skippedReasonId) {\n                return exceptions[i].name;\n            }\n        }\n    }\n    \n    $scope.getTaskName = function(task) {\n        if (task.className == \"com.thundashop.core.trackandtrace.PickupTask\")\n            return \"Pickup\";\n        \n        if (task.className == \"com.thundashop.core.trackandtrace.DeliveryTask\")\n            return \"Delivery\";\n    };\n    \n    $scope.markAsArrived = function() {\n        $scope.destination.startInfo.started = true;\n        $scope.destination.startInfo.startedTimeStamp = new Date();\n        $scope.destination.skipInfo.skippedReasonId = \"\";\n        \n        navigator.geolocation.getCurrentPosition(function(position) {\n            \n            $scope.destination.startInfo.lon = position.coords.longitude;\n            $scope.destination.startInfo.lat = position.coords.latitude;  \n            $scope.$apply();\n\n            $api.getApi().TrackAndTraceManager.markAsArrived($scope.destination.id, new Date(), position.coords.longitude, position.coords.latitude);\n\n            datarepository.save();\n        }, function(failare, b, c) {\n            $api.getApi().TrackAndTraceManager.markAsArrived($scope.destination.id, new Date(), 0, 0);\n            datarepository.save();\n        }, {maximumAge:60000, timeout:60000, enableHighAccuracy:true});\n    }\n    \n    $scope.getStatus = function(task) {\n        if (task.completed)\n            return \"completed\";\n        \n        if (task.exceptionId) {\n            return \"exception\";\n        }\n        \n        return \"unknown\";\n    }\n    \n    $scope.allTaskCompleted = function() {\n        for (var i in $scope.destination.tasks) {\n            var task = $scope.destination.tasks[i];\n            \n            if ($scope.getStatus(task) === \"unknown\") {\n                return false;\n            }\n        }\n        \n        return true;\n    },\n            \n    $scope.departedTapped = function() {\n        $state.transitionTo('base.destinationsignature', { destinationId: $stateParams.destinationId,  routeId: $stateParams.routeId });\n    }\n    \n    $scope.openTask = function(destinationId, routeId, taskId) {\n        $state.transitionTo('base.task', { destinationId: destinationId,  routeId: routeId, taskId: taskId });\n    }\n    \n    $scope.showDestinationExceptions = function() {\n        $state.transitionTo('base.destinationexception', { destinationId: $stateParams.destinationId,  routeId: $stateParams.routeId });\n    }\n    \n    $scope.$on('refreshRoute', function(msg, route) {\n        for (var i in route.destinations) {\n            var dest = route.destinations[i];\n            if (dest.id == $stateParams.destinationId) {\n                $scope.destination = datarepository.getDestinationById($stateParams.destinationId);\n                $scope.$apply();\n            }\n        }\n    });\n    \n    \n}","/* \n * To change this license header, choose License Headers in Project Properties.\n * To change this template file, choose Tools | Templates\n * and open the template in the editor.\n */\n\n\nif(typeof(controllers) === \"undefined\") { var controllers = {}; }\n\ncontrollers.DestinationExceptionController = function($scope, datarepository, $stateParams, $api, $state) {\n    $scope.exceptions = datarepository.getDestionationsExceptions();\n    $scope.destination = datarepository.getDestinationById($stateParams.destinationId);\n    $scope.api = $api.getApi();\n    \n    $scope.goBackToDestionation = function() {\n        $state.transitionTo(\"base.destination\", {destinationId: $stateParams.destinationId, routeId: $stateParams.routeId});\n    }\n    \n    $scope.setDesitinationException = function(ex) {\n        $scope.destination.skipInfo.skippedReasonId = ex.id;\n        $scope.destination.skipInfo.startedTimeStamp = new Date();\n        datarepository.save();\n        \n        $state.transitionTo(\"base.routeoverview\", {routeId: $stateParams.routeId});\n        \n        navigator.geolocation.getCurrentPosition(function(position) {\n            $scope.destination.skipInfo.lon = position.coords.longitude;\n            $scope.destination.skipInfo.lat = position.coords.latitude;  \n            \n            $scope.api.TrackAndTraceManager.setDesitionationException($scope.destination.id, ex.id, position.coords.longitude, position.coords.latitude);\n            datarepository.save();\n            \n        }, function(failare, b, c) {\n            $scope.api.TrackAndTraceManager.setDesitionationException($scope.destination.id, ex.id, 0, 0);\n        }, {maximumAge:60000, timeout:60000, enableHighAccuracy:true});\n    }\n}\n","/* \n * To change this license header, choose License Headers in Project Properties.\n * To change this template file, choose Tools | Templates\n * and open the template in the editor.\n */\n\n\nif(typeof(controllers) === \"undefined\") { var controllers = {}; }\n\ncontrollers.BaseController = function($scope, $rootScope, $state, datarepository, $api) {\n    $scope.messages = datarepository.driverMessages;\n    \n    if (!$api.getApi() || !$api.getLoggedOnUser()) {\n        $scope.messages = [];\n    }\n    \n    if($api.getApi()) {\n        $scope.counter = $api.getApi().getUnsentMessageCount();\n    }\n    \n    $scope.$on('refreshRouteEven1', function(msg, data) {\n        var loggedOnUserId = $api.getLoggedOnUser().id;\n\n        for (var i in data.userIds) {\n            if (data.userIds[i] === loggedOnUserId) {\n                datarepository.updateRoute(data, $api);\n                $state.go($state.current, {}, {reload: true});\n            }\n        }\n    });\n    \n    $scope.$on('messageReceived', function(msg, data) {\n        if (data.driverId === $api.getLoggedOnUser().id) {\n            datarepository.driverMessages.push(data);\n            datarepository.save();\n            \n            $scope.messages = datarepository.driverMessages;\n            $scope.$evalAsync();\n            $rootScope.$apply();\n        }\n    });\n    \n    $scope.$on('driverRemoved', function(msg, data) {\n        if (data.userId === $api.getLoggedOnUser().id) {\n            datarepository.removeRoute(data.routeId);\n            $state.transitionTo('base.home', {}, {reload: true});\n            \n            $scope.$evalAsync();\n            $rootScope.$apply();\n        }\n    });\n    \n    $scope.$on('refreshData', function() {\n        datarepository.loadAllData($api, $scope, null, $state);\n    });\n    \n    $scope.$on('messageCountChanged', function() {\n        $scope.counter = $api.getApi().getUnsentMessageCount();\n        $scope.$evalAsync();\n    });\n  \n    $scope.ackMessage = function(message) {\n        if ($api.getApi() != null && typeof($api.getApi().TrackAndTraceManager) !== \"undefined\") {\n            $api.getApi().TrackAndTraceManager.acknowledgeDriverMessage(message.id);\n        }\n        \n        for (var i in datarepository.driverMessages) {\n            var drv = datarepository.driverMessages[i];\n            if (drv.id == message.id) {\n                drv.isRead = true;\n            }\n        }\n        \n        message.isRead = true;\n        datarepository.save();\n    }\n};","/* \n * To change this license header, choose License Headers in Project Properties.\n * To change this template file, choose Tools | Templates\n * and open the template in the editor.\n */\n\nif(typeof(controllers) === \"undefined\") { var controllers = {}; }\n\ncontrollers.HomeController = function($scope, $api, $rootScope, datarepository, $state, $stateParams) {\n    $scope.name = \"\";\n    $scope.datarepository = datarepository;\n    $scope.routes = [];\n    \n    $scope.init = function($api) {\n        $scope.name = $api.getLoggedOnUser().fullName;\n        \n        for (var i in datarepository.routes) {\n            var route = datarepository.routes[i];\n            if (!route.completedInfo.completed) {\n                $scope.routes.push(route);\n            }\n        }\n    }\n    \n    $scope.loadData = function() {\n        if ($api.getApi().getUnsentMessageCount() > 0) {\n            alert(\"You can not load routes until you have sent all your stored date, please make sure your device is connected to internet\");\n            return;\n        }\n        \n        datarepository.loadAllData($api, $scope);\n    }\n    \n    $scope.openPool = function() {\n        if (!$api.getApi().connectionEstablished) {\n            alert(\"This function is not available offline, please make sure you are connected to internet.\");\n            return;\n        }\n        \n        $scope.loadData();\n        $state.transitionTo(\"base.pool\", {});\n    }\n    \n    $scope.logOut = function() {\n        var conf = confirm(\"Are you sure you want to logout?\");\n        \n        if (!conf)\n            return;\n        \n        localStorage.setItem(\"username\", \"\");\n        localStorage.setItem(\"password\", \"\");\n        $api.reconnect();\n\n        $rootScope.$broadcast(\"loggedOut\", \"\");\n    }\n    \n    $scope.openRoute = function(routeId) {\n        $state.transitionTo(\"base.routeoverview\", {routeId: routeId});\n    }\n    \n    $scope.getUncompletedTasksNumber = function(route) {\n        var count = 0;\n        \n        for (var i in route.destinations) {\n            var dest = route.destinations[i];\n            if (dest.signatures.length > 0) {\n                count++;\n            }\n        }\n        \n        return count;\n    }\n    \n    $scope.refresh = function() {\n        $('.refreshicon').addClass('fa-spin');\n        var completed = function() {\n            $('.refreshicon').removeClass('fa-spin'); \n            $state.go($state.current, { 'action': { frefreshData : false }}, {reload: true});\n        }\n        datarepository.loadAllData($api, $scope, completed);\n    }\n    \n    $scope.startRoute = function($routeToUse) {\n        var confirmed = confirm(\"Are you sure you want to start this route?\");\n        \n        if (confirmed) {\n            $routeToUse.startInfo.started = true;\n            $routeToUse.startInfo.startedTimeStamp = new Date();\n\n            $state.transitionTo(\"base.routeoverview\", {routeId: $routeToUse.id});\n            \n            navigator.geolocation.getCurrentPosition(function(position) {\n                $routeToUse.startInfo.lon = position.coords.longitude;\n                $routeToUse.startInfo.lat = position.coords.latitude;  \n                $scope.$evalAsync();\n               \n                $api.getApi().TrackAndTraceManager.markRouteAsStarted($routeToUse.id, new Date(), $routeToUse.startInfo.lon, $routeToUse.startInfo.lat);\n                datarepository.save();\n            }, function(failare, b, c) {\n                $routeToUse.startInfo.started = true;\n                $routeToUse.startInfo.startedTimeStamp = new Date();\n                $scope.$evalAsync();\n               \n                $api.getApi().TrackAndTraceManager.markRouteAsStarted($routeToUse.id, new Date(), 0, 0);\n                datarepository.save();\n            }, {maximumAge:60000, timeout:60000, enableHighAccuracy:true});\n        }\n    }\n    \n    $scope.init($api);\n    \n    if ($stateParams.action.refreshData) {\n        $scope.refresh();\n        \n    }\n};\n","/* \n * To change this license header, choose License Headers in Project Properties.\n * To change this template file, choose Tools | Templates\n * and open the template in the editor.\n */\n\nif(typeof(controllers) === \"undefined\") { var controllers = {}; }\n\ncontrollers.LoginController = function($scope, $api) {\n    $scope.username = localStorage.getItem(\"username\");\n    $scope.password = localStorage.getItem(\"password\");\n    $scope.company = localStorage.getItem(\"company\");\n    \n    $scope.doLogin = function() {\n\n        if ($('.loginbutton').find('.login-shower').length) {\n            return;\n        }\n        \n        $('.loginbutton').prepend('<i class=\"fa fa-spin fa-spinner login-shower\"></i>');\n        localStorage.setItem(\"company\", $scope.company);\n        localStorage.setItem(\"username\", $scope.username);\n        localStorage.setItem(\"password\", $scope.password);\n        $api.reconnect(true);\n    }\n\n};\n","/* \n * To change this license header, choose License Headers in Project Properties.\n * To change this template file, choose Tools | Templates\n * and open the template in the editor.\n */\nif(typeof(controllers) === \"undefined\") { var controllers = {}; }\n\ncontrollers.PoolController = function($scope, $api, $rootScope, datarepository, $state) {\n    $scope.datarepository = datarepository;\n\n    $scope.pooledDestinations = [];\n    \n    $scope.selectRoute = function(route) {\n        datarepository.selectedRouteForPoolController = route;\n    }\n    \n    $scope.moveToPool = function(destination) {\n        if (!$api.getApi().connectionEstablished) {\n            alert(\"This function is not available offline, please make sure you are connected to internet.\");\n            return;\n        }\n        \n        var conf = confirm(\"Are you sure you want to move \" + destination.company.name + \" to pool?\");\n        if (conf) {\n            $api.getApi().TrackAndTraceManager.moveDesitinationToPool(datarepository.selectedRouteForPoolController.id, destination.id).done(function(route) {\n                datarepository.updateRoute(route[0]);\n                datarepository.selectedRouteForPoolController = route[0];\n                $scope.$evalAsync();\n            });\n            \n        }\n    }\n    \n    $scope.moveFromPool = function(destination, id) {\n        if (!$api.getApi().connectionEstablished) {\n            alert(\"This function is not available offline, please make sure you are connected to internet.\");\n            return;\n        }\n        \n        var conf = confirm(\"Are you sure you want to move \" + destination.company.name + \" from pool?\");\n        if (conf) {\n            $api.getApi().TrackAndTraceManager.moveDestinationFromPoolToRoute(id, datarepository.selectedRouteForPoolController.id).done(function(route) {\n                datarepository.updateRoute(route[0]);\n                datarepository.selectedRouteForPoolController = route[0];\n                $scope.$evalAsync();\n            });\n        }\n            \n    }\n    \n    $scope.fetchPooledDestination = function() {\n        $api.getApi().TrackAndTraceManager.getPooledDestiontionsByUsersDepotId().done(function(res) {\n            $scope.pooledDestinations = res;\n            $scope.$evalAsync();\n        });\n    }\n    \n    $scope.fetchPooledDestination();\n};\n\n","/* \n * To change this license header, choose License Headers in Project Properties.\n * To change this template file, choose Tools | Templates\n * and open the template in the editor.\n */\n\n\nif(typeof(controllers) === \"undefined\") { var controllers = {}; }\n\ncontrollers.PoolControllerFooter =  function($scope, $api, $rootScope, datarepository, $state) {\n    $scope.goBack = function() {\n        if (datarepository.selectedRouteForPoolController) {\n            datarepository.selectedRouteForPoolController = null;\n            return;\n        }\n        \n        $state.transitionTo(\"base.home\");\n    }\n}","/* \n * To change this license header, choose License Headers in Project Properties.\n * To change this template file, choose Tools | Templates\n * and open the template in the editor.\n */\n\n\nif(typeof(controllers) === \"undefined\") { var controllers = {}; }\n\ncontrollers.RouteCompleteController = function($scope, datarepository, $rootScope, $stateParams, $state, $api) {\n    $scope.route = datarepository.getRouteById($stateParams.routeId);\n    $scope.password = \"\";\n    \n    $scope.setOverviewVariables = function() {\n        $scope.uncompletedStops = 0;\n        \n        var d = new Date();\n        $scope.time = (\"0\" + d.getDate()).slice(-2) + \"/\" + (\"0\"+(d.getMonth()+1)).slice(-2) + \"-\" + d.getFullYear() + \" \" + (\"0\" + d.getHours()).slice(-2) + \":\" + (\"0\" + d.getMinutes()).slice(-2);\n        \n        for (var i in $scope.route.destinations) {\n            var destination = $scope.route.destinations[i];\n            var completed = destination.signatures.length > 0 && destination.startInfo.started;\n            if (!completed) {\n                $scope.uncompletedStops++;\n            }\n        }\n    }\n    \n    $scope.goBack = function() {\n        $state.transitionTo('base.routeoverview', {\n            'routeId' : $stateParams.routeId\n        });\n    }\n    \n    $scope.markCompleted = function() {\n        if (!$scope.password) {\n            alert(\"Please enter your password\");\n            return;\n        }\n        \n        var routeId = $stateParams.routeId;\n        var $routeToUse = datarepository.getRouteById(routeId);        \n\n        navigator.geolocation.getCurrentPosition(function(position) {\n            $api.getApi().TrackAndTraceManager.markAsCompletedWithTimeStampAndPassword(routeId, position.coords.latitude, position.coords.longitude, new Date(), $scope.password).done(function(res) {\n                if (res) {\n                    $routeToUse.completedInfo.completed = true;\n                    datarepository.save();\n                    $state.transitionTo(\"base.home\", {});\n                } else {\n                    alert(\"Please check your password\");\n                }\n            });\n        }, function(failare, b, c) {\n            $api.getApi().TrackAndTraceManager.markAsCompletedWithTimeStampAndPassword(routeId, 0, 0, new Date(), $scope.password).done(function(res) {\n                if (res) {\n                    $routeToUse.completedInfo.completed = true;\n                    datarepository.save();\n                    $state.transitionTo(\"base.home\", {});\n                } else {\n                    alert(\"Please check your password\");\n                }\n            });\n        }, {maximumAge:60000, timeout:60000, enableHighAccuracy:true});\n    }\n    \n    $scope.setOverviewVariables();\n}","/* \n * To change this license header, choose License Headers in Project Properties.\n * To change this template file, choose Tools | Templates\n * and open the template in the editor.\n */\n\n\nif(typeof(controllers) === \"undefined\") { var controllers = {}; }\n\ncontrollers.RouteOverviewController = function($scope, datarepository, $rootScope, $stateParams, $state, $api) {\n    $scope.route = datarepository.getRouteById($stateParams.routeId);\n    $scope.showFinished = datarepository.showFinished;\n    \n    \n    $scope.getFinishedState = function(destination) {\n        \n        if (destination.skipInfo.skippedReasonId) {\n            return \"yellow\";\n        }\n        \n        if (!destination.signatureImage && !destination.startInfo.started) {\n            return \"red\";\n        }\n        if (destination.signatures.length == 0  && destination.startInfo.started) {\n            return \"yellow\";\n        }\n        if (destination.signatures.length > 0 && destination.startInfo.started) {\n            return \"green\";\n        }\n    }\n    \n    $scope.toggleFinished = function() {\n        $scope.showFinished = !$scope.showFinished;   \n        datarepository.showFinished = $scope.showFinished;   \n    }\n    \n    $scope.acceptTodaysInstruction = function() {\n        $scope.route.instructionAccepted = true;\n        $api.getApi().TrackAndTraceManager.acceptTodaysInstruction($scope.route.id);\n        datarepository.save();\n    }\n    \n    $scope.goBack = function() {\n        $state.transitionTo(\"base.home\");\n    }\n    \n    $scope.updateTimeStamp = function(destination) {\n        $scope.destination = destination;\n        $scope.destination.startInfo.startedTimeStamp = new Date();\n        \n        navigator.geolocation.getCurrentPosition(function(position) {\n            \n            $scope.destination.startInfo.lon = position.coords.longitude;\n            $scope.destination.startInfo.lat = position.coords.latitude;  \n            $scope.$evalAsync();\n\n            $api.getApi().TrackAndTraceManager.markAsArrived($scope.destination.id, new Date(), position.coords.longitude, position.coords.latitude);\n            \n            datarepository.save();\n        }, function(failare, b, c) {\n            $api.getApi().TrackAndTraceManager.markAsArrived($scope.destination.id, new Date(), 0, 0);\n            \n            datarepository.save();\n        }, {maximumAge:60000, timeout:60000, enableHighAccuracy:true});\n    }\n    \n    $scope.showDestination = function(destinationId, routeId) {\n        var destination = datarepository.getDestinationById(destinationId);\n        \n        if ($scope.getFinishedState(destination) === \"yellow\") {\n            $scope.updateTimeStamp(destination);\n        }\n        \n        $state.transitionTo(\"base.destination\", {destinationId: destinationId, routeId: routeId});\n    }\n    $scope.isBoth = function(destination) {\n        var foundPick = false;\n        var foundDelivery = false;\n\n        for (var i in destination.tasks) {\n            if (destination.tasks[i].className === \"com.thundashop.core.trackandtrace.DeliveryTask\") {\n                foundPick = true;\n            }\n            if (destination.tasks[i].className === \"com.thundashop.core.trackandtrace.PickupTask\") {\n                foundDelivery = true;\n            }\n        }\n\n        return foundPick && foundDelivery;\n    }\n    \n    $scope.isTaskType = function(destination, pickup, delivery) {\n        var isBoth = $scope.isBoth(destination);\n        \n        if (pickup && delivery) {\n            return isBoth;\n        }\n        \n        if (pickup) {\n            for (var i in destination.tasks) {\n                if (destination.tasks[i].className === \"com.thundashop.core.trackandtrace.PickupTask\") {\n                    return !isBoth;\n                }\n            }\n        }\n        \n        if (delivery) {\n            for (var i in destination.tasks) {\n                if (destination.tasks[i].className === \"com.thundashop.core.trackandtrace.DeliveryTask\") {\n                    return !isBoth;\n                }\n            }\n        }\n        \n        \n        return false;\n    }\n    \n    $scope.markRouteCompleted = function() {\n        $state.transitionTo(\"base.completeRoute\", {\n            routeId: $stateParams.routeId\n        });\n    }\n};","angular.module('TrackAndTrace').factory('$api', [ '$state', '$rootScope', function ($state, $rootScope) {\n    \n    var getApiWrapper = function(state) {\n        this.$state = state;\n        this.lastShownError = 0;\n        \n        \n        this.setConnectionDetails = function(identifier) {\n            this.api = new GetShopApiWebSocket('trackandtrace.getshop.com', '31332', identifier, true);\n//            this.api = new GetShopApiWebSocket('trackandtrace.3.0.local.getshop.com', '31330', identifier, true);\n//            this.api = new GetShopApiWebSocket('192.168.10.190', '31330', identifier, true);\n//            this.api = new GetShopApiWebSocket('trackandtrace.3.0.mpal.getshop.com', '31330', identifier, true);\n\n            this.api.setMessageCountChangedEvent(function() {\n                $rootScope.$broadcast(\"messageCountChanged\", \"\");\n            });\n            \n            this.api.setGlobalErrorHandler(function(error) {\n                if (error.errorCode == 1000010) {\n                    var now = new Date().getTime();\n                    var diff = now - this.lastShownError;\n                    if (diff < 1000) {\n                        return;\n                    }\n                    \n                    this.lastShownError = new Date().getTime();\n                    alert(\"Did not find the company you specified, please check your details.\");\n                    me.$state.transitionTo('base.login');\n                    $('.loginbutton').find('.login-shower').remove();\n                    this.lastShownError = new Date().getTime();\n                } else if (error.errorCode == 13) {\n                    var now = new Date().getTime();\n                    var diff = now - this.lastShownError;\n                    if (diff < 1000) {\n                        return;\n                    }\n                    \n                    \n                    this.lastShownError = new Date().getTime();\n                    alert(\"Wrong username or password, please try again.\");\n                    \n                    me.$state.transitionTo('base.login');\n                    $('.loginbutton').find('.login-shower').remove();\n                    this.lastShownError = new Date().getTime();\n                } else {\n                    if (error != null && error.errorCode  != null && error.errorCode == 26 && !localStorage.getItem('username')) {\n                        return;\n                    }\n                    alert(errorTextMatrix[error.errorCode]);\n                }\n            });\n            \n            var me = this;\n            \n            this.api.setConnectedEvent(function() {\n                $rootScope.$broadcast(\"connectionEstablished\", \"\");\n                $rootScope.$digest();\n                \n                me.logon(false);\n            });\n            \n            this.api.listeners = [];\n            this.api.addListener(\"com.thundashop.core.trackandtrace.Route\", this.refreshRoute, me);\n            this.api.addListener(\"com.thundashop.core.trackandtrace.DriverMessage\", this.messageReceived, me);\n            this.api.addListener(\"com.thundashop.core.trackandtrace.DriverRemoved\", this.driverRemoved, me);\n        },\n                \n        this.refreshRoute = function(route) {\n            if (this.api.sessionId === route.sentFromSessionId)\n                return;\n  \n            $rootScope.$broadcast(\"refreshRouteEven1\", route);\n            $rootScope.$apply();\n            \n        },\n                \n        this.messageReceived = function(msg) {\n            if (this.api.sessionId === msg.sentFromSessionId)\n                return;\n  \n            $rootScope.$broadcast(\"messageReceived\", msg);\n            $rootScope.$apply();\n        },\n                \n        this.driverRemoved = function(msg) {\n            if (this.api.sessionId === msg.sentFromSessionId)\n                return;\n  \n            $rootScope.$broadcast(\"driverRemoved\", msg);\n            $rootScope.$apply();\n        },\n                \n        this.logon = function(fromLogin) {\n            var username = localStorage.getItem(\"username\");\n            var password = localStorage.getItem(\"password\");\n            \n            $getShopApi = this.getApi();\n            var me = this;\n            \n            $getShopApi.UserManager.logOn(username, password).done(function(user) {\n                if($getShopApi) {\n                    $getShopApi.sendUnsentMessages();\n                }\n                localStorage.setItem(\"loggedInUserId\", JSON.stringify(user));\n\n                if (fromLogin) {\n                    me.loadDataAndGoToHome(me);\n                }\n            });\n        },\n                \n        this.loadDataAndGoToHome = function($api) {\n            $state.transitionTo('base.home', \n             {\n                'action' : {\n                    refreshData : true\n                }\n            });\n        },\n        \n        this.getLoggedOnUser = function() {\n            return JSON.parse(localStorage.getItem(\"loggedInUserId\"));\n        },\n        \n        /**\n         * \n         * @returns GetShopApiWebSocket\n         */\n        this.getApi = function() {\n            if (!this.api && localStorage.getItem(\"company\")) {\n                this.setConnectionDetails(localStorage.getItem(\"company\"));\n                this.api.connect();\n            }\n            \n            return this.api;\n        }\n        \n        this.reconnect = function(fromLogin) {\n            var username = localStorage.getItem(\"username\");\n            var password = localStorage.getItem(\"password\");\n            var company = localStorage.getItem(\"company\");\n            \n            if (!username || !password) {\n                if (fromLogin) {\n                    alert(\"Wrong username or password, please try again .\");\n                }\n             \n                $('.loginbutton').find('.login-shower').remove();\n                this.$state.transitionTo('base.login');\n                return;\n            }\n            \n            this.setConnectionDetails(company);\n            \n            $getShopApi = this.getApi();\n            $getShopApi.connect();\n            var me = this;\n            \n            this.logon(fromLogin);\n        }\n    }\n    \n    var apiWrapperRet = new getApiWrapper($state);\n    return apiWrapperRet;\n}]);","/* \n * To change this license header, choose License Headers in Project Properties.\n * To change this template file, choose Tools | Templates\n * and open the template in the editor.\n */\n\n\nif(typeof(controllers) === \"undefined\") { var controllers = {}; }\n\ncontrollers.KeyReferenceController = function($scope, datarepository, $stateParams, $api, $state) {\n    $scope.numbers = 10;\n    $scope.api = $api;\n    $scope.task = datarepository.getTaskById($stateParams.taskId);\n    \n    \n    $scope.makeCorrection = function(a, b) {\n        $state.go('base.task', { \n            destinationId: $stateParams.destinationId,  \n            routeId: $stateParams.routeId, \n            taskId: $scope.task.id,\n            'action' : { \n                state: 'keyedReference',\n                keyReference : b\n            }\n        });\n    }\n    \n    $scope.doTheBack = function() {\n        $state.transitionTo('base.task', { destinationId: $stateParams.destinationId,  routeId: $stateParams.routeId, taskId: $stateParams.taskId });\n    }\n}","/* \n * To change this license header, choose License Headers in Project Properties.\n * To change this template file, choose Tools | Templates\n * and open the template in the editor.\n */\n\nif(typeof(controllers) === \"undefined\") { var controllers = {}; }\n\ncontrollers.TaskController = function($scope, datarepository, $stateParams, $api, $state) {\n    $scope.exceptions = [];\n    $scope.i = 1;\n    \n    $scope.doTheBack = function() {\n        $state.transitionTo('base.destination', { destinationId: $stateParams.destinationId,  routeId: $stateParams.routeId });\n    }\n    \n    $scope.exceptionSelected = function(exceptionid) {\n        $scope.task.exceptionId = exceptionid;\n        $scope.task.completed = false;\n        $api.getApi().TrackAndTraceManager.markTaskWithExceptionDeliverd($scope.task.id, exceptionid);\n        datarepository.save();\n        $state.transitionTo('base.destination', { destinationId: $stateParams.destinationId,  routeId: $stateParams.routeId });\n    }\n    \n    $scope.pickupExceptionSelected = function(exceptionid) {\n        for (var i in $scope.task.orders) {\n            var order = $scope.task.orders[i];\n            if (order.referenceNumber === $stateParams.orderId) {\n                order.exceptionId = exceptionid;\n                order.countedBundles = -1;\n                $api.getApi().TrackAndTraceManager.markOrderWithException($scope.task.id, order.referenceNumber, exceptionid);\n                datarepository.save();\n            }\n        }\n        \n        $scope.goBackToOrderView();\n    }\n    \n    $scope.anyOrderExceptions = function() {\n        for (var i in $scope.task.orders) {\n            var order = $scope.task.orders[i];\n            if (order.exceptionId)\n                return true;\n        }\n        \n        return false;\n    }\n    \n    $scope.showExceptions = function() {\n        $state.transitionTo('base.taskexceptions', { destinationId: $stateParams.destinationId,  routeId: $stateParams.routeId, taskId : $scope.task.id });\n    }\n    \n    $scope.goBackToOrderView = function() {\n        $state.transitionTo('base.task', { destinationId: $stateParams.destinationId,  routeId: $stateParams.routeId, taskId : $scope.task.id });\n    }\n    \n    $scope.setPickupType = function() {\n        $scope.task = datarepository.getTaskById($stateParams.taskId);\n        \n        if (!$scope.task)\n            return;\n        \n        if ($scope.task.className == \"com.thundashop.core.trackandtrace.PickupTask\") {\n            $scope.taskType = \"pickup_parcels\";\n        }\n        \n        if ($scope.task.className == \"com.thundashop.core.trackandtrace.DeliveryTask\") {\n            $scope.taskType = \"delivery\";\n        }\n    }\n    \n    $scope.loadExceptions = function() {\n        for (var i in datarepository.exceptions) {\n            var ex = datarepository.exceptions[i];\n            if (ex.type ===  $scope.taskType) {\n                $scope.exceptions.push(ex);\n            }\n        }\n    }\n    \n    $scope.shouldBeVisible = function(order) {\n        return datarepository.currentVissibleReferenceNumber == order.referenceNumber;\n    }\n    \n    $scope.toggleActionButton = function(task) {\n        if ($('[order=\"'+task.referenceNumber+'\"] .deliverytaskaction').is(':visible')) {\n            $('[order=\"'+task.referenceNumber+'\"] .deliverytaskaction').hide();\n            datarepository.currentVissibleReferenceNumber = null;\n        } else {\n            datarepository.currentVissibleReferenceNumber = task.referenceNumber;\n            $('.deliverytaskaction').hide();\n            $('[order=\"'+task.referenceNumber+'\"] .deliverytaskaction').show();\n        }\n    }\n    \n    $scope.isAllDriverCopiedOrdersCounted = function() {\n        for (var i in $scope.task.orders) {\n            var order = $scope.task.orders[i];\n            if (order.orderDriverDeliveries && typeof(order.driverDeliveryCopiesCounted) === \"undefined\") {\n                return false;\n            }\n        }\n        \n        return true;\n    }\n    \n    $scope.markAsDeliverd = function() {\n        if (!$scope.isAllDriverCopiedOrdersCounted()) {\n            alert(\"You need to count all the orders with driver copies\");\n            return;\n        }\n        $scope.task.completed = true;\n        $api.getApi().TrackAndTraceManager.markAsDeliverd($scope.task.id);\n        datarepository.save();\n        $state.transitionTo('base.destination', { destinationId: $stateParams.destinationId,  routeId: $stateParams.routeId });\n    }\n    \n    $scope.setPickupType();\n    \n    $scope.getTotalBundles = function(task) {\n        var count = 0;\n        \n        for (var i in task.orders) {\n            count += task.orders[i].quantity;\n        }\n        \n        return count;\n    }\n    \n    $scope.isCageOrder = function(order) {\n        return order.containerType === \"CAGE_LG\" || order.containerType === \"CAGE_SM\";\n    }\n    \n    $scope.isPalletOrder = function(order) {\n        return order.containerType === \"PALLET\";\n    }\n    \n    $scope.getCages = function() {\n        var orders = [];\n        for (var i in $scope.task.orders) {\n            var order = $scope.task.orders[i];\n            \n            if ($scope.isCageOrder(order)) {\n                orders.push(order);\n            }\n        }\n        \n        return orders;\n    }\n    \n    $scope.getPallets = function() {\n        var orders = [];\n        for (var i in $scope.task.orders) {\n            var order = $scope.task.orders[i];\n            \n            if ($scope.isPalletOrder(order)) {\n                orders.push(order);\n            }\n        }\n        \n        return orders;\n    }\n    \n    $scope.getContainerBundles = function() {\n        var pallets = $scope.getPallets();\n        var cages = $scope.getCages();\n        var combined = pallets.concat(cages);\n        return combined;\n    }\n    \n    $scope.getBundleCount = function(orders) {\n        var q = 0;\n        for (var i in orders) {\n            var order = orders[i];\n            q += order.quantity;\n        }\n        return q;\n    }\n    \n    $scope.isLooseOrder = function(order) {\n        return !$scope.isPalletOrder(order) && !$scope.isCageOrder(order);\n    }\n    \n    $scope.getLooseOrders = function() {\n        var orders = [];\n        for (var i in $scope.task.orders) {\n            var order = $scope.task.orders[i];\n            if ($scope.isLooseOrder(order)) {\n                orders.push(order);\n            }\n        }\n        return orders;\n    }\n    \n    $scope.getPalletCount = function() {\n        var orders = $scope.getPallets()();\n        return $scope.countIt(orders);\n    }\n    \n    $scope.getCageCount = function() {\n        var orders = $scope.getCages();\n        return $scope.countIt(orders);\n    }\n    \n    $scope.resetPickupOrder = function(referenceNumber) {\n        var task = datarepository.getTaskById($stateParams.taskId);\n        for (var i in task.orders) {\n            var order = task.orders[i];\n            if (order.referenceNumber === referenceNumber) {\n                order.barcodeScanned = [];\n                order.countedBundles = -1;\n                \n                $api.getApi().TrackAndTraceManager.changeQuantity($scope.task.id, referenceNumber, -1, -1);\n                $api.getApi().TrackAndTraceManager.setScannedBarcodes($scope.task.id, referenceNumber, [], false);                \n                datarepository.save();\n            }\n        }\n        \n    }\n\n    $scope.orderFinished = function(order) {\n        if ($scope.taskType === \"pickup_parcels\" && order.container && order.countedBundles < 0 && order.countedContainers < 0 &&!order.exceptionId) {\n            return false;\n        }\n        \n        if ($scope.taskType === \"pickup_parcels\" && order.countedBundles < 0 && order.barcodeScanned.length == 0 &&!order.exceptionId) {\n            return false;\n        }\n        \n        \n        if (order.orderDriverDeliveries && !order.hasOwnProperty(\"driverDeliveryCopiesCounted\")) {\n            return false;\n        }\n        \n        return true;\n    }\n    \n    $scope.getContainerCount = function() {\n        if (!$scope.isContainerCounted()) {\n            return 0;\n        }\n        \n        return $scope.task.containerCounted;\n    }\n    \n    $scope.isAnyContainers = function() {\n        var anyCont = false;\n        for (var i in $scope.task.orders) {\n            var order = $scope.task.orders[i];\n            if ($scope.isPalletOrder(order) || $scope.isCageOrder(order)) {\n                anyCont = true;\n            }\n        }\n       \n        return anyCont;\n    }\n    \n    $scope.isContainerCounted = function() {\n        var anyCont = $scope.isAnyContainers();\n        \n        if (!anyCont) {\n            return true;\n        }\n\n        if ($scope.task.hasOwnProperty('containerCounted') && $scope.task.containerCounted > 0) \n            return true;\n        \n        return false;\n    }\n    \n    $scope.allOrdersFinished = function() {\n        for (var i in $scope.task.orders) {\n            var order = $scope.task.orders[i];\n            if (!$scope.orderFinished(order))\n                return false;\n        }\n        \n        return true;\n    }\n    \n    $scope.openCorrection = function(order) {\n        $state.transitionTo('base.ordercorrection', { \n            destinationId: $stateParams.destinationId,  \n            routeId: $stateParams.routeId, \n            taskId: $scope.task.id, orderId: order.referenceNumber,\n            type: 'normal'\n        });\n    }\n    \n    $scope.openCountedReturn = function(order) {\n        $state.transitionTo('base.ordercorrection', { \n            destinationId: $stateParams.destinationId,  \n            routeId: $stateParams.routeId, \n            taskId: $scope.task.id, orderId: order.referenceNumber,\n            type: 'returncountingnormal'\n        });\n    }\n    \n    $scope.openCountPalletsOrCages = function(order) {\n        $state.transitionTo('base.ordercorrection', { \n            destinationId: $stateParams.destinationId,  \n            routeId: $stateParams.routeId, \n            taskId: $scope.task.id, orderId: null,\n            type: 'cagecount'\n        });\n    }\n    \n    $scope.showKeyReference = function() {\n        $state.transitionTo('base.keyreference', { \n            destinationId: $stateParams.destinationId,  \n            routeId: $stateParams.routeId, \n            taskId: $scope.task.id\n        });\n    }\n    \n    $scope.openDriverCopies = function(order) {\n        $state.transitionTo('base.ordercorrection', { \n            destinationId: $stateParams.destinationId,  \n            routeId: $stateParams.routeId, \n            taskId: $scope.task.id, orderId: order.referenceNumber,\n            type: 'driverCopies'\n        });\n    }\n    \n    $scope.openPickupException = function(order) {\n        var params = {\n            destinationId: $stateParams.destinationId,  \n            routeId: $stateParams.routeId, \n            taskId : $scope.task.id,\n            orderId: order.referenceNumber\n        };\n        \n        $state.transitionTo('base.pickupexception', params);\n    }\n    \n    $scope.barcodeReceived = function(barcode, barcodeEnteredManually) {\n        var labelNumber = barcode.substr(barcode.length - 3);\n        var orderReference = barcode.substr(barcode.length - 13, 10);\n        \n        var orderFound = false;\n        for (var i in $scope.task.orders) {\n            var order = $scope.task.orders[i];\n            if (order.referenceNumber.trim() == orderReference) {\n                orderFound = order;\n            }\n        }\n        \n        if (orderFound) {\n            if (!orderFound.barcodeScanned) {\n                orderFound.barcodeScanned = [];\n            }\n            \n            if ($.inArray(barcode, orderFound.barcodeScanned) < 0) {\n                orderFound.barcodeScanned.push(barcode);\n            }\n            \n            \n            if (!orderFound.mustScanBarcode) {\n                $scope.openCountedReturn(orderFound);\n            }\n            \n            var tast = datarepository.getTaskById($stateParams.taskId);\n            for (var i in tast.orders) {\n                var order = tast.orders[i];\n                if (order.referenceNumber.trim() == orderReference) {\n                    tast.orders[i] = orderFound;\n                }\n            }\n            \n            var isBarcodeEnteredManually = !barcodeEnteredManually ? false : true;\n            \n            $api.getApi().TrackAndTraceManager.setScannedBarcodes($scope.task.id, orderFound.referenceNumber, orderFound.barcodeScanned, isBarcodeEnteredManually);\n            datarepository.save();\n            \n            return;\n        }\n        \n        if (barcodeEnteredManually) {\n            alert(\"Unscheduled or invalid reference keyed.\");\n        } else {\n            alert(\"Please check the return label\");\n        }\n    }\n    \n    $scope.stopScanner = function() {\n        if (typeof(cordova) === \"undefined\") {\n            return;\n        }\n        \n        cordova.exec(function() {}, function() {}, \"HoneyWellBarcodeReaderE75\", \"stop\", [\"test\"])\n    }\n    \n    $scope.startScanner = function() {\n        \n        if (typeof(cordova) === \"undefined\") {\n            $scope.barcodeReceived('721148692910'+$scope.i);\n            $scope.i++;\n            return;\n        }\n        \n        $scope.stopScanner();\n        cordova.exec(function(a) { $scope.barcodeReceived(a); }, function(fail) {}, \"HoneyWellBarcodeReaderE75\", \"echo\", [\"test\"])\n    }\n    \n    if ($state.current.name === \"base.taskexceptions\" || $state.current.name === \"base.pickupexception\") {\n        $scope.loadExceptions();\n    }\n    \n    if ($stateParams.action && $stateParams.action.state === \"keyedReference\") {\n        var barcode = datarepository.getDestinationById($stateParams.destinationId).company.id + $stateParams.action.keyReference + \"000\";\n        $scope.barcodeReceived(barcode, true);\n    }\n    \n    $scope.$on('refreshRoute', function(msg, route) {\n        $scope.setPickupType();\n        $scope.$evalAsync();\n    });\n    \n}","/* \n * To change this license header, choose License Headers in Project Properties.\n * To change this template file, choose Tools | Templates\n * and open the template in the editor.\n */\n\nif(typeof(controllers) === \"undefined\") { var controllers = {}; }\n\ncontrollers.TaskCorrectionController = function($scope, datarepository, $stateParams, $api, $state) {\n    $scope.numbers = 10;\n    $scope.api = $api;\n    $scope.countPickupContainerType = \"\";\n    \n    $scope.setOrder = function() {\n        $scope.task = datarepository.getTaskById($stateParams.taskId);\n        \n        if (!$scope.task)\n            return;\n        \n        for (var i in $scope.task.orders) {\n            var order = $scope.task.orders[i];\n            if (order.referenceNumber === $stateParams.orderId) {\n                $scope.order = order;\n                $scope.numbers = order.quantity;\n            }\n        }\n    }\n    \n    $scope.needToPreselectType = function() {\n        if ($scope.order && $scope.order.container && !$scope.countPickupContainerType)\n            return true;\n        \n        return false;\n    }\n    \n    $scope.getOldQuantity = function(order) {\n        if ($stateParams.type === \"normal\") {\n            return order.quantity;\n        }\n        \n        if ($stateParams.type === \"returncountingnormal\") {\n            if (order.countedBundles < 0)\n                return 0;\n            \n            return order.countedBundles;\n        }\n        \n        if ($stateParams.type === \"driverCopies\") {\n            return order.driverDeliveryCopiesCounted;\n        }\n        \n        if ($stateParams.type === \"cagecount\") {\n            return $scope.task.containerCounted;\n        }\n        \n        return 0;\n    }\n    \n    $scope.makeCorrection = function(a, b) {\n        var newQuantity = parseInt(b, 10);\n        if ($stateParams.type === \"normal\") {\n            $scope.order.quantity = newQuantity;\n            datarepository.save();\n            $scope.api.getApi().TrackAndTraceManager.changeQuantity($scope.task.id, $scope.order.referenceNumber, b, -1);\n        }\n        \n        if ($stateParams.type === \"cagecount\") {\n            $scope.task.containerCounted = newQuantity;\n            datarepository.save();\n            $scope.api.getApi().TrackAndTraceManager.setCagesOrPalletCount($scope.task.id, b);\n        }\n        \n        if ($stateParams.type === \"returncountingnormal\") {\n            \n            if ($scope.order.container) {\n                if ($scope.countPickupContainerType === \"container\") {\n                    $scope.order.countedBundles = -1;\n                    $scope.order.countedContainers = newQuantity;\n                } else {\n                    $scope.order.countedBundles = newQuantity;\n                    $scope.order.countedContainers = -1;    \n                }\n            } else {\n                $scope.order.countedBundles = newQuantity;\n                $scope.order.countedContainers = -1;\n            }\n            \n            $scope.order.exceptionId = null;\n            \n            $scope.api.getApi().TrackAndTraceManager.changeQuantity($scope.task.id, $scope.order.referenceNumber, $scope.order.countedBundles, $scope.order.countedContainers);\n            $scope.api.getApi().TrackAndTraceManager.markOrderWithException($scope.task.id, $scope.order.referenceNumber, \"\");\n            datarepository.save();\n        }\n        \n        if ($stateParams.type === \"driverCopies\") {\n            var order = $scope.order;\n            $scope.order.driverDeliveryCopiesCounted = newQuantity;\n            \n            var totalBundles = order.driverDeliveryCopiesCounted + order.orderOdds + order.orderFull + order.orderLargeDisplays;\n            $scope.order.quantity = totalBundles;\n            \n            datarepository.save();\n            $scope.api.getApi().TrackAndTraceManager.changeCountedDriverCopies($scope.task.id, $scope.order.referenceNumber, b);\n            $scope.api.getApi().TrackAndTraceManager.changeQuantity($scope.task.id, $scope.order.referenceNumber, $scope.order.quantity, -1);\n        }\n        \n        $state.transitionTo('base.task', { destinationId: $stateParams.destinationId,  routeId: $stateParams.routeId, taskId: $stateParams.taskId });\n    }\n    \n    $scope.setContainerType = function(type) {\n        $scope.countPickupContainerType = type;\n    }\n    \n    $scope.goBack = function(a, b) {\n        $state.transitionTo('base.task', { destinationId: $stateParams.destinationId,  routeId: $stateParams.routeId, taskId: $stateParams.taskId });\n    }\n    \n    $scope.setOrder();\n}","/* \n * To change this license header, choose License Headers in Project Properties.\n * To change this template file, choose Tools | Templates\n * and open the template in the editor.\n */\n\n\nif(typeof(controllers) === \"undefined\") { var controllers = {}; }\n\ncontrollers.TaskFooterController = function($scope, datarepository, $stateParams, $api, $state) {\n    $scope.doTheBack = function() {\n        $state.transitionTo('base.destination', { destinationId: $stateParams.destinationId,  routeId: $stateParams.routeId });\n    }\n}"],"sourceRoot":"/source/"}