<?php

/**
 * This library is built by GetShop and are used to communicate with the GetShop backend. 
 * License: GPLv2
 * License URI: http://www.gnu.org/licenses/gpl-2.0.html
*/

class APIAccountingManager {

	var $transport;
	
	function APIAccountingManager($transport) {
		$this->transport = $transport;
	}

	/**
	* For handling connection to accounting systems.<br>
	* @return String[] 
	*/

	public function createCombinedOrderFile($newUsersOnly) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["newUsersOnly"] = json_encode($this->transport->object_unset_nulls($newUsersOnly));
	     $gs_data_input2939299822982["method"] = "createCombinedOrderFile";
	     $gs_data_input2939299822982["interfaceName"] = "core.accountingmanager.IAccountingManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* For handling connection to accounting systems.<br>
	* @return String[] 
	*/

	public function createCreditorFile($newOnly) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["newOnly"] = json_encode($this->transport->object_unset_nulls($newOnly));
	     $gs_data_input2939299822982["method"] = "createCreditorFile";
	     $gs_data_input2939299822982["interfaceName"] = "core.accountingmanager.IAccountingManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* For handling connection to accounting systems.<br>
	* @return String[] 
	*/

	public function createOrderFile() {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982["method"] = "createOrderFile";
	     $gs_data_input2939299822982["interfaceName"] = "core.accountingmanager.IAccountingManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* For handling connection to accounting systems.<br>
	* @return String[] 
	*/

	public function createUserFile($newOnly) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["newOnly"] = json_encode($this->transport->object_unset_nulls($newOnly));
	     $gs_data_input2939299822982["method"] = "createUserFile";
	     $gs_data_input2939299822982["interfaceName"] = "core.accountingmanager.IAccountingManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* For handling connection to accounting systems.<br>
	* @return void 
	*/

	public function deleteFile($fileId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["fileId"] = json_encode($this->transport->object_unset_nulls($fileId));
	     $gs_data_input2939299822982["method"] = "deleteFile";
	     $gs_data_input2939299822982["interfaceName"] = "core.accountingmanager.IAccountingManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* For handling connection to accounting systems.<br>
	* @return core_accountingmanager_SavedOrderFile 
	*/

	public function downloadOrderFileNewType($configId, $start, $end) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["configId"] = json_encode($this->transport->object_unset_nulls($configId));
	     $gs_data_input2939299822982['args']["start"] = json_encode($this->transport->object_unset_nulls($start));
	     $gs_data_input2939299822982['args']["end"] = json_encode($this->transport->object_unset_nulls($end));
	     $gs_data_input2939299822982["method"] = "downloadOrderFileNewType";
	     $gs_data_input2939299822982["interfaceName"] = "core.accountingmanager.IAccountingManager";
	     return $this->transport->cast(new core_accountingmanager_SavedOrderFile(), $this->transport->sendMessage($gs_data_input2939299822982));
	}

	/**
	* For handling connection to accounting systems.<br>
	* @return core_accountingmanager_AccountingTransferConfig 
	*/

	public function getAccountingConfig($configId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["configId"] = json_encode($this->transport->object_unset_nulls($configId));
	     $gs_data_input2939299822982["method"] = "getAccountingConfig";
	     $gs_data_input2939299822982["interfaceName"] = "core.accountingmanager.IAccountingManager";
	     return $this->transport->cast(new core_accountingmanager_AccountingTransferConfig(), $this->transport->sendMessage($gs_data_input2939299822982));
	}

	/**
	* For handling connection to accounting systems.<br>
	* @return core_accountingmanager_AccountingManagerConfig 
	*/

	public function getAccountingManagerConfig() {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982["method"] = "getAccountingManagerConfig";
	     $gs_data_input2939299822982["interfaceName"] = "core.accountingmanager.IAccountingManager";
	     return $this->transport->cast(new core_accountingmanager_AccountingManagerConfig(), $this->transport->sendMessage($gs_data_input2939299822982));
	}

	/**
	* For handling connection to accounting systems.<br>
	* @return core_accountingmanager_AccountingTransferConfig[] 
	*/

	public function getAllConfigs() {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982["method"] = "getAllConfigs";
	     $gs_data_input2939299822982["interfaceName"] = "core.accountingmanager.IAccountingManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* For handling connection to accounting systems.<br>
	* @return core_accountingmanager_SavedOrderFile[] 
	*/

	public function getAllFiles() {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982["method"] = "getAllFiles";
	     $gs_data_input2939299822982["interfaceName"] = "core.accountingmanager.IAccountingManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* For handling connection to accounting systems.<br>
	* @return core_accountingmanager_SavedOrderFile[] 
	*/

	public function getAllFilesNotTransferredToAccounting() {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982["method"] = "getAllFilesNotTransferredToAccounting";
	     $gs_data_input2939299822982["interfaceName"] = "core.accountingmanager.IAccountingManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* For handling connection to accounting systems.<br>
	* @return String[] 
	*/

	public function getFile($id) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["id"] = json_encode($this->transport->object_unset_nulls($id));
	     $gs_data_input2939299822982["method"] = "getFile";
	     $gs_data_input2939299822982["interfaceName"] = "core.accountingmanager.IAccountingManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* For handling connection to accounting systems.<br>
	* @return core_accountingmanager_SavedOrderFile 
	*/

	public function getFileById($id) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["id"] = json_encode($this->transport->object_unset_nulls($id));
	     $gs_data_input2939299822982["method"] = "getFileById";
	     $gs_data_input2939299822982["interfaceName"] = "core.accountingmanager.IAccountingManager";
	     return $this->transport->cast(new core_accountingmanager_SavedOrderFile(), $this->transport->sendMessage($gs_data_input2939299822982));
	}

	/**
	* For handling connection to accounting systems.<br>
	* @return core_accountingmanager_SavedOrderFile 
	*/

	public function getFileByIdResend($id) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["id"] = json_encode($this->transport->object_unset_nulls($id));
	     $gs_data_input2939299822982["method"] = "getFileByIdResend";
	     $gs_data_input2939299822982["interfaceName"] = "core.accountingmanager.IAccountingManager";
	     return $this->transport->cast(new core_accountingmanager_SavedOrderFile(), $this->transport->sendMessage($gs_data_input2939299822982));
	}

	/**
	* For handling connection to accounting systems.<br>
	* @return String[] 
	*/

	public function getLatestLogEntries() {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982["method"] = "getLatestLogEntries";
	     $gs_data_input2939299822982["interfaceName"] = "core.accountingmanager.IAccountingManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* For handling connection to accounting systems.<br>
	* @return String[] 
	*/

	public function getNewFile($type) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["type"] = json_encode($this->transport->object_unset_nulls($type));
	     $gs_data_input2939299822982["method"] = "getNewFile";
	     $gs_data_input2939299822982["interfaceName"] = "core.accountingmanager.IAccountingManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* For handling connection to accounting systems.<br>
	* @return core_pmsmanager_PmsOrderStatistics 
	*/

	public function getStats($configId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["configId"] = json_encode($this->transport->object_unset_nulls($configId));
	     $gs_data_input2939299822982["method"] = "getStats";
	     $gs_data_input2939299822982["interfaceName"] = "core.accountingmanager.IAccountingManager";
	     return $this->transport->cast(new core_pmsmanager_PmsOrderStatistics(), $this->transport->sendMessage($gs_data_input2939299822982));
	}

	/**
	* For handling connection to accounting systems.<br>
	* @return void 
	*/

	public function markAsTransferredToAccounting($id) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["id"] = json_encode($this->transport->object_unset_nulls($id));
	     $gs_data_input2939299822982["method"] = "markAsTransferredToAccounting";
	     $gs_data_input2939299822982["interfaceName"] = "core.accountingmanager.IAccountingManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* For handling connection to accounting systems.<br>
	* @return void 
	*/

	public function removeTransferConfig($id) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["id"] = json_encode($this->transport->object_unset_nulls($id));
	     $gs_data_input2939299822982["method"] = "removeTransferConfig";
	     $gs_data_input2939299822982["interfaceName"] = "core.accountingmanager.IAccountingManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* For handling connection to accounting systems.<br>
	* @return void 
	*/

	public function resetAllAccounting() {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982["method"] = "resetAllAccounting";
	     $gs_data_input2939299822982["interfaceName"] = "core.accountingmanager.IAccountingManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* For handling connection to accounting systems.<br>
	* @return void 
	*/

	public function saveConfig($config) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["config"] = json_encode($this->transport->object_unset_nulls($config));
	     $gs_data_input2939299822982["method"] = "saveConfig";
	     $gs_data_input2939299822982["interfaceName"] = "core.accountingmanager.IAccountingManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* For handling connection to accounting systems.<br>
	* @return void 
	*/

	public function setAccountingManagerConfig($config) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["config"] = json_encode($this->transport->object_unset_nulls($config));
	     $gs_data_input2939299822982["method"] = "setAccountingManagerConfig";
	     $gs_data_input2939299822982["interfaceName"] = "core.accountingmanager.IAccountingManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* For handling connection to accounting systems.<br>
	* @return void 
	*/

	public function transferAllToNewSystem() {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982["method"] = "transferAllToNewSystem";
	     $gs_data_input2939299822982["interfaceName"] = "core.accountingmanager.IAccountingManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* For handling connection to accounting systems.<br>
	* @return void 
	*/

	public function transferFiles($type) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["type"] = json_encode($this->transport->object_unset_nulls($type));
	     $gs_data_input2939299822982["method"] = "transferFiles";
	     $gs_data_input2939299822982["interfaceName"] = "core.accountingmanager.IAccountingManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* For handling connection to accounting systems.<br>
	* @return void 
	*/

	public function transferFilesToAccounting() {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982["method"] = "transferFilesToAccounting";
	     $gs_data_input2939299822982["interfaceName"] = "core.accountingmanager.IAccountingManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* For handling connection to accounting systems.<br>
	* @return core_accountingmanager_SavedOrderFile 
	*/

	public function transferSingleOrders($configId, $incOrderIds) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["configId"] = json_encode($this->transport->object_unset_nulls($configId));
	     $gs_data_input2939299822982['args']["incOrderIds"] = json_encode($this->transport->object_unset_nulls($incOrderIds));
	     $gs_data_input2939299822982["method"] = "transferSingleOrders";
	     $gs_data_input2939299822982["interfaceName"] = "core.accountingmanager.IAccountingManager";
	     return $this->transport->cast(new core_accountingmanager_SavedOrderFile(), $this->transport->sendMessage($gs_data_input2939299822982));
	}

}
class APIAmestoManager {

	var $transport;
	
	function APIAmestoManager($transport) {
		$this->transport = $transport;
	}

	/**
	*
	* @author hung
	* @return void 
	*/

	public function syncAllCostumers($hostname) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["hostname"] = json_encode($this->transport->object_unset_nulls($hostname));
	     $gs_data_input2939299822982["method"] = "syncAllCostumers";
	     $gs_data_input2939299822982["interfaceName"] = "core.amesto.IAmestoManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	*
	* @author hung
	* @return void 
	*/

	public function syncAllOrders($hostname) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["hostname"] = json_encode($this->transport->object_unset_nulls($hostname));
	     $gs_data_input2939299822982["method"] = "syncAllOrders";
	     $gs_data_input2939299822982["interfaceName"] = "core.amesto.IAmestoManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	*
	* @author hung
	* @return void 
	*/

	public function syncAllStockQuantity($hostname) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["hostname"] = json_encode($this->transport->object_unset_nulls($hostname));
	     $gs_data_input2939299822982["method"] = "syncAllStockQuantity";
	     $gs_data_input2939299822982["interfaceName"] = "core.amesto.IAmestoManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

}
class APIApacManager {

	var $transport;
	
	function APIApacManager($transport) {
		$this->transport = $transport;
	}

	/**
	*
	* @author ktonder
	* @return core_apacmanager_ApacAccess[] 
	*/

	public function getAccessList($gs_multilevel_name) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "getAccessList";
	     $gs_data_input2939299822982["interfaceName"] = "core.apacmanager.IApacManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	*
	* @author ktonder
	* @return core_arx_Door[] 
	*/

	public function getAllDoors($gs_multilevel_name) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "getAllDoors";
	     $gs_data_input2939299822982["interfaceName"] = "core.apacmanager.IApacManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	*
	* @author ktonder
	* @return core_apacmanager_ApacAccess 
	*/

	public function getApacAccess($gs_multilevel_name, $accessId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["accessId"] = json_encode($this->transport->object_unset_nulls($accessId));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "getApacAccess";
	     $gs_data_input2939299822982["interfaceName"] = "core.apacmanager.IApacManager";
	     return $this->transport->cast(new core_apacmanager_ApacAccess(), $this->transport->sendMessage($gs_data_input2939299822982));
	}

	/**
	*
	* @author ktonder
	* @return core_apacmanager_ApacAccess 
	*/

	public function grantAccess($gs_multilevel_name, $apacAccess) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["apacAccess"] = json_encode($this->transport->object_unset_nulls($apacAccess));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "grantAccess";
	     $gs_data_input2939299822982["interfaceName"] = "core.apacmanager.IApacManager";
	     return $this->transport->cast(new core_apacmanager_ApacAccess(), $this->transport->sendMessage($gs_data_input2939299822982));
	}

	/**
	*
	* @author ktonder
	* @return void 
	*/

	public function removeAccess($gs_multilevel_name, $accessId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["accessId"] = json_encode($this->transport->object_unset_nulls($accessId));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "removeAccess";
	     $gs_data_input2939299822982["interfaceName"] = "core.apacmanager.IApacManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	*
	* @author ktonder
	* @return void 
	*/

	public function sendSms($gs_multilevel_name, $accessId, $message) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["accessId"] = json_encode($this->transport->object_unset_nulls($accessId));
	     $gs_data_input2939299822982['args']["message"] = json_encode($this->transport->object_unset_nulls($message));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "sendSms";
	     $gs_data_input2939299822982["interfaceName"] = "core.apacmanager.IApacManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

}
class APIBamboraManager {

	var $transport;
	
	function APIBamboraManager($transport) {
		$this->transport = $transport;
	}

	/**
	* Bambora payment management.
	* @return void 
	*/

	public function checkForOrdersToCapture() {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982["method"] = "checkForOrdersToCapture";
	     $gs_data_input2939299822982["interfaceName"] = "core.bambora.IBamboraManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Bambora payment management.
	* @return String 
	*/

	public function getCheckoutUrl($orderId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["orderId"] = json_encode($this->transport->object_unset_nulls($orderId));
	     $gs_data_input2939299822982["method"] = "getCheckoutUrl";
	     $gs_data_input2939299822982["interfaceName"] = "core.bambora.IBamboraManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

}
class APIBannerManager {

	var $transport;
	
	function APIBannerManager($transport) {
		$this->transport = $transport;
	}

	/**
	* Add a new image to an existing bannerset.<br>
	* The fileid is just an identifier and should be generated / stored by the one calling this application<br>
	*
	* @param id The id to save on.
	* @param fileId The given file id for this image, fetched from the filemanager when uploading the image.
	* @throws ErrorException
	* @return app_bannermanager_data_BannerSet 
	*/

	public function addImage($id, $fileId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["id"] = json_encode($this->transport->object_unset_nulls($id));
	     $gs_data_input2939299822982['args']["fileId"] = json_encode($this->transport->object_unset_nulls($fileId));
	     $gs_data_input2939299822982["method"] = "addImage";
	     $gs_data_input2939299822982["interfaceName"] = "app.banner.IBannerManager";
	     return $this->transport->cast(new app_bannermanager_data_BannerSet(), $this->transport->sendMessage($gs_data_input2939299822982));
	}

	/**
	* Add a product to a given image.
	* @param bannerSetId The id of the bannerset which holds the images.
	* @param imageId The image id to link a product to.
	* @param productId The id of the product to be linked.
	* @throws ErrorException
	* @return String 
	*/

	public function addSlide() {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982["method"] = "addSlide";
	     $gs_data_input2939299822982["interfaceName"] = "app.banner.IBannerManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Initiate / create a new bannerset.
	* @param width The width for the banners
	* @param height The height for the banners.
	* @param id Specify an id if you want to override the id generation, leave empty otherwhise.
	* @throws ErrorException
	* @return app_bannermanager_data_BannerSet 
	*/

	public function createSet($width, $height, $id) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["width"] = json_encode($this->transport->object_unset_nulls($width));
	     $gs_data_input2939299822982['args']["height"] = json_encode($this->transport->object_unset_nulls($height));
	     $gs_data_input2939299822982['args']["id"] = json_encode($this->transport->object_unset_nulls($id));
	     $gs_data_input2939299822982["method"] = "createSet";
	     $gs_data_input2939299822982["interfaceName"] = "app.banner.IBannerManager";
	     return $this->transport->cast(new app_bannermanager_data_BannerSet(), $this->transport->sendMessage($gs_data_input2939299822982));
	}

	/**
	* Delete a given banner set.
	*
	* @param id The id for the bannerset to delete.
	* @throws ErrorException
	* @return app_bannermanager_data_BannerSet 
	*/

	public function deleteSet($id) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["id"] = json_encode($this->transport->object_unset_nulls($id));
	     $gs_data_input2939299822982["method"] = "deleteSet";
	     $gs_data_input2939299822982["interfaceName"] = "app.banner.IBannerManager";
	     return $this->transport->cast(new app_bannermanager_data_BannerSet(), $this->transport->sendMessage($gs_data_input2939299822982));
	}

	/**
	* Add a product to a given image.
	* @param bannerSetId The id of the bannerset which holds the images.
	* @param imageId The image id to link a product to.
	* @param productId The id of the product to be linked.
	* @throws ErrorException
	* @return void 
	*/

	public function deleteSlide($slideId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["slideId"] = json_encode($this->transport->object_unset_nulls($slideId));
	     $gs_data_input2939299822982["method"] = "deleteSlide";
	     $gs_data_input2939299822982["interfaceName"] = "app.banner.IBannerManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Fetch an existing bannerset.
	* @param id The id for the bannerset to fetch, if the id does not exists, it will be created.
	* @throws ErrorException
	* @return app_bannermanager_data_BannerSet 
	*/

	public function getSet($id) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["id"] = json_encode($this->transport->object_unset_nulls($id));
	     $gs_data_input2939299822982["method"] = "getSet";
	     $gs_data_input2939299822982["interfaceName"] = "app.banner.IBannerManager";
	     return $this->transport->cast(new app_bannermanager_data_BannerSet(), $this->transport->sendMessage($gs_data_input2939299822982));
	}

	/**
	* Add a product to a given image.
	* @param bannerSetId The id of the bannerset which holds the images.
	* @param imageId The image id to link a product to.
	* @param productId The id of the product to be linked.
	* @throws ErrorException
	* @return app_bannermanager_data_Slide 
	*/

	public function getSlideById($slideId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["slideId"] = json_encode($this->transport->object_unset_nulls($slideId));
	     $gs_data_input2939299822982["method"] = "getSlideById";
	     $gs_data_input2939299822982["interfaceName"] = "app.banner.IBannerManager";
	     return $this->transport->cast(new app_bannermanager_data_Slide(), $this->transport->sendMessage($gs_data_input2939299822982));
	}

	/**
	* Add a product to a given image.
	* @param bannerSetId The id of the bannerset which holds the images.
	* @param imageId The image id to link a product to.
	* @param productId The id of the product to be linked.
	* @throws ErrorException
	* @return app_bannermanager_data_BannerSet 
	*/

	public function linkProductToImage($bannerSetId, $imageId, $productId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["bannerSetId"] = json_encode($this->transport->object_unset_nulls($bannerSetId));
	     $gs_data_input2939299822982['args']["imageId"] = json_encode($this->transport->object_unset_nulls($imageId));
	     $gs_data_input2939299822982['args']["productId"] = json_encode($this->transport->object_unset_nulls($productId));
	     $gs_data_input2939299822982["method"] = "linkProductToImage";
	     $gs_data_input2939299822982["interfaceName"] = "app.banner.IBannerManager";
	     return $this->transport->cast(new app_bannermanager_data_BannerSet(), $this->transport->sendMessage($gs_data_input2939299822982));
	}

	/**
	* Remove an already existing image from a given bannerset.
	* @param bannerSetId The id for the bannerset.
	* @param fileId The file id to remove.
	* @throws ErrorException
	* @return app_bannermanager_data_BannerSet 
	*/

	public function removeImage($bannerSetId, $fileId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["bannerSetId"] = json_encode($this->transport->object_unset_nulls($bannerSetId));
	     $gs_data_input2939299822982['args']["fileId"] = json_encode($this->transport->object_unset_nulls($fileId));
	     $gs_data_input2939299822982["method"] = "removeImage";
	     $gs_data_input2939299822982["interfaceName"] = "app.banner.IBannerManager";
	     return $this->transport->cast(new app_bannermanager_data_BannerSet(), $this->transport->sendMessage($gs_data_input2939299822982));
	}

	/**
	* Update a given bannerset.<br>
	* If the id of the bannerset does not exists, it will automatically create one for you.<br>
	*
	* @param set The bannerset to save.
	* @throws ErrorException
	* @return app_bannermanager_data_BannerSet 
	*/

	public function saveSet($set) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["set"] = json_encode($this->transport->object_unset_nulls($set));
	     $gs_data_input2939299822982["method"] = "saveSet";
	     $gs_data_input2939299822982["interfaceName"] = "app.banner.IBannerManager";
	     return $this->transport->cast(new app_bannermanager_data_BannerSet(), $this->transport->sendMessage($gs_data_input2939299822982));
	}

	/**
	* Add a product to a given image.
	* @param bannerSetId The id of the bannerset which holds the images.
	* @param imageId The image id to link a product to.
	* @param productId The id of the product to be linked.
	* @throws ErrorException
	* @return void 
	*/

	public function setImageForSlide($slideId, $fileId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["slideId"] = json_encode($this->transport->object_unset_nulls($slideId));
	     $gs_data_input2939299822982['args']["fileId"] = json_encode($this->transport->object_unset_nulls($fileId));
	     $gs_data_input2939299822982["method"] = "setImageForSlide";
	     $gs_data_input2939299822982["interfaceName"] = "app.banner.IBannerManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

}
class APIBigStock {

	var $transport;
	
	function APIBigStock($transport) {
		$this->transport = $transport;
	}

	/**
	* Update the credit account.
	*
	* @param credits
	* @param password
	* @throws ErrorException
	* @return void 
	*/

	public function addGetShopImageIdToBigStockOrder($downloadUrl, $imageId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["downloadUrl"] = json_encode($this->transport->object_unset_nulls($downloadUrl));
	     $gs_data_input2939299822982['args']["imageId"] = json_encode($this->transport->object_unset_nulls($imageId));
	     $gs_data_input2939299822982["method"] = "addGetShopImageIdToBigStockOrder";
	     $gs_data_input2939299822982["interfaceName"] = "core.bigstock.IBigStock";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Update the credit account.
	*
	* @param credits
	* @param password
	* @throws ErrorException
	* @return int 
	*/

	public function getAvailableCredits() {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982["method"] = "getAvailableCredits";
	     $gs_data_input2939299822982["interfaceName"] = "core.bigstock.IBigStock";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Purchases a picture from the bigstock library.
	*
	* @param imageId
	* @param sizeCode
	* @throws ErrorException
	* @return String 
	*/

	public function purchaseImage($imageId, $sizeCode) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["imageId"] = json_encode($this->transport->object_unset_nulls($imageId));
	     $gs_data_input2939299822982['args']["sizeCode"] = json_encode($this->transport->object_unset_nulls($sizeCode));
	     $gs_data_input2939299822982["method"] = "purchaseImage";
	     $gs_data_input2939299822982["interfaceName"] = "core.bigstock.IBigStock";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Update the credit account.
	*
	* @param credits
	* @param password
	* @throws ErrorException
	* @return void 
	*/

	public function setCreditAccount($credits, $password) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["credits"] = json_encode($this->transport->object_unset_nulls($credits));
	     $gs_data_input2939299822982['args']["password"] = json_encode($this->transport->object_unset_nulls($password));
	     $gs_data_input2939299822982["method"] = "setCreditAccount";
	     $gs_data_input2939299822982["interfaceName"] = "core.bigstock.IBigStock";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

}
class APIBookingComRateManagerManager {

	var $transport;
	
	function APIBookingComRateManagerManager($transport) {
		$this->transport = $transport;
	}

	/**
	* Pms booking.com ratemanager.
	* @return core_bcomratemanager_RateManagerConfig 
	*/

	public function getRateManagerConfig($gs_multilevel_name) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "getRateManagerConfig";
	     $gs_data_input2939299822982["interfaceName"] = "core.ratemanager.IBookingComRateManagerManager";
	     return $this->transport->cast(new core_bcomratemanager_RateManagerConfig(), $this->transport->sendMessage($gs_data_input2939299822982));
	}

	/**
	* Pms booking.com ratemanager.
	* @return void 
	*/

	public function pushAllBookings($gs_multilevel_name) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "pushAllBookings";
	     $gs_data_input2939299822982["interfaceName"] = "core.ratemanager.IBookingComRateManagerManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Pms booking.com ratemanager.
	* @return void 
	*/

	public function pushInventoryList($gs_multilevel_name) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "pushInventoryList";
	     $gs_data_input2939299822982["interfaceName"] = "core.ratemanager.IBookingComRateManagerManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Pms booking.com ratemanager.
	* @return void 
	*/

	public function saveRateManagerConfig($gs_multilevel_name, $config) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["config"] = json_encode($this->transport->object_unset_nulls($config));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "saveRateManagerConfig";
	     $gs_data_input2939299822982["interfaceName"] = "core.ratemanager.IBookingComRateManagerManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Pms booking.com ratemanager.
	* @return String 
	*/

	public function updateRate($gs_multilevel_name, $start, $end, $roomId, $rate) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["start"] = json_encode($this->transport->object_unset_nulls($start));
	     $gs_data_input2939299822982['args']["end"] = json_encode($this->transport->object_unset_nulls($end));
	     $gs_data_input2939299822982['args']["roomId"] = json_encode($this->transport->object_unset_nulls($roomId));
	     $gs_data_input2939299822982['args']["rate"] = json_encode($this->transport->object_unset_nulls($rate));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "updateRate";
	     $gs_data_input2939299822982["interfaceName"] = "core.ratemanager.IBookingComRateManagerManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

}
class APIBookingEngine {

	var $transport;
	
	function APIBookingEngine($transport) {
		$this->transport = $transport;
	}

	/**
	* Booking engine management system.<br>
	* @return boolean 
	*/

	public function canAddBooking($gs_multilevel_name, $bookingsToAdd) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["bookingsToAdd"] = json_encode($this->transport->object_unset_nulls($bookingsToAdd));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "canAddBooking";
	     $gs_data_input2939299822982["interfaceName"] = "core.bookingengine.IBookingEngine";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Booking engine management system.<br>
	* @return boolean 
	*/

	public function canAddBookings($gs_multilevel_name, $bookingsToAdd) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["bookingsToAdd"] = json_encode($this->transport->object_unset_nulls($bookingsToAdd));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "canAddBookings";
	     $gs_data_input2939299822982["interfaceName"] = "core.bookingengine.IBookingEngine";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Booking engine management system.<br>
	* @return void 
	*/

	public function changeBookingItemAndDateOnBooking($gs_multilevel_name, $booking, $item, $start, $end) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["booking"] = json_encode($this->transport->object_unset_nulls($booking));
	     $gs_data_input2939299822982['args']["item"] = json_encode($this->transport->object_unset_nulls($item));
	     $gs_data_input2939299822982['args']["start"] = json_encode($this->transport->object_unset_nulls($start));
	     $gs_data_input2939299822982['args']["end"] = json_encode($this->transport->object_unset_nulls($end));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "changeBookingItemAndDateOnBooking";
	     $gs_data_input2939299822982["interfaceName"] = "core.bookingengine.IBookingEngine";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Booking engine management system.<br>
	* @return void 
	*/

	public function changeBookingItemOnBooking($gs_multilevel_name, $booking, $item) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["booking"] = json_encode($this->transport->object_unset_nulls($booking));
	     $gs_data_input2939299822982['args']["item"] = json_encode($this->transport->object_unset_nulls($item));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "changeBookingItemOnBooking";
	     $gs_data_input2939299822982["interfaceName"] = "core.bookingengine.IBookingEngine";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Booking engine management system.<br>
	* @return void 
	*/

	public function changeBookingItemType($gs_multilevel_name, $itemId, $newTypeId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["itemId"] = json_encode($this->transport->object_unset_nulls($itemId));
	     $gs_data_input2939299822982['args']["newTypeId"] = json_encode($this->transport->object_unset_nulls($newTypeId));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "changeBookingItemType";
	     $gs_data_input2939299822982["interfaceName"] = "core.bookingengine.IBookingEngine";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Booking engine management system.<br>
	* @return void 
	*/

	public function changeDatesOnBooking($gs_multilevel_name, $bookingId, $start, $end) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["bookingId"] = json_encode($this->transport->object_unset_nulls($bookingId));
	     $gs_data_input2939299822982['args']["start"] = json_encode($this->transport->object_unset_nulls($start));
	     $gs_data_input2939299822982['args']["end"] = json_encode($this->transport->object_unset_nulls($end));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "changeDatesOnBooking";
	     $gs_data_input2939299822982["interfaceName"] = "core.bookingengine.IBookingEngine";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Booking engine management system.<br>
	* @return void 
	*/

	public function changeSourceOnBooking($gs_multilevel_name, $bookingId, $source) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["bookingId"] = json_encode($this->transport->object_unset_nulls($bookingId));
	     $gs_data_input2939299822982['args']["source"] = json_encode($this->transport->object_unset_nulls($source));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "changeSourceOnBooking";
	     $gs_data_input2939299822982["interfaceName"] = "core.bookingengine.IBookingEngine";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Booking engine management system.<br>
	* @return void 
	*/

	public function changeTypeOnBooking($gs_multilevel_name, $bookingId, $itemTypeId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["bookingId"] = json_encode($this->transport->object_unset_nulls($bookingId));
	     $gs_data_input2939299822982['args']["itemTypeId"] = json_encode($this->transport->object_unset_nulls($itemTypeId));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "changeTypeOnBooking";
	     $gs_data_input2939299822982["interfaceName"] = "core.bookingengine.IBookingEngine";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Booking engine management system.<br>
	* @return void 
	*/

	public function checkConsistency($gs_multilevel_name) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "checkConsistency";
	     $gs_data_input2939299822982["interfaceName"] = "core.bookingengine.IBookingEngine";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Booking engine management system.<br>
	* @return core_bookingengine_data_BookingItemType 
	*/

	public function createABookingItemType($gs_multilevel_name, $name) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["name"] = json_encode($this->transport->object_unset_nulls($name));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "createABookingItemType";
	     $gs_data_input2939299822982["interfaceName"] = "core.bookingengine.IBookingEngine";
	     return $this->transport->cast(new core_bookingengine_data_BookingItemType(), $this->transport->sendMessage($gs_data_input2939299822982));
	}

	/**
	* Booking engine management system.<br>
	* @return boolean 
	*/

	public function deleteBooking($gs_multilevel_name, $id) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["id"] = json_encode($this->transport->object_unset_nulls($id));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "deleteBooking";
	     $gs_data_input2939299822982["interfaceName"] = "core.bookingengine.IBookingEngine";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Booking engine management system.<br>
	* @return void 
	*/

	public function deleteBookingItem($gs_multilevel_name, $id) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["id"] = json_encode($this->transport->object_unset_nulls($id));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "deleteBookingItem";
	     $gs_data_input2939299822982["interfaceName"] = "core.bookingengine.IBookingEngine";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Booking engine management system.<br>
	* @return void 
	*/

	public function deleteBookingItemType($gs_multilevel_name, $id) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["id"] = json_encode($this->transport->object_unset_nulls($id));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "deleteBookingItemType";
	     $gs_data_input2939299822982["interfaceName"] = "core.bookingengine.IBookingEngine";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Booking engine management system.<br>
	* @return void 
	*/

	public function deleteOpeningHours($gs_multilevel_name, $repeaterId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["repeaterId"] = json_encode($this->transport->object_unset_nulls($repeaterId));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "deleteOpeningHours";
	     $gs_data_input2939299822982["interfaceName"] = "core.bookingengine.IBookingEngine";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Booking engine management system.<br>
	* @return void 
	*/

	public function forceUnassignBookingInfuture($gs_multilevel_name) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "forceUnassignBookingInfuture";
	     $gs_data_input2939299822982["interfaceName"] = "core.bookingengine.IBookingEngine";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Booking engine management system.<br>
	* @return core_bookingengine_data_BookingItem[] 
	*/

	public function getAllAvailbleItems($gs_multilevel_name, $start, $end) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["start"] = json_encode($this->transport->object_unset_nulls($start));
	     $gs_data_input2939299822982['args']["end"] = json_encode($this->transport->object_unset_nulls($end));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "getAllAvailbleItems";
	     $gs_data_input2939299822982["interfaceName"] = "core.bookingengine.IBookingEngine";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Booking engine management system.<br>
	* @return core_bookingengine_data_BookingItem[] 
	*/

	public function getAllAvailbleItemsWithBookingConsidered($gs_multilevel_name, $start, $end, $bookingid) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["start"] = json_encode($this->transport->object_unset_nulls($start));
	     $gs_data_input2939299822982['args']["end"] = json_encode($this->transport->object_unset_nulls($end));
	     $gs_data_input2939299822982['args']["bookingid"] = json_encode($this->transport->object_unset_nulls($bookingid));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "getAllAvailbleItemsWithBookingConsidered";
	     $gs_data_input2939299822982["interfaceName"] = "core.bookingengine.IBookingEngine";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Booking engine management system.<br>
	* @return core_bookingengine_data_Booking[] 
	*/

	public function getAllBookings($gs_multilevel_name) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "getAllBookings";
	     $gs_data_input2939299822982["interfaceName"] = "core.bookingengine.IBookingEngine";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Booking engine management system.<br>
	* @return core_bookingengine_data_Booking[] 
	*/

	public function getAllBookingsByBookingItem($gs_multilevel_name, $bookingItemId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["bookingItemId"] = json_encode($this->transport->object_unset_nulls($bookingItemId));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "getAllBookingsByBookingItem";
	     $gs_data_input2939299822982["interfaceName"] = "core.bookingengine.IBookingEngine";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Booking engine management system.<br>
	* @return core_bookingengine_data_Booking[] 
	*/

	public function getAllBookingsByBookingItemInDateRange($gs_multilevel_name, $bookingItemId, $start, $end) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["bookingItemId"] = json_encode($this->transport->object_unset_nulls($bookingItemId));
	     $gs_data_input2939299822982['args']["start"] = json_encode($this->transport->object_unset_nulls($start));
	     $gs_data_input2939299822982['args']["end"] = json_encode($this->transport->object_unset_nulls($end));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "getAllBookingsByBookingItemInDateRange";
	     $gs_data_input2939299822982["interfaceName"] = "core.bookingengine.IBookingEngine";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Booking engine management system.<br>
	* @return core_bookingengine_data_BookingItem[] 
	*/

	public function getAvailbleItems($gs_multilevel_name, $typeId, $start, $end) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["typeId"] = json_encode($this->transport->object_unset_nulls($typeId));
	     $gs_data_input2939299822982['args']["start"] = json_encode($this->transport->object_unset_nulls($start));
	     $gs_data_input2939299822982['args']["end"] = json_encode($this->transport->object_unset_nulls($end));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "getAvailbleItems";
	     $gs_data_input2939299822982["interfaceName"] = "core.bookingengine.IBookingEngine";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Booking engine management system.<br>
	* @return core_bookingengine_data_BookingItem[] 
	*/

	public function getAvailbleItemsWithBookingConsidered($gs_multilevel_name, $typeId, $start, $end, $bookingId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["typeId"] = json_encode($this->transport->object_unset_nulls($typeId));
	     $gs_data_input2939299822982['args']["start"] = json_encode($this->transport->object_unset_nulls($start));
	     $gs_data_input2939299822982['args']["end"] = json_encode($this->transport->object_unset_nulls($end));
	     $gs_data_input2939299822982['args']["bookingId"] = json_encode($this->transport->object_unset_nulls($bookingId));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "getAvailbleItemsWithBookingConsidered";
	     $gs_data_input2939299822982["interfaceName"] = "core.bookingengine.IBookingEngine";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Booking engine management system.<br>
	* @return core_bookingengine_data_BookingItem[] 
	*/

	public function getAvailbleItemsWithBookingConsideredAndShuffling($gs_multilevel_name, $typeId, $start, $end, $bookingId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["typeId"] = json_encode($this->transport->object_unset_nulls($typeId));
	     $gs_data_input2939299822982['args']["start"] = json_encode($this->transport->object_unset_nulls($start));
	     $gs_data_input2939299822982['args']["end"] = json_encode($this->transport->object_unset_nulls($end));
	     $gs_data_input2939299822982['args']["bookingId"] = json_encode($this->transport->object_unset_nulls($bookingId));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "getAvailbleItemsWithBookingConsideredAndShuffling";
	     $gs_data_input2939299822982["interfaceName"] = "core.bookingengine.IBookingEngine";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Booking engine management system.<br>
	* @return core_bookingengine_data_Booking 
	*/

	public function getBooking($gs_multilevel_name, $bookingId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["bookingId"] = json_encode($this->transport->object_unset_nulls($bookingId));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "getBooking";
	     $gs_data_input2939299822982["interfaceName"] = "core.bookingengine.IBookingEngine";
	     return $this->transport->cast(new core_bookingengine_data_Booking(), $this->transport->sendMessage($gs_data_input2939299822982));
	}

	/**
	* Booking engine management system.<br>
	* @return core_bookingengine_data_BookingItem 
	*/

	public function getBookingItem($gs_multilevel_name, $id) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["id"] = json_encode($this->transport->object_unset_nulls($id));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "getBookingItem";
	     $gs_data_input2939299822982["interfaceName"] = "core.bookingengine.IBookingEngine";
	     return $this->transport->cast(new core_bookingengine_data_BookingItem(), $this->transport->sendMessage($gs_data_input2939299822982));
	}

	/**
	* Booking engine management system.<br>
	* @return core_bookingengine_data_BookingItemType 
	*/

	public function getBookingItemType($gs_multilevel_name, $id) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["id"] = json_encode($this->transport->object_unset_nulls($id));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "getBookingItemType";
	     $gs_data_input2939299822982["interfaceName"] = "core.bookingengine.IBookingEngine";
	     return $this->transport->cast(new core_bookingengine_data_BookingItemType(), $this->transport->sendMessage($gs_data_input2939299822982));
	}

	/**
	* Booking engine management system.<br>
	* @return core_bookingengine_data_BookingItemType[] 
	*/

	public function getBookingItemTypes($gs_multilevel_name) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "getBookingItemTypes";
	     $gs_data_input2939299822982["interfaceName"] = "core.bookingengine.IBookingEngine";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Booking engine management system.<br>
	* @return core_bookingengine_data_BookingItemType[] 
	*/

	public function getBookingItemTypesWithSystemType($gs_multilevel_name, $systemType) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["systemType"] = json_encode($this->transport->object_unset_nulls($systemType));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "getBookingItemTypesWithSystemType";
	     $gs_data_input2939299822982["interfaceName"] = "core.bookingengine.IBookingEngine";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Booking engine management system.<br>
	* @return core_bookingengine_data_BookingItem[] 
	*/

	public function getBookingItems($gs_multilevel_name) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "getBookingItems";
	     $gs_data_input2939299822982["interfaceName"] = "core.bookingengine.IBookingEngine";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Booking engine management system.<br>
	* @return core_bookingengine_data_BookingEngineConfiguration 
	*/

	public function getConfig($gs_multilevel_name) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "getConfig";
	     $gs_data_input2939299822982["interfaceName"] = "core.bookingengine.IBookingEngine";
	     return $this->transport->cast(new core_bookingengine_data_BookingEngineConfiguration(), $this->transport->sendMessage($gs_data_input2939299822982));
	}

	/**
	* Booking engine management system.<br>
	* @return core_bookingengine_data_RegistrationRules 
	*/

	public function getDefaultRegistrationRules($gs_multilevel_name) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "getDefaultRegistrationRules";
	     $gs_data_input2939299822982["interfaceName"] = "core.bookingengine.IBookingEngine";
	     return $this->transport->cast(new core_bookingengine_data_RegistrationRules(), $this->transport->sendMessage($gs_data_input2939299822982));
	}

	/**
	* Booking engine management system.<br>
	* @return Integer 
	*/

	public function getNumberOfAvailable($gs_multilevel_name, $itemType, $start, $end) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["itemType"] = json_encode($this->transport->object_unset_nulls($itemType));
	     $gs_data_input2939299822982['args']["start"] = json_encode($this->transport->object_unset_nulls($start));
	     $gs_data_input2939299822982['args']["end"] = json_encode($this->transport->object_unset_nulls($end));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "getNumberOfAvailable";
	     $gs_data_input2939299822982["interfaceName"] = "core.bookingengine.IBookingEngine";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Booking engine management system.<br>
	* @return core_pmsmanager_TimeRepeaterData[] 
	*/

	public function getOpeningHours($gs_multilevel_name, $itemId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["itemId"] = json_encode($this->transport->object_unset_nulls($itemId));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "getOpeningHours";
	     $gs_data_input2939299822982["interfaceName"] = "core.bookingengine.IBookingEngine";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Booking engine management system.<br>
	* @return core_pmsmanager_TimeRepeaterData[] 
	*/

	public function getOpeningHoursWithType($gs_multilevel_name, $itemId, $timePeriodeType) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["itemId"] = json_encode($this->transport->object_unset_nulls($itemId));
	     $gs_data_input2939299822982['args']["timePeriodeType"] = json_encode($this->transport->object_unset_nulls($timePeriodeType));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "getOpeningHoursWithType";
	     $gs_data_input2939299822982["interfaceName"] = "core.bookingengine.IBookingEngine";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Booking engine management system.<br>
	* @return core_bookingengine_data_BookingTimeLineFlatten 
	*/

	public function getTimelines($gs_multilevel_name, $id, $startDate, $endDate) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["id"] = json_encode($this->transport->object_unset_nulls($id));
	     $gs_data_input2939299822982['args']["startDate"] = json_encode($this->transport->object_unset_nulls($startDate));
	     $gs_data_input2939299822982['args']["endDate"] = json_encode($this->transport->object_unset_nulls($endDate));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "getTimelines";
	     $gs_data_input2939299822982["interfaceName"] = "core.bookingengine.IBookingEngine";
	     return $this->transport->cast(new core_bookingengine_data_BookingTimeLineFlatten(), $this->transport->sendMessage($gs_data_input2939299822982));
	}

	/**
	* Booking engine management system.<br>
	* @return core_bookingengine_data_BookingTimeLine[] 
	*/

	public function getTimelinesDirect($gs_multilevel_name, $start, $end, $itemTypeId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["start"] = json_encode($this->transport->object_unset_nulls($start));
	     $gs_data_input2939299822982['args']["end"] = json_encode($this->transport->object_unset_nulls($end));
	     $gs_data_input2939299822982['args']["itemTypeId"] = json_encode($this->transport->object_unset_nulls($itemTypeId));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "getTimelinesDirect";
	     $gs_data_input2939299822982["interfaceName"] = "core.bookingengine.IBookingEngine";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Booking engine management system.<br>
	* @return core_bookingengine_data_BookingItem 
	*/

	public function saveBookingItem($gs_multilevel_name, $item) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["item"] = json_encode($this->transport->object_unset_nulls($item));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "saveBookingItem";
	     $gs_data_input2939299822982["interfaceName"] = "core.bookingengine.IBookingEngine";
	     return $this->transport->cast(new core_bookingengine_data_BookingItem(), $this->transport->sendMessage($gs_data_input2939299822982));
	}

	/**
	* Booking engine management system.<br>
	* @return void 
	*/

	public function saveDefaultRegistrationRules($gs_multilevel_name, $rules) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["rules"] = json_encode($this->transport->object_unset_nulls($rules));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "saveDefaultRegistrationRules";
	     $gs_data_input2939299822982["interfaceName"] = "core.bookingengine.IBookingEngine";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Booking engine management system.<br>
	* @return void 
	*/

	public function saveOpeningHours($gs_multilevel_name, $time, $itemId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["time"] = json_encode($this->transport->object_unset_nulls($time));
	     $gs_data_input2939299822982['args']["itemId"] = json_encode($this->transport->object_unset_nulls($itemId));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "saveOpeningHours";
	     $gs_data_input2939299822982["interfaceName"] = "core.bookingengine.IBookingEngine";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Booking engine management system.<br>
	* @return void 
	*/

	public function setConfirmationRequired($gs_multilevel_name, $confirmationRequired) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["confirmationRequired"] = json_encode($this->transport->object_unset_nulls($confirmationRequired));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "setConfirmationRequired";
	     $gs_data_input2939299822982["interfaceName"] = "core.bookingengine.IBookingEngine";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Booking engine management system.<br>
	* @return core_bookingengine_data_BookingItemType 
	*/

	public function updateBookingItemType($gs_multilevel_name, $type) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["type"] = json_encode($this->transport->object_unset_nulls($type));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "updateBookingItemType";
	     $gs_data_input2939299822982["interfaceName"] = "core.bookingengine.IBookingEngine";
	     return $this->transport->cast(new core_bookingengine_data_BookingItemType(), $this->transport->sendMessage($gs_data_input2939299822982));
	}

}
class APIBrainTreeManager {

	var $transport;
	
	function APIBrainTreeManager($transport) {
		$this->transport = $transport;
	}

	/**
	*
	* @author ktonder
	* @return String 
	*/

	public function getClientToken() {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982["method"] = "getClientToken";
	     $gs_data_input2939299822982["interfaceName"] = "core.braintree.IBrainTreeManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	*
	* @author ktonder
	* @return boolean 
	*/

	public function pay($paymentMethodNonce, $orderId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["paymentMethodNonce"] = json_encode($this->transport->object_unset_nulls($paymentMethodNonce));
	     $gs_data_input2939299822982['args']["orderId"] = json_encode($this->transport->object_unset_nulls($orderId));
	     $gs_data_input2939299822982["method"] = "pay";
	     $gs_data_input2939299822982["interfaceName"] = "core.braintree.IBrainTreeManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

}
class APIC3Manager {

	var $transport;
	
	function APIC3Manager($transport) {
		$this->transport = $transport;
	}

	/**
	*
	* @author ktonder
	* @return void 
	*/

	public function addForskningsUserPeriode($periode) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["periode"] = json_encode($this->transport->object_unset_nulls($periode));
	     $gs_data_input2939299822982["method"] = "addForskningsUserPeriode";
	     $gs_data_input2939299822982["interfaceName"] = "core.c3.IC3Manager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	*
	* @author ktonder
	* @return void 
	*/

	public function addHour($hour) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["hour"] = json_encode($this->transport->object_unset_nulls($hour));
	     $gs_data_input2939299822982["method"] = "addHour";
	     $gs_data_input2939299822982["interfaceName"] = "core.c3.IC3Manager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	*
	* @author ktonder
	* @return void 
	*/

	public function addTimeRate($name, $rate) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["name"] = json_encode($this->transport->object_unset_nulls($name));
	     $gs_data_input2939299822982['args']["rate"] = json_encode($this->transport->object_unset_nulls($rate));
	     $gs_data_input2939299822982["method"] = "addTimeRate";
	     $gs_data_input2939299822982["interfaceName"] = "core.c3.IC3Manager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	*
	* @author ktonder
	* @return void 
	*/

	public function addUserProjectPeriode($projectPeriode) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["projectPeriode"] = json_encode($this->transport->object_unset_nulls($projectPeriode));
	     $gs_data_input2939299822982["method"] = "addUserProjectPeriode";
	     $gs_data_input2939299822982["interfaceName"] = "core.c3.IC3Manager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	*
	* @author ktonder
	* @return boolean 
	*/

	public function allowedFixedHourCosts($userId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["userId"] = json_encode($this->transport->object_unset_nulls($userId));
	     $gs_data_input2939299822982["method"] = "allowedFixedHourCosts";
	     $gs_data_input2939299822982["interfaceName"] = "core.c3.IC3Manager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	*
	* @author ktonder
	* @return boolean 
	*/

	public function allowedNfrHour($userId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["userId"] = json_encode($this->transport->object_unset_nulls($userId));
	     $gs_data_input2939299822982["method"] = "allowedNfrHour";
	     $gs_data_input2939299822982["interfaceName"] = "core.c3.IC3Manager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	*
	* @author ktonder
	* @return boolean 
	*/

	public function allowedNfrHourCurrentUser() {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982["method"] = "allowedNfrHourCurrentUser";
	     $gs_data_input2939299822982["interfaceName"] = "core.c3.IC3Manager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	*
	* @author ktonder
	* @return boolean 
	*/

	public function allowedNfrOtherCost($userId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["userId"] = json_encode($this->transport->object_unset_nulls($userId));
	     $gs_data_input2939299822982["method"] = "allowedNfrOtherCost";
	     $gs_data_input2939299822982["interfaceName"] = "core.c3.IC3Manager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	*
	* @author ktonder
	* @return boolean 
	*/

	public function allowedNfrOtherCostCurrentUser() {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982["method"] = "allowedNfrOtherCostCurrentUser";
	     $gs_data_input2939299822982["interfaceName"] = "core.c3.IC3Manager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	*
	* @author ktonder
	* @return void 
	*/

	public function assignProjectToCompany($companyId, $projectId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["companyId"] = json_encode($this->transport->object_unset_nulls($companyId));
	     $gs_data_input2939299822982['args']["projectId"] = json_encode($this->transport->object_unset_nulls($projectId));
	     $gs_data_input2939299822982["method"] = "assignProjectToCompany";
	     $gs_data_input2939299822982["interfaceName"] = "core.c3.IC3Manager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	*
	* @author ktonder
	* @return int 
	*/

	public function calculateSum($periodeId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["periodeId"] = json_encode($this->transport->object_unset_nulls($periodeId));
	     $gs_data_input2939299822982["method"] = "calculateSum";
	     $gs_data_input2939299822982["interfaceName"] = "core.c3.IC3Manager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	*
	* @author ktonder
	* @return String 
	*/

	public function canAdd($hour) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["hour"] = json_encode($this->transport->object_unset_nulls($hour));
	     $gs_data_input2939299822982["method"] = "canAdd";
	     $gs_data_input2939299822982["interfaceName"] = "core.c3.IC3Manager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	*
	* @author ktonder
	* @return void 
	*/

	public function deleteC3Periode($periodeId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["periodeId"] = json_encode($this->transport->object_unset_nulls($periodeId));
	     $gs_data_input2939299822982["method"] = "deleteC3Periode";
	     $gs_data_input2939299822982["interfaceName"] = "core.c3.IC3Manager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	*
	* @author ktonder
	* @return void 
	*/

	public function deleteForskningsUserPeriode($periodeId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["periodeId"] = json_encode($this->transport->object_unset_nulls($periodeId));
	     $gs_data_input2939299822982["method"] = "deleteForskningsUserPeriode";
	     $gs_data_input2939299822982["interfaceName"] = "core.c3.IC3Manager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	*
	* @author ktonder
	* @return void 
	*/

	public function deleteProject($projectId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["projectId"] = json_encode($this->transport->object_unset_nulls($projectId));
	     $gs_data_input2939299822982["method"] = "deleteProject";
	     $gs_data_input2939299822982["interfaceName"] = "core.c3.IC3Manager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	*
	* @author ktonder
	* @return void 
	*/

	public function deleteProjectCost($projectCostId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["projectCostId"] = json_encode($this->transport->object_unset_nulls($projectCostId));
	     $gs_data_input2939299822982["method"] = "deleteProjectCost";
	     $gs_data_input2939299822982["interfaceName"] = "core.c3.IC3Manager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	*
	* @author ktonder
	* @return void 
	*/

	public function deleteTimeRate($id) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["id"] = json_encode($this->transport->object_unset_nulls($id));
	     $gs_data_input2939299822982["method"] = "deleteTimeRate";
	     $gs_data_input2939299822982["interfaceName"] = "core.c3.IC3Manager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	*
	* @author ktonder
	* @return void 
	*/

	public function deleteWorkPackage($workPackageId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["workPackageId"] = json_encode($this->transport->object_unset_nulls($workPackageId));
	     $gs_data_input2939299822982["method"] = "deleteWorkPackage";
	     $gs_data_input2939299822982["interfaceName"] = "core.c3.IC3Manager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	*
	* @author ktonder
	* @return core_c3_UserProjectAccess[] 
	*/

	public function getAcceListForUser($userId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["userId"] = json_encode($this->transport->object_unset_nulls($userId));
	     $gs_data_input2939299822982["method"] = "getAcceListForUser";
	     $gs_data_input2939299822982["interfaceName"] = "core.c3.IC3Manager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	*
	* @author ktonder
	* @return core_c3_UserProjectAccess[] 
	*/

	public function getAccessList() {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982["method"] = "getAccessList";
	     $gs_data_input2939299822982["interfaceName"] = "core.c3.IC3Manager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	*
	* @author ktonder
	* @return core_c3_UserProjectAccess 
	*/

	public function getAccessListByProjectId($projectId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["projectId"] = json_encode($this->transport->object_unset_nulls($projectId));
	     $gs_data_input2939299822982["method"] = "getAccessListByProjectId";
	     $gs_data_input2939299822982["interfaceName"] = "core.c3.IC3Manager";
	     return $this->transport->cast(new core_c3_UserProjectAccess(), $this->transport->sendMessage($gs_data_input2939299822982));
	}

	/**
	*
	* @author ktonder
	* @return core_c3_C3ProjectPeriode 
	*/

	public function getActivePeriode() {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982["method"] = "getActivePeriode";
	     $gs_data_input2939299822982["interfaceName"] = "core.c3.IC3Manager";
	     return $this->transport->cast(new core_c3_C3ProjectPeriode(), $this->transport->sendMessage($gs_data_input2939299822982));
	}

	/**
	*
	* @author ktonder
	* @return core_c3_C3Project[] 
	*/

	public function getAllProjectsConnectedToCompany($compnayId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["compnayId"] = json_encode($this->transport->object_unset_nulls($compnayId));
	     $gs_data_input2939299822982["method"] = "getAllProjectsConnectedToCompany";
	     $gs_data_input2939299822982["interfaceName"] = "core.c3.IC3Manager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	*
	* @author ktonder
	* @return core_c3_C3Project[] 
	*/

	public function getAllProjectsConnectedToWorkPackage($wpId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["wpId"] = json_encode($this->transport->object_unset_nulls($wpId));
	     $gs_data_input2939299822982["method"] = "getAllProjectsConnectedToWorkPackage";
	     $gs_data_input2939299822982["interfaceName"] = "core.c3.IC3Manager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	*
	* @author ktonder
	* @return String 
	*/

	public function getBase64ESAExcelReport($start, $end) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["start"] = json_encode($this->transport->object_unset_nulls($start));
	     $gs_data_input2939299822982['args']["end"] = json_encode($this->transport->object_unset_nulls($end));
	     $gs_data_input2939299822982["method"] = "getBase64ESAExcelReport";
	     $gs_data_input2939299822982["interfaceName"] = "core.c3.IC3Manager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	*
	* @author ktonder
	* @return String 
	*/

	public function getBase64SFIExcelReport($companyId, $start, $end) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["companyId"] = json_encode($this->transport->object_unset_nulls($companyId));
	     $gs_data_input2939299822982['args']["start"] = json_encode($this->transport->object_unset_nulls($start));
	     $gs_data_input2939299822982['args']["end"] = json_encode($this->transport->object_unset_nulls($end));
	     $gs_data_input2939299822982["method"] = "getBase64SFIExcelReport";
	     $gs_data_input2939299822982["interfaceName"] = "core.c3.IC3Manager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	*
	* @author ktonder
	* @return String 
	*/

	public function getBase64SFIExcelReportTotal($companyId, $start, $end) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["companyId"] = json_encode($this->transport->object_unset_nulls($companyId));
	     $gs_data_input2939299822982['args']["start"] = json_encode($this->transport->object_unset_nulls($start));
	     $gs_data_input2939299822982['args']["end"] = json_encode($this->transport->object_unset_nulls($end));
	     $gs_data_input2939299822982["method"] = "getBase64SFIExcelReportTotal";
	     $gs_data_input2939299822982["interfaceName"] = "core.c3.IC3Manager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	*
	* @author ktonder
	* @return core_c3_C3ForskningsUserPeriode 
	*/

	public function getCurrentForskningsPeriode() {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982["method"] = "getCurrentForskningsPeriode";
	     $gs_data_input2939299822982["interfaceName"] = "core.c3.IC3Manager";
	     return $this->transport->cast(new core_c3_C3ForskningsUserPeriode(), $this->transport->sendMessage($gs_data_input2939299822982));
	}

	/**
	*
	* @author ktonder
	* @return core_c3_C3ForskningsUserPeriode[] 
	*/

	public function getForskningsPeriodesForUser($userId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["userId"] = json_encode($this->transport->object_unset_nulls($userId));
	     $gs_data_input2939299822982["method"] = "getForskningsPeriodesForUser";
	     $gs_data_input2939299822982["interfaceName"] = "core.c3.IC3Manager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	*
	* @author ktonder
	* @return core_c3_C3GroupInformation 
	*/

	public function getGroupInformation($groupId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["groupId"] = json_encode($this->transport->object_unset_nulls($groupId));
	     $gs_data_input2939299822982["method"] = "getGroupInformation";
	     $gs_data_input2939299822982["interfaceName"] = "core.c3.IC3Manager";
	     return $this->transport->cast(new core_c3_C3GroupInformation(), $this->transport->sendMessage($gs_data_input2939299822982));
	}

	/**
	*
	* @author ktonder
	* @return core_c3_C3Hour 
	*/

	public function getHourById($hourId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["hourId"] = json_encode($this->transport->object_unset_nulls($hourId));
	     $gs_data_input2939299822982["method"] = "getHourById";
	     $gs_data_input2939299822982["interfaceName"] = "core.c3.IC3Manager";
	     return $this->transport->cast(new core_c3_C3Hour(), $this->transport->sendMessage($gs_data_input2939299822982));
	}

	/**
	*
	* @author ktonder
	* @return core_c3_C3OtherCosts 
	*/

	public function getOtherCost($otherCostId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["otherCostId"] = json_encode($this->transport->object_unset_nulls($otherCostId));
	     $gs_data_input2939299822982["method"] = "getOtherCost";
	     $gs_data_input2939299822982["interfaceName"] = "core.c3.IC3Manager";
	     return $this->transport->cast(new core_c3_C3OtherCosts(), $this->transport->sendMessage($gs_data_input2939299822982));
	}

	/**
	*
	* @author ktonder
	* @return core_c3_C3ProjectPeriode[] 
	*/

	public function getPeriodes() {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982["method"] = "getPeriodes";
	     $gs_data_input2939299822982["interfaceName"] = "core.c3.IC3Manager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	*
	* @author ktonder
	* @return core_c3_C3ProjectPeriode[] 
	*/

	public function getPeriodesForProject($projectId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["projectId"] = json_encode($this->transport->object_unset_nulls($projectId));
	     $gs_data_input2939299822982["method"] = "getPeriodesForProject";
	     $gs_data_input2939299822982["interfaceName"] = "core.c3.IC3Manager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	*
	* @author ktonder
	* @return core_c3_C3Project 
	*/

	public function getProject($id) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["id"] = json_encode($this->transport->object_unset_nulls($id));
	     $gs_data_input2939299822982["method"] = "getProject";
	     $gs_data_input2939299822982["interfaceName"] = "core.c3.IC3Manager";
	     return $this->transport->cast(new core_c3_C3Project(), $this->transport->sendMessage($gs_data_input2939299822982));
	}

	/**
	*
	* @author ktonder
	* @return core_c3_ProjectCost[] 
	*/

	public function getProjectCostsForAllUsersInCompany($projectId, $from, $to) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["projectId"] = json_encode($this->transport->object_unset_nulls($projectId));
	     $gs_data_input2939299822982['args']["from"] = json_encode($this->transport->object_unset_nulls($from));
	     $gs_data_input2939299822982['args']["to"] = json_encode($this->transport->object_unset_nulls($to));
	     $gs_data_input2939299822982["method"] = "getProjectCostsForAllUsersInCompany";
	     $gs_data_input2939299822982["interfaceName"] = "core.c3.IC3Manager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	*
	* @author ktonder
	* @return core_c3_ProjectCost[] 
	*/

	public function getProjectCostsForCurrentUser($projectId, $from, $to) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["projectId"] = json_encode($this->transport->object_unset_nulls($projectId));
	     $gs_data_input2939299822982['args']["from"] = json_encode($this->transport->object_unset_nulls($from));
	     $gs_data_input2939299822982['args']["to"] = json_encode($this->transport->object_unset_nulls($to));
	     $gs_data_input2939299822982["method"] = "getProjectCostsForCurrentUser";
	     $gs_data_input2939299822982["interfaceName"] = "core.c3.IC3Manager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	*
	* @author ktonder
	* @return core_c3_C3Project[] 
	*/

	public function getProjects() {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982["method"] = "getProjects";
	     $gs_data_input2939299822982["interfaceName"] = "core.c3.IC3Manager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	*
	* @author ktonder
	* @return core_c3_C3Report 
	*/

	public function getReportForUserProject($userId, $projectId, $start, $end, $forWorkPackageId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["userId"] = json_encode($this->transport->object_unset_nulls($userId));
	     $gs_data_input2939299822982['args']["projectId"] = json_encode($this->transport->object_unset_nulls($projectId));
	     $gs_data_input2939299822982['args']["start"] = json_encode($this->transport->object_unset_nulls($start));
	     $gs_data_input2939299822982['args']["end"] = json_encode($this->transport->object_unset_nulls($end));
	     $gs_data_input2939299822982['args']["forWorkPackageId"] = json_encode($this->transport->object_unset_nulls($forWorkPackageId));
	     $gs_data_input2939299822982["method"] = "getReportForUserProject";
	     $gs_data_input2939299822982["interfaceName"] = "core.c3.IC3Manager";
	     return $this->transport->cast(new core_c3_C3Report(), $this->transport->sendMessage($gs_data_input2939299822982));
	}

	/**
	*
	* @author ktonder
	* @return core_c3_C3RoundSum 
	*/

	public function getRoundSum($year) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["year"] = json_encode($this->transport->object_unset_nulls($year));
	     $gs_data_input2939299822982["method"] = "getRoundSum";
	     $gs_data_input2939299822982["interfaceName"] = "core.c3.IC3Manager";
	     return $this->transport->cast(new core_c3_C3RoundSum(), $this->transport->sendMessage($gs_data_input2939299822982));
	}

	/**
	*
	* @author ktonder
	* @return core_c3_C3TimeRate 
	*/

	public function getTimeRate($userId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["userId"] = json_encode($this->transport->object_unset_nulls($userId));
	     $gs_data_input2939299822982["method"] = "getTimeRate";
	     $gs_data_input2939299822982["interfaceName"] = "core.c3.IC3Manager";
	     return $this->transport->cast(new core_c3_C3TimeRate(), $this->transport->sendMessage($gs_data_input2939299822982));
	}

	/**
	*
	* @author ktonder
	* @return core_c3_C3TimeRate[] 
	*/

	public function getTimeRates() {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982["method"] = "getTimeRates";
	     $gs_data_input2939299822982["interfaceName"] = "core.c3.IC3Manager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	*
	* @author ktonder
	* @return core_c3_C3UserProjectPeriode 
	*/

	public function getUserProjectPeriodeById($id) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["id"] = json_encode($this->transport->object_unset_nulls($id));
	     $gs_data_input2939299822982["method"] = "getUserProjectPeriodeById";
	     $gs_data_input2939299822982["interfaceName"] = "core.c3.IC3Manager";
	     return $this->transport->cast(new core_c3_C3UserProjectPeriode(), $this->transport->sendMessage($gs_data_input2939299822982));
	}

	/**
	*
	* @author ktonder
	* @return core_c3_WorkPackage 
	*/

	public function getWorkPackage($id) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["id"] = json_encode($this->transport->object_unset_nulls($id));
	     $gs_data_input2939299822982["method"] = "getWorkPackage";
	     $gs_data_input2939299822982["interfaceName"] = "core.c3.IC3Manager";
	     return $this->transport->cast(new core_c3_WorkPackage(), $this->transport->sendMessage($gs_data_input2939299822982));
	}

	/**
	*
	* @author ktonder
	* @return core_c3_WorkPackage[] 
	*/

	public function getWorkPackages() {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982["method"] = "getWorkPackages";
	     $gs_data_input2939299822982["interfaceName"] = "core.c3.IC3Manager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	*
	* @author ktonder
	* @return void 
	*/

	public function removeCompanyAccess($projectId, $companyId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["projectId"] = json_encode($this->transport->object_unset_nulls($projectId));
	     $gs_data_input2939299822982['args']["companyId"] = json_encode($this->transport->object_unset_nulls($companyId));
	     $gs_data_input2939299822982["method"] = "removeCompanyAccess";
	     $gs_data_input2939299822982["interfaceName"] = "core.c3.IC3Manager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	*
	* @author ktonder
	* @return void 
	*/

	public function removeContract($companyId, $projectId, $workPackageId, $contractId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["companyId"] = json_encode($this->transport->object_unset_nulls($companyId));
	     $gs_data_input2939299822982['args']["projectId"] = json_encode($this->transport->object_unset_nulls($projectId));
	     $gs_data_input2939299822982['args']["workPackageId"] = json_encode($this->transport->object_unset_nulls($workPackageId));
	     $gs_data_input2939299822982['args']["contractId"] = json_encode($this->transport->object_unset_nulls($contractId));
	     $gs_data_input2939299822982["method"] = "removeContract";
	     $gs_data_input2939299822982["interfaceName"] = "core.c3.IC3Manager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	*
	* @author ktonder
	* @return void 
	*/

	public function saveGroupInfo($groupId, $type, $value) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["groupId"] = json_encode($this->transport->object_unset_nulls($groupId));
	     $gs_data_input2939299822982['args']["type"] = json_encode($this->transport->object_unset_nulls($type));
	     $gs_data_input2939299822982['args']["value"] = json_encode($this->transport->object_unset_nulls($value));
	     $gs_data_input2939299822982["method"] = "saveGroupInfo";
	     $gs_data_input2939299822982["interfaceName"] = "core.c3.IC3Manager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	*
	* @author ktonder
	* @return core_c3_C3OtherCosts 
	*/

	public function saveOtherCosts($otherCost) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["otherCost"] = json_encode($this->transport->object_unset_nulls($otherCost));
	     $gs_data_input2939299822982["method"] = "saveOtherCosts";
	     $gs_data_input2939299822982["interfaceName"] = "core.c3.IC3Manager";
	     return $this->transport->cast(new core_c3_C3OtherCosts(), $this->transport->sendMessage($gs_data_input2939299822982));
	}

	/**
	*
	* @author ktonder
	* @return void 
	*/

	public function savePeriode($periode) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["periode"] = json_encode($this->transport->object_unset_nulls($periode));
	     $gs_data_input2939299822982["method"] = "savePeriode";
	     $gs_data_input2939299822982["interfaceName"] = "core.c3.IC3Manager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	*
	* @author ktonder
	* @return core_c3_C3Project 
	*/

	public function saveProject($project) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["project"] = json_encode($this->transport->object_unset_nulls($project));
	     $gs_data_input2939299822982["method"] = "saveProject";
	     $gs_data_input2939299822982["interfaceName"] = "core.c3.IC3Manager";
	     return $this->transport->cast(new core_c3_C3Project(), $this->transport->sendMessage($gs_data_input2939299822982));
	}

	/**
	*
	* @author ktonder
	* @return void 
	*/

	public function saveRate($rate) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["rate"] = json_encode($this->transport->object_unset_nulls($rate));
	     $gs_data_input2939299822982["method"] = "saveRate";
	     $gs_data_input2939299822982["interfaceName"] = "core.c3.IC3Manager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	*
	* @author ktonder
	* @return core_c3_WorkPackage 
	*/

	public function saveWorkPackage($workPackage) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["workPackage"] = json_encode($this->transport->object_unset_nulls($workPackage));
	     $gs_data_input2939299822982["method"] = "saveWorkPackage";
	     $gs_data_input2939299822982["interfaceName"] = "core.c3.IC3Manager";
	     return $this->transport->cast(new core_c3_WorkPackage(), $this->transport->sendMessage($gs_data_input2939299822982));
	}

	/**
	*
	* @author ktonder
	* @return core_c3_C3Project[] 
	*/

	public function search($searchText) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["searchText"] = json_encode($this->transport->object_unset_nulls($searchText));
	     $gs_data_input2939299822982["method"] = "search";
	     $gs_data_input2939299822982["interfaceName"] = "core.c3.IC3Manager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	*
	* @author ktonder
	* @return void 
	*/

	public function setActivePeriode($periodeId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["periodeId"] = json_encode($this->transport->object_unset_nulls($periodeId));
	     $gs_data_input2939299822982["method"] = "setActivePeriode";
	     $gs_data_input2939299822982["interfaceName"] = "core.c3.IC3Manager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	*
	* @author ktonder
	* @return void 
	*/

	public function setC3RoundSum($year, $sum) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["year"] = json_encode($this->transport->object_unset_nulls($year));
	     $gs_data_input2939299822982['args']["sum"] = json_encode($this->transport->object_unset_nulls($sum));
	     $gs_data_input2939299822982["method"] = "setC3RoundSum";
	     $gs_data_input2939299822982["interfaceName"] = "core.c3.IC3Manager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	*
	* @author ktonder
	* @return void 
	*/

	public function setNfrAccess($access) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["access"] = json_encode($this->transport->object_unset_nulls($access));
	     $gs_data_input2939299822982["method"] = "setNfrAccess";
	     $gs_data_input2939299822982["interfaceName"] = "core.c3.IC3Manager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	*
	* @author ktonder
	* @return void 
	*/

	public function setProjectAccess($companyId, $projectId, $workPackageId, $value) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["companyId"] = json_encode($this->transport->object_unset_nulls($companyId));
	     $gs_data_input2939299822982['args']["projectId"] = json_encode($this->transport->object_unset_nulls($projectId));
	     $gs_data_input2939299822982['args']["workPackageId"] = json_encode($this->transport->object_unset_nulls($workPackageId));
	     $gs_data_input2939299822982['args']["value"] = json_encode($this->transport->object_unset_nulls($value));
	     $gs_data_input2939299822982["method"] = "setProjectAccess";
	     $gs_data_input2939299822982["interfaceName"] = "core.c3.IC3Manager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	*
	* @author ktonder
	* @return void 
	*/

	public function setProjectCust($companyId, $projectId, $workPackageId, $start, $end, $price, $contractId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["companyId"] = json_encode($this->transport->object_unset_nulls($companyId));
	     $gs_data_input2939299822982['args']["projectId"] = json_encode($this->transport->object_unset_nulls($projectId));
	     $gs_data_input2939299822982['args']["workPackageId"] = json_encode($this->transport->object_unset_nulls($workPackageId));
	     $gs_data_input2939299822982['args']["start"] = json_encode($this->transport->object_unset_nulls($start));
	     $gs_data_input2939299822982['args']["end"] = json_encode($this->transport->object_unset_nulls($end));
	     $gs_data_input2939299822982['args']["price"] = json_encode($this->transport->object_unset_nulls($price));
	     $gs_data_input2939299822982['args']["contractId"] = json_encode($this->transport->object_unset_nulls($contractId));
	     $gs_data_input2939299822982["method"] = "setProjectCust";
	     $gs_data_input2939299822982["interfaceName"] = "core.c3.IC3Manager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	*
	* @author ktonder
	* @return void 
	*/

	public function setRateToUser($userId, $rateId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["userId"] = json_encode($this->transport->object_unset_nulls($userId));
	     $gs_data_input2939299822982['args']["rateId"] = json_encode($this->transport->object_unset_nulls($rateId));
	     $gs_data_input2939299822982["method"] = "setRateToUser";
	     $gs_data_input2939299822982["interfaceName"] = "core.c3.IC3Manager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

}
class APICalendarManager {

	var $transport;
	
	function APICalendarManager($transport) {
		$this->transport = $transport;
	}

	/**
	* return a list of entires that a specified user
	* has been attending to
	* @return void 
	*/

	public function addEvent($event) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["event"] = json_encode($this->transport->object_unset_nulls($event));
	     $gs_data_input2939299822982["method"] = "addEvent";
	     $gs_data_input2939299822982["interfaceName"] = "core.calendar.ICalendarManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* return a list of entires that a specified user
	* has been attending to
	* @return void 
	*/

	public function addUserSilentlyToEvent($eventId, $userId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["eventId"] = json_encode($this->transport->object_unset_nulls($eventId));
	     $gs_data_input2939299822982['args']["userId"] = json_encode($this->transport->object_unset_nulls($userId));
	     $gs_data_input2939299822982["method"] = "addUserSilentlyToEvent";
	     $gs_data_input2939299822982["interfaceName"] = "core.calendar.ICalendarManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Add a given user to a given event.
	* @param userId The user id to add to a the given event (see usermanager for more inforamtion about this id)
	* @param eventId The event id to attach to the user.
	* @param password A password you want to attach to the email that is being sent to the user.
	* @param username A username you want to attach to the email that is being sent to the user.
	* @throws ErrorException
	* @return void 
	*/

	public function addUserToEvent($userId, $eventId, $password, $username, $source) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["userId"] = json_encode($this->transport->object_unset_nulls($userId));
	     $gs_data_input2939299822982['args']["eventId"] = json_encode($this->transport->object_unset_nulls($eventId));
	     $gs_data_input2939299822982['args']["password"] = json_encode($this->transport->object_unset_nulls($password));
	     $gs_data_input2939299822982['args']["username"] = json_encode($this->transport->object_unset_nulls($username));
	     $gs_data_input2939299822982['args']["source"] = json_encode($this->transport->object_unset_nulls($source));
	     $gs_data_input2939299822982["method"] = "addUserToEvent";
	     $gs_data_input2939299822982["interfaceName"] = "core.calendar.ICalendarManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Adds a user to a page event
	*
	* @param userId
	* @throws ErrorException
	* @return void 
	*/

	public function addUserToPageEvent($userId, $bookingAppId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["userId"] = json_encode($this->transport->object_unset_nulls($userId));
	     $gs_data_input2939299822982['args']["bookingAppId"] = json_encode($this->transport->object_unset_nulls($bookingAppId));
	     $gs_data_input2939299822982["method"] = "addUserToPageEvent";
	     $gs_data_input2939299822982["interfaceName"] = "core.calendar.ICalendarManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Apply a set of filters,
	* if this filters are applied, it will not return entries
	* that does not match the filter criteria.
	* @return void 
	*/

	public function applyFilter($filters) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["filters"] = json_encode($this->transport->object_unset_nulls($filters));
	     $gs_data_input2939299822982["method"] = "applyFilter";
	     $gs_data_input2939299822982["interfaceName"] = "core.calendar.ICalendarManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Confirms a entry.
	*
	* @param entryId
	* @throws ErrorException
	* @return void 
	*/

	public function confirmEntry($entryId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["entryId"] = json_encode($this->transport->object_unset_nulls($entryId));
	     $gs_data_input2939299822982["method"] = "confirmEntry";
	     $gs_data_input2939299822982["interfaceName"] = "core.calendar.ICalendarManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Create a new entry to the calendar on a given date.
	* @param year The year to attach the entry to
	* @param month The month to attach the entry to
	* @param day The day to attach the entry to
	* @param entry The entry to attach
	* @throws ErrorException
	* @return core_calendarmanager_data_Entry 
	*/

	public function createEntry($year, $month, $day) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["year"] = json_encode($this->transport->object_unset_nulls($year));
	     $gs_data_input2939299822982['args']["month"] = json_encode($this->transport->object_unset_nulls($month));
	     $gs_data_input2939299822982['args']["day"] = json_encode($this->transport->object_unset_nulls($day));
	     $gs_data_input2939299822982["method"] = "createEntry";
	     $gs_data_input2939299822982["interfaceName"] = "core.calendar.ICalendarManager";
	     return $this->transport->cast(new core_calendarmanager_data_Entry(), $this->transport->sendMessage($gs_data_input2939299822982));
	}

	/**
	* Delete an existing entry by a given id from the calendar.
	* @param id The id of the entry to delete.
	* @throws ErrorException
	* @return void 
	*/

	public function deleteEntry($id) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["id"] = json_encode($this->transport->object_unset_nulls($id));
	     $gs_data_input2939299822982["method"] = "deleteEntry";
	     $gs_data_input2939299822982["interfaceName"] = "core.calendar.ICalendarManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Delete a location by id
	*
	* @param location
	* @throws ErrorException
	* @return void 
	*/

	public function deleteLocation($locationId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["locationId"] = json_encode($this->transport->object_unset_nulls($locationId));
	     $gs_data_input2939299822982["method"] = "deleteLocation";
	     $gs_data_input2939299822982["interfaceName"] = "core.calendar.ICalendarManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Returns a set of filters that
	* has been applied to the current session
	* calendar.
	*
	* @return String[] 
	*/

	public function getActiveFilters() {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982["method"] = "getActiveFilters";
	     $gs_data_input2939299822982["interfaceName"] = "core.calendar.ICalendarManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Returns a list of
	* @return core_calendarmanager_data_Entry[] 
	*/

	public function getAllEventsConnectedToPage($pageId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["pageId"] = json_encode($this->transport->object_unset_nulls($pageId));
	     $gs_data_input2939299822982["method"] = "getAllEventsConnectedToPage";
	     $gs_data_input2939299822982["interfaceName"] = "core.calendar.ICalendarManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Get all locations.
	*
	* @return core_calendarmanager_data_Location[] 
	*/

	public function getAllLocations() {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982["method"] = "getAllLocations";
	     $gs_data_input2939299822982["interfaceName"] = "core.calendar.ICalendarManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Get all entries to a given day
	* @param year The year to fetch the entries on.
	* @param month The month to fetch the entries on.
	* @param day The day to fetch the entries on.
	* @throws ErrorException
	* @return core_calendarmanager_data_Entry[] 
	*/

	public function getEntries($year, $month, $day, $filters) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["year"] = json_encode($this->transport->object_unset_nulls($year));
	     $gs_data_input2939299822982['args']["month"] = json_encode($this->transport->object_unset_nulls($month));
	     $gs_data_input2939299822982['args']["day"] = json_encode($this->transport->object_unset_nulls($day));
	     $gs_data_input2939299822982['args']["filters"] = json_encode($this->transport->object_unset_nulls($filters));
	     $gs_data_input2939299822982["method"] = "getEntries";
	     $gs_data_input2939299822982["interfaceName"] = "core.calendar.ICalendarManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* return a list of entires that a specified user
	* has been attending to
	* @return core_calendarmanager_data_Entry[] 
	*/

	public function getEntriesByUserId($userId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["userId"] = json_encode($this->transport->object_unset_nulls($userId));
	     $gs_data_input2939299822982["method"] = "getEntriesByUserId";
	     $gs_data_input2939299822982["interfaceName"] = "core.calendar.ICalendarManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Gives you the specified entry by id
	*
	* @param entryId
	* @return core_calendarmanager_data_Entry 
	*/

	public function getEntry($entryId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["entryId"] = json_encode($this->transport->object_unset_nulls($entryId));
	     $gs_data_input2939299822982["method"] = "getEntry";
	     $gs_data_input2939299822982["interfaceName"] = "core.calendar.ICalendarManager";
	     return $this->transport->cast(new core_calendarmanager_data_Entry(), $this->transport->sendMessage($gs_data_input2939299822982));
	}

	/**
	* return a list of entires that a specified user
	* has been attending to
	* @return core_calendarmanager_data_Event 
	*/

	public function getEvent($eventId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["eventId"] = json_encode($this->transport->object_unset_nulls($eventId));
	     $gs_data_input2939299822982["method"] = "getEvent";
	     $gs_data_input2939299822982["interfaceName"] = "core.calendar.ICalendarManager";
	     return $this->transport->cast(new core_calendarmanager_data_Event(), $this->transport->sendMessage($gs_data_input2939299822982));
	}

	/**
	* return a list of entires that a specified user
	* has been attending to
	* @return core_calendarmanager_data_EventPartitipated 
	*/

	public function getEventPartitipatedData($pageId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["pageId"] = json_encode($this->transport->object_unset_nulls($pageId));
	     $gs_data_input2939299822982["method"] = "getEventPartitipatedData";
	     $gs_data_input2939299822982["interfaceName"] = "core.calendar.ICalendarManager";
	     return $this->transport->cast(new core_calendarmanager_data_EventPartitipated(), $this->transport->sendMessage($gs_data_input2939299822982));
	}

	/**
	* return a list of entires that a specified user
	* has been attending to
	* @return core_calendarmanager_data_Event[] 
	*/

	public function getEvents() {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982["method"] = "getEvents";
	     $gs_data_input2939299822982["interfaceName"] = "core.calendar.ICalendarManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* This returns a list of all entries
	* that is connected to a page.
	*
	* @throws ErrorException
	* @return core_calendarmanager_data_FilterResult[] 
	*/

	public function getEventsGroupedByPageId() {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982["method"] = "getEventsGroupedByPageId";
	     $gs_data_input2939299822982["interfaceName"] = "core.calendar.ICalendarManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Returns a set of filters that
	* can be applied to the Calendar.
	* @return String[] 
	*/

	public function getFilters() {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982["method"] = "getFilters";
	     $gs_data_input2939299822982["interfaceName"] = "core.calendar.ICalendarManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* When an event is sent it automatically creates and log an history entry.
	* Use this function to get all the history for a given event.
	*
	* @param eventId
	* @return core_calendarmanager_data_ReminderHistory[] 
	*/

	public function getHistory($eventId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["eventId"] = json_encode($this->transport->object_unset_nulls($eventId));
	     $gs_data_input2939299822982["method"] = "getHistory";
	     $gs_data_input2939299822982["interfaceName"] = "core.calendar.ICalendarManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Get all data attached to a given month.
	* @param year The year to fetch
	* @param month The month to fetch
	* @param includeExtraEvents
	* @throws ErrorException
	* @return core_calendarmanager_data_Month 
	*/

	public function getMonth($year, $month, $includeExtraEvents) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["year"] = json_encode($this->transport->object_unset_nulls($year));
	     $gs_data_input2939299822982['args']["month"] = json_encode($this->transport->object_unset_nulls($month));
	     $gs_data_input2939299822982['args']["includeExtraEvents"] = json_encode($this->transport->object_unset_nulls($includeExtraEvents));
	     $gs_data_input2939299822982["method"] = "getMonth";
	     $gs_data_input2939299822982["interfaceName"] = "core.calendar.ICalendarManager";
	     return $this->transport->cast(new core_calendarmanager_data_Month(), $this->transport->sendMessage($gs_data_input2939299822982));
	}

	/**
	* Returns all months with only valid entries
	* and all entries are sorted by date.
	*
	* @throws ErrorException
	* @return core_calendarmanager_data_Month[] 
	*/

	public function getMonths() {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982["method"] = "getMonths";
	     $gs_data_input2939299822982["interfaceName"] = "core.calendar.ICalendarManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Get all entries
	* @return core_calendarmanager_data_Month[] 
	*/

	public function getMonthsAfter($year, $month) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["year"] = json_encode($this->transport->object_unset_nulls($year));
	     $gs_data_input2939299822982['args']["month"] = json_encode($this->transport->object_unset_nulls($month));
	     $gs_data_input2939299822982["method"] = "getMonthsAfter";
	     $gs_data_input2939299822982["interfaceName"] = "core.calendar.ICalendarManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* return a list of entires that a specified user
	* has been attending to
	* @return String 
	*/

	public function getSignature($id) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["id"] = json_encode($this->transport->object_unset_nulls($id));
	     $gs_data_input2939299822982["method"] = "getSignature";
	     $gs_data_input2939299822982["interfaceName"] = "core.calendar.ICalendarManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* return a list of entires that a specified user
	* has been attending to
	* @return String 
	*/

	public function placeOrder($order) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["order"] = json_encode($this->transport->object_unset_nulls($order));
	     $gs_data_input2939299822982["method"] = "placeOrder";
	     $gs_data_input2939299822982["interfaceName"] = "core.calendar.ICalendarManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Remove a given user from a given event.
	* @param userId The userid for the event to be removed. (see usermanager for more inforamtion about this id)
	* @param eventId The id of the event for the user to be removed from.
	* @throws ErrorException
	* @return void 
	*/

	public function removeUserFromEvent($userId, $eventId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["userId"] = json_encode($this->transport->object_unset_nulls($userId));
	     $gs_data_input2939299822982['args']["eventId"] = json_encode($this->transport->object_unset_nulls($eventId));
	     $gs_data_input2939299822982["method"] = "removeUserFromEvent";
	     $gs_data_input2939299822982["interfaceName"] = "core.calendar.ICalendarManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Save an already existing entry.
	* @param entry
	* @throws ErrorException
	* @return void 
	*/

	public function saveEntry($entry) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["entry"] = json_encode($this->transport->object_unset_nulls($entry));
	     $gs_data_input2939299822982["method"] = "saveEntry";
	     $gs_data_input2939299822982["interfaceName"] = "core.calendar.ICalendarManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Adds a new location to the system.
	*
	* @param location
	* @throws ErrorException
	* @return core_calendarmanager_data_Location 
	*/

	public function saveLocation($location) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["location"] = json_encode($this->transport->object_unset_nulls($location));
	     $gs_data_input2939299822982["method"] = "saveLocation";
	     $gs_data_input2939299822982["interfaceName"] = "core.calendar.ICalendarManager";
	     return $this->transport->cast(new core_calendarmanager_data_Location(), $this->transport->sendMessage($gs_data_input2939299822982));
	}

	/**
	Remind a given list of users about a given entry.
	* @param entryId The id of the entry to remind about.
	* @param byEmail Remind users by email (true to send)
	* @param bySMS Remind users by sms (true to send)
	* @param users A list of user ids to remind.
	* @param text The text to send when reminding.
	* @param subject A subject to attach to the email.
	* @throws ErrorException
	* @return void 
	*/

	public function sendReminderToUser($byEmail, $bySMS, $users, $text, $subject, $eventId, $attachment, $sendReminderToUser) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["byEmail"] = json_encode($this->transport->object_unset_nulls($byEmail));
	     $gs_data_input2939299822982['args']["bySMS"] = json_encode($this->transport->object_unset_nulls($bySMS));
	     $gs_data_input2939299822982['args']["users"] = json_encode($this->transport->object_unset_nulls($users));
	     $gs_data_input2939299822982['args']["text"] = json_encode($this->transport->object_unset_nulls($text));
	     $gs_data_input2939299822982['args']["subject"] = json_encode($this->transport->object_unset_nulls($subject));
	     $gs_data_input2939299822982['args']["eventId"] = json_encode($this->transport->object_unset_nulls($eventId));
	     $gs_data_input2939299822982['args']["attachment"] = json_encode($this->transport->object_unset_nulls($attachment));
	     $gs_data_input2939299822982['args']["sendReminderToUser"] = json_encode($this->transport->object_unset_nulls($sendReminderToUser));
	     $gs_data_input2939299822982["method"] = "sendReminderToUser";
	     $gs_data_input2939299822982["interfaceName"] = "core.calendar.ICalendarManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* return a list of entires that a specified user
	* has been attending to
	* @return void 
	*/

	public function setEventPartitipatedData($eventData) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["eventData"] = json_encode($this->transport->object_unset_nulls($eventData));
	     $gs_data_input2939299822982["method"] = "setEventPartitipatedData";
	     $gs_data_input2939299822982["interfaceName"] = "core.calendar.ICalendarManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* return a list of entires that a specified user
	* has been attending to
	* @return void 
	*/

	public function setSignature($userid, $signature) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["userid"] = json_encode($this->transport->object_unset_nulls($userid));
	     $gs_data_input2939299822982['args']["signature"] = json_encode($this->transport->object_unset_nulls($signature));
	     $gs_data_input2939299822982["method"] = "setSignature";
	     $gs_data_input2939299822982["interfaceName"] = "core.calendar.ICalendarManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Accept a candidate from waitinglist to
	* course.
	* @return void 
	*/

	public function transferFromWaitingList($entryId, $userId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["entryId"] = json_encode($this->transport->object_unset_nulls($entryId));
	     $gs_data_input2939299822982['args']["userId"] = json_encode($this->transport->object_unset_nulls($userId));
	     $gs_data_input2939299822982["method"] = "transferFromWaitingList";
	     $gs_data_input2939299822982["interfaceName"] = "core.calendar.ICalendarManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Transfer a user from one event to another.
	*
	* Needs to be administrator becuase it updating the candidates password.
	*
	* @param evenId
	* @return void 
	*/

	public function transferUser($fromEventId, $toEventId, $userId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["fromEventId"] = json_encode($this->transport->object_unset_nulls($fromEventId));
	     $gs_data_input2939299822982['args']["toEventId"] = json_encode($this->transport->object_unset_nulls($toEventId));
	     $gs_data_input2939299822982['args']["userId"] = json_encode($this->transport->object_unset_nulls($userId));
	     $gs_data_input2939299822982["method"] = "transferUser";
	     $gs_data_input2939299822982["interfaceName"] = "core.calendar.ICalendarManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

}
class APICarTuningManager {

	var $transport;
	
	function APICarTuningManager($transport) {
		$this->transport = $transport;
	}

	/**
	*
	* @author boggi
	* @return core_cartuning_CarTuningData[] 
	*/

	public function getCarTuningData($id) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["id"] = json_encode($this->transport->object_unset_nulls($id));
	     $gs_data_input2939299822982["method"] = "getCarTuningData";
	     $gs_data_input2939299822982["interfaceName"] = "core.cartuning.ICarTuningManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	*
	* @author boggi
	* @return void 
	*/

	public function saveCarTuningData($carList) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["carList"] = json_encode($this->transport->object_unset_nulls($carList));
	     $gs_data_input2939299822982["method"] = "saveCarTuningData";
	     $gs_data_input2939299822982["interfaceName"] = "core.cartuning.ICarTuningManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

}
class APICareTakerManager {

	var $transport;
	
	function APICareTakerManager($transport) {
		$this->transport = $transport;
	}

	/**
	* Caretaker action for hotel.
	* @author boggi
	* @return void 
	*/

	public function addRepeatingTask($gs_multilevel_name, $repeatingData) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["repeatingData"] = json_encode($this->transport->object_unset_nulls($repeatingData));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "addRepeatingTask";
	     $gs_data_input2939299822982["interfaceName"] = "core.pmsmanager.ICareTakerManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Caretaker action for hotel.
	* @author boggi
	* @return void 
	*/

	public function assignTask($gs_multilevel_name, $taskId, $userId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["taskId"] = json_encode($this->transport->object_unset_nulls($taskId));
	     $gs_data_input2939299822982['args']["userId"] = json_encode($this->transport->object_unset_nulls($userId));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "assignTask";
	     $gs_data_input2939299822982["interfaceName"] = "core.pmsmanager.ICareTakerManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Caretaker action for hotel.
	* @author boggi
	* @return void 
	*/

	public function checkForTasksToCreate($gs_multilevel_name) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "checkForTasksToCreate";
	     $gs_data_input2939299822982["interfaceName"] = "core.pmsmanager.ICareTakerManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Caretaker action for hotel.
	* @author boggi
	* @return void 
	*/

	public function completeTask($gs_multilevel_name, $taskId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["taskId"] = json_encode($this->transport->object_unset_nulls($taskId));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "completeTask";
	     $gs_data_input2939299822982["interfaceName"] = "core.pmsmanager.ICareTakerManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Caretaker action for hotel.
	* @author boggi
	* @return void 
	*/

	public function deleteRepeatingTask($gs_multilevel_name, $id) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["id"] = json_encode($this->transport->object_unset_nulls($id));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "deleteRepeatingTask";
	     $gs_data_input2939299822982["interfaceName"] = "core.pmsmanager.ICareTakerManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Caretaker action for hotel.
	* @author boggi
	* @return core_pmsmanager_CareTakerRoomList[] 
	*/

	public function getCareTakerList($gs_multilevel_name, $filter) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["filter"] = json_encode($this->transport->object_unset_nulls($filter));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "getCareTakerList";
	     $gs_data_input2939299822982["interfaceName"] = "core.pmsmanager.ICareTakerManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Caretaker action for hotel.
	* @author boggi
	* @return core_usermanager_data_User[] 
	*/

	public function getCaretakers($gs_multilevel_name) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "getCaretakers";
	     $gs_data_input2939299822982["interfaceName"] = "core.pmsmanager.ICareTakerManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Caretaker action for hotel.
	* @author boggi
	* @return core_pmsmanager_CareTakeRepeatingData[] 
	*/

	public function getRepeatingTasks($gs_multilevel_name) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "getRepeatingTasks";
	     $gs_data_input2939299822982["interfaceName"] = "core.pmsmanager.ICareTakerManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Caretaker action for hotel.
	* @author boggi
	* @return core_pmsmanager_CareTakeRoomOverView[] 
	*/

	public function getRoomOverview($gs_multilevel_name, $defectsOnly) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["defectsOnly"] = json_encode($this->transport->object_unset_nulls($defectsOnly));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "getRoomOverview";
	     $gs_data_input2939299822982["interfaceName"] = "core.pmsmanager.ICareTakerManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

}
class APICartManager {

	var $transport;
	
	function APICartManager($transport) {
		$this->transport = $transport;
	}

	/**
	* Add coupons to the system.
	* @return void 
	*/

	public function addCoupon($coupon) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["coupon"] = json_encode($this->transport->object_unset_nulls($coupon));
	     $gs_data_input2939299822982["method"] = "addCoupon";
	     $gs_data_input2939299822982["interfaceName"] = "core.cartmanager.ICartManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Need to attach a reference number manually to the cart?
	* @throws ErrorException
	* @return void 
	*/

	public function addMetaDataToProduct($cartItemId, $metaData) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["cartItemId"] = json_encode($this->transport->object_unset_nulls($cartItemId));
	     $gs_data_input2939299822982['args']["metaData"] = json_encode($this->transport->object_unset_nulls($metaData));
	     $gs_data_input2939299822982["method"] = "addMetaDataToProduct";
	     $gs_data_input2939299822982["interfaceName"] = "core.cartmanager.ICartManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Add a new product to the cart.
	* @param productId The product id generated by the productmanager.
	* @param int Number instances of the product ordered.
	* @throws ErrorException
	* @return core_cartmanager_data_Cart 
	*/

	public function addProduct($productId, $count, $variations) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["productId"] = json_encode($this->transport->object_unset_nulls($productId));
	     $gs_data_input2939299822982['args']["count"] = json_encode($this->transport->object_unset_nulls($count));
	     $gs_data_input2939299822982['args']["variations"] = json_encode($this->transport->object_unset_nulls($variations));
	     $gs_data_input2939299822982["method"] = "addProduct";
	     $gs_data_input2939299822982["interfaceName"] = "core.cartmanager.ICartManager";
	     return $this->transport->cast(new core_cartmanager_data_Cart(), $this->transport->sendMessage($gs_data_input2939299822982));
	}

	/**
	* Add a new product to the cart.
	* @param productId The product id generated by the productmanager.
	* @param int Number instances of the product ordered.
	* @throws ErrorException
	* @return core_cartmanager_data_CartItem 
	*/

	public function addProductItem($productId, $count) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["productId"] = json_encode($this->transport->object_unset_nulls($productId));
	     $gs_data_input2939299822982['args']["count"] = json_encode($this->transport->object_unset_nulls($count));
	     $gs_data_input2939299822982["method"] = "addProductItem";
	     $gs_data_input2939299822982["interfaceName"] = "core.cartmanager.ICartManager";
	     return $this->transport->cast(new core_cartmanager_data_CartItem(), $this->transport->sendMessage($gs_data_input2939299822982));
	}

	/**
	* Add a new product to the cart.
	* @param productId The product id generated by the productmanager.
	* @param int Number instances of the product ordered.
	* @throws ErrorException
	* @return core_cartmanager_data_CartItem 
	*/

	public function addProductWithSource($productId, $count, $source) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["productId"] = json_encode($this->transport->object_unset_nulls($productId));
	     $gs_data_input2939299822982['args']["count"] = json_encode($this->transport->object_unset_nulls($count));
	     $gs_data_input2939299822982['args']["source"] = json_encode($this->transport->object_unset_nulls($source));
	     $gs_data_input2939299822982["method"] = "addProductWithSource";
	     $gs_data_input2939299822982["interfaceName"] = "core.cartmanager.ICartManager";
	     return $this->transport->cast(new core_cartmanager_data_CartItem(), $this->transport->sendMessage($gs_data_input2939299822982));
	}

	/**
	* Apply the coupon to the cart.
	* @return void 
	*/

	public function applyCouponToCurrentCart($code) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["code"] = json_encode($this->transport->object_unset_nulls($code));
	     $gs_data_input2939299822982["method"] = "applyCouponToCurrentCart";
	     $gs_data_input2939299822982["interfaceName"] = "core.cartmanager.ICartManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Send in a cart and you shall have the total price for all products.
	* @return Double 
	*/

	public function calculateTotalCost($cart) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["cart"] = json_encode($this->transport->object_unset_nulls($cart));
	     $gs_data_input2939299822982["method"] = "calculateTotalCost";
	     $gs_data_input2939299822982["interfaceName"] = "core.cartmanager.ICartManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Send in a cart and you shall have the total price for all products.
	* @return Integer 
	*/

	public function calculateTotalCount($cart) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["cart"] = json_encode($this->transport->object_unset_nulls($cart));
	     $gs_data_input2939299822982["method"] = "calculateTotalCount";
	     $gs_data_input2939299822982["interfaceName"] = "core.cartmanager.ICartManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Clear the current shopping cart.
	* @return void 
	*/

	public function clear() {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982["method"] = "clear";
	     $gs_data_input2939299822982["interfaceName"] = "core.cartmanager.ICartManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Add a new product to the cart.
	* @param productId The product id generated by the productmanager.
	* @param int Number instances of the product ordered.
	* @throws ErrorException
	* @return void 
	*/

	public function filterByDate($start, $end) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["start"] = json_encode($this->transport->object_unset_nulls($start));
	     $gs_data_input2939299822982['args']["end"] = json_encode($this->transport->object_unset_nulls($end));
	     $gs_data_input2939299822982["method"] = "filterByDate";
	     $gs_data_input2939299822982["interfaceName"] = "core.cartmanager.ICartManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Fetch the current cart.
	* @throws ErrorException
	* @return core_cartmanager_data_Cart 
	*/

	public function getCart() {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982["method"] = "getCart";
	     $gs_data_input2939299822982["interfaceName"] = "core.cartmanager.ICartManager";
	     return $this->transport->cast(new core_cartmanager_data_Cart(), $this->transport->sendMessage($gs_data_input2939299822982));
	}

	/**
	* Need to attach a reference number manually to the cart?
	* @throws ErrorException
	* @return Double 
	*/

	public function getCartTotal($cart) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["cart"] = json_encode($this->transport->object_unset_nulls($cart));
	     $gs_data_input2939299822982["method"] = "getCartTotal";
	     $gs_data_input2939299822982["interfaceName"] = "core.cartmanager.ICartManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Returns the current total amount
	* note, this does not include shipping.
	*
	* @throws ErrorException
	* @return Double 
	*/

	public function getCartTotalAmount() {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982["method"] = "getCartTotalAmount";
	     $gs_data_input2939299822982["interfaceName"] = "core.cartmanager.ICartManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Get a speicific coupon.
	* @return core_cartmanager_data_Coupon 
	*/

	public function getCoupon($couponCode) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["couponCode"] = json_encode($this->transport->object_unset_nulls($couponCode));
	     $gs_data_input2939299822982["method"] = "getCoupon";
	     $gs_data_input2939299822982["interfaceName"] = "core.cartmanager.ICartManager";
	     return $this->transport->cast(new core_cartmanager_data_Coupon(), $this->transport->sendMessage($gs_data_input2939299822982));
	}

	/**
	* Get a speicific coupon.
	* @return core_cartmanager_data_Coupon 
	*/

	public function getCouponById($couponId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["couponId"] = json_encode($this->transport->object_unset_nulls($couponId));
	     $gs_data_input2939299822982["method"] = "getCouponById";
	     $gs_data_input2939299822982["interfaceName"] = "core.cartmanager.ICartManager";
	     return $this->transport->cast(new core_cartmanager_data_Coupon(), $this->transport->sendMessage($gs_data_input2939299822982));
	}

	/**
	* Returns a list of all coupons.
	* @return core_cartmanager_data_Coupon[] 
	*/

	public function getCoupons() {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982["method"] = "getCoupons";
	     $gs_data_input2939299822982["interfaceName"] = "core.cartmanager.ICartManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Returns a list of all coupons.
	* @return String[] 
	*/

	public function getPartnershipCoupons() {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982["method"] = "getPartnershipCoupons";
	     $gs_data_input2939299822982["interfaceName"] = "core.cartmanager.ICartManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Returns the shipping cost
	* @return Double 
	*/

	public function getShippingCost() {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982["method"] = "getShippingCost";
	     $gs_data_input2939299822982["interfaceName"] = "core.cartmanager.ICartManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Fetch the total amount of price to use when calculating shipping price.
	* @throws ErrorException
	* @return Double 
	*/

	public function getShippingPriceBasis() {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982["method"] = "getShippingPriceBasis";
	     $gs_data_input2939299822982["interfaceName"] = "core.cartmanager.ICartManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Returns the current calculation of taxes.
	* @return core_cartmanager_data_CartTax[] 
	*/

	public function getTaxes() {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982["method"] = "getTaxes";
	     $gs_data_input2939299822982["interfaceName"] = "core.cartmanager.ICartManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Returns a list of all coupons.
	* @return boolean 
	*/

	public function hasCoupons() {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982["method"] = "hasCoupons";
	     $gs_data_input2939299822982["interfaceName"] = "core.cartmanager.ICartManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Need to attach a reference number manually to the cart?
	* @throws ErrorException
	* @return void 
	*/

	public function recalculateMetaData() {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982["method"] = "recalculateMetaData";
	     $gs_data_input2939299822982["interfaceName"] = "core.cartmanager.ICartManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Need to attach a reference number manually to the cart?
	* @throws ErrorException
	* @return core_cartmanager_data_Cart 
	*/

	public function recalculateMetaDataCart($cart) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["cart"] = json_encode($this->transport->object_unset_nulls($cart));
	     $gs_data_input2939299822982["method"] = "recalculateMetaDataCart";
	     $gs_data_input2939299822982["interfaceName"] = "core.cartmanager.ICartManager";
	     return $this->transport->cast(new core_cartmanager_data_Cart(), $this->transport->sendMessage($gs_data_input2939299822982));
	}

	/**
	* Remove all coupons from the system.
	* @throws ErrorException
	* @return void 
	*/

	public function removeAllCoupons() {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982["method"] = "removeAllCoupons";
	     $gs_data_input2939299822982["interfaceName"] = "core.cartmanager.ICartManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Remove an added product from the cart.
	* @param productId The product id generated by the productmanager, that has been added to the cart.
	* @throws ErrorException
	* @return void 
	*/

	public function removeCartItem($cartItemId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["cartItemId"] = json_encode($this->transport->object_unset_nulls($cartItemId));
	     $gs_data_input2939299822982["method"] = "removeCartItem";
	     $gs_data_input2939299822982["interfaceName"] = "core.cartmanager.ICartManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Remove a coupon from the system.
	*
	* @param coupon
	* @throws ErrorException
	* @return void 
	*/

	public function removeCoupon($code) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["code"] = json_encode($this->transport->object_unset_nulls($code));
	     $gs_data_input2939299822982["method"] = "removeCoupon";
	     $gs_data_input2939299822982["interfaceName"] = "core.cartmanager.ICartManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Remove an added product from the cart.
	* @param productId The product id generated by the productmanager, that has been added to the cart.
	* @throws ErrorException
	* @return core_cartmanager_data_Cart 
	*/

	public function removeProduct($cartItemId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["cartItemId"] = json_encode($this->transport->object_unset_nulls($cartItemId));
	     $gs_data_input2939299822982["method"] = "removeProduct";
	     $gs_data_input2939299822982["interfaceName"] = "core.cartmanager.ICartManager";
	     return $this->transport->cast(new core_cartmanager_data_Cart(), $this->transport->sendMessage($gs_data_input2939299822982));
	}

	/**
	* Set a new address to the current cart.
	* @return void 
	*/

	public function setAddress($address) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["address"] = json_encode($this->transport->object_unset_nulls($address));
	     $gs_data_input2939299822982["method"] = "setAddress";
	     $gs_data_input2939299822982["interfaceName"] = "core.cartmanager.ICartManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Need to attach a reference number manually to the cart?
	* @throws ErrorException
	* @return void 
	*/

	public function setCart($cart) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["cart"] = json_encode($this->transport->object_unset_nulls($cart));
	     $gs_data_input2939299822982["method"] = "setCart";
	     $gs_data_input2939299822982["interfaceName"] = "core.cartmanager.ICartManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Need to attach a reference number manually to the cart?
	* @throws ErrorException
	* @return void 
	*/

	public function setReference($reference) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["reference"] = json_encode($this->transport->object_unset_nulls($reference));
	     $gs_data_input2939299822982["method"] = "setReference";
	     $gs_data_input2939299822982["interfaceName"] = "core.cartmanager.ICartManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Sets the shipping cost.
	* Should be in base currency.
	* @return void 
	*/

	public function setShippingCost($shippingCost) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["shippingCost"] = json_encode($this->transport->object_unset_nulls($shippingCost));
	     $gs_data_input2939299822982["method"] = "setShippingCost";
	     $gs_data_input2939299822982["interfaceName"] = "core.cartmanager.ICartManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Need to attach a reference number manually to the cart?
	* @throws ErrorException
	* @return void 
	*/

	public function updateCartItem($item) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["item"] = json_encode($this->transport->object_unset_nulls($item));
	     $gs_data_input2939299822982["method"] = "updateCartItem";
	     $gs_data_input2939299822982["interfaceName"] = "core.cartmanager.ICartManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Change the number of instances added to the product.
	* @param productId The product id generated by the productmanager.
	* @param count The number of instances (has to be a positive integer)
	* @throws ErrorException
	* @return core_cartmanager_data_Cart 
	*/

	public function updateProductCount($cartItemId, $count) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["cartItemId"] = json_encode($this->transport->object_unset_nulls($cartItemId));
	     $gs_data_input2939299822982['args']["count"] = json_encode($this->transport->object_unset_nulls($count));
	     $gs_data_input2939299822982["method"] = "updateProductCount";
	     $gs_data_input2939299822982["interfaceName"] = "core.cartmanager.ICartManager";
	     return $this->transport->cast(new core_cartmanager_data_Cart(), $this->transport->sendMessage($gs_data_input2939299822982));
	}

}
class APICertegoManager {

	var $transport;
	
	function APICertegoManager($transport) {
		$this->transport = $transport;
	}

	/**
	*
	* @author ktonder
	* @return void 
	*/

	public function deleteSystem($systemId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["systemId"] = json_encode($this->transport->object_unset_nulls($systemId));
	     $gs_data_input2939299822982["method"] = "deleteSystem";
	     $gs_data_input2939299822982["interfaceName"] = "core.certego.ICertegoManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	*
	* @author ktonder
	* @return core_certego_data_CertegoOrder[] 
	*/

	public function getOrders() {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982["method"] = "getOrders";
	     $gs_data_input2939299822982["interfaceName"] = "core.certego.ICertegoManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	*
	* @author ktonder
	* @return core_certego_data_CertegoSystem[] 
	*/

	public function getSystems() {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982["method"] = "getSystems";
	     $gs_data_input2939299822982["interfaceName"] = "core.certego.ICertegoManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	*
	* @author ktonder
	* @return core_common_FilteredData 
	*/

	public function getSystemsFiltered($filterOptions) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["filterOptions"] = json_encode($this->transport->object_unset_nulls($filterOptions));
	     $gs_data_input2939299822982["method"] = "getSystemsFiltered";
	     $gs_data_input2939299822982["interfaceName"] = "core.certego.ICertegoManager";
	     return $this->transport->cast(new core_common_FilteredData(), $this->transport->sendMessage($gs_data_input2939299822982));
	}

	/**
	*
	* @author ktonder
	* @return core_certego_data_CertegoSystem[] 
	*/

	public function getSystemsForGroup($group) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["group"] = json_encode($this->transport->object_unset_nulls($group));
	     $gs_data_input2939299822982["method"] = "getSystemsForGroup";
	     $gs_data_input2939299822982["interfaceName"] = "core.certego.ICertegoManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	*
	* @author ktonder
	* @return void 
	*/

	public function saveOrder($order) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["order"] = json_encode($this->transport->object_unset_nulls($order));
	     $gs_data_input2939299822982["method"] = "saveOrder";
	     $gs_data_input2939299822982["interfaceName"] = "core.certego.ICertegoManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	*
	* @author ktonder
	* @return core_certego_data_CertegoSystem 
	*/

	public function saveSystem($system) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["system"] = json_encode($this->transport->object_unset_nulls($system));
	     $gs_data_input2939299822982["method"] = "saveSystem";
	     $gs_data_input2939299822982["interfaceName"] = "core.certego.ICertegoManager";
	     return $this->transport->cast(new core_certego_data_CertegoSystem(), $this->transport->sendMessage($gs_data_input2939299822982));
	}

	/**
	*
	* @author ktonder
	* @return core_certego_data_CertegoSystem[] 
	*/

	public function search($searchWord) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["searchWord"] = json_encode($this->transport->object_unset_nulls($searchWord));
	     $gs_data_input2939299822982["method"] = "search";
	     $gs_data_input2939299822982["interfaceName"] = "core.certego.ICertegoManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

}
class APIContentManager {

	var $transport;
	
	function APIContentManager($transport) {
		$this->transport = $transport;
	}

	/**
	* Create a new instance for the content manager.<br>
	* An id will automatically be generated and returned on creation.<br>
	*
	* @param content The content to build upon.
	* @throws ErrorException
	* @return String 
	*/

	public function createContent($content) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["content"] = json_encode($this->transport->object_unset_nulls($content));
	     $gs_data_input2939299822982["method"] = "createContent";
	     $gs_data_input2939299822982["interfaceName"] = "app.content.IContentManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Remove the content for a given id.
	* @param id The id to remove the content for.
	* @throws ErrorException
	* @return void 
	*/

	public function deleteContent($id) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["id"] = json_encode($this->transport->object_unset_nulls($id));
	     $gs_data_input2939299822982["method"] = "deleteContent";
	     $gs_data_input2939299822982["interfaceName"] = "app.content.IContentManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Fetch all content saved until now.
	* @throws ErrorException
	* @return public class HashMap<K,V> 
	*/

	public function getAllContent() {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982["method"] = "getAllContent";
	     $gs_data_input2939299822982["interfaceName"] = "app.content.IContentManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Fetch the content for a given id.
	* @param id The id which is identifying the content.
	* @throws ErrorException
	* @return String 
	*/

	public function getContent($id) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["id"] = json_encode($this->transport->object_unset_nulls($id));
	     $gs_data_input2939299822982["method"] = "getContent";
	     $gs_data_input2939299822982["interfaceName"] = "app.content.IContentManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Update / replace the content for a given id.
	* @param id The id to update the content for.
	* @param content The content to update. This could be html / text.
	* @throws ErrorException
	* @return void 
	*/

	public function saveContent($id, $content) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["id"] = json_encode($this->transport->object_unset_nulls($id));
	     $gs_data_input2939299822982['args']["content"] = json_encode($this->transport->object_unset_nulls($content));
	     $gs_data_input2939299822982["method"] = "saveContent";
	     $gs_data_input2939299822982["interfaceName"] = "app.content.IContentManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

}
class APIDBBackupManager {

	var $transport;
	
	function APIDBBackupManager($transport) {
		$this->transport = $transport;
	}

	/**
	*
	* @author ktonder
	* @return core_dbbackupmanager_DBChange[] 
	*/

	public function getChanges($className) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["className"] = json_encode($this->transport->object_unset_nulls($className));
	     $gs_data_input2939299822982["method"] = "getChanges";
	     $gs_data_input2939299822982["interfaceName"] = "core.dbbackupmanager.IDBBackupManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	*
	* @author ktonder
	* @return core_dbbackupmanager_DBChange[] 
	*/

	public function getChangesById($className, $id) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["className"] = json_encode($this->transport->object_unset_nulls($className));
	     $gs_data_input2939299822982['args']["id"] = json_encode($this->transport->object_unset_nulls($id));
	     $gs_data_input2939299822982["method"] = "getChangesById";
	     $gs_data_input2939299822982["interfaceName"] = "core.dbbackupmanager.IDBBackupManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	*
	* @author ktonder
	* @return String 
	*/

	public function getDiff($className, $id1, $id2) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["className"] = json_encode($this->transport->object_unset_nulls($className));
	     $gs_data_input2939299822982['args']["id1"] = json_encode($this->transport->object_unset_nulls($id1));
	     $gs_data_input2939299822982['args']["id2"] = json_encode($this->transport->object_unset_nulls($id2));
	     $gs_data_input2939299822982["method"] = "getDiff";
	     $gs_data_input2939299822982["interfaceName"] = "core.dbbackupmanager.IDBBackupManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

}
class APIDibsManager {

	var $transport;
	
	function APIDibsManager($transport) {
		$this->transport = $transport;
	}

	/**
	* Dibs management.
	* @return void 
	*/

	public function checkForOrdersToCapture() {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982["method"] = "checkForOrdersToCapture";
	     $gs_data_input2939299822982["interfaceName"] = "core.dibs.IDibsManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

}
class APIDoorManager {

	var $transport;
	
	function APIDoorManager($transport) {
		$this->transport = $transport;
	}

	/**
	* communication with the arx server.
	*
	* @author boggi
	* @return core_arx_Person 
	*/

	public function addCard($gs_multilevel_name, $personId, $card) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["personId"] = json_encode($this->transport->object_unset_nulls($personId));
	     $gs_data_input2939299822982['args']["card"] = json_encode($this->transport->object_unset_nulls($card));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "addCard";
	     $gs_data_input2939299822982["interfaceName"] = "core.arx.IDoorManager";
	     return $this->transport->cast(new core_arx_Person(), $this->transport->sendMessage($gs_data_input2939299822982));
	}

	/**
	* communication with the arx server.
	*
	* @author boggi
	* @return void 
	*/

	public function clearDoorCache($gs_multilevel_name) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "clearDoorCache";
	     $gs_data_input2939299822982["interfaceName"] = "core.arx.IDoorManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* communication with the arx server.
	*
	* @author boggi
	* @return void 
	*/

	public function closeAllForTheDay($gs_multilevel_name) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "closeAllForTheDay";
	     $gs_data_input2939299822982["interfaceName"] = "core.arx.IDoorManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* communication with the arx server.
	*
	* @author boggi
	* @return void 
	*/

	public function doorAction($gs_multilevel_name, $externalId, $state) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["externalId"] = json_encode($this->transport->object_unset_nulls($externalId));
	     $gs_data_input2939299822982['args']["state"] = json_encode($this->transport->object_unset_nulls($state));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "doorAction";
	     $gs_data_input2939299822982["interfaceName"] = "core.arx.IDoorManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* communication with the arx server.
	*
	* @author boggi
	* @return public class HashMap<K,V> 
	*/

	public function generateDoorLogForAllDoorsFromResult($gs_multilevel_name, $resultFromArx) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["resultFromArx"] = json_encode($this->transport->object_unset_nulls($resultFromArx));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "generateDoorLogForAllDoorsFromResult";
	     $gs_data_input2939299822982["interfaceName"] = "core.arx.IDoorManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* communication with the arx server.
	*
	* @author boggi
	* @return core_arx_AccessCategory[] 
	*/

	public function getAllAccessCategories($gs_multilevel_name) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "getAllAccessCategories";
	     $gs_data_input2939299822982["interfaceName"] = "core.arx.IDoorManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* communication with the arx server.
	*
	* @author boggi
	* @return core_arx_Door[] 
	*/

	public function getAllDoors($gs_multilevel_name) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "getAllDoors";
	     $gs_data_input2939299822982["interfaceName"] = "core.arx.IDoorManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* communication with the arx server.
	*
	* @author boggi
	* @return core_arx_Person[] 
	*/

	public function getAllPersons($gs_multilevel_name) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "getAllPersons";
	     $gs_data_input2939299822982["interfaceName"] = "core.arx.IDoorManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* communication with the arx server.
	*
	* @author boggi
	* @return public class HashMap<K,V> 
	*/

	public function getLogForAllDoor($gs_multilevel_name, $start, $end) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["start"] = json_encode($this->transport->object_unset_nulls($start));
	     $gs_data_input2939299822982['args']["end"] = json_encode($this->transport->object_unset_nulls($end));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "getLogForAllDoor";
	     $gs_data_input2939299822982["interfaceName"] = "core.arx.IDoorManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* communication with the arx server.
	*
	* @author boggi
	* @return core_arx_AccessLog[] 
	*/

	public function getLogForDoor($gs_multilevel_name, $externalId, $start, $end) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["externalId"] = json_encode($this->transport->object_unset_nulls($externalId));
	     $gs_data_input2939299822982['args']["start"] = json_encode($this->transport->object_unset_nulls($start));
	     $gs_data_input2939299822982['args']["end"] = json_encode($this->transport->object_unset_nulls($end));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "getLogForDoor";
	     $gs_data_input2939299822982["interfaceName"] = "core.arx.IDoorManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* communication with the arx server.
	*
	* @author boggi
	* @return core_getshop_data_GetShopLockMasterCodes 
	*/

	public function getMasterCodes($gs_multilevel_name) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "getMasterCodes";
	     $gs_data_input2939299822982["interfaceName"] = "core.arx.IDoorManager";
	     return $this->transport->cast(new core_getshop_data_GetShopLockMasterCodes(), $this->transport->sendMessage($gs_data_input2939299822982));
	}

	/**
	* communication with the arx server.
	*
	* @author boggi
	* @return core_arx_Person 
	*/

	public function getPerson($gs_multilevel_name, $id) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["id"] = json_encode($this->transport->object_unset_nulls($id));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "getPerson";
	     $gs_data_input2939299822982["interfaceName"] = "core.arx.IDoorManager";
	     return $this->transport->cast(new core_arx_Person(), $this->transport->sendMessage($gs_data_input2939299822982));
	}

	/**
	* communication with the arx server.
	*
	* @author boggi
	* @return String 
	*/

	public function pmsDoorAction($gs_multilevel_name, $code, $type) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["code"] = json_encode($this->transport->object_unset_nulls($code));
	     $gs_data_input2939299822982['args']["type"] = json_encode($this->transport->object_unset_nulls($type));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "pmsDoorAction";
	     $gs_data_input2939299822982["interfaceName"] = "core.arx.IDoorManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* communication with the arx server.
	*
	* @author boggi
	* @return void 
	*/

	public function saveMasterCodes($gs_multilevel_name, $masterCodes) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["masterCodes"] = json_encode($this->transport->object_unset_nulls($masterCodes));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "saveMasterCodes";
	     $gs_data_input2939299822982["interfaceName"] = "core.arx.IDoorManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* communication with the arx server.
	*
	* @author boggi
	* @return core_arx_Person 
	*/

	public function updatePerson($gs_multilevel_name, $person) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["person"] = json_encode($this->transport->object_unset_nulls($person));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "updatePerson";
	     $gs_data_input2939299822982["interfaceName"] = "core.arx.IDoorManager";
	     return $this->transport->cast(new core_arx_Person(), $this->transport->sendMessage($gs_data_input2939299822982));
	}

}
class APIEpayManager {

	var $transport;
	
	function APIEpayManager($transport) {
		$this->transport = $transport;
	}

	/**
	* Bambora payment management.
	* @return void 
	*/

	public function checkForOrdersToCapture() {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982["method"] = "checkForOrdersToCapture";
	     $gs_data_input2939299822982["interfaceName"] = "core.epay.IEpayManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

}
class APIEventBookingManager {

	var $transport;
	
	function APIEventBookingManager($transport) {
		$this->transport = $transport;
	}

	/**
	*
	* @author ktonder
	* @return void 
	*/

	public function addExternalCertificate($gs_multilevel_name, $userId, $fileId, $eventId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["userId"] = json_encode($this->transport->object_unset_nulls($userId));
	     $gs_data_input2939299822982['args']["fileId"] = json_encode($this->transport->object_unset_nulls($fileId));
	     $gs_data_input2939299822982['args']["eventId"] = json_encode($this->transport->object_unset_nulls($eventId));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "addExternalCertificate";
	     $gs_data_input2939299822982["interfaceName"] = "core.eventbooking.IEventBookingManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	*
	* @author ktonder
	* @return void 
	*/

	public function addLocationFilter($gs_multilevel_name, $locationId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["locationId"] = json_encode($this->transport->object_unset_nulls($locationId));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "addLocationFilter";
	     $gs_data_input2939299822982["interfaceName"] = "core.eventbooking.IEventBookingManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	*
	* @author ktonder
	* @return void 
	*/

	public function addManuallyParticipatedEvent($gs_multilevel_name, $man) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["man"] = json_encode($this->transport->object_unset_nulls($man));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "addManuallyParticipatedEvent";
	     $gs_data_input2939299822982["interfaceName"] = "core.eventbooking.IEventBookingManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	*
	* @author ktonder
	* @return void 
	*/

	public function addPersonalIdToEvent($gs_multilevel_name, $eventId, $userId, $personalId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["eventId"] = json_encode($this->transport->object_unset_nulls($eventId));
	     $gs_data_input2939299822982['args']["userId"] = json_encode($this->transport->object_unset_nulls($userId));
	     $gs_data_input2939299822982['args']["personalId"] = json_encode($this->transport->object_unset_nulls($personalId));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "addPersonalIdToEvent";
	     $gs_data_input2939299822982["interfaceName"] = "core.eventbooking.IEventBookingManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	*
	* @author ktonder
	* @return void 
	*/

	public function addTypeFilter($gs_multilevel_name, $bookingItemTypeId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["bookingItemTypeId"] = json_encode($this->transport->object_unset_nulls($bookingItemTypeId));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "addTypeFilter";
	     $gs_data_input2939299822982["interfaceName"] = "core.eventbooking.IEventBookingManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	*
	* @author ktonder
	* @return void 
	*/

	public function addUserComment($gs_multilevel_name, $userId, $eventId, $comment) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["userId"] = json_encode($this->transport->object_unset_nulls($userId));
	     $gs_data_input2939299822982['args']["eventId"] = json_encode($this->transport->object_unset_nulls($eventId));
	     $gs_data_input2939299822982['args']["comment"] = json_encode($this->transport->object_unset_nulls($comment));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "addUserComment";
	     $gs_data_input2939299822982["interfaceName"] = "core.eventbooking.IEventBookingManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	*
	* @author ktonder
	* @return void 
	*/

	public function addUserToEvent($gs_multilevel_name, $eventId, $userId, $silent, $source) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["eventId"] = json_encode($this->transport->object_unset_nulls($eventId));
	     $gs_data_input2939299822982['args']["userId"] = json_encode($this->transport->object_unset_nulls($userId));
	     $gs_data_input2939299822982['args']["silent"] = json_encode($this->transport->object_unset_nulls($silent));
	     $gs_data_input2939299822982['args']["source"] = json_encode($this->transport->object_unset_nulls($source));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "addUserToEvent";
	     $gs_data_input2939299822982["interfaceName"] = "core.eventbooking.IEventBookingManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	*
	* @author ktonder
	* @return void 
	*/

	public function bookCurrentUserToEvent($gs_multilevel_name, $eventId, $source) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["eventId"] = json_encode($this->transport->object_unset_nulls($eventId));
	     $gs_data_input2939299822982['args']["source"] = json_encode($this->transport->object_unset_nulls($source));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "bookCurrentUserToEvent";
	     $gs_data_input2939299822982["interfaceName"] = "core.eventbooking.IEventBookingManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	*
	* @author ktonder
	* @return boolean 
	*/

	public function canDownloadCertificate($gs_multilevel_name, $eventId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["eventId"] = json_encode($this->transport->object_unset_nulls($eventId));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "canDownloadCertificate";
	     $gs_data_input2939299822982["interfaceName"] = "core.eventbooking.IEventBookingManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	*
	* @author ktonder
	* @return void 
	*/

	public function cancelEvent($gs_multilevel_name, $eventId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["eventId"] = json_encode($this->transport->object_unset_nulls($eventId));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "cancelEvent";
	     $gs_data_input2939299822982["interfaceName"] = "core.eventbooking.IEventBookingManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	*
	* @author ktonder
	* @return void 
	*/

	public function checkToSendReminders($gs_multilevel_name) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "checkToSendReminders";
	     $gs_data_input2939299822982["interfaceName"] = "core.eventbooking.IEventBookingManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	*
	* @author ktonder
	* @return void 
	*/

	public function clearEventBookingManagerForAllData($gs_multilevel_name) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "clearEventBookingManagerForAllData";
	     $gs_data_input2939299822982["interfaceName"] = "core.eventbooking.IEventBookingManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	*
	* @author ktonder
	* @return void 
	*/

	public function clearFilters($gs_multilevel_name) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "clearFilters";
	     $gs_data_input2939299822982["interfaceName"] = "core.eventbooking.IEventBookingManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	*
	* @author ktonder
	* @return void 
	*/

	public function clearLocationFilters($gs_multilevel_name) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "clearLocationFilters";
	     $gs_data_input2939299822982["interfaceName"] = "core.eventbooking.IEventBookingManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	*
	* @author ktonder
	* @return core_eventbooking_Event 
	*/

	public function createEvent($gs_multilevel_name, $event) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["event"] = json_encode($this->transport->object_unset_nulls($event));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "createEvent";
	     $gs_data_input2939299822982["interfaceName"] = "core.eventbooking.IEventBookingManager";
	     return $this->transport->cast(new core_eventbooking_Event(), $this->transport->sendMessage($gs_data_input2939299822982));
	}

	/**
	*
	* @author ktonder
	* @return public abstract interface Map<K,V> 
	*/

	public function decodePersonalIds($gs_multilevel_name, $eventId, $privateKey) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["eventId"] = json_encode($this->transport->object_unset_nulls($eventId));
	     $gs_data_input2939299822982['args']["privateKey"] = json_encode($this->transport->object_unset_nulls($privateKey));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "decodePersonalIds";
	     $gs_data_input2939299822982["interfaceName"] = "core.eventbooking.IEventBookingManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	*
	* @author ktonder
	* @return void 
	*/

	public function deleteCertificate($gs_multilevel_name, $certificateId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["certificateId"] = json_encode($this->transport->object_unset_nulls($certificateId));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "deleteCertificate";
	     $gs_data_input2939299822982["interfaceName"] = "core.eventbooking.IEventBookingManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	*
	* @author ktonder
	* @return void 
	*/

	public function deleteEvent($gs_multilevel_name, $eventId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["eventId"] = json_encode($this->transport->object_unset_nulls($eventId));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "deleteEvent";
	     $gs_data_input2939299822982["interfaceName"] = "core.eventbooking.IEventBookingManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	*
	* @author ktonder
	* @return void 
	*/

	public function deleteExternalCertificates($gs_multilevel_name, $userId, $fileId, $eventId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["userId"] = json_encode($this->transport->object_unset_nulls($userId));
	     $gs_data_input2939299822982['args']["fileId"] = json_encode($this->transport->object_unset_nulls($fileId));
	     $gs_data_input2939299822982['args']["eventId"] = json_encode($this->transport->object_unset_nulls($eventId));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "deleteExternalCertificates";
	     $gs_data_input2939299822982["interfaceName"] = "core.eventbooking.IEventBookingManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	*
	* @author ktonder
	* @return void 
	*/

	public function deleteInvoiceGroup($gs_multilevel_name, $groupId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["groupId"] = json_encode($this->transport->object_unset_nulls($groupId));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "deleteInvoiceGroup";
	     $gs_data_input2939299822982["interfaceName"] = "core.eventbooking.IEventBookingManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	*
	* @author ktonder
	* @return void 
	*/

	public function deleteLocation($gs_multilevel_name, $locationId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["locationId"] = json_encode($this->transport->object_unset_nulls($locationId));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "deleteLocation";
	     $gs_data_input2939299822982["interfaceName"] = "core.eventbooking.IEventBookingManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	*
	* @author ktonder
	* @return void 
	*/

	public function deleteManullyParticipatedEvent($gs_multilevel_name, $id) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["id"] = json_encode($this->transport->object_unset_nulls($id));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "deleteManullyParticipatedEvent";
	     $gs_data_input2939299822982["interfaceName"] = "core.eventbooking.IEventBookingManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	*
	* @author ktonder
	* @return void 
	*/

	public function deleteReminderTemplate($gs_multilevel_name, $templateId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["templateId"] = json_encode($this->transport->object_unset_nulls($templateId));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "deleteReminderTemplate";
	     $gs_data_input2939299822982["interfaceName"] = "core.eventbooking.IEventBookingManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	*
	* @author ktonder
	* @return void 
	*/

	public function deleteSubLocation($gs_multilevel_name, $subLocationId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["subLocationId"] = json_encode($this->transport->object_unset_nulls($subLocationId));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "deleteSubLocation";
	     $gs_data_input2939299822982["interfaceName"] = "core.eventbooking.IEventBookingManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	*
	* @author ktonder
	* @return void 
	*/

	public function deleteUserComment($gs_multilevel_name, $userId, $eventId, $commentId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["userId"] = json_encode($this->transport->object_unset_nulls($userId));
	     $gs_data_input2939299822982['args']["eventId"] = json_encode($this->transport->object_unset_nulls($eventId));
	     $gs_data_input2939299822982['args']["commentId"] = json_encode($this->transport->object_unset_nulls($commentId));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "deleteUserComment";
	     $gs_data_input2939299822982["interfaceName"] = "core.eventbooking.IEventBookingManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	*
	* @author ktonder
	* @return core_eventbooking_Location[] 
	*/

	public function getActiveLocations($gs_multilevel_name) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "getActiveLocations";
	     $gs_data_input2939299822982["interfaceName"] = "core.eventbooking.IEventBookingManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	*
	* @author ktonder
	* @return core_eventbooking_Event[] 
	*/

	public function getAllEvents($gs_multilevel_name) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "getAllEvents";
	     $gs_data_input2939299822982["interfaceName"] = "core.eventbooking.IEventBookingManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	*
	* @author ktonder
	* @return core_eventbooking_Location[] 
	*/

	public function getAllLocations($gs_multilevel_name) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "getAllLocations";
	     $gs_data_input2939299822982["interfaceName"] = "core.eventbooking.IEventBookingManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	*
	* @author ktonder
	* @return core_bookingengine_data_BookingItemType 
	*/

	public function getBookingItemTypeByPageId($gs_multilevel_name, $pageId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["pageId"] = json_encode($this->transport->object_unset_nulls($pageId));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "getBookingItemTypeByPageId";
	     $gs_data_input2939299822982["interfaceName"] = "core.eventbooking.IEventBookingManager";
	     return $this->transport->cast(new core_bookingengine_data_BookingItemType(), $this->transport->sendMessage($gs_data_input2939299822982));
	}

	/**
	*
	* @author ktonder
	* @return core_bookingengine_data_BookingItemType[] 
	*/

	public function getBookingItemTypes($gs_multilevel_name) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "getBookingItemTypes";
	     $gs_data_input2939299822982["interfaceName"] = "core.eventbooking.IEventBookingManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	*
	* @author ktonder
	* @return core_eventbooking_BookingItemTypeMetadata 
	*/

	public function getBookingTypeMetaData($gs_multilevel_name, $id) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["id"] = json_encode($this->transport->object_unset_nulls($id));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "getBookingTypeMetaData";
	     $gs_data_input2939299822982["interfaceName"] = "core.eventbooking.IEventBookingManager";
	     return $this->transport->cast(new core_eventbooking_BookingItemTypeMetadata(), $this->transport->sendMessage($gs_data_input2939299822982));
	}

	/**
	*
	* @author ktonder
	* @return core_eventbooking_Event[] 
	*/

	public function getBookingsByPageId($gs_multilevel_name, $pageId, $showOnlyNew) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["pageId"] = json_encode($this->transport->object_unset_nulls($pageId));
	     $gs_data_input2939299822982['args']["showOnlyNew"] = json_encode($this->transport->object_unset_nulls($showOnlyNew));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "getBookingsByPageId";
	     $gs_data_input2939299822982["interfaceName"] = "core.eventbooking.IEventBookingManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	*
	* @author ktonder
	* @return core_eventbooking_Certificate 
	*/

	public function getCertificate($gs_multilevel_name, $certificateId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["certificateId"] = json_encode($this->transport->object_unset_nulls($certificateId));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "getCertificate";
	     $gs_data_input2939299822982["interfaceName"] = "core.eventbooking.IEventBookingManager";
	     return $this->transport->cast(new core_eventbooking_Certificate(), $this->transport->sendMessage($gs_data_input2939299822982));
	}

	/**
	*
	* @author ktonder
	* @return core_eventbooking_Certificate 
	*/

	public function getCertificateForEvent($gs_multilevel_name, $eventId, $userId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["eventId"] = json_encode($this->transport->object_unset_nulls($eventId));
	     $gs_data_input2939299822982['args']["userId"] = json_encode($this->transport->object_unset_nulls($userId));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "getCertificateForEvent";
	     $gs_data_input2939299822982["interfaceName"] = "core.eventbooking.IEventBookingManager";
	     return $this->transport->cast(new core_eventbooking_Certificate(), $this->transport->sendMessage($gs_data_input2939299822982));
	}

	/**
	*
	* @author ktonder
	* @return core_eventbooking_Certificate[] 
	*/

	public function getCertificates($gs_multilevel_name) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "getCertificates";
	     $gs_data_input2939299822982["interfaceName"] = "core.eventbooking.IEventBookingManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	*
	* @author ktonder
	* @return String[] 
	*/

	public function getCompaniesWhereNoCanditasHasCompletedTests($gs_multilevel_name, $testIds) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["testIds"] = json_encode($this->transport->object_unset_nulls($testIds));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "getCompaniesWhereNoCanditasHasCompletedTests";
	     $gs_data_input2939299822982["interfaceName"] = "core.eventbooking.IEventBookingManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	*
	* @author ktonder
	* @return core_eventbooking_Event 
	*/

	public function getEvent($gs_multilevel_name, $eventId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["eventId"] = json_encode($this->transport->object_unset_nulls($eventId));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "getEvent";
	     $gs_data_input2939299822982["interfaceName"] = "core.eventbooking.IEventBookingManager";
	     return $this->transport->cast(new core_eventbooking_Event(), $this->transport->sendMessage($gs_data_input2939299822982));
	}

	/**
	*
	* @author ktonder
	* @return core_eventbooking_Event 
	*/

	public function getEventByPageId($gs_multilevel_name, $eventId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["eventId"] = json_encode($this->transport->object_unset_nulls($eventId));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "getEventByPageId";
	     $gs_data_input2939299822982["interfaceName"] = "core.eventbooking.IEventBookingManager";
	     return $this->transport->cast(new core_eventbooking_Event(), $this->transport->sendMessage($gs_data_input2939299822982));
	}

	/**
	*
	* @author ktonder
	* @return core_eventbooking_EventLog[] 
	*/

	public function getEventLog($gs_multilevel_name, $eventId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["eventId"] = json_encode($this->transport->object_unset_nulls($eventId));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "getEventLog";
	     $gs_data_input2939299822982["interfaceName"] = "core.eventbooking.IEventBookingManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	*
	* @author ktonder
	* @return core_eventbooking_EventRequest 
	*/

	public function getEventRequest($gs_multilevel_name, $id) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["id"] = json_encode($this->transport->object_unset_nulls($id));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "getEventRequest";
	     $gs_data_input2939299822982["interfaceName"] = "core.eventbooking.IEventBookingManager";
	     return $this->transport->cast(new core_eventbooking_EventRequest(), $this->transport->sendMessage($gs_data_input2939299822982));
	}

	/**
	*
	* @author ktonder
	* @return core_eventbooking_Event[] 
	*/

	public function getEvents($gs_multilevel_name) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "getEvents";
	     $gs_data_input2939299822982["interfaceName"] = "core.eventbooking.IEventBookingManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	*
	* @author ktonder
	* @return core_eventbooking_Event[] 
	*/

	public function getEventsByLocation($gs_multilevel_name, $locationId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["locationId"] = json_encode($this->transport->object_unset_nulls($locationId));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "getEventsByLocation";
	     $gs_data_input2939299822982["interfaceName"] = "core.eventbooking.IEventBookingManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	*
	* @author ktonder
	* @return core_eventbooking_Event[] 
	*/

	public function getEventsByType($gs_multilevel_name, $eventTypeId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["eventTypeId"] = json_encode($this->transport->object_unset_nulls($eventTypeId));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "getEventsByType";
	     $gs_data_input2939299822982["interfaceName"] = "core.eventbooking.IEventBookingManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	*
	* @author ktonder
	* @return core_eventbooking_Event[] 
	*/

	public function getEventsForDay($gs_multilevel_name, $year, $month, $day) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["year"] = json_encode($this->transport->object_unset_nulls($year));
	     $gs_data_input2939299822982['args']["month"] = json_encode($this->transport->object_unset_nulls($month));
	     $gs_data_input2939299822982['args']["day"] = json_encode($this->transport->object_unset_nulls($day));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "getEventsForDay";
	     $gs_data_input2939299822982["interfaceName"] = "core.eventbooking.IEventBookingManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	*
	* @author ktonder
	* @return core_eventbooking_Event[] 
	*/

	public function getEventsForPdf($gs_multilevel_name) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "getEventsForPdf";
	     $gs_data_input2939299822982["interfaceName"] = "core.eventbooking.IEventBookingManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	*
	* @author ktonder
	* @return core_eventbooking_Event[] 
	*/

	public function getEventsForUser($gs_multilevel_name, $userId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["userId"] = json_encode($this->transport->object_unset_nulls($userId));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "getEventsForUser";
	     $gs_data_input2939299822982["interfaceName"] = "core.eventbooking.IEventBookingManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	*
	* @author ktonder
	* @return core_eventbooking_Event[] 
	*/

	public function getEventsWhereEndDateBetween($gs_multilevel_name, $from, $to) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["from"] = json_encode($this->transport->object_unset_nulls($from));
	     $gs_data_input2939299822982['args']["to"] = json_encode($this->transport->object_unset_nulls($to));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "getEventsWhereEndDateBetween";
	     $gs_data_input2939299822982["interfaceName"] = "core.eventbooking.IEventBookingManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	*
	* @author ktonder
	* @return core_eventbooking_ExternalCertificate[] 
	*/

	public function getExternalCertificates($gs_multilevel_name, $userId, $eventId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["userId"] = json_encode($this->transport->object_unset_nulls($userId));
	     $gs_data_input2939299822982['args']["eventId"] = json_encode($this->transport->object_unset_nulls($eventId));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "getExternalCertificates";
	     $gs_data_input2939299822982["interfaceName"] = "core.eventbooking.IEventBookingManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	*
	* @author ktonder
	* @return core_eventbooking_Location[] 
	*/

	public function getFilteredLocations($gs_multilevel_name) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "getFilteredLocations";
	     $gs_data_input2939299822982["interfaceName"] = "core.eventbooking.IEventBookingManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	*
	* @author ktonder
	* @return public class Date 
	*/

	public function getFromDateTimeFilter($gs_multilevel_name) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "getFromDateTimeFilter";
	     $gs_data_input2939299822982["interfaceName"] = "core.eventbooking.IEventBookingManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	*
	* @author ktonder
	* @return core_eventbooking_EventIntrest[] 
	*/

	public function getInterests($gs_multilevel_name) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "getInterests";
	     $gs_data_input2939299822982["interfaceName"] = "core.eventbooking.IEventBookingManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	*
	* @author ktonder
	* @return core_eventbooking_InvoiceGroup 
	*/

	public function getInvoiceGroup($gs_multilevel_name, $groupId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["groupId"] = json_encode($this->transport->object_unset_nulls($groupId));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "getInvoiceGroup";
	     $gs_data_input2939299822982["interfaceName"] = "core.eventbooking.IEventBookingManager";
	     return $this->transport->cast(new core_eventbooking_InvoiceGroup(), $this->transport->sendMessage($gs_data_input2939299822982));
	}

	/**
	*
	* @author ktonder
	* @return core_eventbooking_InvoiceGroup[] 
	*/

	public function getInvoiceGroups($gs_multilevel_name, $eventId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["eventId"] = json_encode($this->transport->object_unset_nulls($eventId));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "getInvoiceGroups";
	     $gs_data_input2939299822982["interfaceName"] = "core.eventbooking.IEventBookingManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	*
	* @author ktonder
	* @return core_eventbooking_Location 
	*/

	public function getLocation($gs_multilevel_name, $locationId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["locationId"] = json_encode($this->transport->object_unset_nulls($locationId));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "getLocation";
	     $gs_data_input2939299822982["interfaceName"] = "core.eventbooking.IEventBookingManager";
	     return $this->transport->cast(new core_eventbooking_Location(), $this->transport->sendMessage($gs_data_input2939299822982));
	}

	/**
	*
	* @author ktonder
	* @return core_bookingengine_data_BookingItemType[] 
	*/

	public function getMandatoryCourses($gs_multilevel_name, $userId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["userId"] = json_encode($this->transport->object_unset_nulls($userId));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "getMandatoryCourses";
	     $gs_data_input2939299822982["interfaceName"] = "core.eventbooking.IEventBookingManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	*
	* @author ktonder
	* @return core_eventbooking_ManuallyAddedEventParticipant 
	*/

	public function getManuallyAddedEventParticipant($gs_multilevel_name, $id) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["id"] = json_encode($this->transport->object_unset_nulls($id));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "getManuallyAddedEventParticipant";
	     $gs_data_input2939299822982["interfaceName"] = "core.eventbooking.IEventBookingManager";
	     return $this->transport->cast(new core_eventbooking_ManuallyAddedEventParticipant(), $this->transport->sendMessage($gs_data_input2939299822982));
	}

	/**
	*
	* @author ktonder
	* @return core_eventbooking_ManuallyAddedEventParticipant[] 
	*/

	public function getManuallyAddedEvents($gs_multilevel_name, $userId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["userId"] = json_encode($this->transport->object_unset_nulls($userId));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "getManuallyAddedEvents";
	     $gs_data_input2939299822982["interfaceName"] = "core.eventbooking.IEventBookingManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	*
	* @author ktonder
	* @return core_eventbooking_Event[] 
	*/

	public function getMyEvents($gs_multilevel_name) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "getMyEvents";
	     $gs_data_input2939299822982["interfaceName"] = "core.eventbooking.IEventBookingManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	*
	* @author ktonder
	* @return Double 
	*/

	public function getPriceForEventType($gs_multilevel_name, $bookingItemTypeId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["bookingItemTypeId"] = json_encode($this->transport->object_unset_nulls($bookingItemTypeId));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "getPriceForEventType";
	     $gs_data_input2939299822982["interfaceName"] = "core.eventbooking.IEventBookingManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	*
	* @author ktonder
	* @return Double 
	*/

	public function getPriceForEventTypeAndUserId($gs_multilevel_name, $eventId, $userId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["eventId"] = json_encode($this->transport->object_unset_nulls($eventId));
	     $gs_data_input2939299822982['args']["userId"] = json_encode($this->transport->object_unset_nulls($userId));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "getPriceForEventTypeAndUserId";
	     $gs_data_input2939299822982["interfaceName"] = "core.eventbooking.IEventBookingManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	*
	* @author ktonder
	* @return core_eventbooking_Reminder 
	*/

	public function getReminder($gs_multilevel_name, $reminderId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["reminderId"] = json_encode($this->transport->object_unset_nulls($reminderId));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "getReminder";
	     $gs_data_input2939299822982["interfaceName"] = "core.eventbooking.IEventBookingManager";
	     return $this->transport->cast(new core_eventbooking_Reminder(), $this->transport->sendMessage($gs_data_input2939299822982));
	}

	/**
	*
	* @author ktonder
	* @return core_eventbooking_ReminderTemplate 
	*/

	public function getReminderTemplate($gs_multilevel_name, $id) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["id"] = json_encode($this->transport->object_unset_nulls($id));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "getReminderTemplate";
	     $gs_data_input2939299822982["interfaceName"] = "core.eventbooking.IEventBookingManager";
	     return $this->transport->cast(new core_eventbooking_ReminderTemplate(), $this->transport->sendMessage($gs_data_input2939299822982));
	}

	/**
	*
	* @author ktonder
	* @return core_eventbooking_ReminderTemplate[] 
	*/

	public function getReminderTemplates($gs_multilevel_name) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "getReminderTemplates";
	     $gs_data_input2939299822982["interfaceName"] = "core.eventbooking.IEventBookingManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	*
	* @author ktonder
	* @return core_eventbooking_Reminder[] 
	*/

	public function getReminders($gs_multilevel_name, $eventId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["eventId"] = json_encode($this->transport->object_unset_nulls($eventId));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "getReminders";
	     $gs_data_input2939299822982["interfaceName"] = "core.eventbooking.IEventBookingManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	*
	* @author ktonder
	* @return String 
	*/

	public function getSource($gs_multilevel_name, $eventId, $userId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["eventId"] = json_encode($this->transport->object_unset_nulls($eventId));
	     $gs_data_input2939299822982['args']["userId"] = json_encode($this->transport->object_unset_nulls($userId));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "getSource";
	     $gs_data_input2939299822982["interfaceName"] = "core.eventbooking.IEventBookingManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	*
	* @author ktonder
	* @return core_bookingengine_data_EventStatistic[] 
	*/

	public function getStatistic($gs_multilevel_name, $startDate, $stopDate, $groupIds, $eventTypeIds) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["startDate"] = json_encode($this->transport->object_unset_nulls($startDate));
	     $gs_data_input2939299822982['args']["stopDate"] = json_encode($this->transport->object_unset_nulls($stopDate));
	     $gs_data_input2939299822982['args']["groupIds"] = json_encode($this->transport->object_unset_nulls($groupIds));
	     $gs_data_input2939299822982['args']["eventTypeIds"] = json_encode($this->transport->object_unset_nulls($eventTypeIds));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "getStatistic";
	     $gs_data_input2939299822982["interfaceName"] = "core.eventbooking.IEventBookingManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	*
	* @author ktonder
	* @return core_bookingengine_data_EventStatistic[] 
	*/

	public function getStatisticGroupedByLocations($gs_multilevel_name, $startDate, $stopDate, $groupIds, $eventTypeIds) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["startDate"] = json_encode($this->transport->object_unset_nulls($startDate));
	     $gs_data_input2939299822982['args']["stopDate"] = json_encode($this->transport->object_unset_nulls($stopDate));
	     $gs_data_input2939299822982['args']["groupIds"] = json_encode($this->transport->object_unset_nulls($groupIds));
	     $gs_data_input2939299822982['args']["eventTypeIds"] = json_encode($this->transport->object_unset_nulls($eventTypeIds));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "getStatisticGroupedByLocations";
	     $gs_data_input2939299822982["interfaceName"] = "core.eventbooking.IEventBookingManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	*
	* @author ktonder
	* @return public class Date 
	*/

	public function getToDateTimeFilter($gs_multilevel_name) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "getToDateTimeFilter";
	     $gs_data_input2939299822982["interfaceName"] = "core.eventbooking.IEventBookingManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	*
	* @author ktonder
	* @return core_usermanager_data_User[] 
	*/

	public function getUsersForEvent($gs_multilevel_name, $eventId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["eventId"] = json_encode($this->transport->object_unset_nulls($eventId));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "getUsersForEvent";
	     $gs_data_input2939299822982["interfaceName"] = "core.eventbooking.IEventBookingManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	*
	* @author ktonder
	* @return core_usermanager_data_User[] 
	*/

	public function getUsersForEventWaitinglist($gs_multilevel_name, $eventId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["eventId"] = json_encode($this->transport->object_unset_nulls($eventId));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "getUsersForEventWaitinglist";
	     $gs_data_input2939299822982["interfaceName"] = "core.eventbooking.IEventBookingManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	*
	* @author ktonder
	* @return void 
	*/

	public function handleEventRequest($gs_multilevel_name, $id, $accepted) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["id"] = json_encode($this->transport->object_unset_nulls($id));
	     $gs_data_input2939299822982['args']["accepted"] = json_encode($this->transport->object_unset_nulls($accepted));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "handleEventRequest";
	     $gs_data_input2939299822982["interfaceName"] = "core.eventbooking.IEventBookingManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	*
	* @author ktonder
	* @return boolean 
	*/

	public function hasCompletedMandatoryEvent($gs_multilevel_name, $eventTypeId, $userId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["eventTypeId"] = json_encode($this->transport->object_unset_nulls($eventTypeId));
	     $gs_data_input2939299822982['args']["userId"] = json_encode($this->transport->object_unset_nulls($userId));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "hasCompletedMandatoryEvent";
	     $gs_data_input2939299822982["interfaceName"] = "core.eventbooking.IEventBookingManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	*
	* @author ktonder
	* @return boolean 
	*/

	public function hasForcedMandatoryTest($gs_multilevel_name, $eventTypeId, $userId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["eventTypeId"] = json_encode($this->transport->object_unset_nulls($eventTypeId));
	     $gs_data_input2939299822982['args']["userId"] = json_encode($this->transport->object_unset_nulls($userId));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "hasForcedMandatoryTest";
	     $gs_data_input2939299822982["interfaceName"] = "core.eventbooking.IEventBookingManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	*
	* @author ktonder
	* @return boolean 
	*/

	public function isUserSignedUpForEvent($gs_multilevel_name, $eventId, $userId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["eventId"] = json_encode($this->transport->object_unset_nulls($eventId));
	     $gs_data_input2939299822982['args']["userId"] = json_encode($this->transport->object_unset_nulls($userId));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "isUserSignedUpForEvent";
	     $gs_data_input2939299822982["interfaceName"] = "core.eventbooking.IEventBookingManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	*
	* @author ktonder
	* @return boolean 
	*/

	public function isWaitingForConfirmation($gs_multilevel_name, $eventId, $userId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["eventId"] = json_encode($this->transport->object_unset_nulls($eventId));
	     $gs_data_input2939299822982['args']["userId"] = json_encode($this->transport->object_unset_nulls($userId));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "isWaitingForConfirmation";
	     $gs_data_input2939299822982["interfaceName"] = "core.eventbooking.IEventBookingManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	*
	* @author ktonder
	* @return void 
	*/

	public function markAsReady($gs_multilevel_name, $eventId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["eventId"] = json_encode($this->transport->object_unset_nulls($eventId));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "markAsReady";
	     $gs_data_input2939299822982["interfaceName"] = "core.eventbooking.IEventBookingManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	*
	* @author ktonder
	* @return void 
	*/

	public function markQuestBackSent($gs_multilevel_name, $eventId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["eventId"] = json_encode($this->transport->object_unset_nulls($eventId));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "markQuestBackSent";
	     $gs_data_input2939299822982["interfaceName"] = "core.eventbooking.IEventBookingManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	*
	* @author ktonder
	* @return void 
	*/

	public function moveUserToEvent($gs_multilevel_name, $userId, $fromEventId, $toEventId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["userId"] = json_encode($this->transport->object_unset_nulls($userId));
	     $gs_data_input2939299822982['args']["fromEventId"] = json_encode($this->transport->object_unset_nulls($fromEventId));
	     $gs_data_input2939299822982['args']["toEventId"] = json_encode($this->transport->object_unset_nulls($toEventId));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "moveUserToEvent";
	     $gs_data_input2939299822982["interfaceName"] = "core.eventbooking.IEventBookingManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	*
	* @author ktonder
	* @return void 
	*/

	public function registerEventIntrest($gs_multilevel_name, $interest) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["interest"] = json_encode($this->transport->object_unset_nulls($interest));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "registerEventIntrest";
	     $gs_data_input2939299822982["interfaceName"] = "core.eventbooking.IEventBookingManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	*
	* @author ktonder
	* @return void 
	*/

	public function removeInterest($gs_multilevel_name, $bookingItemTypeId, $userId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["bookingItemTypeId"] = json_encode($this->transport->object_unset_nulls($bookingItemTypeId));
	     $gs_data_input2939299822982['args']["userId"] = json_encode($this->transport->object_unset_nulls($userId));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "removeInterest";
	     $gs_data_input2939299822982["interfaceName"] = "core.eventbooking.IEventBookingManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	*
	* @author ktonder
	* @return void 
	*/

	public function removeUserFromEvent($gs_multilevel_name, $eventId, $userId, $silent) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["eventId"] = json_encode($this->transport->object_unset_nulls($eventId));
	     $gs_data_input2939299822982['args']["userId"] = json_encode($this->transport->object_unset_nulls($userId));
	     $gs_data_input2939299822982['args']["silent"] = json_encode($this->transport->object_unset_nulls($silent));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "removeUserFromEvent";
	     $gs_data_input2939299822982["interfaceName"] = "core.eventbooking.IEventBookingManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	*
	* @author ktonder
	* @return void 
	*/

	public function saveBookingTypeMetaData($gs_multilevel_name, $bookingItemTypeMetadata) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["bookingItemTypeMetadata"] = json_encode($this->transport->object_unset_nulls($bookingItemTypeMetadata));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "saveBookingTypeMetaData";
	     $gs_data_input2939299822982["interfaceName"] = "core.eventbooking.IEventBookingManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	*
	* @author ktonder
	* @return void 
	*/

	public function saveCertificate($gs_multilevel_name, $certificate) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["certificate"] = json_encode($this->transport->object_unset_nulls($certificate));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "saveCertificate";
	     $gs_data_input2939299822982["interfaceName"] = "core.eventbooking.IEventBookingManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	*
	* @author ktonder
	* @return void 
	*/

	public function saveEvent($gs_multilevel_name, $event) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["event"] = json_encode($this->transport->object_unset_nulls($event));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "saveEvent";
	     $gs_data_input2939299822982["interfaceName"] = "core.eventbooking.IEventBookingManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	*
	* @author ktonder
	* @return void 
	*/

	public function saveGroupInvoicing($gs_multilevel_name, $invoiceGroup) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["invoiceGroup"] = json_encode($this->transport->object_unset_nulls($invoiceGroup));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "saveGroupInvoicing";
	     $gs_data_input2939299822982["interfaceName"] = "core.eventbooking.IEventBookingManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	*
	* @author ktonder
	* @return void 
	*/

	public function saveLocation($gs_multilevel_name, $location) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["location"] = json_encode($this->transport->object_unset_nulls($location));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "saveLocation";
	     $gs_data_input2939299822982["interfaceName"] = "core.eventbooking.IEventBookingManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	*
	* @author ktonder
	* @return void 
	*/

	public function saveReminderTemplate($gs_multilevel_name, $template) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["template"] = json_encode($this->transport->object_unset_nulls($template));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "saveReminderTemplate";
	     $gs_data_input2939299822982["interfaceName"] = "core.eventbooking.IEventBookingManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	*
	* @author ktonder
	* @return void 
	*/

	public function sendDiplomas($gs_multilevel_name, $reminder, $userid, $base64) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["reminder"] = json_encode($this->transport->object_unset_nulls($reminder));
	     $gs_data_input2939299822982['args']["userid"] = json_encode($this->transport->object_unset_nulls($userid));
	     $gs_data_input2939299822982['args']["base64"] = json_encode($this->transport->object_unset_nulls($base64));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "sendDiplomas";
	     $gs_data_input2939299822982["interfaceName"] = "core.eventbooking.IEventBookingManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	*
	* @author ktonder
	* @return void 
	*/

	public function sendReminder($gs_multilevel_name, $reminder) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["reminder"] = json_encode($this->transport->object_unset_nulls($reminder));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "sendReminder";
	     $gs_data_input2939299822982["interfaceName"] = "core.eventbooking.IEventBookingManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	*
	* @author ktonder
	* @return void 
	*/

	public function setForcedMandatoryAccess($gs_multilevel_name, $userId, $bookingItemIds) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["userId"] = json_encode($this->transport->object_unset_nulls($userId));
	     $gs_data_input2939299822982['args']["bookingItemIds"] = json_encode($this->transport->object_unset_nulls($bookingItemIds));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "setForcedMandatoryAccess";
	     $gs_data_input2939299822982["interfaceName"] = "core.eventbooking.IEventBookingManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	*
	* @author ktonder
	* @return void 
	*/

	public function setGroupInvoiceingStatus($gs_multilevel_name, $eventId, $userId, $groupId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["eventId"] = json_encode($this->transport->object_unset_nulls($eventId));
	     $gs_data_input2939299822982['args']["userId"] = json_encode($this->transport->object_unset_nulls($userId));
	     $gs_data_input2939299822982['args']["groupId"] = json_encode($this->transport->object_unset_nulls($groupId));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "setGroupInvoiceingStatus";
	     $gs_data_input2939299822982["interfaceName"] = "core.eventbooking.IEventBookingManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	*
	* @author ktonder
	* @return void 
	*/

	public function setParticipationStatus($gs_multilevel_name, $eventId, $userId, $status) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["eventId"] = json_encode($this->transport->object_unset_nulls($eventId));
	     $gs_data_input2939299822982['args']["userId"] = json_encode($this->transport->object_unset_nulls($userId));
	     $gs_data_input2939299822982['args']["status"] = json_encode($this->transport->object_unset_nulls($status));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "setParticipationStatus";
	     $gs_data_input2939299822982["interfaceName"] = "core.eventbooking.IEventBookingManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	*
	* @author ktonder
	* @return void 
	*/

	public function setTimeFilter($gs_multilevel_name, $from, $to) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["from"] = json_encode($this->transport->object_unset_nulls($from));
	     $gs_data_input2939299822982['args']["to"] = json_encode($this->transport->object_unset_nulls($to));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "setTimeFilter";
	     $gs_data_input2939299822982["interfaceName"] = "core.eventbooking.IEventBookingManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	*
	* @author ktonder
	* @return void 
	*/

	public function startScheduler($gs_multilevel_name, $scheduler) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["scheduler"] = json_encode($this->transport->object_unset_nulls($scheduler));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "startScheduler";
	     $gs_data_input2939299822982["interfaceName"] = "core.eventbooking.IEventBookingManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	*
	* @author ktonder
	* @return void 
	*/

	public function toggleHide($gs_multilevel_name, $eventId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["eventId"] = json_encode($this->transport->object_unset_nulls($eventId));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "toggleHide";
	     $gs_data_input2939299822982["interfaceName"] = "core.eventbooking.IEventBookingManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	*
	* @author ktonder
	* @return void 
	*/

	public function toggleLocked($gs_multilevel_name, $eventId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["eventId"] = json_encode($this->transport->object_unset_nulls($eventId));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "toggleLocked";
	     $gs_data_input2939299822982["interfaceName"] = "core.eventbooking.IEventBookingManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	*
	* @author ktonder
	* @return void 
	*/

	public function transferUserFromWaitingToEvent($gs_multilevel_name, $userId, $eventId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["userId"] = json_encode($this->transport->object_unset_nulls($userId));
	     $gs_data_input2939299822982['args']["eventId"] = json_encode($this->transport->object_unset_nulls($eventId));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "transferUserFromWaitingToEvent";
	     $gs_data_input2939299822982["interfaceName"] = "core.eventbooking.IEventBookingManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	*
	* @author ktonder
	* @return void 
	*/

	public function unCancelEvent($gs_multilevel_name, $eventId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["eventId"] = json_encode($this->transport->object_unset_nulls($eventId));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "unCancelEvent";
	     $gs_data_input2939299822982["interfaceName"] = "core.eventbooking.IEventBookingManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

}
class APIExcelManager {

	var $transport;
	
	function APIExcelManager($transport) {
		$this->transport = $transport;
	}

	/**
	* Excel management.
	* @return String 
	*/

	public function getBase64Excel($array) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["array"] = json_encode($this->transport->object_unset_nulls($array));
	     $gs_data_input2939299822982["method"] = "getBase64Excel";
	     $gs_data_input2939299822982["interfaceName"] = "core.excelmanager.IExcelManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

}
class APIFileManager {

	var $transport;
	
	function APIFileManager($transport) {
		$this->transport = $transport;
	}

	/**
	*
	* @author ptonder
	* @return String 
	*/

	public function addFileEntry($listId, $entry) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["listId"] = json_encode($this->transport->object_unset_nulls($listId));
	     $gs_data_input2939299822982['args']["entry"] = json_encode($this->transport->object_unset_nulls($entry));
	     $gs_data_input2939299822982["method"] = "addFileEntry";
	     $gs_data_input2939299822982["interfaceName"] = "core.filemanager.IFileManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	*
	* @author ptonder
	* @return void 
	*/

	public function deleteFileEntry($fileId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["fileId"] = json_encode($this->transport->object_unset_nulls($fileId));
	     $gs_data_input2939299822982["method"] = "deleteFileEntry";
	     $gs_data_input2939299822982["interfaceName"] = "core.filemanager.IFileManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	*
	* @author ptonder
	* @return core_filemanager_FileEntry 
	*/

	public function getFile($fileId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["fileId"] = json_encode($this->transport->object_unset_nulls($fileId));
	     $gs_data_input2939299822982["method"] = "getFile";
	     $gs_data_input2939299822982["interfaceName"] = "core.filemanager.IFileManager";
	     return $this->transport->cast(new core_filemanager_FileEntry(), $this->transport->sendMessage($gs_data_input2939299822982));
	}

	/**
	*
	* @author ptonder
	* @return core_filemanager_FileEntry[] 
	*/

	public function getFiles($listId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["listId"] = json_encode($this->transport->object_unset_nulls($listId));
	     $gs_data_input2939299822982["method"] = "getFiles";
	     $gs_data_input2939299822982["interfaceName"] = "core.filemanager.IFileManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	*
	* @author ptonder
	* @return void 
	*/

	public function renameFileEntry($fileId, $newName) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["fileId"] = json_encode($this->transport->object_unset_nulls($fileId));
	     $gs_data_input2939299822982['args']["newName"] = json_encode($this->transport->object_unset_nulls($newName));
	     $gs_data_input2939299822982["method"] = "renameFileEntry";
	     $gs_data_input2939299822982["interfaceName"] = "core.filemanager.IFileManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

}
class APIFooterManager {

	var $transport;
	
	function APIFooterManager($transport) {
		$this->transport = $transport;
	}

	/**
	* Get the current configuration.
	* @throws ErrorException
	* @return app_footermanager_data_Configuration 
	*/

	public function getConfiguration() {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982["method"] = "getConfiguration";
	     $gs_data_input2939299822982["interfaceName"] = "app.footer.IFooterManager";
	     return $this->transport->cast(new app_footermanager_data_Configuration(), $this->transport->sendMessage($gs_data_input2939299822982));
	}

	/**
	* Change the layout for the columns.<br>
	* Defaults to 1 if nothing else is set.<br>
	* @param numberOfColumns The number of columns you want to display.
	* @throws ErrorException
	* @return app_footermanager_data_Configuration 
	*/

	public function setLayout($numberOfColumns) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["numberOfColumns"] = json_encode($this->transport->object_unset_nulls($numberOfColumns));
	     $gs_data_input2939299822982["method"] = "setLayout";
	     $gs_data_input2939299822982["interfaceName"] = "app.footer.IFooterManager";
	     return $this->transport->cast(new app_footermanager_data_Configuration(), $this->transport->sendMessage($gs_data_input2939299822982));
	}

	/**
	* Change the type of a given column.
	* @param column The column it regards
	* @param type The type,0 for text, 1 for list.
	* @throws ErrorException
	* @return app_footermanager_data_Configuration 
	*/

	public function setType($column, $type) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["column"] = json_encode($this->transport->object_unset_nulls($column));
	     $gs_data_input2939299822982['args']["type"] = json_encode($this->transport->object_unset_nulls($type));
	     $gs_data_input2939299822982["method"] = "setType";
	     $gs_data_input2939299822982["interfaceName"] = "app.footer.IFooterManager";
	     return $this->transport->cast(new app_footermanager_data_Configuration(), $this->transport->sendMessage($gs_data_input2939299822982));
	}

}
class APIFtpManager {

	var $transport;
	
	function APIFtpManager($transport) {
		$this->transport = $transport;
	}

}
class APIGalleryManager {

	var $transport;
	
	function APIGalleryManager($transport) {
		$this->transport = $transport;
	}

	/**
	* Add a image to a given gallery.
	* @param galleryId The id for the gallery, if this does not exists, it creates a gallery related to this id.
	* @param imageId The image id generated by the filemanager.
	* @param description A description to the image.
	* @param title A title to the image.
	* @throws ErrorException
	* @return app_gallerymanager_data_ImageEntry 
	*/

	public function addImageToGallery($galleryId, $imageId, $description, $title) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["galleryId"] = json_encode($this->transport->object_unset_nulls($galleryId));
	     $gs_data_input2939299822982['args']["imageId"] = json_encode($this->transport->object_unset_nulls($imageId));
	     $gs_data_input2939299822982['args']["description"] = json_encode($this->transport->object_unset_nulls($description));
	     $gs_data_input2939299822982['args']["title"] = json_encode($this->transport->object_unset_nulls($title));
	     $gs_data_input2939299822982["method"] = "addImageToGallery";
	     $gs_data_input2939299822982["interfaceName"] = "core.gallerymanager.IGalleryManager";
	     return $this->transport->cast(new app_gallerymanager_data_ImageEntry(), $this->transport->sendMessage($gs_data_input2939299822982));
	}

	/**
	* Create a new gallery.
	* @throws ErrorException
	* @return String 
	*/

	public function createImageGallery() {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982["method"] = "createImageGallery";
	     $gs_data_input2939299822982["interfaceName"] = "core.gallerymanager.IGalleryManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Remove an already existing image.
	* @param entryId The id of the image to remove.
	* @throws ErrorException
	* @return void 
	*/

	public function deleteImage($entryId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["entryId"] = json_encode($this->transport->object_unset_nulls($entryId));
	     $gs_data_input2939299822982["method"] = "deleteImage";
	     $gs_data_input2939299822982["interfaceName"] = "core.gallerymanager.IGalleryManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Fetch all images binded to a given gallery id.
	* @param id The id to fetch the entries from.
	* @throws ErrorException
	* @return app_gallerymanager_data_ImageEntry[] 
	*/

	public function getAllImages($id) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["id"] = json_encode($this->transport->object_unset_nulls($id));
	     $gs_data_input2939299822982["method"] = "getAllImages";
	     $gs_data_input2939299822982["interfaceName"] = "core.gallerymanager.IGalleryManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Find an existing entry.
	* @param id The id for search for (found in the ImageEntry object)
	* @throws ErrorException
	* @return app_gallerymanager_data_ImageEntry 
	*/

	public function getEntry($id) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["id"] = json_encode($this->transport->object_unset_nulls($id));
	     $gs_data_input2939299822982["method"] = "getEntry";
	     $gs_data_input2939299822982["interfaceName"] = "core.gallerymanager.IGalleryManager";
	     return $this->transport->cast(new app_gallerymanager_data_ImageEntry(), $this->transport->sendMessage($gs_data_input2939299822982));
	}

	/**
	* Update an already existing image.
	* @param entry The entry to update.
	* @throws ErrorException
	* @return void 
	*/

	public function saveEntry($entry) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["entry"] = json_encode($this->transport->object_unset_nulls($entry));
	     $gs_data_input2939299822982["method"] = "saveEntry";
	     $gs_data_input2939299822982["interfaceName"] = "core.gallerymanager.IGalleryManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

}
class APIGetShop {

	var $transport;
	
	function APIGetShop($transport) {
		$this->transport = $transport;
	}

	/**
	*
	* @param code
	* @return void 
	*/

	public function addToDibsAutoCollect($orderId, $storeId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["orderId"] = json_encode($this->transport->object_unset_nulls($orderId));
	     $gs_data_input2939299822982['args']["storeId"] = json_encode($this->transport->object_unset_nulls($storeId));
	     $gs_data_input2939299822982["method"] = "addToDibsAutoCollect";
	     $gs_data_input2939299822982["interfaceName"] = "core.getshop.IGetShop";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	*
	* @param userId
	* @param partner
	* @param password
	* @throws ErrorException
	* @return void 
	*/

	public function addUserToPartner($userId, $partner, $password) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["userId"] = json_encode($this->transport->object_unset_nulls($userId));
	     $gs_data_input2939299822982['args']["partner"] = json_encode($this->transport->object_unset_nulls($partner));
	     $gs_data_input2939299822982['args']["password"] = json_encode($this->transport->object_unset_nulls($password));
	     $gs_data_input2939299822982["method"] = "addUserToPartner";
	     $gs_data_input2939299822982["interfaceName"] = "core.getshop.IGetShop";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Create a new webpage
	* @return void 
	*/

	public function createNewStore($startData) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["startData"] = json_encode($this->transport->object_unset_nulls($startData));
	     $gs_data_input2939299822982["method"] = "createNewStore";
	     $gs_data_input2939299822982["interfaceName"] = "core.getshop.IGetShop";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Create a new webpage
	* @return core_storemanager_data_Store 
	*/

	public function createWebPage($webpageData) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["webpageData"] = json_encode($this->transport->object_unset_nulls($webpageData));
	     $gs_data_input2939299822982["method"] = "createWebPage";
	     $gs_data_input2939299822982["interfaceName"] = "core.getshop.IGetShop";
	     return $this->transport->cast(new core_storemanager_data_Store(), $this->transport->sendMessage($gs_data_input2939299822982));
	}

	/**
	* Find the store address for a given application.
	* @param uuid The appid.
	* @throws ErrorException
	* @return String 
	*/

	public function findAddressForApplication($uuid) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["uuid"] = json_encode($this->transport->object_unset_nulls($uuid));
	     $gs_data_input2939299822982["method"] = "findAddressForApplication";
	     $gs_data_input2939299822982["interfaceName"] = "core.getshop.IGetShop";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Need to figure out what address is connected to a specific uuid?
	* Remember this is query is quite slow. so cache the result.
	* @param uuid
	* @throws ErrorException
	* @return String 
	*/

	public function findAddressForUUID($uuid) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["uuid"] = json_encode($this->transport->object_unset_nulls($uuid));
	     $gs_data_input2939299822982["method"] = "findAddressForUUID";
	     $gs_data_input2939299822982["interfaceName"] = "core.getshop.IGetShop";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Create a new webpage
	* @return String 
	*/

	public function getBase64EncodedPDFWebPage($urlToPage) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["urlToPage"] = json_encode($this->transport->object_unset_nulls($urlToPage));
	     $gs_data_input2939299822982["method"] = "getBase64EncodedPDFWebPage";
	     $gs_data_input2939299822982["interfaceName"] = "core.getshop.IGetShop";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Create a new webpage
	* @return String 
	*/

	public function getBase64EncodedPDFWebPageFromHtml($html) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["html"] = json_encode($this->transport->object_unset_nulls($html));
	     $gs_data_input2939299822982["method"] = "getBase64EncodedPDFWebPageFromHtml";
	     $gs_data_input2939299822982["interfaceName"] = "core.getshop.IGetShop";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	*
	* @param code
	* @return core_getshop_data_DibsAutoCollectData[] 
	*/

	public function getOrdersToAutoPayFromDibs() {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982["method"] = "getOrdersToAutoPayFromDibs";
	     $gs_data_input2939299822982["interfaceName"] = "core.getshop.IGetShop";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Get partner data for this user.
	* @throws ErrorException
	* @return core_getshop_data_PartnerData 
	*/

	public function getPartnerData($partnerId, $password) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["partnerId"] = json_encode($this->transport->object_unset_nulls($partnerId));
	     $gs_data_input2939299822982['args']["password"] = json_encode($this->transport->object_unset_nulls($password));
	     $gs_data_input2939299822982["method"] = "getPartnerData";
	     $gs_data_input2939299822982["interfaceName"] = "core.getshop.IGetShop";
	     return $this->transport->cast(new core_getshop_data_PartnerData(), $this->transport->sendMessage($gs_data_input2939299822982));
	}

	/**
	*
	* @param code
	* @return core_getshop_data_GetshopStore[] 
	*/

	public function getStores($code) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["code"] = json_encode($this->transport->object_unset_nulls($code));
	     $gs_data_input2939299822982["method"] = "getStores";
	     $gs_data_input2939299822982["interfaceName"] = "core.getshop.IGetShop";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Create a new webpage
	* @return void 
	*/

	public function saveSmsCallback($smsResponses) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["smsResponses"] = json_encode($this->transport->object_unset_nulls($smsResponses));
	     $gs_data_input2939299822982["method"] = "saveSmsCallback";
	     $gs_data_input2939299822982["interfaceName"] = "core.getshop.IGetShop";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	*
	* @param ids
	* @throws ErrorException
	* @return void 
	*/

	public function setApplicationList($ids, $partnerId, $password) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["ids"] = json_encode($this->transport->object_unset_nulls($ids));
	     $gs_data_input2939299822982['args']["partnerId"] = json_encode($this->transport->object_unset_nulls($partnerId));
	     $gs_data_input2939299822982['args']["password"] = json_encode($this->transport->object_unset_nulls($password));
	     $gs_data_input2939299822982["method"] = "setApplicationList";
	     $gs_data_input2939299822982["interfaceName"] = "core.getshop.IGetShop";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Create a new webpage
	* @return String 
	*/

	public function startStoreFromStore($startData) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["startData"] = json_encode($this->transport->object_unset_nulls($startData));
	     $gs_data_input2939299822982["method"] = "startStoreFromStore";
	     $gs_data_input2939299822982["interfaceName"] = "core.getshop.IGetShop";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Create a new webpage
	* @return void 
	*/

	public function toggleRemoteEditing() {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982["method"] = "toggleRemoteEditing";
	     $gs_data_input2939299822982["interfaceName"] = "core.getshop.IGetShop";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Create a new webpage
	* @return void 
	*/

	public function triggerPullRequest($storeId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["storeId"] = json_encode($this->transport->object_unset_nulls($storeId));
	     $gs_data_input2939299822982["method"] = "triggerPullRequest";
	     $gs_data_input2939299822982["interfaceName"] = "core.getshop.IGetShop";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

}
class APIGetShopAccountingManager {

	var $transport;
	
	function APIGetShopAccountingManager($transport) {
		$this->transport = $transport;
	}

	/**
	*
	* @author ktonder
	* @return boolean 
	*/

	public function canOrderBeTransferredDirect($orderId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["orderId"] = json_encode($this->transport->object_unset_nulls($orderId));
	     $gs_data_input2939299822982["method"] = "canOrderBeTransferredDirect";
	     $gs_data_input2939299822982["interfaceName"] = "core.getshopaccounting.IGetShopAccountingManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	*
	* @author ktonder
	* @return String[] 
	*/

	public function createNextOrderFile($endDate) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["endDate"] = json_encode($this->transport->object_unset_nulls($endDate));
	     $gs_data_input2939299822982["method"] = "createNextOrderFile";
	     $gs_data_input2939299822982["interfaceName"] = "core.getshopaccounting.IGetShopAccountingManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	*
	* @author ktonder
	* @return void 
	*/

	public function deleteFile($fileId, $password) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["fileId"] = json_encode($this->transport->object_unset_nulls($fileId));
	     $gs_data_input2939299822982['args']["password"] = json_encode($this->transport->object_unset_nulls($password));
	     $gs_data_input2939299822982["method"] = "deleteFile";
	     $gs_data_input2939299822982["interfaceName"] = "core.getshopaccounting.IGetShopAccountingManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	*
	* @author ktonder
	* @return public class HashMap<K,V> 
	*/

	public function getConfigOptions($systemType) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["systemType"] = json_encode($this->transport->object_unset_nulls($systemType));
	     $gs_data_input2939299822982["method"] = "getConfigOptions";
	     $gs_data_input2939299822982["interfaceName"] = "core.getshopaccounting.IGetShopAccountingManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	*
	* @author ktonder
	* @return public class HashMap<K,V> 
	*/

	public function getConfigs($systemType) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["systemType"] = json_encode($this->transport->object_unset_nulls($systemType));
	     $gs_data_input2939299822982["method"] = "getConfigs";
	     $gs_data_input2939299822982["interfaceName"] = "core.getshopaccounting.IGetShopAccountingManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	*
	* @author ktonder
	* @return String 
	*/

	public function getCurrentSystemInvoices() {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982["method"] = "getCurrentSystemInvoices";
	     $gs_data_input2939299822982["interfaceName"] = "core.getshopaccounting.IGetShopAccountingManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	*
	* @author ktonder
	* @return String 
	*/

	public function getCurrentSystemOther() {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982["method"] = "getCurrentSystemOther";
	     $gs_data_input2939299822982["interfaceName"] = "core.getshopaccounting.IGetShopAccountingManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	*
	* @author ktonder
	* @return public class HashMap<K,V> 
	*/

	public function getListOfSystems() {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982["method"] = "getListOfSystems";
	     $gs_data_input2939299822982["interfaceName"] = "core.getshopaccounting.IGetShopAccountingManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	*
	* @author ktonder
	* @return String[] 
	*/

	public function getLogEntries() {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982["method"] = "getLogEntries";
	     $gs_data_input2939299822982["interfaceName"] = "core.getshopaccounting.IGetShopAccountingManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	*
	* @author ktonder
	* @return core_accountingmanager_SavedOrderFile 
	*/

	public function getOrderFile($fileId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["fileId"] = json_encode($this->transport->object_unset_nulls($fileId));
	     $gs_data_input2939299822982["method"] = "getOrderFile";
	     $gs_data_input2939299822982["interfaceName"] = "core.getshopaccounting.IGetShopAccountingManager";
	     return $this->transport->cast(new core_accountingmanager_SavedOrderFile(), $this->transport->sendMessage($gs_data_input2939299822982));
	}

	/**
	*
	* @author ktonder
	* @return core_accountingmanager_SavedOrderFile[] 
	*/

	public function getOrderFiles() {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982["method"] = "getOrderFiles";
	     $gs_data_input2939299822982["interfaceName"] = "core.getshopaccounting.IGetShopAccountingManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	*
	* @author ktonder
	* @return String[] 
	*/

	public function getOrdersToIncludeForNextTransfer($endDate) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["endDate"] = json_encode($this->transport->object_unset_nulls($endDate));
	     $gs_data_input2939299822982["method"] = "getOrdersToIncludeForNextTransfer";
	     $gs_data_input2939299822982["interfaceName"] = "core.getshopaccounting.IGetShopAccountingManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	*
	* @author ktonder
	* @return public class Date 
	*/

	public function getPreviouseEndDate() {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982["method"] = "getPreviouseEndDate";
	     $gs_data_input2939299822982["interfaceName"] = "core.getshopaccounting.IGetShopAccountingManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	*
	* @author ktonder
	* @return void 
	*/

	public function setConfig($systemType, $key, $value) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["systemType"] = json_encode($this->transport->object_unset_nulls($systemType));
	     $gs_data_input2939299822982['args']["key"] = json_encode($this->transport->object_unset_nulls($key));
	     $gs_data_input2939299822982['args']["value"] = json_encode($this->transport->object_unset_nulls($value));
	     $gs_data_input2939299822982["method"] = "setConfig";
	     $gs_data_input2939299822982["interfaceName"] = "core.getshopaccounting.IGetShopAccountingManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	*
	* @author ktonder
	* @return void 
	*/

	public function setSystemTypeInvoice($systemType) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["systemType"] = json_encode($this->transport->object_unset_nulls($systemType));
	     $gs_data_input2939299822982["method"] = "setSystemTypeInvoice";
	     $gs_data_input2939299822982["interfaceName"] = "core.getshopaccounting.IGetShopAccountingManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	*
	* @author ktonder
	* @return void 
	*/

	public function setSystemTypeOther($systemType) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["systemType"] = json_encode($this->transport->object_unset_nulls($systemType));
	     $gs_data_input2939299822982["method"] = "setSystemTypeOther";
	     $gs_data_input2939299822982["interfaceName"] = "core.getshopaccounting.IGetShopAccountingManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	*
	* @author ktonder
	* @return String[] 
	*/

	public function transferDirect($orderId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["orderId"] = json_encode($this->transport->object_unset_nulls($orderId));
	     $gs_data_input2939299822982["method"] = "transferDirect";
	     $gs_data_input2939299822982["interfaceName"] = "core.getshopaccounting.IGetShopAccountingManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

}
class APIGetShopApplicationPool {

	var $transport;
	
	function APIGetShopApplicationPool($transport) {
		$this->transport = $transport;
	}

	/**
	* Save an application
	*
	* @param application
	* @return void 
	*/

	public function deleteApplication($applicationId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["applicationId"] = json_encode($this->transport->object_unset_nulls($applicationId));
	     $gs_data_input2939299822982["method"] = "deleteApplication";
	     $gs_data_input2939299822982["interfaceName"] = "core.applications.IGetShopApplicationPool";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Get an application by an given id.
	*
	* @param applicationId
	* @return core_appmanager_data_Application 
	*/

	public function get($applicationId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["applicationId"] = json_encode($this->transport->object_unset_nulls($applicationId));
	     $gs_data_input2939299822982["method"] = "get";
	     $gs_data_input2939299822982["interfaceName"] = "core.applications.IGetShopApplicationPool";
	     return $this->transport->cast(new core_appmanager_data_Application(), $this->transport->sendMessage($gs_data_input2939299822982));
	}

	/**
	* Returns a list of all available applications.
	*
	* @return core_appmanager_data_Application[] 
	*/

	public function getApplications() {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982["method"] = "getApplications";
	     $gs_data_input2939299822982["interfaceName"] = "core.applications.IGetShopApplicationPool";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Save an application
	*
	* @param application
	* @return void 
	*/

	public function saveApplication($application) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["application"] = json_encode($this->transport->object_unset_nulls($application));
	     $gs_data_input2939299822982["method"] = "saveApplication";
	     $gs_data_input2939299822982["interfaceName"] = "core.applications.IGetShopApplicationPool";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

}
class APIGetShopLockManager {

	var $transport;
	
	function APIGetShopLockManager($transport) {
		$this->transport = $transport;
	}

	/**
	*
	* Communicating with the getshop lock.
	* @author boggi
	* @return void 
	*/

	public function accessEvent($gs_multilevel_name, $id, $code, $domain) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["id"] = json_encode($this->transport->object_unset_nulls($id));
	     $gs_data_input2939299822982['args']["code"] = json_encode($this->transport->object_unset_nulls($code));
	     $gs_data_input2939299822982['args']["domain"] = json_encode($this->transport->object_unset_nulls($domain));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "accessEvent";
	     $gs_data_input2939299822982["interfaceName"] = "core.getshoplock.IGetShopLockManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	*
	* Communicating with the getshop lock.
	* @author boggi
	* @return void 
	*/

	public function addLockLogs($gs_multilevel_name, $logs, $code) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["logs"] = json_encode($this->transport->object_unset_nulls($logs));
	     $gs_data_input2939299822982['args']["code"] = json_encode($this->transport->object_unset_nulls($code));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "addLockLogs";
	     $gs_data_input2939299822982["interfaceName"] = "core.getshoplock.IGetShopLockManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	*
	* Communicating with the getshop lock.
	* @author boggi
	* @return void 
	*/

	public function changeZWaveId($gs_multilevel_name, $lockId, $newId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["lockId"] = json_encode($this->transport->object_unset_nulls($lockId));
	     $gs_data_input2939299822982['args']["newId"] = json_encode($this->transport->object_unset_nulls($newId));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "changeZWaveId";
	     $gs_data_input2939299822982["interfaceName"] = "core.getshoplock.IGetShopLockManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	*
	* Communicating with the getshop lock.
	* @author boggi
	* @return void 
	*/

	public function checkIfAllIsOk($gs_multilevel_name) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "checkIfAllIsOk";
	     $gs_data_input2939299822982["interfaceName"] = "core.getshoplock.IGetShopLockManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	*
	* Communicating with the getshop lock.
	* @author boggi
	* @return void 
	*/

	public function deleteAllDevices($gs_multilevel_name, $password, $source) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["password"] = json_encode($this->transport->object_unset_nulls($password));
	     $gs_data_input2939299822982['args']["source"] = json_encode($this->transport->object_unset_nulls($source));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "deleteAllDevices";
	     $gs_data_input2939299822982["interfaceName"] = "core.getshoplock.IGetShopLockManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	*
	* Communicating with the getshop lock.
	* @author boggi
	* @return void 
	*/

	public function deleteLock($gs_multilevel_name, $code, $lockId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["code"] = json_encode($this->transport->object_unset_nulls($code));
	     $gs_data_input2939299822982['args']["lockId"] = json_encode($this->transport->object_unset_nulls($lockId));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "deleteLock";
	     $gs_data_input2939299822982["interfaceName"] = "core.getshoplock.IGetShopLockManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	*
	* Communicating with the getshop lock.
	* @author boggi
	* @return void 
	*/

	public function finalizeLocks($gs_multilevel_name) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "finalizeLocks";
	     $gs_data_input2939299822982["interfaceName"] = "core.getshoplock.IGetShopLockManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	*
	* Communicating with the getshop lock.
	* @author boggi
	* @return core_getshop_data_GetShopDevice[] 
	*/

	public function getAllLocks($gs_multilevel_name, $serverSource) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["serverSource"] = json_encode($this->transport->object_unset_nulls($serverSource));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "getAllLocks";
	     $gs_data_input2939299822982["interfaceName"] = "core.getshoplock.IGetShopLockManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	*
	* Communicating with the getshop lock.
	* @author boggi
	* @return String 
	*/

	public function getCodeForLock($gs_multilevel_name, $lockId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["lockId"] = json_encode($this->transport->object_unset_nulls($lockId));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "getCodeForLock";
	     $gs_data_input2939299822982["interfaceName"] = "core.getshoplock.IGetShopLockManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	*
	* Communicating with the getshop lock.
	* @author boggi
	* @return String[] 
	*/

	public function getCodesInUse($gs_multilevel_name) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "getCodesInUse";
	     $gs_data_input2939299822982["interfaceName"] = "core.getshoplock.IGetShopLockManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	*
	* Communicating with the getshop lock.
	* @author boggi
	* @return core_getshop_data_GetShopDevice 
	*/

	public function getDevice($gs_multilevel_name, $deviceId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["deviceId"] = json_encode($this->transport->object_unset_nulls($deviceId));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "getDevice";
	     $gs_data_input2939299822982["interfaceName"] = "core.getshoplock.IGetShopLockManager";
	     return $this->transport->cast(new core_getshop_data_GetShopDevice(), $this->transport->sendMessage($gs_data_input2939299822982));
	}

	/**
	*
	* Communicating with the getshop lock.
	* @author boggi
	* @return core_getshop_data_GetShopLockMasterCodes 
	*/

	public function getMasterCodes($gs_multilevel_name) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "getMasterCodes";
	     $gs_data_input2939299822982["interfaceName"] = "core.getshoplock.IGetShopLockManager";
	     return $this->transport->cast(new core_getshop_data_GetShopLockMasterCodes(), $this->transport->sendMessage($gs_data_input2939299822982));
	}

	/**
	*
	* Communicating with the getshop lock.
	* @author boggi
	* @return boolean 
	*/

	public function getUpdatesOnLock($gs_multilevel_name) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "getUpdatesOnLock";
	     $gs_data_input2939299822982["interfaceName"] = "core.getshoplock.IGetShopLockManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	*
	* Communicating with the getshop lock.
	* @author boggi
	* @return void 
	*/

	public function openLock($gs_multilevel_name, $lockId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["lockId"] = json_encode($this->transport->object_unset_nulls($lockId));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "openLock";
	     $gs_data_input2939299822982["interfaceName"] = "core.getshoplock.IGetShopLockManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	*
	* Communicating with the getshop lock.
	* @author boggi
	* @return boolean 
	*/

	public function pingLock($gs_multilevel_name, $lockId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["lockId"] = json_encode($this->transport->object_unset_nulls($lockId));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "pingLock";
	     $gs_data_input2939299822982["interfaceName"] = "core.getshoplock.IGetShopLockManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	*
	* Communicating with the getshop lock.
	* @author boggi
	* @return String 
	*/

	public function pushCode($gs_multilevel_name, $id, $door, $code, $start, $end) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["id"] = json_encode($this->transport->object_unset_nulls($id));
	     $gs_data_input2939299822982['args']["door"] = json_encode($this->transport->object_unset_nulls($door));
	     $gs_data_input2939299822982['args']["code"] = json_encode($this->transport->object_unset_nulls($code));
	     $gs_data_input2939299822982['args']["start"] = json_encode($this->transport->object_unset_nulls($start));
	     $gs_data_input2939299822982['args']["end"] = json_encode($this->transport->object_unset_nulls($end));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "pushCode";
	     $gs_data_input2939299822982["interfaceName"] = "core.getshoplock.IGetShopLockManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	*
	* Communicating with the getshop lock.
	* @author boggi
	* @return void 
	*/

	public function refreshAllLocks($gs_multilevel_name, $source) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["source"] = json_encode($this->transport->object_unset_nulls($source));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "refreshAllLocks";
	     $gs_data_input2939299822982["interfaceName"] = "core.getshoplock.IGetShopLockManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	*
	* Communicating with the getshop lock.
	* @author boggi
	* @return void 
	*/

	public function refreshLock($gs_multilevel_name, $lockId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["lockId"] = json_encode($this->transport->object_unset_nulls($lockId));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "refreshLock";
	     $gs_data_input2939299822982["interfaceName"] = "core.getshoplock.IGetShopLockManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	*
	* Communicating with the getshop lock.
	* @author boggi
	* @return void 
	*/

	public function removeAllUnusedLocks($gs_multilevel_name, $source) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["source"] = json_encode($this->transport->object_unset_nulls($source));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "removeAllUnusedLocks";
	     $gs_data_input2939299822982["interfaceName"] = "core.getshoplock.IGetShopLockManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	*
	* Communicating with the getshop lock.
	* @author boggi
	* @return void 
	*/

	public function removeCodeOnLock($gs_multilevel_name, $lockId, $room) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["lockId"] = json_encode($this->transport->object_unset_nulls($lockId));
	     $gs_data_input2939299822982['args']["room"] = json_encode($this->transport->object_unset_nulls($room));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "removeCodeOnLock";
	     $gs_data_input2939299822982["interfaceName"] = "core.getshoplock.IGetShopLockManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	*
	* Communicating with the getshop lock.
	* @author boggi
	* @return void 
	*/

	public function saveLock($gs_multilevel_name, $lock) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["lock"] = json_encode($this->transport->object_unset_nulls($lock));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "saveLock";
	     $gs_data_input2939299822982["interfaceName"] = "core.getshoplock.IGetShopLockManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	*
	* Communicating with the getshop lock.
	* @author boggi
	* @return void 
	*/

	public function saveMastercodes($gs_multilevel_name, $codes) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["codes"] = json_encode($this->transport->object_unset_nulls($codes));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "saveMastercodes";
	     $gs_data_input2939299822982["interfaceName"] = "core.getshoplock.IGetShopLockManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	*
	* Communicating with the getshop lock.
	* @author boggi
	* @return void 
	*/

	public function setMasterCode($gs_multilevel_name, $slot, $code) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["slot"] = json_encode($this->transport->object_unset_nulls($slot));
	     $gs_data_input2939299822982['args']["code"] = json_encode($this->transport->object_unset_nulls($code));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "setMasterCode";
	     $gs_data_input2939299822982["interfaceName"] = "core.getshoplock.IGetShopLockManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	*
	* Communicating with the getshop lock.
	* @author boggi
	* @return void 
	*/

	public function stopUpdatesOnLock($gs_multilevel_name) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "stopUpdatesOnLock";
	     $gs_data_input2939299822982["interfaceName"] = "core.getshoplock.IGetShopLockManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	*
	* Communicating with the getshop lock.
	* @author boggi
	* @return void 
	*/

	public function triggerFetchingOfCodes($gs_multilevel_name, $ip, $deviceId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["ip"] = json_encode($this->transport->object_unset_nulls($ip));
	     $gs_data_input2939299822982['args']["deviceId"] = json_encode($this->transport->object_unset_nulls($deviceId));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "triggerFetchingOfCodes";
	     $gs_data_input2939299822982["interfaceName"] = "core.getshoplock.IGetShopLockManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	*
	* Communicating with the getshop lock.
	* @author boggi
	* @return void 
	*/

	public function triggerMassUpdateOfLockLogs($gs_multilevel_name) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "triggerMassUpdateOfLockLogs";
	     $gs_data_input2939299822982["interfaceName"] = "core.getshoplock.IGetShopLockManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

}
class APIGetShopLockSystemManager {

	var $transport;
	
	function APIGetShopLockSystemManager($transport) {
		$this->transport = $transport;
	}

	/***** End group code stuff ***** @return void 
	*/

	public function addTransactionHistory($tokenId, $lockId, $timeStamp, $userSlot) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["tokenId"] = json_encode($this->transport->object_unset_nulls($tokenId));
	     $gs_data_input2939299822982['args']["lockId"] = json_encode($this->transport->object_unset_nulls($lockId));
	     $gs_data_input2939299822982['args']["timeStamp"] = json_encode($this->transport->object_unset_nulls($timeStamp));
	     $gs_data_input2939299822982['args']["userSlot"] = json_encode($this->transport->object_unset_nulls($userSlot));
	     $gs_data_input2939299822982["method"] = "addTransactionHistory";
	     $gs_data_input2939299822982["interfaceName"] = "core.getshoplocksystem.IGetShopLockSystemManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/***** Group code stuff ***** @return void 
	*/

	public function changeCode($groupId, $slotId, $pinCode, $cardId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["groupId"] = json_encode($this->transport->object_unset_nulls($groupId));
	     $gs_data_input2939299822982['args']["slotId"] = json_encode($this->transport->object_unset_nulls($slotId));
	     $gs_data_input2939299822982['args']["pinCode"] = json_encode($this->transport->object_unset_nulls($pinCode));
	     $gs_data_input2939299822982['args']["cardId"] = json_encode($this->transport->object_unset_nulls($cardId));
	     $gs_data_input2939299822982["method"] = "changeCode";
	     $gs_data_input2939299822982["interfaceName"] = "core.getshoplocksystem.IGetShopLockSystemManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/***** Group code stuff ***** @return void 
	*/

	public function changeDatesForSlot($groupId, $slotId, $startDate, $endDate) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["groupId"] = json_encode($this->transport->object_unset_nulls($groupId));
	     $gs_data_input2939299822982['args']["slotId"] = json_encode($this->transport->object_unset_nulls($slotId));
	     $gs_data_input2939299822982['args']["startDate"] = json_encode($this->transport->object_unset_nulls($startDate));
	     $gs_data_input2939299822982['args']["endDate"] = json_encode($this->transport->object_unset_nulls($endDate));
	     $gs_data_input2939299822982["method"] = "changeDatesForSlot";
	     $gs_data_input2939299822982["interfaceName"] = "core.getshoplocksystem.IGetShopLockSystemManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	*
	* @author ktonder
	* @return core_getshoplocksystem_LockGroup 
	*/

	public function createNewLockGroup($name, $maxUsersInGroup) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["name"] = json_encode($this->transport->object_unset_nulls($name));
	     $gs_data_input2939299822982['args']["maxUsersInGroup"] = json_encode($this->transport->object_unset_nulls($maxUsersInGroup));
	     $gs_data_input2939299822982["method"] = "createNewLockGroup";
	     $gs_data_input2939299822982["interfaceName"] = "core.getshoplocksystem.IGetShopLockSystemManager";
	     return $this->transport->cast(new core_getshoplocksystem_LockGroup(), $this->transport->sendMessage($gs_data_input2939299822982));
	}

	/**
	*
	* @author ktonder
	* @return void 
	*/

	public function createServer($type, $hostname, $userName, $password, $givenName, $token) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["type"] = json_encode($this->transport->object_unset_nulls($type));
	     $gs_data_input2939299822982['args']["hostname"] = json_encode($this->transport->object_unset_nulls($hostname));
	     $gs_data_input2939299822982['args']["userName"] = json_encode($this->transport->object_unset_nulls($userName));
	     $gs_data_input2939299822982['args']["password"] = json_encode($this->transport->object_unset_nulls($password));
	     $gs_data_input2939299822982['args']["givenName"] = json_encode($this->transport->object_unset_nulls($givenName));
	     $gs_data_input2939299822982['args']["token"] = json_encode($this->transport->object_unset_nulls($token));
	     $gs_data_input2939299822982["method"] = "createServer";
	     $gs_data_input2939299822982["interfaceName"] = "core.getshoplocksystem.IGetShopLockSystemManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	*
	*
	* @param groupId
	* @param lockIds Key = serverId, and value is a list of lockids for the server.
	* @return void 
	*/

	public function deactivatePrioritingOfLock($serverId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["serverId"] = json_encode($this->transport->object_unset_nulls($serverId));
	     $gs_data_input2939299822982["method"] = "deactivatePrioritingOfLock";
	     $gs_data_input2939299822982["interfaceName"] = "core.getshoplocksystem.IGetShopLockSystemManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	*
	*
	* @param groupId
	* @param lockIds Key = serverId, and value is a list of lockids for the server.
	* @return void 
	*/

	public function deleteGroup($groupId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["groupId"] = json_encode($this->transport->object_unset_nulls($groupId));
	     $gs_data_input2939299822982["method"] = "deleteGroup";
	     $gs_data_input2939299822982["interfaceName"] = "core.getshoplocksystem.IGetShopLockSystemManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	*
	* @author ktonder
	* @return void 
	*/

	public function deleteServer($serverId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["serverId"] = json_encode($this->transport->object_unset_nulls($serverId));
	     $gs_data_input2939299822982["method"] = "deleteServer";
	     $gs_data_input2939299822982["interfaceName"] = "core.getshoplocksystem.IGetShopLockSystemManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	*
	* @author ktonder
	* @return void 
	*/

	public function generateNewCodesForLock($serverId, $lockId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["serverId"] = json_encode($this->transport->object_unset_nulls($serverId));
	     $gs_data_input2939299822982['args']["lockId"] = json_encode($this->transport->object_unset_nulls($lockId));
	     $gs_data_input2939299822982["method"] = "generateNewCodesForLock";
	     $gs_data_input2939299822982["interfaceName"] = "core.getshoplocksystem.IGetShopLockSystemManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/***** End group code stuff ***** @return core_getshoplocksystem_AccessGroupUserAccess 
	*/

	public function getAccess($userId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["userId"] = json_encode($this->transport->object_unset_nulls($userId));
	     $gs_data_input2939299822982["method"] = "getAccess";
	     $gs_data_input2939299822982["interfaceName"] = "core.getshoplocksystem.IGetShopLockSystemManager";
	     return $this->transport->cast(new core_getshoplocksystem_AccessGroupUserAccess(), $this->transport->sendMessage($gs_data_input2939299822982));
	}

	/***** End group code stuff ***** @return core_getshoplocksystem_AccessHistoryResult[] 
	*/

	public function getAccessHistory($groupId, $start, $end, $groupSlotId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["groupId"] = json_encode($this->transport->object_unset_nulls($groupId));
	     $gs_data_input2939299822982['args']["start"] = json_encode($this->transport->object_unset_nulls($start));
	     $gs_data_input2939299822982['args']["end"] = json_encode($this->transport->object_unset_nulls($end));
	     $gs_data_input2939299822982['args']["groupSlotId"] = json_encode($this->transport->object_unset_nulls($groupSlotId));
	     $gs_data_input2939299822982["method"] = "getAccessHistory";
	     $gs_data_input2939299822982["interfaceName"] = "core.getshoplocksystem.IGetShopLockSystemManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/***** End group code stuff ***** @return core_common_FilteredData 
	*/

	public function getAllAccessUsers($options) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["options"] = json_encode($this->transport->object_unset_nulls($options));
	     $gs_data_input2939299822982["method"] = "getAllAccessUsers";
	     $gs_data_input2939299822982["interfaceName"] = "core.getshoplocksystem.IGetShopLockSystemManager";
	     return $this->transport->cast(new core_common_FilteredData(), $this->transport->sendMessage($gs_data_input2939299822982));
	}

	/**
	*
	*
	* @param groupId
	* @param lockIds Key = serverId, and value is a list of lockids for the server.
	* @return core_getshoplocksystem_LockGroup[] 
	*/

	public function getAllGroups() {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982["method"] = "getAllGroups";
	     $gs_data_input2939299822982["interfaceName"] = "core.getshoplocksystem.IGetShopLockSystemManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/***** End group code stuff ***** @return int 
	*/

	public function getCodeSize() {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982["method"] = "getCodeSize";
	     $gs_data_input2939299822982["interfaceName"] = "core.getshoplocksystem.IGetShopLockSystemManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/***** End group code stuff ***** @return core_getshoplocksystem_UserSlot[] 
	*/

	public function getCodesInUse($serverId, $lockId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["serverId"] = json_encode($this->transport->object_unset_nulls($serverId));
	     $gs_data_input2939299822982['args']["lockId"] = json_encode($this->transport->object_unset_nulls($lockId));
	     $gs_data_input2939299822982["method"] = "getCodesInUse";
	     $gs_data_input2939299822982["interfaceName"] = "core.getshoplocksystem.IGetShopLockSystemManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	*
	*
	* @param groupId
	* @param lockIds Key = serverId, and value is a list of lockids for the server.
	* @return core_getshoplocksystem_LockGroup 
	*/

	public function getGroup($groupId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["groupId"] = json_encode($this->transport->object_unset_nulls($groupId));
	     $gs_data_input2939299822982["method"] = "getGroup";
	     $gs_data_input2939299822982["interfaceName"] = "core.getshoplocksystem.IGetShopLockSystemManager";
	     return $this->transport->cast(new core_getshoplocksystem_LockGroup(), $this->transport->sendMessage($gs_data_input2939299822982));
	}

	/**
	*
	* @author ktonder
	* @return core_getshoplocksystem_Lock 
	*/

	public function getLock($serverId, $lockId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["serverId"] = json_encode($this->transport->object_unset_nulls($serverId));
	     $gs_data_input2939299822982['args']["lockId"] = json_encode($this->transport->object_unset_nulls($lockId));
	     $gs_data_input2939299822982["method"] = "getLock";
	     $gs_data_input2939299822982["interfaceName"] = "core.getshoplocksystem.IGetShopLockSystemManager";
	     return $this->transport->cast(new core_getshoplocksystem_Lock(), $this->transport->sendMessage($gs_data_input2939299822982));
	}

	/**
	*
	* @author ktonder
	* @return public abstract interface com_thundashop_core_getshoplocksystem_LockServer[] 
	*/

	public function getLockServers() {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982["method"] = "getLockServers";
	     $gs_data_input2939299822982["interfaceName"] = "core.getshoplocksystem.IGetShopLockSystemManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	*
	*
	* @param groupId
	* @param lockIds Key = serverId, and value is a list of lockids for the server.
	* @return String 
	*/

	public function getNameOfGroup($groupId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["groupId"] = json_encode($this->transport->object_unset_nulls($groupId));
	     $gs_data_input2939299822982["method"] = "getNameOfGroup";
	     $gs_data_input2939299822982["interfaceName"] = "core.getshoplocksystem.IGetShopLockSystemManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/***** Group code stuff ***** @return core_getshoplocksystem_LockCode 
	*/

	public function getNextUnusedCode($groupId, $reference, $managerName, $textReference) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["groupId"] = json_encode($this->transport->object_unset_nulls($groupId));
	     $gs_data_input2939299822982['args']["reference"] = json_encode($this->transport->object_unset_nulls($reference));
	     $gs_data_input2939299822982['args']["managerName"] = json_encode($this->transport->object_unset_nulls($managerName));
	     $gs_data_input2939299822982['args']["textReference"] = json_encode($this->transport->object_unset_nulls($textReference));
	     $gs_data_input2939299822982["method"] = "getNextUnusedCode";
	     $gs_data_input2939299822982["interfaceName"] = "core.getshoplocksystem.IGetShopLockSystemManager";
	     return $this->transport->cast(new core_getshoplocksystem_LockCode(), $this->transport->sendMessage($gs_data_input2939299822982));
	}

	/***** End group code stuff ***** @return core_getshoplocksystem_AccessGroupUserAccess 
	*/

	public function grantAccessDirect($groupId, $user) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["groupId"] = json_encode($this->transport->object_unset_nulls($groupId));
	     $gs_data_input2939299822982['args']["user"] = json_encode($this->transport->object_unset_nulls($user));
	     $gs_data_input2939299822982["method"] = "grantAccessDirect";
	     $gs_data_input2939299822982["interfaceName"] = "core.getshoplocksystem.IGetShopLockSystemManager";
	     return $this->transport->cast(new core_getshoplocksystem_AccessGroupUserAccess(), $this->transport->sendMessage($gs_data_input2939299822982));
	}

	/***** End group code stuff ***** @return boolean 
	*/

	public function isSlotTakenInUseInAnyGroups($serverId, $lockId, $slotId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["serverId"] = json_encode($this->transport->object_unset_nulls($serverId));
	     $gs_data_input2939299822982['args']["lockId"] = json_encode($this->transport->object_unset_nulls($lockId));
	     $gs_data_input2939299822982['args']["slotId"] = json_encode($this->transport->object_unset_nulls($slotId));
	     $gs_data_input2939299822982["method"] = "isSlotTakenInUseInAnyGroups";
	     $gs_data_input2939299822982["interfaceName"] = "core.getshoplocksystem.IGetShopLockSystemManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	*
	*
	* @param groupId
	* @param lockIds Key = serverId, and value is a list of lockids for the server.
	* @return void 
	*/

	public function lockSettingsChanged($lockSettings) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["lockSettings"] = json_encode($this->transport->object_unset_nulls($lockSettings));
	     $gs_data_input2939299822982["method"] = "lockSettingsChanged";
	     $gs_data_input2939299822982["interfaceName"] = "core.getshoplocksystem.IGetShopLockSystemManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	*
	* @author ktonder
	* @return void 
	*/

	public function markCodeAsUpdatedOnLock($serverId, $lockId, $slotId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["serverId"] = json_encode($this->transport->object_unset_nulls($serverId));
	     $gs_data_input2939299822982['args']["lockId"] = json_encode($this->transport->object_unset_nulls($lockId));
	     $gs_data_input2939299822982['args']["slotId"] = json_encode($this->transport->object_unset_nulls($slotId));
	     $gs_data_input2939299822982["method"] = "markCodeAsUpdatedOnLock";
	     $gs_data_input2939299822982["interfaceName"] = "core.getshoplocksystem.IGetShopLockSystemManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	*
	* @author ktonder
	* @return void 
	*/

	public function markCodeForDeletion($serverId, $lockId, $slotId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["serverId"] = json_encode($this->transport->object_unset_nulls($serverId));
	     $gs_data_input2939299822982['args']["lockId"] = json_encode($this->transport->object_unset_nulls($lockId));
	     $gs_data_input2939299822982['args']["slotId"] = json_encode($this->transport->object_unset_nulls($slotId));
	     $gs_data_input2939299822982["method"] = "markCodeForDeletion";
	     $gs_data_input2939299822982["interfaceName"] = "core.getshoplocksystem.IGetShopLockSystemManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	*
	* @author ktonder
	* @return void 
	*/

	public function markCodeForResending($serverId, $lockId, $slotId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["serverId"] = json_encode($this->transport->object_unset_nulls($serverId));
	     $gs_data_input2939299822982['args']["lockId"] = json_encode($this->transport->object_unset_nulls($lockId));
	     $gs_data_input2939299822982['args']["slotId"] = json_encode($this->transport->object_unset_nulls($slotId));
	     $gs_data_input2939299822982["method"] = "markCodeForResending";
	     $gs_data_input2939299822982["interfaceName"] = "core.getshoplocksystem.IGetShopLockSystemManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	*
	* @author ktonder
	* @return void 
	*/

	public function prioritizeLockUpdate($serverId, $lockId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["serverId"] = json_encode($this->transport->object_unset_nulls($serverId));
	     $gs_data_input2939299822982['args']["lockId"] = json_encode($this->transport->object_unset_nulls($lockId));
	     $gs_data_input2939299822982["method"] = "prioritizeLockUpdate";
	     $gs_data_input2939299822982["interfaceName"] = "core.getshoplocksystem.IGetShopLockSystemManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/***** End group code stuff ***** @return void 
	*/

	public function removeAccess($id) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["id"] = json_encode($this->transport->object_unset_nulls($id));
	     $gs_data_input2939299822982["method"] = "removeAccess";
	     $gs_data_input2939299822982["interfaceName"] = "core.getshoplocksystem.IGetShopLockSystemManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/***** End group code stuff ***** @return void 
	*/

	public function renameLock($serverId, $lockId, $name) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["serverId"] = json_encode($this->transport->object_unset_nulls($serverId));
	     $gs_data_input2939299822982['args']["lockId"] = json_encode($this->transport->object_unset_nulls($lockId));
	     $gs_data_input2939299822982['args']["name"] = json_encode($this->transport->object_unset_nulls($name));
	     $gs_data_input2939299822982["method"] = "renameLock";
	     $gs_data_input2939299822982["interfaceName"] = "core.getshoplocksystem.IGetShopLockSystemManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/***** Group code stuff ***** @return void 
	*/

	public function renewCodeForSlot($groupId, $slotId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["groupId"] = json_encode($this->transport->object_unset_nulls($groupId));
	     $gs_data_input2939299822982['args']["slotId"] = json_encode($this->transport->object_unset_nulls($slotId));
	     $gs_data_input2939299822982["method"] = "renewCodeForSlot";
	     $gs_data_input2939299822982["interfaceName"] = "core.getshoplocksystem.IGetShopLockSystemManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	*
	* @author ktonder
	* @return String 
	*/

	public function restCall($serverId, $path) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["serverId"] = json_encode($this->transport->object_unset_nulls($serverId));
	     $gs_data_input2939299822982['args']["path"] = json_encode($this->transport->object_unset_nulls($path));
	     $gs_data_input2939299822982["method"] = "restCall";
	     $gs_data_input2939299822982["interfaceName"] = "core.getshoplocksystem.IGetShopLockSystemManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	*
	* @author ktonder
	* @return void 
	*/

	public function saveLocstarLock($serverId, $lock) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["serverId"] = json_encode($this->transport->object_unset_nulls($serverId));
	     $gs_data_input2939299822982['args']["lock"] = json_encode($this->transport->object_unset_nulls($lock));
	     $gs_data_input2939299822982["method"] = "saveLocstarLock";
	     $gs_data_input2939299822982["interfaceName"] = "core.getshoplocksystem.IGetShopLockSystemManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/***** End group code stuff ***** @return void 
	*/

	public function saveUser($user) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["user"] = json_encode($this->transport->object_unset_nulls($user));
	     $gs_data_input2939299822982["method"] = "saveUser";
	     $gs_data_input2939299822982["interfaceName"] = "core.getshoplocksystem.IGetShopLockSystemManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/***** End group code stuff ***** @return void 
	*/

	public function sendEmailToCustomer($userId, $subject, $body) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["userId"] = json_encode($this->transport->object_unset_nulls($userId));
	     $gs_data_input2939299822982['args']["subject"] = json_encode($this->transport->object_unset_nulls($subject));
	     $gs_data_input2939299822982['args']["body"] = json_encode($this->transport->object_unset_nulls($body));
	     $gs_data_input2939299822982["method"] = "sendEmailToCustomer";
	     $gs_data_input2939299822982["interfaceName"] = "core.getshoplocksystem.IGetShopLockSystemManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/***** End group code stuff ***** @return void 
	*/

	public function sendSmsToCustomer($userId, $textMessage) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["userId"] = json_encode($this->transport->object_unset_nulls($userId));
	     $gs_data_input2939299822982['args']["textMessage"] = json_encode($this->transport->object_unset_nulls($textMessage));
	     $gs_data_input2939299822982["method"] = "sendSmsToCustomer";
	     $gs_data_input2939299822982["interfaceName"] = "core.getshoplocksystem.IGetShopLockSystemManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/***** End group code stuff ***** @return void 
	*/

	public function setCodeSize($codeSize) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["codeSize"] = json_encode($this->transport->object_unset_nulls($codeSize));
	     $gs_data_input2939299822982["method"] = "setCodeSize";
	     $gs_data_input2939299822982["interfaceName"] = "core.getshoplocksystem.IGetShopLockSystemManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/***** End group code stuff ***** @return void 
	*/

	public function setGroupVirtual($groupId, $isVirtual) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["groupId"] = json_encode($this->transport->object_unset_nulls($groupId));
	     $gs_data_input2939299822982['args']["isVirtual"] = json_encode($this->transport->object_unset_nulls($isVirtual));
	     $gs_data_input2939299822982["method"] = "setGroupVirtual";
	     $gs_data_input2939299822982["interfaceName"] = "core.getshoplocksystem.IGetShopLockSystemManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	*
	*
	* @param groupId
	* @param lockIds Key = serverId, and value is a list of lockids for the server.
	* @return void 
	*/

	public function setLocksToGroup($groupId, $lockIds) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["groupId"] = json_encode($this->transport->object_unset_nulls($groupId));
	     $gs_data_input2939299822982['args']["lockIds"] = json_encode($this->transport->object_unset_nulls($lockIds));
	     $gs_data_input2939299822982["method"] = "setLocksToGroup";
	     $gs_data_input2939299822982["interfaceName"] = "core.getshoplocksystem.IGetShopLockSystemManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	*
	* @author ktonder
	* @return void 
	*/

	public function startFetchingOfLocksFromServer($serverId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["serverId"] = json_encode($this->transport->object_unset_nulls($serverId));
	     $gs_data_input2939299822982["method"] = "startFetchingOfLocksFromServer";
	     $gs_data_input2939299822982["interfaceName"] = "core.getshoplocksystem.IGetShopLockSystemManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	*
	*
	* @param groupId
	* @param lockIds Key = serverId, and value is a list of lockids for the server.
	* @return void 
	*/

	public function toggleActiveServer($serverId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["serverId"] = json_encode($this->transport->object_unset_nulls($serverId));
	     $gs_data_input2939299822982["method"] = "toggleActiveServer";
	     $gs_data_input2939299822982["interfaceName"] = "core.getshoplocksystem.IGetShopLockSystemManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	*
	*
	* @param groupId
	* @param lockIds Key = serverId, and value is a list of lockids for the server.
	* @return void 
	*/

	public function triggerCheckOfCodes($serverId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["serverId"] = json_encode($this->transport->object_unset_nulls($serverId));
	     $gs_data_input2939299822982["method"] = "triggerCheckOfCodes";
	     $gs_data_input2939299822982["interfaceName"] = "core.getshoplocksystem.IGetShopLockSystemManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	*
	*
	* @param groupId
	* @param lockIds Key = serverId, and value is a list of lockids for the server.
	* @return void 
	*/

	public function triggerCronTab() {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982["method"] = "triggerCronTab";
	     $gs_data_input2939299822982["interfaceName"] = "core.getshoplocksystem.IGetShopLockSystemManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	*
	* @author ktonder
	* @return void 
	*/

	public function updateConnectionDetails($serverId, $hostname, $username, $password, $givenName, $token) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["serverId"] = json_encode($this->transport->object_unset_nulls($serverId));
	     $gs_data_input2939299822982['args']["hostname"] = json_encode($this->transport->object_unset_nulls($hostname));
	     $gs_data_input2939299822982['args']["username"] = json_encode($this->transport->object_unset_nulls($username));
	     $gs_data_input2939299822982['args']["password"] = json_encode($this->transport->object_unset_nulls($password));
	     $gs_data_input2939299822982['args']["givenName"] = json_encode($this->transport->object_unset_nulls($givenName));
	     $gs_data_input2939299822982['args']["token"] = json_encode($this->transport->object_unset_nulls($token));
	     $gs_data_input2939299822982["method"] = "updateConnectionDetails";
	     $gs_data_input2939299822982["interfaceName"] = "core.getshoplocksystem.IGetShopLockSystemManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	*
	* @author ktonder
	* @return void 
	*/

	public function updateZwaveRoute($serverId, $lockId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["serverId"] = json_encode($this->transport->object_unset_nulls($serverId));
	     $gs_data_input2939299822982['args']["lockId"] = json_encode($this->transport->object_unset_nulls($lockId));
	     $gs_data_input2939299822982["method"] = "updateZwaveRoute";
	     $gs_data_input2939299822982["interfaceName"] = "core.getshoplocksystem.IGetShopLockSystemManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

}
class APIImageManager {

	var $transport;
	
	function APIImageManager($transport) {
		$this->transport = $transport;
	}

	/**
	*
	* @author ktonder
	* @return String 
	*/

	public function getBase64EncodedImageLocally($imageId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["imageId"] = json_encode($this->transport->object_unset_nulls($imageId));
	     $gs_data_input2939299822982["method"] = "getBase64EncodedImageLocally";
	     $gs_data_input2939299822982["interfaceName"] = "core.utils.IImageManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

}
class APIInformationScreenManager {

	var $transport;
	
	function APIInformationScreenManager($transport) {
		$this->transport = $transport;
	}

	/**
	*
	* @author ktonder
	* @return void 
	*/

	public function addSlider($slider, $tvId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["slider"] = json_encode($this->transport->object_unset_nulls($slider));
	     $gs_data_input2939299822982['args']["tvId"] = json_encode($this->transport->object_unset_nulls($tvId));
	     $gs_data_input2939299822982["method"] = "addSlider";
	     $gs_data_input2939299822982["interfaceName"] = "core.informationscreenmanager.IInformationScreenManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	*
	* @author ktonder
	* @return void 
	*/

	public function deleteSlider($sliderId, $tvId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["sliderId"] = json_encode($this->transport->object_unset_nulls($sliderId));
	     $gs_data_input2939299822982['args']["tvId"] = json_encode($this->transport->object_unset_nulls($tvId));
	     $gs_data_input2939299822982["method"] = "deleteSlider";
	     $gs_data_input2939299822982["interfaceName"] = "core.informationscreenmanager.IInformationScreenManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	*
	* @author ktonder
	* @return core_informationscreen_CustomerInfoScreenHolder[] 
	*/

	public function getHolders() {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982["method"] = "getHolders";
	     $gs_data_input2939299822982["interfaceName"] = "core.informationscreenmanager.IInformationScreenManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	*
	* @author ktonder
	* @return core_informationscreen_InfoScreen[] 
	*/

	public function getInformationScreens() {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982["method"] = "getInformationScreens";
	     $gs_data_input2939299822982["interfaceName"] = "core.informationscreenmanager.IInformationScreenManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	*
	* @author ktonder
	* @return core_informationscreen_Feed 
	*/

	public function getNews() {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982["method"] = "getNews";
	     $gs_data_input2939299822982["interfaceName"] = "core.informationscreenmanager.IInformationScreenManager";
	     return $this->transport->cast(new core_informationscreen_Feed(), $this->transport->sendMessage($gs_data_input2939299822982));
	}

	/**
	*
	* @author ktonder
	* @return core_informationscreen_InfoScreen 
	*/

	public function getScreen($id) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["id"] = json_encode($this->transport->object_unset_nulls($id));
	     $gs_data_input2939299822982["method"] = "getScreen";
	     $gs_data_input2939299822982["interfaceName"] = "core.informationscreenmanager.IInformationScreenManager";
	     return $this->transport->cast(new core_informationscreen_InfoScreen(), $this->transport->sendMessage($gs_data_input2939299822982));
	}

	/**
	*
	* @author ktonder
	* @return core_informationscreen_SliderType[] 
	*/

	public function getTypes() {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982["method"] = "getTypes";
	     $gs_data_input2939299822982["interfaceName"] = "core.informationscreenmanager.IInformationScreenManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	*
	* @author ktonder
	* @return void 
	*/

	public function registerTv($customerId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["customerId"] = json_encode($this->transport->object_unset_nulls($customerId));
	     $gs_data_input2939299822982["method"] = "registerTv";
	     $gs_data_input2939299822982["interfaceName"] = "core.informationscreenmanager.IInformationScreenManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	*
	* @author ktonder
	* @return void 
	*/

	public function saveTv($tv) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["tv"] = json_encode($this->transport->object_unset_nulls($tv));
	     $gs_data_input2939299822982["method"] = "saveTv";
	     $gs_data_input2939299822982["interfaceName"] = "core.informationscreenmanager.IInformationScreenManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

}
class APIInvoiceManager {

	var $transport;
	
	function APIInvoiceManager($transport) {
		$this->transport = $transport;
	}

	/**
	*
	* @author ktonder
	* @return void 
	*/

	public function createInvoice($orderId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["orderId"] = json_encode($this->transport->object_unset_nulls($orderId));
	     $gs_data_input2939299822982["method"] = "createInvoice";
	     $gs_data_input2939299822982["interfaceName"] = "core.pdf.IInvoiceManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	*
	* @author ktonder
	* @return String 
	*/

	public function getBase64EncodedInvoice($orderId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["orderId"] = json_encode($this->transport->object_unset_nulls($orderId));
	     $gs_data_input2939299822982["method"] = "getBase64EncodedInvoice";
	     $gs_data_input2939299822982["interfaceName"] = "core.pdf.IInvoiceManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

}
class APILasGruppenPDFGenerator {

	var $transport;
	
	function APILasGruppenPDFGenerator($transport) {
		$this->transport = $transport;
	}

	/**
	*
	* @author ktonder
	* @return String 
	*/

	public function generatePdf() {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982["method"] = "generatePdf";
	     $gs_data_input2939299822982["interfaceName"] = "core.pdf.ILasGruppenPDFGenerator";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

}
class APIListManager {

	var $transport;
	
	function APIListManager($transport) {
		$this->transport = $transport;
	}

	/**
	* Add a new entry to a given list.<br>
	* For most components like leftmenu, topmenu, footer, category displayer the list id is the same as the application id.<br>
	* When creating an entry, a page will automatically be created and attached to this entry if not exists.<br>
	*
	* @param listId The id for the list to add the entry to, if list does not exists, it will be created automatically.
	* @param entry The entry to append to the list.
	* @param parentPageId See the pagemanager for more information about the page id, when the page to this entry is created set this id as the parent.
	* @return core_listmanager_data_Entry 
	*/

	public function addEntry($listId, $entry, $parentPageId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["listId"] = json_encode($this->transport->object_unset_nulls($listId));
	     $gs_data_input2939299822982['args']["entry"] = json_encode($this->transport->object_unset_nulls($entry));
	     $gs_data_input2939299822982['args']["parentPageId"] = json_encode($this->transport->object_unset_nulls($parentPageId));
	     $gs_data_input2939299822982["method"] = "addEntry";
	     $gs_data_input2939299822982["interfaceName"] = "core.listmanager.IListManager";
	     return $this->transport->cast(new core_listmanager_data_Entry(), $this->transport->sendMessage($gs_data_input2939299822982));
	}

	/**
	* Add a new entry to a given list.<br>
	* For most components like leftmenu, topmenu, footer, category displayer the list id is the same as the application id.<br>
	* When creating an entry, a page will automatically be created and attached to this entry if not exists.<br>
	*
	* @param listId The id for the list to add the entry to, if list does not exists, it will be created automatically.
	* @param entry The entry to append to the list.
	* @param parentPageId See the pagemanager for more information about the page id, when the page to this entry is created set this id as the parent.
	* @return core_listmanager_data_Entry 
	*/

	public function addUnsecureEntry($listId, $entry) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["listId"] = json_encode($this->transport->object_unset_nulls($listId));
	     $gs_data_input2939299822982['args']["entry"] = json_encode($this->transport->object_unset_nulls($entry));
	     $gs_data_input2939299822982["method"] = "addUnsecureEntry";
	     $gs_data_input2939299822982["interfaceName"] = "core.listmanager.IListManager";
	     return $this->transport->cast(new core_listmanager_data_Entry(), $this->transport->sendMessage($gs_data_input2939299822982));
	}

	/**
	* Create new list for a given id
	*
	* @param listName
	* @throws ErrorException
	* @return void 
	*/

	public function askConfirmationOnEntry($entryId, $text) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["entryId"] = json_encode($this->transport->object_unset_nulls($entryId));
	     $gs_data_input2939299822982['args']["text"] = json_encode($this->transport->object_unset_nulls($text));
	     $gs_data_input2939299822982["method"] = "askConfirmationOnEntry";
	     $gs_data_input2939299822982["interfaceName"] = "core.listmanager.IListManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Remove all list entries for a specified list
	*
	* @param listId
	* @throws ErrorException
	* @return void 
	*/

	public function clearList($listId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["listId"] = json_encode($this->transport->object_unset_nulls($listId));
	     $gs_data_input2939299822982["method"] = "clearList";
	     $gs_data_input2939299822982["interfaceName"] = "core.listmanager.IListManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* If you would like to combine more lists to a current list, you can do it by using this call.<br>
	*
	* @param toListId The current list to be appended on.
	* @param newListId The list which you would like to combine.
	* @throws ErrorException
	* @return void 
	*/

	public function combineList($toListId, $newListId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["toListId"] = json_encode($this->transport->object_unset_nulls($toListId));
	     $gs_data_input2939299822982['args']["newListId"] = json_encode($this->transport->object_unset_nulls($newListId));
	     $gs_data_input2939299822982["method"] = "combineList";
	     $gs_data_input2939299822982["interfaceName"] = "core.listmanager.IListManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Add a new entry to a given list.<br>
	* For most components like leftmenu, topmenu, footer, category displayer the list id is the same as the application id.<br>
	* When creating an entry, a page will automatically be created and attached to this entry if not exists.<br>
	*
	* @param listId The id for the list to add the entry to, if list does not exists, it will be created automatically.
	* @param entry The entry to append to the list.
	* @param parentPageId See the pagemanager for more information about the page id, when the page to this entry is created set this id as the parent.
	* @return void 
	*/

	public function confirmEntry($entryId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["entryId"] = json_encode($this->transport->object_unset_nulls($entryId));
	     $gs_data_input2939299822982["method"] = "confirmEntry";
	     $gs_data_input2939299822982["interfaceName"] = "core.listmanager.IListManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Create a list id, this will create a a new list for you.
	* @return String 
	*/

	public function createListId() {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982["method"] = "createListId";
	     $gs_data_input2939299822982["interfaceName"] = "core.listmanager.IListManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Create new list for a given id
	*
	* @param listName
	* @throws ErrorException
	* @return void 
	*/

	public function createMenuList($menuApplicationId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["menuApplicationId"] = json_encode($this->transport->object_unset_nulls($menuApplicationId));
	     $gs_data_input2939299822982["method"] = "createMenuList";
	     $gs_data_input2939299822982["interfaceName"] = "core.listmanager.IListManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Delete an already existing entry from a list.
	* @param id The of the entry to delete.
	* @param id The id of the list to remove from.
	* @return void 
	*/

	public function deleteEntry($id, $listId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["id"] = json_encode($this->transport->object_unset_nulls($id));
	     $gs_data_input2939299822982['args']["listId"] = json_encode($this->transport->object_unset_nulls($listId));
	     $gs_data_input2939299822982["method"] = "deleteEntry";
	     $gs_data_input2939299822982["interfaceName"] = "core.listmanager.IListManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* This function flushes all entries in the list and set this as new entries instead.
	* @param listId The id of the list to be updated
	* @param entries All entries to be included in the list.
	* @throws ErrorException
	* @return void 
	*/

	public function deleteMenu($appId, $listId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["appId"] = json_encode($this->transport->object_unset_nulls($appId));
	     $gs_data_input2939299822982['args']["listId"] = json_encode($this->transport->object_unset_nulls($listId));
	     $gs_data_input2939299822982["method"] = "deleteMenu";
	     $gs_data_input2939299822982["interfaceName"] = "core.listmanager.IListManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Returns the entrylist of a given id.
	*
	* type = MENU
	* type = PRODUCT
	*
	* @return core_listmanager_data_EntryList[] 
	*/

	public function getAllListsByType($type) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["type"] = json_encode($this->transport->object_unset_nulls($type));
	     $gs_data_input2939299822982["method"] = "getAllListsByType";
	     $gs_data_input2939299822982["interfaceName"] = "core.listmanager.IListManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Fetch a list of all lists combined with a given list.
	* @param listId
	* @throws ErrorException
	* @return String[] 
	*/

	public function getCombinedLists($listId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["listId"] = json_encode($this->transport->object_unset_nulls($listId));
	     $gs_data_input2939299822982["method"] = "getCombinedLists";
	     $gs_data_input2939299822982["interfaceName"] = "core.listmanager.IListManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Fetch a single menu entry.
	* @param id The id for the entry to fetch.
	* @return core_listmanager_data_Entry 
	*/

	public function getEntryByPageId($pageId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["pageId"] = json_encode($this->transport->object_unset_nulls($pageId));
	     $gs_data_input2939299822982["method"] = "getEntryByPageId";
	     $gs_data_input2939299822982["interfaceName"] = "core.listmanager.IListManager";
	     return $this->transport->cast(new core_listmanager_data_Entry(), $this->transport->sendMessage($gs_data_input2939299822982));
	}

	/**
	* Create new list for a given id
	*
	* @param listName
	* @throws ErrorException
	* @return core_listmanager_data_TreeNode 
	*/

	public function getJSTreeNode($nodeId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["nodeId"] = json_encode($this->transport->object_unset_nulls($nodeId));
	     $gs_data_input2939299822982["method"] = "getJSTreeNode";
	     $gs_data_input2939299822982["interfaceName"] = "core.listmanager.IListManager";
	     return $this->transport->cast(new core_listmanager_data_TreeNode(), $this->transport->sendMessage($gs_data_input2939299822982));
	}

	/**
	* Create new list for a given id
	*
	* @param listName
	* @throws ErrorException
	* @return core_listmanager_data_JsTreeList 
	*/

	public function getJsTree($name) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["name"] = json_encode($this->transport->object_unset_nulls($name));
	     $gs_data_input2939299822982["method"] = "getJsTree";
	     $gs_data_input2939299822982["interfaceName"] = "core.listmanager.IListManager";
	     return $this->transport->cast(new core_listmanager_data_JsTreeList(), $this->transport->sendMessage($gs_data_input2939299822982));
	}

	/**
	* Fetch a list from the system.
	* @param listId The id for the list to fetch
	* @return core_listmanager_data_Entry[] 
	*/

	public function getList($listId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["listId"] = json_encode($this->transport->object_unset_nulls($listId));
	     $gs_data_input2939299822982["method"] = "getList";
	     $gs_data_input2939299822982["interfaceName"] = "core.listmanager.IListManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Fetch a single menu entry.
	* @param id The id for the entry to fetch.
	* @return core_listmanager_data_Entry 
	*/

	public function getListEntry($id) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["id"] = json_encode($this->transport->object_unset_nulls($id));
	     $gs_data_input2939299822982["method"] = "getListEntry";
	     $gs_data_input2939299822982["interfaceName"] = "core.listmanager.IListManager";
	     return $this->transport->cast(new core_listmanager_data_Entry(), $this->transport->sendMessage($gs_data_input2939299822982));
	}

	/**
	* Fetch a list of ids that current shop has.<br>
	* This will return a list with the ids for all lists created by this webshop.<br>
	*
	* @return String[] 
	*/

	public function getLists() {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982["method"] = "getLists";
	     $gs_data_input2939299822982["interfaceName"] = "core.listmanager.IListManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Create new list for a given id
	*
	* @param listName
	* @throws ErrorException
	* @return core_listmanager_data_Menu[] 
	*/

	public function getMenues($applicationInstanceId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["applicationInstanceId"] = json_encode($this->transport->object_unset_nulls($applicationInstanceId));
	     $gs_data_input2939299822982["method"] = "getMenues";
	     $gs_data_input2939299822982["interfaceName"] = "core.listmanager.IListManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Remove all list entries for a specified list
	*
	* @param listId
	* @throws ErrorException
	* @return String 
	*/

	public function getPageIdByName($name) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["name"] = json_encode($this->transport->object_unset_nulls($name));
	     $gs_data_input2939299822982["method"] = "getPageIdByName";
	     $gs_data_input2939299822982["interfaceName"] = "core.listmanager.IListManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Order a entry on the list.
	* @param id The id for the entry to move / reorder.
	* @param after Put it after a given entry (this will be the id for the given entry). To move the entry to the top leave this empty.
	* @param parent If you want to move the entry into a given entry, then specify the id to the entry here. Leave empty to move to top.
	* @return core_listmanager_data_Entry 
	*/

	public function orderEntry($id, $after, $parentId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["id"] = json_encode($this->transport->object_unset_nulls($id));
	     $gs_data_input2939299822982['args']["after"] = json_encode($this->transport->object_unset_nulls($after));
	     $gs_data_input2939299822982['args']["parentId"] = json_encode($this->transport->object_unset_nulls($parentId));
	     $gs_data_input2939299822982["method"] = "orderEntry";
	     $gs_data_input2939299822982["interfaceName"] = "core.listmanager.IListManager";
	     return $this->transport->cast(new core_listmanager_data_Entry(), $this->transport->sendMessage($gs_data_input2939299822982));
	}

	/**
	* Create new list for a given id
	*
	* @param listName
	* @throws ErrorException
	* @return void 
	*/

	public function saveJsTree($name, $list) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["name"] = json_encode($this->transport->object_unset_nulls($name));
	     $gs_data_input2939299822982['args']["list"] = json_encode($this->transport->object_unset_nulls($list));
	     $gs_data_input2939299822982["method"] = "saveJsTree";
	     $gs_data_input2939299822982["interfaceName"] = "core.listmanager.IListManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* This function flushes all entries in the list and set this as new entries instead.
	* @param listId The id of the list to be updated
	* @param entries All entries to be included in the list.
	* @throws ErrorException
	* @return void 
	*/

	public function saveMenu($appId, $listId, $entries, $name) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["appId"] = json_encode($this->transport->object_unset_nulls($appId));
	     $gs_data_input2939299822982['args']["listId"] = json_encode($this->transport->object_unset_nulls($listId));
	     $gs_data_input2939299822982['args']["entries"] = json_encode($this->transport->object_unset_nulls($entries));
	     $gs_data_input2939299822982['args']["name"] = json_encode($this->transport->object_unset_nulls($name));
	     $gs_data_input2939299822982["method"] = "saveMenu";
	     $gs_data_input2939299822982["interfaceName"] = "core.listmanager.IListManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* This function flushes all entries in the list and set this as new entries instead.
	* @param listId The id of the list to be updated
	* @param entries All entries to be included in the list.
	* @throws ErrorException
	* @return void 
	*/

	public function setEntries($listId, $entries) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["listId"] = json_encode($this->transport->object_unset_nulls($listId));
	     $gs_data_input2939299822982['args']["entries"] = json_encode($this->transport->object_unset_nulls($entries));
	     $gs_data_input2939299822982["method"] = "setEntries";
	     $gs_data_input2939299822982["interfaceName"] = "core.listmanager.IListManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Translate all antries found in a given list of entry ids.
	* @param entryIds A list of entries id to translate.
	* @throws ErrorException
	* @return public class HashMap<K,V> 
	*/

	public function translateEntries($entryIds) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["entryIds"] = json_encode($this->transport->object_unset_nulls($entryIds));
	     $gs_data_input2939299822982["method"] = "translateEntries";
	     $gs_data_input2939299822982["interfaceName"] = "core.listmanager.IListManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Does the exact opposite as combineList(...), removes a list from a combined list.
	* @param fromListId The id of the list to be removed from.
	* @param toRemoveId The id of the list to remove.
	* @throws ErrorException
	* @return void 
	*/

	public function unCombineList($fromListId, $toRemoveId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["fromListId"] = json_encode($this->transport->object_unset_nulls($fromListId));
	     $gs_data_input2939299822982['args']["toRemoveId"] = json_encode($this->transport->object_unset_nulls($toRemoveId));
	     $gs_data_input2939299822982["method"] = "unCombineList";
	     $gs_data_input2939299822982["interfaceName"] = "core.listmanager.IListManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Update an already existing entry
	* @param entry The entry to update.
	* @return void 
	*/

	public function updateEntry($entry) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["entry"] = json_encode($this->transport->object_unset_nulls($entry));
	     $gs_data_input2939299822982["method"] = "updateEntry";
	     $gs_data_input2939299822982["interfaceName"] = "core.listmanager.IListManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

}
class APILogoManager {

	var $transport;
	
	function APILogoManager($transport) {
		$this->transport = $transport;
	}

	/**
	* Remove the current logo.
	* @throws ErrorException
	* @return void 
	*/

	public function deleteLogo() {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982["method"] = "deleteLogo";
	     $gs_data_input2939299822982["interfaceName"] = "app.logo.ILogoManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Get the logo file id.
	* @throws ErrorException
	* @return app_logomanager_data_SavedLogo 
	*/

	public function getLogo() {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982["method"] = "getLogo";
	     $gs_data_input2939299822982["interfaceName"] = "app.logo.ILogoManager";
	     return $this->transport->cast(new app_logomanager_data_SavedLogo(), $this->transport->sendMessage($gs_data_input2939299822982));
	}

	/**
	* Set a logo to your webshop.
	* @param fileId The file id generated by the one storing this.
	* @throws ErrorException
	* @return void 
	*/

	public function setLogo($fileId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["fileId"] = json_encode($this->transport->object_unset_nulls($fileId));
	     $gs_data_input2939299822982["method"] = "setLogo";
	     $gs_data_input2939299822982["interfaceName"] = "app.logo.ILogoManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

}
class APIMecaManager {

	var $transport;
	
	function APIMecaManager($transport) {
		$this->transport = $transport;
	}

	/**
	*
	* @author emil
	* @return core_mecamanager_MecaCar 
	*/

	public function answerControlRequest($carId, $answer) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["carId"] = json_encode($this->transport->object_unset_nulls($carId));
	     $gs_data_input2939299822982['args']["answer"] = json_encode($this->transport->object_unset_nulls($answer));
	     $gs_data_input2939299822982["method"] = "answerControlRequest";
	     $gs_data_input2939299822982["interfaceName"] = "core.mecamanager.IMecaManager";
	     return $this->transport->cast(new core_mecamanager_MecaCar(), $this->transport->sendMessage($gs_data_input2939299822982));
	}

	/**
	*
	* @author emil
	* @return core_mecamanager_MecaCar 
	*/

	public function answerServiceRequest($carId, $answer) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["carId"] = json_encode($this->transport->object_unset_nulls($carId));
	     $gs_data_input2939299822982['args']["answer"] = json_encode($this->transport->object_unset_nulls($answer));
	     $gs_data_input2939299822982["method"] = "answerServiceRequest";
	     $gs_data_input2939299822982["interfaceName"] = "core.mecamanager.IMecaManager";
	     return $this->transport->cast(new core_mecamanager_MecaCar(), $this->transport->sendMessage($gs_data_input2939299822982));
	}

	/**
	*
	* @author emil
	* @return void 
	*/

	public function callMe($cellPhone) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["cellPhone"] = json_encode($this->transport->object_unset_nulls($cellPhone));
	     $gs_data_input2939299822982["method"] = "callMe";
	     $gs_data_input2939299822982["interfaceName"] = "core.mecamanager.IMecaManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	*
	* @author emil
	* @return core_mecamanager_MecaFleet 
	*/

	public function createFleet($fleet) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["fleet"] = json_encode($this->transport->object_unset_nulls($fleet));
	     $gs_data_input2939299822982["method"] = "createFleet";
	     $gs_data_input2939299822982["interfaceName"] = "core.mecamanager.IMecaManager";
	     return $this->transport->cast(new core_mecamanager_MecaFleet(), $this->transport->sendMessage($gs_data_input2939299822982));
	}

	/**
	*
	* @author emil
	* @return void 
	*/

	public function deleteCar($carId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["carId"] = json_encode($this->transport->object_unset_nulls($carId));
	     $gs_data_input2939299822982["method"] = "deleteCar";
	     $gs_data_input2939299822982["interfaceName"] = "core.mecamanager.IMecaManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	*
	* @author emil
	* @return void 
	*/

	public function deleteFleet($fleetId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["fleetId"] = json_encode($this->transport->object_unset_nulls($fleetId));
	     $gs_data_input2939299822982["method"] = "deleteFleet";
	     $gs_data_input2939299822982["interfaceName"] = "core.mecamanager.IMecaManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	*
	* @author emil
	* @return String 
	*/

	public function getBase64ExcelReport($pageId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["pageId"] = json_encode($this->transport->object_unset_nulls($pageId));
	     $gs_data_input2939299822982["method"] = "getBase64ExcelReport";
	     $gs_data_input2939299822982["interfaceName"] = "core.mecamanager.IMecaManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	*
	* @author emil
	* @return core_mecamanager_MecaCar 
	*/

	public function getCar($id) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["id"] = json_encode($this->transport->object_unset_nulls($id));
	     $gs_data_input2939299822982["method"] = "getCar";
	     $gs_data_input2939299822982["interfaceName"] = "core.mecamanager.IMecaManager";
	     return $this->transport->cast(new core_mecamanager_MecaCar(), $this->transport->sendMessage($gs_data_input2939299822982));
	}

	/**
	*
	* @author emil
	* @return core_mecamanager_MecaCar 
	*/

	public function getCarByPageId($pageId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["pageId"] = json_encode($this->transport->object_unset_nulls($pageId));
	     $gs_data_input2939299822982["method"] = "getCarByPageId";
	     $gs_data_input2939299822982["interfaceName"] = "core.mecamanager.IMecaManager";
	     return $this->transport->cast(new core_mecamanager_MecaCar(), $this->transport->sendMessage($gs_data_input2939299822982));
	}

	/**
	*
	* @author emil
	* @return core_mecamanager_MecaCar[] 
	*/

	public function getCarsByCellphone($cellPhone) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["cellPhone"] = json_encode($this->transport->object_unset_nulls($cellPhone));
	     $gs_data_input2939299822982["method"] = "getCarsByCellphone";
	     $gs_data_input2939299822982["interfaceName"] = "core.mecamanager.IMecaManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	*
	* @author emil
	* @return core_mecamanager_MecaCar[] 
	*/

	public function getCarsForMecaFleet($pageId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["pageId"] = json_encode($this->transport->object_unset_nulls($pageId));
	     $gs_data_input2939299822982["method"] = "getCarsForMecaFleet";
	     $gs_data_input2939299822982["interfaceName"] = "core.mecamanager.IMecaManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	*
	* @author emil
	* @return core_mecamanager_MecaCar[] 
	*/

	public function getCarsPKKList() {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982["method"] = "getCarsPKKList";
	     $gs_data_input2939299822982["interfaceName"] = "core.mecamanager.IMecaManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	*
	* @author emil
	* @return core_mecamanager_MecaCar[] 
	*/

	public function getCarsServiceList($needService) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["needService"] = json_encode($this->transport->object_unset_nulls($needService));
	     $gs_data_input2939299822982["method"] = "getCarsServiceList";
	     $gs_data_input2939299822982["interfaceName"] = "core.mecamanager.IMecaManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	*
	* @author emil
	* @return core_mecamanager_MecaFleet 
	*/

	public function getFleetByCar($car) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["car"] = json_encode($this->transport->object_unset_nulls($car));
	     $gs_data_input2939299822982["method"] = "getFleetByCar";
	     $gs_data_input2939299822982["interfaceName"] = "core.mecamanager.IMecaManager";
	     return $this->transport->cast(new core_mecamanager_MecaFleet(), $this->transport->sendMessage($gs_data_input2939299822982));
	}

	/**
	*
	* @author emil
	* @return core_mecamanager_MecaFleet 
	*/

	public function getFleetPageId($pageId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["pageId"] = json_encode($this->transport->object_unset_nulls($pageId));
	     $gs_data_input2939299822982["method"] = "getFleetPageId";
	     $gs_data_input2939299822982["interfaceName"] = "core.mecamanager.IMecaManager";
	     return $this->transport->cast(new core_mecamanager_MecaFleet(), $this->transport->sendMessage($gs_data_input2939299822982));
	}

	/**
	*
	* @author emil
	* @return core_mecamanager_MecaFleet[] 
	*/

	public function getFleets() {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982["method"] = "getFleets";
	     $gs_data_input2939299822982["interfaceName"] = "core.mecamanager.IMecaManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	*
	* @author emil
	* @return void 
	*/

	public function markControlAsCompleted($carId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["carId"] = json_encode($this->transport->object_unset_nulls($carId));
	     $gs_data_input2939299822982["method"] = "markControlAsCompleted";
	     $gs_data_input2939299822982["interfaceName"] = "core.mecamanager.IMecaManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	*
	* @author emil
	* @return void 
	*/

	public function noShowPkk($carId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["carId"] = json_encode($this->transport->object_unset_nulls($carId));
	     $gs_data_input2939299822982["method"] = "noShowPkk";
	     $gs_data_input2939299822982["interfaceName"] = "core.mecamanager.IMecaManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	*
	* @author emil
	* @return void 
	*/

	public function noShowService($carId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["carId"] = json_encode($this->transport->object_unset_nulls($carId));
	     $gs_data_input2939299822982["method"] = "noShowService";
	     $gs_data_input2939299822982["interfaceName"] = "core.mecamanager.IMecaManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	*
	* @author emil
	* @return void 
	*/

	public function notifyByPush($phoneNumber, $message) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["phoneNumber"] = json_encode($this->transport->object_unset_nulls($phoneNumber));
	     $gs_data_input2939299822982['args']["message"] = json_encode($this->transport->object_unset_nulls($message));
	     $gs_data_input2939299822982["method"] = "notifyByPush";
	     $gs_data_input2939299822982["interfaceName"] = "core.mecamanager.IMecaManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	*
	* @author emil
	* @return void 
	*/

	public function registerDeviceToCar($deviceId, $cellPhone) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["deviceId"] = json_encode($this->transport->object_unset_nulls($deviceId));
	     $gs_data_input2939299822982['args']["cellPhone"] = json_encode($this->transport->object_unset_nulls($cellPhone));
	     $gs_data_input2939299822982["method"] = "registerDeviceToCar";
	     $gs_data_input2939299822982["interfaceName"] = "core.mecamanager.IMecaManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	*
	* @author emil
	* @return void 
	*/

	public function requestNextControl($carId, $date) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["carId"] = json_encode($this->transport->object_unset_nulls($carId));
	     $gs_data_input2939299822982['args']["date"] = json_encode($this->transport->object_unset_nulls($date));
	     $gs_data_input2939299822982["method"] = "requestNextControl";
	     $gs_data_input2939299822982["interfaceName"] = "core.mecamanager.IMecaManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	*
	* @author emil
	* @return void 
	*/

	public function requestNextService($carId, $date) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["carId"] = json_encode($this->transport->object_unset_nulls($carId));
	     $gs_data_input2939299822982['args']["date"] = json_encode($this->transport->object_unset_nulls($date));
	     $gs_data_input2939299822982["method"] = "requestNextService";
	     $gs_data_input2939299822982["interfaceName"] = "core.mecamanager.IMecaManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	*
	* @author emil
	* @return void 
	*/

	public function resetServiceInterval($carId, $date, $kilometers) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["carId"] = json_encode($this->transport->object_unset_nulls($carId));
	     $gs_data_input2939299822982['args']["date"] = json_encode($this->transport->object_unset_nulls($date));
	     $gs_data_input2939299822982['args']["kilometers"] = json_encode($this->transport->object_unset_nulls($kilometers));
	     $gs_data_input2939299822982["method"] = "resetServiceInterval";
	     $gs_data_input2939299822982["interfaceName"] = "core.mecamanager.IMecaManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	*
	* @author emil
	* @return void 
	*/

	public function runNotificationCheck() {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982["method"] = "runNotificationCheck";
	     $gs_data_input2939299822982["interfaceName"] = "core.mecamanager.IMecaManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	*
	* @author emil
	* @return void 
	*/

	public function saveFleet($fleet) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["fleet"] = json_encode($this->transport->object_unset_nulls($fleet));
	     $gs_data_input2939299822982["method"] = "saveFleet";
	     $gs_data_input2939299822982["interfaceName"] = "core.mecamanager.IMecaManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	*
	* @author emil
	* @return core_mecamanager_MecaCar 
	*/

	public function saveFleetCar($pageId, $car) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["pageId"] = json_encode($this->transport->object_unset_nulls($pageId));
	     $gs_data_input2939299822982['args']["car"] = json_encode($this->transport->object_unset_nulls($car));
	     $gs_data_input2939299822982["method"] = "saveFleetCar";
	     $gs_data_input2939299822982["interfaceName"] = "core.mecamanager.IMecaManager";
	     return $this->transport->cast(new core_mecamanager_MecaCar(), $this->transport->sendMessage($gs_data_input2939299822982));
	}

	/**
	*
	* @author emil
	* @return void 
	*/

	public function saveMecaFleetSettings($settings) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["settings"] = json_encode($this->transport->object_unset_nulls($settings));
	     $gs_data_input2939299822982["method"] = "saveMecaFleetSettings";
	     $gs_data_input2939299822982["interfaceName"] = "core.mecamanager.IMecaManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	*
	* @author emil
	* @return void 
	*/

	public function sendEmail($cellPhone, $message) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["cellPhone"] = json_encode($this->transport->object_unset_nulls($cellPhone));
	     $gs_data_input2939299822982['args']["message"] = json_encode($this->transport->object_unset_nulls($message));
	     $gs_data_input2939299822982["method"] = "sendEmail";
	     $gs_data_input2939299822982["interfaceName"] = "core.mecamanager.IMecaManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	*
	* @author emil
	* @return void 
	*/

	public function sendInvite($mecaCarId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["mecaCarId"] = json_encode($this->transport->object_unset_nulls($mecaCarId));
	     $gs_data_input2939299822982["method"] = "sendInvite";
	     $gs_data_input2939299822982["interfaceName"] = "core.mecamanager.IMecaManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	*
	* @author emil
	* @return void 
	*/

	public function sendKilometerRequest($carId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["carId"] = json_encode($this->transport->object_unset_nulls($carId));
	     $gs_data_input2939299822982["method"] = "sendKilometerRequest";
	     $gs_data_input2939299822982["interfaceName"] = "core.mecamanager.IMecaManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	*
	* @author emil
	* @return void 
	*/

	public function sendKilometers($cellPhone, $kilometers) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["cellPhone"] = json_encode($this->transport->object_unset_nulls($cellPhone));
	     $gs_data_input2939299822982['args']["kilometers"] = json_encode($this->transport->object_unset_nulls($kilometers));
	     $gs_data_input2939299822982["method"] = "sendKilometers";
	     $gs_data_input2939299822982["interfaceName"] = "core.mecamanager.IMecaManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	*
	* @author emil
	* @return void 
	*/

	public function sendNotificationToStoreOwner() {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982["method"] = "sendNotificationToStoreOwner";
	     $gs_data_input2939299822982["interfaceName"] = "core.mecamanager.IMecaManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	*
	* @author emil
	* @return void 
	*/

	public function setCommentOnCar($carId, $comment) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["carId"] = json_encode($this->transport->object_unset_nulls($carId));
	     $gs_data_input2939299822982['args']["comment"] = json_encode($this->transport->object_unset_nulls($comment));
	     $gs_data_input2939299822982["method"] = "setCommentOnCar";
	     $gs_data_input2939299822982["interfaceName"] = "core.mecamanager.IMecaManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	*
	* @author emil
	* @return void 
	*/

	public function setManuallyControlDate($carId, $date) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["carId"] = json_encode($this->transport->object_unset_nulls($carId));
	     $gs_data_input2939299822982['args']["date"] = json_encode($this->transport->object_unset_nulls($date));
	     $gs_data_input2939299822982["method"] = "setManuallyControlDate";
	     $gs_data_input2939299822982["interfaceName"] = "core.mecamanager.IMecaManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	*
	* @author emil
	* @return void 
	*/

	public function setManuallyServiceDate($carId, $date) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["carId"] = json_encode($this->transport->object_unset_nulls($carId));
	     $gs_data_input2939299822982['args']["date"] = json_encode($this->transport->object_unset_nulls($date));
	     $gs_data_input2939299822982["method"] = "setManuallyServiceDate";
	     $gs_data_input2939299822982["interfaceName"] = "core.mecamanager.IMecaManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	*
	* @author emil
	* @return core_mecamanager_MecaCar 
	*/

	public function suggestDate($carId, $date) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["carId"] = json_encode($this->transport->object_unset_nulls($carId));
	     $gs_data_input2939299822982['args']["date"] = json_encode($this->transport->object_unset_nulls($date));
	     $gs_data_input2939299822982["method"] = "suggestDate";
	     $gs_data_input2939299822982["interfaceName"] = "core.mecamanager.IMecaManager";
	     return $this->transport->cast(new core_mecamanager_MecaCar(), $this->transport->sendMessage($gs_data_input2939299822982));
	}

}
class APIMekonomenManager {

	var $transport;
	
	function APIMekonomenManager($transport) {
		$this->transport = $transport;
	}

	/**
	*
	* @author ktonder
	* @return void 
	*/

	public function addUserId($userId, $mekonomenUserName) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["userId"] = json_encode($this->transport->object_unset_nulls($userId));
	     $gs_data_input2939299822982['args']["mekonomenUserName"] = json_encode($this->transport->object_unset_nulls($mekonomenUserName));
	     $gs_data_input2939299822982["method"] = "addUserId";
	     $gs_data_input2939299822982["interfaceName"] = "core.mekonomen.IMekonomenManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	*
	* @author ktonder
	* @return mekonomen_MekonomenUser 
	*/

	public function getMekonomenUser($userId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["userId"] = json_encode($this->transport->object_unset_nulls($userId));
	     $gs_data_input2939299822982["method"] = "getMekonomenUser";
	     $gs_data_input2939299822982["interfaceName"] = "core.mekonomen.IMekonomenManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	*
	* @author ktonder
	* @return void 
	*/

	public function removeConnectionToDatabase($userId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["userId"] = json_encode($this->transport->object_unset_nulls($userId));
	     $gs_data_input2939299822982["method"] = "removeConnectionToDatabase";
	     $gs_data_input2939299822982["interfaceName"] = "core.mekonomen.IMekonomenManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	*
	* @author ktonder
	* @return mekonomen_MekonomenUser[] 
	*/

	public function searchForUser($name) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["name"] = json_encode($this->transport->object_unset_nulls($name));
	     $gs_data_input2939299822982["method"] = "searchForUser";
	     $gs_data_input2939299822982["interfaceName"] = "core.mekonomen.IMekonomenManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

}
class APIMessageManager {

	var $transport;
	
	function APIMessageManager($transport) {
		$this->transport = $transport;
	}

	/**
	* Get how many messages a user has sent.
	*
	* @param year
	* @param month
	* @return void 
	*/

	public function collectEmail($email) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["email"] = json_encode($this->transport->object_unset_nulls($email));
	     $gs_data_input2939299822982["method"] = "collectEmail";
	     $gs_data_input2939299822982["interfaceName"] = "core.messagemanager.IMessageManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Get how many messages a user has sent.
	*
	* @param year
	* @param month
	* @return core_messagemanager_SmsMessage[] 
	*/

	public function getAllSmsMessages($start, $end) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["start"] = json_encode($this->transport->object_unset_nulls($start));
	     $gs_data_input2939299822982['args']["end"] = json_encode($this->transport->object_unset_nulls($end));
	     $gs_data_input2939299822982["method"] = "getAllSmsMessages";
	     $gs_data_input2939299822982["interfaceName"] = "core.messagemanager.IMessageManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Get how many messages a user has sent.
	*
	* @param year
	* @param month
	* @return String[] 
	*/

	public function getCollectedEmails() {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982["method"] = "getCollectedEmails";
	     $gs_data_input2939299822982["interfaceName"] = "core.messagemanager.IMessageManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Get how many messages a user has sent.
	*
	* @param year
	* @param month
	* @return core_messagemanager_SmsMessagePage 
	*/

	public function getIncomingMessages($pageNumber) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["pageNumber"] = json_encode($this->transport->object_unset_nulls($pageNumber));
	     $gs_data_input2939299822982["method"] = "getIncomingMessages";
	     $gs_data_input2939299822982["interfaceName"] = "core.messagemanager.IMessageManager";
	     return $this->transport->cast(new core_messagemanager_SmsMessagePage(), $this->transport->sendMessage($gs_data_input2939299822982));
	}

	/**
	* Get how many messages a user has sent.
	*
	* @param year
	* @param month
	* @return core_messagemanager_MailMessage 
	*/

	public function getMailMessage($mailMessageId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["mailMessageId"] = json_encode($this->transport->object_unset_nulls($mailMessageId));
	     $gs_data_input2939299822982["method"] = "getMailMessage";
	     $gs_data_input2939299822982["interfaceName"] = "core.messagemanager.IMessageManager";
	     return $this->transport->cast(new core_messagemanager_MailMessage(), $this->transport->sendMessage($gs_data_input2939299822982));
	}

	/**
	* Get how many messages a user has sent.
	*
	* @param year
	* @param month
	* @return core_messagemanager_MailMessage[] 
	*/

	public function getMailSent($from, $to, $toEmailAddress) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["from"] = json_encode($this->transport->object_unset_nulls($from));
	     $gs_data_input2939299822982['args']["to"] = json_encode($this->transport->object_unset_nulls($to));
	     $gs_data_input2939299822982['args']["toEmailAddress"] = json_encode($this->transport->object_unset_nulls($toEmailAddress));
	     $gs_data_input2939299822982["method"] = "getMailSent";
	     $gs_data_input2939299822982["interfaceName"] = "core.messagemanager.IMessageManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Get how many messages a user has sent.
	*
	* @param year
	* @param month
	* @return int 
	*/

	public function getSmsCount($year, $month) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["year"] = json_encode($this->transport->object_unset_nulls($year));
	     $gs_data_input2939299822982['args']["month"] = json_encode($this->transport->object_unset_nulls($month));
	     $gs_data_input2939299822982["method"] = "getSmsCount";
	     $gs_data_input2939299822982["interfaceName"] = "core.messagemanager.IMessageManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Get how many messages a user has sent.
	*
	* @param year
	* @param month
	* @return core_messagemanager_SmsMessage 
	*/

	public function getSmsMessage($smsMessageId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["smsMessageId"] = json_encode($this->transport->object_unset_nulls($smsMessageId));
	     $gs_data_input2939299822982["method"] = "getSmsMessage";
	     $gs_data_input2939299822982["interfaceName"] = "core.messagemanager.IMessageManager";
	     return $this->transport->cast(new core_messagemanager_SmsMessage(), $this->transport->sendMessage($gs_data_input2939299822982));
	}

	/**
	* Get how many messages a user has sent.
	*
	* @param year
	* @param month
	* @return core_messagemanager_SmsMessage[] 
	*/

	public function getSmsMessagesSentTo($prefix, $phoneNumber, $fromDate, $toDate) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["prefix"] = json_encode($this->transport->object_unset_nulls($prefix));
	     $gs_data_input2939299822982['args']["phoneNumber"] = json_encode($this->transport->object_unset_nulls($phoneNumber));
	     $gs_data_input2939299822982['args']["fromDate"] = json_encode($this->transport->object_unset_nulls($fromDate));
	     $gs_data_input2939299822982['args']["toDate"] = json_encode($this->transport->object_unset_nulls($toDate));
	     $gs_data_input2939299822982["method"] = "getSmsMessagesSentTo";
	     $gs_data_input2939299822982["interfaceName"] = "core.messagemanager.IMessageManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Get how many messages a user has sent.
	*
	* @param year
	* @param month
	* @return void 
	*/

	public function saveIncomingMessage($message, $code) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["message"] = json_encode($this->transport->object_unset_nulls($message));
	     $gs_data_input2939299822982['args']["code"] = json_encode($this->transport->object_unset_nulls($code));
	     $gs_data_input2939299822982["method"] = "saveIncomingMessage";
	     $gs_data_input2939299822982["interfaceName"] = "core.messagemanager.IMessageManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Get how many messages a user has sent.
	*
	* @param year
	* @param month
	* @return void 
	*/

	public function sendErrorNotify($inText) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["inText"] = json_encode($this->transport->object_unset_nulls($inText));
	     $gs_data_input2939299822982["method"] = "sendErrorNotify";
	     $gs_data_input2939299822982["interfaceName"] = "core.messagemanager.IMessageManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Send a mail.
	* @param to The address to send to
	* @param toName The name of the one receiving it.
	* @param subject The subject of the mail.
	* @param content The content to send
	* @param from The email sent from.
	* @param fromName The name of the sender.
	* @return String 
	*/

	public function sendMail($to, $toName, $subject, $content, $from, $fromName) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["to"] = json_encode($this->transport->object_unset_nulls($to));
	     $gs_data_input2939299822982['args']["toName"] = json_encode($this->transport->object_unset_nulls($toName));
	     $gs_data_input2939299822982['args']["subject"] = json_encode($this->transport->object_unset_nulls($subject));
	     $gs_data_input2939299822982['args']["content"] = json_encode($this->transport->object_unset_nulls($content));
	     $gs_data_input2939299822982['args']["from"] = json_encode($this->transport->object_unset_nulls($from));
	     $gs_data_input2939299822982['args']["fromName"] = json_encode($this->transport->object_unset_nulls($fromName));
	     $gs_data_input2939299822982["method"] = "sendMail";
	     $gs_data_input2939299822982["interfaceName"] = "core.messagemanager.IMessageManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Sending a mail with attachments,
	*
	* Map<Key, Value> - Key = FileName in attchments, Value = Base64 encoded stuff
	*
	* @param to
	* @param toName
	* @param subject
	* @param content
	* @param from
	* @param fromName
	* @param attachments
	* @return String 
	*/

	public function sendMailWithAttachments($to, $toName, $subject, $content, $from, $fromName, $attachments) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["to"] = json_encode($this->transport->object_unset_nulls($to));
	     $gs_data_input2939299822982['args']["toName"] = json_encode($this->transport->object_unset_nulls($toName));
	     $gs_data_input2939299822982['args']["subject"] = json_encode($this->transport->object_unset_nulls($subject));
	     $gs_data_input2939299822982['args']["content"] = json_encode($this->transport->object_unset_nulls($content));
	     $gs_data_input2939299822982['args']["from"] = json_encode($this->transport->object_unset_nulls($from));
	     $gs_data_input2939299822982['args']["fromName"] = json_encode($this->transport->object_unset_nulls($fromName));
	     $gs_data_input2939299822982['args']["attachments"] = json_encode($this->transport->object_unset_nulls($attachments));
	     $gs_data_input2939299822982["method"] = "sendMailWithAttachments";
	     $gs_data_input2939299822982["interfaceName"] = "core.messagemanager.IMessageManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Get how many messages a user has sent.
	*
	* @param year
	* @param month
	* @return void 
	*/

	public function sendMessageToStoreOwner($message, $subject) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["message"] = json_encode($this->transport->object_unset_nulls($message));
	     $gs_data_input2939299822982['args']["subject"] = json_encode($this->transport->object_unset_nulls($subject));
	     $gs_data_input2939299822982["method"] = "sendMessageToStoreOwner";
	     $gs_data_input2939299822982["interfaceName"] = "core.messagemanager.IMessageManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

}
class APIMobileManager {

	var $transport;
	
	function APIMobileManager($transport) {
		$this->transport = $transport;
	}

	/**
	* Clears the badged number.
	*
	* @param tokenId
	* @return void 
	*/

	public function clearBadged($tokenId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["tokenId"] = json_encode($this->transport->object_unset_nulls($tokenId));
	     $gs_data_input2939299822982["method"] = "clearBadged";
	     $gs_data_input2939299822982["interfaceName"] = "core.mobilemanager.IMobileManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Register a token to the system.
	* This token is later on used for sending messages
	* back to the unit.
	* s
	* @param token
	* @return void 
	*/

	public function registerToken($token) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["token"] = json_encode($this->transport->object_unset_nulls($token));
	     $gs_data_input2939299822982["method"] = "registerToken";
	     $gs_data_input2939299822982["interfaceName"] = "core.mobilemanager.IMobileManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Sends the message to all registered units.
	*
	* @param message
	* @return void 
	*/

	public function sendMessageToAll($message) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["message"] = json_encode($this->transport->object_unset_nulls($message));
	     $gs_data_input2939299822982["method"] = "sendMessageToAll";
	     $gs_data_input2939299822982["interfaceName"] = "core.mobilemanager.IMobileManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Sends the message to all units that are registered as test units.
	*
	* @param message
	* @return void 
	*/

	public function sendMessageToAllTestUnits($message) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["message"] = json_encode($this->transport->object_unset_nulls($message));
	     $gs_data_input2939299822982["method"] = "sendMessageToAllTestUnits";
	     $gs_data_input2939299822982["interfaceName"] = "core.mobilemanager.IMobileManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

}
class APINewsLetterManager {

	var $transport;
	
	function APINewsLetterManager($transport) {
		$this->transport = $transport;
	}

	/**
	* Calling this function will start sending newsletter with a five minute interval for all recipients.
	* @param group
	* @return void 
	*/

	public function sendNewsLetter($group) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["group"] = json_encode($this->transport->object_unset_nulls($group));
	     $gs_data_input2939299822982["method"] = "sendNewsLetter";
	     $gs_data_input2939299822982["interfaceName"] = "core.messagemanager.INewsLetterManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Send a preview to the selected contacts.
	* @param group
	* @return void 
	*/

	public function sendNewsLetterPreview($group) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["group"] = json_encode($this->transport->object_unset_nulls($group));
	     $gs_data_input2939299822982["method"] = "sendNewsLetterPreview";
	     $gs_data_input2939299822982["interfaceName"] = "core.messagemanager.INewsLetterManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

}
class APINewsManager {

	var $transport;
	
	function APINewsManager($transport) {
		$this->transport = $transport;
	}

	/**
	* Add a new news entry.
	* @param news The news object to add.
	* @throws ErrorExceNption
	* @return String 
	*/

	public function addNews($newsEntry, $newsListId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["newsEntry"] = json_encode($this->transport->object_unset_nulls($newsEntry));
	     $gs_data_input2939299822982['args']["newsListId"] = json_encode($this->transport->object_unset_nulls($newsListId));
	     $gs_data_input2939299822982["method"] = "addNews";
	     $gs_data_input2939299822982["interfaceName"] = "app.news.INewsManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Add a subscriber.
	* Whenever a new news is updated to this, the subscribe will get an email.
	* @param email The email address for the subscriber.
	* @throws ErrorException
	* @return app_newsmanager_data_MailSubscription 
	*/

	public function addSubscriber($email) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["email"] = json_encode($this->transport->object_unset_nulls($email));
	     $gs_data_input2939299822982["method"] = "addSubscriber";
	     $gs_data_input2939299822982["interfaceName"] = "app.news.INewsManager";
	     return $this->transport->cast(new app_newsmanager_data_MailSubscription(), $this->transport->sendMessage($gs_data_input2939299822982));
	}

	/**
	* Publishing news.
	*
	* @param id
	* @throws ErrorException
	* @return void 
	*/

	public function applyUserFilter($newsListId, $userId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["newsListId"] = json_encode($this->transport->object_unset_nulls($newsListId));
	     $gs_data_input2939299822982['args']["userId"] = json_encode($this->transport->object_unset_nulls($userId));
	     $gs_data_input2939299822982["method"] = "applyUserFilter";
	     $gs_data_input2939299822982["interfaceName"] = "app.news.INewsManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Publishing news.
	*
	* @param id
	* @throws ErrorException
	* @return void 
	*/

	public function changeDateOfNews($id, $date) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["id"] = json_encode($this->transport->object_unset_nulls($id));
	     $gs_data_input2939299822982['args']["date"] = json_encode($this->transport->object_unset_nulls($date));
	     $gs_data_input2939299822982["method"] = "changeDateOfNews";
	     $gs_data_input2939299822982["interfaceName"] = "app.news.INewsManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Delete a given news id.
	* @param id The id for the news to delete.
	* @throws ErrorException
	* @return void 
	*/

	public function deleteNews($id) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["id"] = json_encode($this->transport->object_unset_nulls($id));
	     $gs_data_input2939299822982["method"] = "deleteNews";
	     $gs_data_input2939299822982["interfaceName"] = "app.news.INewsManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Fetch all news added.
	* @throws ErrorException
	* @return app_newsmanager_data_NewsEntry[] 
	*/

	public function getAllNews($newsListId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["newsListId"] = json_encode($this->transport->object_unset_nulls($newsListId));
	     $gs_data_input2939299822982["method"] = "getAllNews";
	     $gs_data_input2939299822982["interfaceName"] = "app.news.INewsManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Get all subscribers.
	* @throws ErrorException
	* @return app_newsmanager_data_MailSubscription[] 
	*/

	public function getAllSubscribers() {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982["method"] = "getAllSubscribers";
	     $gs_data_input2939299822982["interfaceName"] = "app.news.INewsManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Get all subscribers.
	* @throws ErrorException
	* @return app_newsmanager_data_NewsEntry 
	*/

	public function getNewsForPage($id) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["id"] = json_encode($this->transport->object_unset_nulls($id));
	     $gs_data_input2939299822982["method"] = "getNewsForPage";
	     $gs_data_input2939299822982["interfaceName"] = "app.news.INewsManager";
	     return $this->transport->cast(new app_newsmanager_data_NewsEntry(), $this->transport->sendMessage($gs_data_input2939299822982));
	}

	/**
	* Publishing news.
	*
	* @param id
	* @throws ErrorException
	* @return app_newsmanager_data_NewsUser[] 
	*/

	public function getNewsUsers($newsListId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["newsListId"] = json_encode($this->transport->object_unset_nulls($newsListId));
	     $gs_data_input2939299822982["method"] = "getNewsUsers";
	     $gs_data_input2939299822982["interfaceName"] = "app.news.INewsManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Publishing news.
	*
	* @param id
	* @throws ErrorException
	* @return boolean 
	*/

	public function isFiltered($newsListId, $userId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["newsListId"] = json_encode($this->transport->object_unset_nulls($newsListId));
	     $gs_data_input2939299822982['args']["userId"] = json_encode($this->transport->object_unset_nulls($userId));
	     $gs_data_input2939299822982["method"] = "isFiltered";
	     $gs_data_input2939299822982["interfaceName"] = "app.news.INewsManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Publishing news.
	*
	* @param id
	* @throws ErrorException
	* @return void 
	*/

	public function publishNews($id) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["id"] = json_encode($this->transport->object_unset_nulls($id));
	     $gs_data_input2939299822982["method"] = "publishNews";
	     $gs_data_input2939299822982["interfaceName"] = "app.news.INewsManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Remove an existing subscriber.
	* @param subscriberId The subscribers id found in the MailSubscriber object.
	* @throws ErrorException
	* @return void 
	*/

	public function removeSubscriber($subscriberId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["subscriberId"] = json_encode($this->transport->object_unset_nulls($subscriberId));
	     $gs_data_input2939299822982["method"] = "removeSubscriber";
	     $gs_data_input2939299822982["interfaceName"] = "app.news.INewsManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

}
class APIOAuthManager {

	var $transport;
	
	function APIOAuthManager($transport) {
		$this->transport = $transport;
	}

	/**
	*
	* @author boggi
	* @return String 
	*/

	public function getStateRedirect($state) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["state"] = json_encode($this->transport->object_unset_nulls($state));
	     $gs_data_input2939299822982["method"] = "getStateRedirect";
	     $gs_data_input2939299822982["interfaceName"] = "core.oauthmanager.IOAuthManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	*
	* @author boggi
	* @return void 
	*/

	public function handleCallback($code, $state) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["code"] = json_encode($this->transport->object_unset_nulls($code));
	     $gs_data_input2939299822982['args']["state"] = json_encode($this->transport->object_unset_nulls($state));
	     $gs_data_input2939299822982["method"] = "handleCallback";
	     $gs_data_input2939299822982["interfaceName"] = "core.oauthmanager.IOAuthManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

}
class APIOrderManager {

	var $transport;
	
	function APIOrderManager($transport) {
		$this->transport = $transport;
	}

	/**
	* Returns the total amount of sales for a given year. If you year is left blank you
	* will get the total amount for all years.
	*
	* @param year
	* @return void 
	*/

	public function addClosedPeriode($closed) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["closed"] = json_encode($this->transport->object_unset_nulls($closed));
	     $gs_data_input2939299822982["method"] = "addClosedPeriode";
	     $gs_data_input2939299822982["interfaceName"] = "core.ordermanager.IOrderManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Fetch all orders for a user.
	* @param userId
	* @throws ErrorException
	* @return void 
	*/

	public function addProductToOrder($orderId, $productId, $count) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["orderId"] = json_encode($this->transport->object_unset_nulls($orderId));
	     $gs_data_input2939299822982['args']["productId"] = json_encode($this->transport->object_unset_nulls($productId));
	     $gs_data_input2939299822982['args']["count"] = json_encode($this->transport->object_unset_nulls($count));
	     $gs_data_input2939299822982["method"] = "addProductToOrder";
	     $gs_data_input2939299822982["interfaceName"] = "core.ordermanager.IOrderManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Change order status of a specified order.
	* The id could be the orderId or the transaction id.
	* @return void 
	*/

	public function changeOrderStatus($id, $status) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["id"] = json_encode($this->transport->object_unset_nulls($id));
	     $gs_data_input2939299822982['args']["status"] = json_encode($this->transport->object_unset_nulls($status));
	     $gs_data_input2939299822982["method"] = "changeOrderStatus";
	     $gs_data_input2939299822982["interfaceName"] = "core.ordermanager.IOrderManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Returns the total amount of sales for a given year. If you year is left blank you
	* will get the total amount for all years.
	*
	* @param year
	* @return void 
	*/

	public function changeOrderType($orderId, $paymentTypeId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["orderId"] = json_encode($this->transport->object_unset_nulls($orderId));
	     $gs_data_input2939299822982['args']["paymentTypeId"] = json_encode($this->transport->object_unset_nulls($paymentTypeId));
	     $gs_data_input2939299822982["method"] = "changeOrderType";
	     $gs_data_input2939299822982["interfaceName"] = "core.ordermanager.IOrderManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* This will create a order for a given userId.
	* To avoid fraud, shipment address and etc will only be
	* able to set to the already registered user in the database.
	*
	* @param userId
	* @return void 
	*/

	public function checkForOrdersFailedCollecting() {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982["method"] = "checkForOrdersFailedCollecting";
	     $gs_data_input2939299822982["interfaceName"] = "core.ordermanager.IOrderManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Got a reference number for the order, fetch it from here.
	* @param referenceId
	* @throws ErrorException
	* @return void 
	*/

	public function checkForOrdersToAutoPay($daysToTryAfterOrderHasStarted) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["daysToTryAfterOrderHasStarted"] = json_encode($this->transport->object_unset_nulls($daysToTryAfterOrderHasStarted));
	     $gs_data_input2939299822982["method"] = "checkForOrdersToAutoPay";
	     $gs_data_input2939299822982["interfaceName"] = "core.ordermanager.IOrderManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Got a reference number for the order, fetch it from here.
	* @param referenceId
	* @throws ErrorException
	* @return void 
	*/

	public function checkForOrdersToCapture($internalPassword) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["internalPassword"] = json_encode($this->transport->object_unset_nulls($internalPassword));
	     $gs_data_input2939299822982["method"] = "checkForOrdersToCapture";
	     $gs_data_input2939299822982["interfaceName"] = "core.ordermanager.IOrderManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Create an order out of a given cart.
	* @param cart The cart object generated by cartmanager.
	* @throws ErrorException
	* @return core_ordermanager_data_Order 
	*/

	public function createOrder($address) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["address"] = json_encode($this->transport->object_unset_nulls($address));
	     $gs_data_input2939299822982["method"] = "createOrder";
	     $gs_data_input2939299822982["interfaceName"] = "core.ordermanager.IOrderManager";
	     return $this->transport->cast(new core_ordermanager_data_Order(), $this->transport->sendMessage($gs_data_input2939299822982));
	}

	/**
	* If a customer is providing a customer reference id, it should be possible to create order by it.
	* @param cart The cart object generated by cartmanager.
	* @throws ErrorException
	* @return core_ordermanager_data_Order 
	*/

	public function createOrderByCustomerReference($referenceKey) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["referenceKey"] = json_encode($this->transport->object_unset_nulls($referenceKey));
	     $gs_data_input2939299822982["method"] = "createOrderByCustomerReference";
	     $gs_data_input2939299822982["interfaceName"] = "core.ordermanager.IOrderManager";
	     return $this->transport->cast(new core_ordermanager_data_Order(), $this->transport->sendMessage($gs_data_input2939299822982));
	}

	/**
	* This will create a order for a given userId.
	* To avoid fraud, shipment address and etc will only be
	* able to set to the already registered user in the database.
	*
	* @param userId
	* @return core_ordermanager_data_Order 
	*/

	public function createOrderForUser($userId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["userId"] = json_encode($this->transport->object_unset_nulls($userId));
	     $gs_data_input2939299822982["method"] = "createOrderForUser";
	     $gs_data_input2939299822982["interfaceName"] = "core.ordermanager.IOrderManager";
	     return $this->transport->cast(new core_ordermanager_data_Order(), $this->transport->sendMessage($gs_data_input2939299822982));
	}

	/**
	* This will create a order for a given userId.
	* To avoid fraud, shipment address and etc will only be
	* able to set to the already registered user in the database.
	*
	* @param userId
	* @return String 
	*/

	public function createRegisterCardOrder($paymentType) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["paymentType"] = json_encode($this->transport->object_unset_nulls($paymentType));
	     $gs_data_input2939299822982["method"] = "createRegisterCardOrder";
	     $gs_data_input2939299822982["interfaceName"] = "core.ordermanager.IOrderManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Fetch all orders for a user.
	* @param userId
	* @throws ErrorException
	* @return core_ordermanager_data_Order 
	*/

	public function creditOrder($orderId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["orderId"] = json_encode($this->transport->object_unset_nulls($orderId));
	     $gs_data_input2939299822982["method"] = "creditOrder";
	     $gs_data_input2939299822982["interfaceName"] = "core.ordermanager.IOrderManager";
	     return $this->transport->cast(new core_ordermanager_data_Order(), $this->transport->sendMessage($gs_data_input2939299822982));
	}

	/**
	* This will create a order for a given userId.
	* To avoid fraud, shipment address and etc will only be
	* able to set to the already registered user in the database.
	*
	* @param userId
	* @return void 
	*/

	public function deleteAllVirtualOrders() {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982["method"] = "deleteAllVirtualOrders";
	     $gs_data_input2939299822982["interfaceName"] = "core.ordermanager.IOrderManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Returns the total amount of sales for a given year. If you year is left blank you
	* will get the total amount for all years.
	*
	* @param year
	* @return void 
	*/

	public function deleteOrder($orderId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["orderId"] = json_encode($this->transport->object_unset_nulls($orderId));
	     $gs_data_input2939299822982["method"] = "deleteOrder";
	     $gs_data_input2939299822982["interfaceName"] = "core.ordermanager.IOrderManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* This will create a order for a given userId.
	* To avoid fraud, shipment address and etc will only be
	* able to set to the already registered user in the database.
	*
	* @param userId
	* @return void 
	*/

	public function forceDeleteOrder($orderId, $password) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["orderId"] = json_encode($this->transport->object_unset_nulls($orderId));
	     $gs_data_input2939299822982['args']["password"] = json_encode($this->transport->object_unset_nulls($password));
	     $gs_data_input2939299822982["method"] = "forceDeleteOrder";
	     $gs_data_input2939299822982["interfaceName"] = "core.ordermanager.IOrderManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Fetch all orders for a user.
	* @param userId
	* @throws ErrorException
	* @return core_ordermanager_data_Order[] 
	*/

	public function getAllOrdersForUser($userId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["userId"] = json_encode($this->transport->object_unset_nulls($userId));
	     $gs_data_input2939299822982["method"] = "getAllOrdersForUser";
	     $gs_data_input2939299822982["interfaceName"] = "core.ordermanager.IOrderManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Fetch all orders on product.
	* @param userId
	* @throws ErrorException
	* @return core_ordermanager_data_Order[] 
	*/

	public function getAllOrdersOnProduct($productId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["productId"] = json_encode($this->transport->object_unset_nulls($productId));
	     $gs_data_input2939299822982["method"] = "getAllOrdersOnProduct";
	     $gs_data_input2939299822982["interfaceName"] = "core.ordermanager.IOrderManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Returns the total amount of sales for a given year. If you year is left blank you
	* will get the total amount for all years.
	*
	* @param year
	* @return core_ordermanager_data_Order[] 
	*/

	public function getAllUnpaid($paymentMethod) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["paymentMethod"] = json_encode($this->transport->object_unset_nulls($paymentMethod));
	     $gs_data_input2939299822982["method"] = "getAllUnpaid";
	     $gs_data_input2939299822982["interfaceName"] = "core.ordermanager.IOrderManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Returns the total amount of sales for a given year. If you year is left blank you
	* will get the total amount for all years.
	*
	* @param year
	* @return core_ordermanager_data_Order[] 
	*/

	public function getAllUnpaidInvoices() {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982["method"] = "getAllUnpaidInvoices";
	     $gs_data_input2939299822982["interfaceName"] = "core.ordermanager.IOrderManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Calculate the total amount to pay for the order.
	*
	* @param order
	* @return core_ordermanager_data_CartItemDates[] 
	*/

	public function getItemDates($start, $end) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["start"] = json_encode($this->transport->object_unset_nulls($start));
	     $gs_data_input2939299822982['args']["end"] = json_encode($this->transport->object_unset_nulls($end));
	     $gs_data_input2939299822982["method"] = "getItemDates";
	     $gs_data_input2939299822982["interfaceName"] = "core.ordermanager.IOrderManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Returns the total amount of sales for a given year. If you year is left blank you
	* will get the total amount for all years.
	*
	* @param year
	* @return public abstract interface Map<K,V> 
	*/

	public function getMostSoldProducts($numberOfProducts) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["numberOfProducts"] = json_encode($this->transport->object_unset_nulls($numberOfProducts));
	     $gs_data_input2939299822982["method"] = "getMostSoldProducts";
	     $gs_data_input2939299822982["interfaceName"] = "core.ordermanager.IOrderManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Get a list of already created orders.
	* @param orderIds A list of all orders you want to fetch, all orders are retrieved if this list is empty.
	* @param page What page are you fetching (default 0)
	* @param pageSize Number of entries for each page (default 10)
	* @throws ErrorException
	* @return core_ordermanager_data_Payment 
	*/

	public function getMyPrefferedPaymentMethod() {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982["method"] = "getMyPrefferedPaymentMethod";
	     $gs_data_input2939299822982["interfaceName"] = "core.ordermanager.IOrderManager";
	     return $this->transport->cast(new core_ordermanager_data_Payment(), $this->transport->sendMessage($gs_data_input2939299822982));
	}

	/**
	* Fetch a single order based on its id.
	* @param orderId
	* @throws ErrorException
	* @return core_ordermanager_data_Order 
	*/

	public function getOrder($orderId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["orderId"] = json_encode($this->transport->object_unset_nulls($orderId));
	     $gs_data_input2939299822982["method"] = "getOrder";
	     $gs_data_input2939299822982["interfaceName"] = "core.ordermanager.IOrderManager";
	     return $this->transport->cast(new core_ordermanager_data_Order(), $this->transport->sendMessage($gs_data_input2939299822982));
	}

	/**
	* Got a reference number for the order, fetch it from here.
	* @param referenceId
	* @throws ErrorException
	* @return core_ordermanager_data_Order 
	*/

	public function getOrderByReference($referenceId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["referenceId"] = json_encode($this->transport->object_unset_nulls($referenceId));
	     $gs_data_input2939299822982["method"] = "getOrderByReference";
	     $gs_data_input2939299822982["interfaceName"] = "core.ordermanager.IOrderManager";
	     return $this->transport->cast(new core_ordermanager_data_Order(), $this->transport->sendMessage($gs_data_input2939299822982));
	}

	/**
	* @param id
	* @throws ErrorException
	* @return core_ordermanager_data_Order 
	*/

	public function getOrderByincrementOrderId($id) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["id"] = json_encode($this->transport->object_unset_nulls($id));
	     $gs_data_input2939299822982["method"] = "getOrderByincrementOrderId";
	     $gs_data_input2939299822982["interfaceName"] = "core.ordermanager.IOrderManager";
	     return $this->transport->cast(new core_ordermanager_data_Order(), $this->transport->sendMessage($gs_data_input2939299822982));
	}

	/**
	* @param id
	* @throws ErrorException
	* @return core_ordermanager_data_Order 
	*/

	public function getOrderByincrementOrderIdAndPassword($id, $password) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["id"] = json_encode($this->transport->object_unset_nulls($id));
	     $gs_data_input2939299822982['args']["password"] = json_encode($this->transport->object_unset_nulls($password));
	     $gs_data_input2939299822982["method"] = "getOrderByincrementOrderIdAndPassword";
	     $gs_data_input2939299822982["interfaceName"] = "core.ordermanager.IOrderManager";
	     return $this->transport->cast(new core_ordermanager_data_Order(), $this->transport->sendMessage($gs_data_input2939299822982));
	}

	/**
	* Fetch a single order based on its id.
	* @param orderId
	* @throws ErrorException
	* @return core_ordermanager_data_Order 
	*/

	public function getOrderSecure($orderId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["orderId"] = json_encode($this->transport->object_unset_nulls($orderId));
	     $gs_data_input2939299822982["method"] = "getOrderSecure";
	     $gs_data_input2939299822982["interfaceName"] = "core.ordermanager.IOrderManager";
	     return $this->transport->cast(new core_ordermanager_data_Order(), $this->transport->sendMessage($gs_data_input2939299822982));
	}

	/**
	* Fetch a single order based on its id.
	* @param orderId
	* @throws ErrorException
	* @return core_ordermanager_data_Order 
	*/

	public function getOrderWithIdAndPassword($orderId, $password) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["orderId"] = json_encode($this->transport->object_unset_nulls($orderId));
	     $gs_data_input2939299822982['args']["password"] = json_encode($this->transport->object_unset_nulls($password));
	     $gs_data_input2939299822982["method"] = "getOrderWithIdAndPassword";
	     $gs_data_input2939299822982["interfaceName"] = "core.ordermanager.IOrderManager";
	     return $this->transport->cast(new core_ordermanager_data_Order(), $this->transport->sendMessage($gs_data_input2939299822982));
	}

	/**
	* Get a list of already created orders.
	* @param orderIds A list of all orders you want to fetch, all orders are retrieved if this list is empty.
	* @param page What page are you fetching (default 0)
	* @param pageSize Number of entries for each page (default 10)
	* @throws ErrorException
	* @return core_ordermanager_data_Order[] 
	*/

	public function getOrders($orderIds, $page, $pageSize) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["orderIds"] = json_encode($this->transport->object_unset_nulls($orderIds));
	     $gs_data_input2939299822982['args']["page"] = json_encode($this->transport->object_unset_nulls($page));
	     $gs_data_input2939299822982['args']["pageSize"] = json_encode($this->transport->object_unset_nulls($pageSize));
	     $gs_data_input2939299822982["method"] = "getOrders";
	     $gs_data_input2939299822982["interfaceName"] = "core.ordermanager.IOrderManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Get a list of already created orders.
	* @param orderIds A list of all orders you want to fetch, all orders are retrieved if this list is empty.
	* @param page What page are you fetching (default 0)
	* @param pageSize Number of entries for each page (default 10)
	* @throws ErrorException
	* @return core_ordermanager_data_OrderResult[] 
	*/

	public function getOrdersByFilter($filter) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["filter"] = json_encode($this->transport->object_unset_nulls($filter));
	     $gs_data_input2939299822982["method"] = "getOrdersByFilter";
	     $gs_data_input2939299822982["interfaceName"] = "core.ordermanager.IOrderManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Get a list of already created orders.
	* @param orderIds A list of all orders you want to fetch, all orders are retrieved if this list is empty.
	* @param page What page are you fetching (default 0)
	* @param pageSize Number of entries for each page (default 10)
	* @throws ErrorException
	* @return core_common_FilteredData 
	*/

	public function getOrdersFiltered($filterOptions) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["filterOptions"] = json_encode($this->transport->object_unset_nulls($filterOptions));
	     $gs_data_input2939299822982["method"] = "getOrdersFiltered";
	     $gs_data_input2939299822982["interfaceName"] = "core.ordermanager.IOrderManager";
	     return $this->transport->cast(new core_common_FilteredData(), $this->transport->sendMessage($gs_data_input2939299822982));
	}

	/**
	* Fetch a single order based on its id.
	* @param orderId
	* @throws ErrorException
	* @return core_ordermanager_data_Order[] 
	*/

	public function getOrdersFromPeriode($start, $end, $statistics) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["start"] = json_encode($this->transport->object_unset_nulls($start));
	     $gs_data_input2939299822982['args']["end"] = json_encode($this->transport->object_unset_nulls($end));
	     $gs_data_input2939299822982['args']["statistics"] = json_encode($this->transport->object_unset_nulls($statistics));
	     $gs_data_input2939299822982["method"] = "getOrdersFromPeriode";
	     $gs_data_input2939299822982["interfaceName"] = "core.ordermanager.IOrderManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Returns the total amount of sales for a given year. If you year is left blank you
	* will get the total amount for all years.
	*
	* @param year
	* @return core_ordermanager_data_Order[] 
	*/

	public function getOrdersNotTransferredToAccountingSystem() {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982["method"] = "getOrdersNotTransferredToAccountingSystem";
	     $gs_data_input2939299822982["interfaceName"] = "core.ordermanager.IOrderManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Returns the total amount of sales for a given year. If you year is left blank you
	* will get the total amount for all years.
	*
	* @param year
	* @return core_ordermanager_data_Order[] 
	*/

	public function getOrdersPaid($paymentId, $userId, $from, $to) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["paymentId"] = json_encode($this->transport->object_unset_nulls($paymentId));
	     $gs_data_input2939299822982['args']["userId"] = json_encode($this->transport->object_unset_nulls($userId));
	     $gs_data_input2939299822982['args']["from"] = json_encode($this->transport->object_unset_nulls($from));
	     $gs_data_input2939299822982['args']["to"] = json_encode($this->transport->object_unset_nulls($to));
	     $gs_data_input2939299822982["method"] = "getOrdersPaid";
	     $gs_data_input2939299822982["interfaceName"] = "core.ordermanager.IOrderManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Returns the total amount of sales for a given year. If you year is left blank you
	* will get the total amount for all years.
	*
	* @param year
	* @return core_ordermanager_data_Order[] 
	*/

	public function getOrdersToCapture() {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982["method"] = "getOrdersToCapture";
	     $gs_data_input2939299822982["interfaceName"] = "core.ordermanager.IOrderManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Returns how many pages there is for this store with the given pagesize
	* @return int 
	*/

	public function getPageCount($pageSize, $searchWord) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["pageSize"] = json_encode($this->transport->object_unset_nulls($pageSize));
	     $gs_data_input2939299822982['args']["searchWord"] = json_encode($this->transport->object_unset_nulls($searchWord));
	     $gs_data_input2939299822982["method"] = "getPageCount";
	     $gs_data_input2939299822982["interfaceName"] = "core.ordermanager.IOrderManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Get a list of already created orders.
	* @param orderIds A list of all orders you want to fetch, all orders are retrieved if this list is empty.
	* @param page What page are you fetching (default 0)
	* @param pageSize Number of entries for each page (default 10)
	* @throws ErrorException
	* @return String[] 
	*/

	public function getPaymentMethodsThatHasOrders() {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982["method"] = "getPaymentMethodsThatHasOrders";
	     $gs_data_input2939299822982["interfaceName"] = "core.ordermanager.IOrderManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Calculate the total amount to pay for the order.
	*
	* @param order
	* @return Double 
	*/

	public function getRestToPay($order) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["order"] = json_encode($this->transport->object_unset_nulls($order));
	     $gs_data_input2939299822982["method"] = "getRestToPay";
	     $gs_data_input2939299822982["interfaceName"] = "core.ordermanager.IOrderManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Returns the total amount of sales for a given year. If you year is left blank you
	* will get the total amount for all years.
	*
	* @param year
	* @return core_ordermanager_data_Statistic[] 
	*/

	public function getSalesNumber($year) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["year"] = json_encode($this->transport->object_unset_nulls($year));
	     $gs_data_input2939299822982["method"] = "getSalesNumber";
	     $gs_data_input2939299822982["interfaceName"] = "core.ordermanager.IOrderManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Returns the total amount of sales for a given year. If you year is left blank you
	* will get the total amount for all years.
	*
	* @param year
	* @return public class HashMap<K,V> 
	*/

	public function getSalesStatistics($startDate, $endDate, $type) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["startDate"] = json_encode($this->transport->object_unset_nulls($startDate));
	     $gs_data_input2939299822982['args']["endDate"] = json_encode($this->transport->object_unset_nulls($endDate));
	     $gs_data_input2939299822982['args']["type"] = json_encode($this->transport->object_unset_nulls($type));
	     $gs_data_input2939299822982["method"] = "getSalesStatistics";
	     $gs_data_input2939299822982["interfaceName"] = "core.ordermanager.IOrderManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Returns the total amount of sales for a given year. If you year is left blank you
	* will get the total amount for all years.
	*
	* @param year
	* @return core_ordermanager_data_Payment 
	*/

	public function getStorePreferredPayementMethod() {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982["method"] = "getStorePreferredPayementMethod";
	     $gs_data_input2939299822982["interfaceName"] = "core.ordermanager.IOrderManager";
	     return $this->transport->cast(new core_ordermanager_data_Payment(), $this->transport->sendMessage($gs_data_input2939299822982));
	}

	/**
	* Returns a list over taxes
	* for the specified order.
	*
	* @param order
	* @throws ErrorException
	* @return core_cartmanager_data_CartTax[] 
	*/

	public function getTaxes($order) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["order"] = json_encode($this->transport->object_unset_nulls($order));
	     $gs_data_input2939299822982["method"] = "getTaxes";
	     $gs_data_input2939299822982["interfaceName"] = "core.ordermanager.IOrderManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Calculate the total amount to pay for the order.
	*
	* @param order
	* @return Double 
	*/

	public function getTotalAmount($order) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["order"] = json_encode($this->transport->object_unset_nulls($order));
	     $gs_data_input2939299822982["method"] = "getTotalAmount";
	     $gs_data_input2939299822982["interfaceName"] = "core.ordermanager.IOrderManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Calculate the total amount to pay for the order.
	*
	* @param order
	* @return Double 
	*/

	public function getTotalAmountExTaxes($order) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["order"] = json_encode($this->transport->object_unset_nulls($order));
	     $gs_data_input2939299822982["method"] = "getTotalAmountExTaxes";
	     $gs_data_input2939299822982["interfaceName"] = "core.ordermanager.IOrderManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Returns the total amount of sales for a given year. If you year is left blank you
	* will get the total amount for all years.
	*
	* @param year
	* @return Double 
	*/

	public function getTotalForOrderById($orderId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["orderId"] = json_encode($this->transport->object_unset_nulls($orderId));
	     $gs_data_input2939299822982["method"] = "getTotalForOrderById";
	     $gs_data_input2939299822982["interfaceName"] = "core.ordermanager.IOrderManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Returns the total amount of sales for a given year. If you year is left blank you
	* will get the total amount for all years.
	*
	* @param year
	* @return Double 
	*/

	public function getTotalSalesAmount($year, $month, $week, $day, $type) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["year"] = json_encode($this->transport->object_unset_nulls($year));
	     $gs_data_input2939299822982['args']["month"] = json_encode($this->transport->object_unset_nulls($month));
	     $gs_data_input2939299822982['args']["week"] = json_encode($this->transport->object_unset_nulls($week));
	     $gs_data_input2939299822982['args']["day"] = json_encode($this->transport->object_unset_nulls($day));
	     $gs_data_input2939299822982['args']["type"] = json_encode($this->transport->object_unset_nulls($type));
	     $gs_data_input2939299822982["method"] = "getTotalSalesAmount";
	     $gs_data_input2939299822982["interfaceName"] = "core.ordermanager.IOrderManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Get a list of already created orders.
	* @param orderIds A list of all orders you want to fetch, all orders are retrieved if this list is empty.
	* @param page What page are you fetching (default 0)
	* @param pageSize Number of entries for each page (default 10)
	* @throws ErrorException
	* @return core_ordermanager_data_Payment 
	*/

	public function getUserPrefferedPaymentMethod($userId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["userId"] = json_encode($this->transport->object_unset_nulls($userId));
	     $gs_data_input2939299822982["method"] = "getUserPrefferedPaymentMethod";
	     $gs_data_input2939299822982["interfaceName"] = "core.ordermanager.IOrderManager";
	     return $this->transport->cast(new core_ordermanager_data_Payment(), $this->transport->sendMessage($gs_data_input2939299822982));
	}

	/**
	* Returns the total amount of sales for a given year. If you year is left blank you
	* will get the total amount for all years.
	*
	* @param year
	* @return void 
	*/

	public function logTransactionEntry($orderId, $entry) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["orderId"] = json_encode($this->transport->object_unset_nulls($orderId));
	     $gs_data_input2939299822982['args']["entry"] = json_encode($this->transport->object_unset_nulls($entry));
	     $gs_data_input2939299822982["method"] = "logTransactionEntry";
	     $gs_data_input2939299822982["interfaceName"] = "core.ordermanager.IOrderManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Change order status of a specified order.
	* The id could be the orderId or the transaction id.
	* @return void 
	*/

	public function markAsInvoicePayment($orderId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["orderId"] = json_encode($this->transport->object_unset_nulls($orderId));
	     $gs_data_input2939299822982["method"] = "markAsInvoicePayment";
	     $gs_data_input2939299822982["interfaceName"] = "core.ordermanager.IOrderManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Update or modify an existing order.
	* @param order The order to modify
	* @throws ErrorException
	* @return void 
	*/

	public function markAsPaid($orderId, $date, $amount) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["orderId"] = json_encode($this->transport->object_unset_nulls($orderId));
	     $gs_data_input2939299822982['args']["date"] = json_encode($this->transport->object_unset_nulls($date));
	     $gs_data_input2939299822982['args']["amount"] = json_encode($this->transport->object_unset_nulls($amount));
	     $gs_data_input2939299822982["method"] = "markAsPaid";
	     $gs_data_input2939299822982["interfaceName"] = "core.ordermanager.IOrderManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Update or modify an existing order.
	* @param order The order to modify
	* @throws ErrorException
	* @return void 
	*/

	public function markAsPaidWithPassword($orderId, $date, $amount, $password) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["orderId"] = json_encode($this->transport->object_unset_nulls($orderId));
	     $gs_data_input2939299822982['args']["date"] = json_encode($this->transport->object_unset_nulls($date));
	     $gs_data_input2939299822982['args']["amount"] = json_encode($this->transport->object_unset_nulls($amount));
	     $gs_data_input2939299822982['args']["password"] = json_encode($this->transport->object_unset_nulls($password));
	     $gs_data_input2939299822982["method"] = "markAsPaidWithPassword";
	     $gs_data_input2939299822982["interfaceName"] = "core.ordermanager.IOrderManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Returns the total amount of sales for a given year. If you year is left blank you
	* will get the total amount for all years.
	*
	* @param year
	* @return core_ordermanager_data_Order 
	*/

	public function mergeAndCreateNewOrder($userId, $orderIds, $paymentMethod, $note) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["userId"] = json_encode($this->transport->object_unset_nulls($userId));
	     $gs_data_input2939299822982['args']["orderIds"] = json_encode($this->transport->object_unset_nulls($orderIds));
	     $gs_data_input2939299822982['args']["paymentMethod"] = json_encode($this->transport->object_unset_nulls($paymentMethod));
	     $gs_data_input2939299822982['args']["note"] = json_encode($this->transport->object_unset_nulls($note));
	     $gs_data_input2939299822982["method"] = "mergeAndCreateNewOrder";
	     $gs_data_input2939299822982["interfaceName"] = "core.ordermanager.IOrderManager";
	     return $this->transport->cast(new core_ordermanager_data_Order(), $this->transport->sendMessage($gs_data_input2939299822982));
	}

	/**
	* Fetch a single order based on its id.
	* @param orderId
	* @throws ErrorException
	* @return boolean 
	*/

	public function payWithCard($orderId, $cardId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["orderId"] = json_encode($this->transport->object_unset_nulls($orderId));
	     $gs_data_input2939299822982['args']["cardId"] = json_encode($this->transport->object_unset_nulls($cardId));
	     $gs_data_input2939299822982["method"] = "payWithCard";
	     $gs_data_input2939299822982["interfaceName"] = "core.ordermanager.IOrderManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Returns the total amount of sales for a given year. If you year is left blank you
	* will get the total amount for all years.
	*
	* @param year
	* @return void 
	*/

	public function printInvoice($orderId, $printerId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["orderId"] = json_encode($this->transport->object_unset_nulls($orderId));
	     $gs_data_input2939299822982['args']["printerId"] = json_encode($this->transport->object_unset_nulls($printerId));
	     $gs_data_input2939299822982["method"] = "printInvoice";
	     $gs_data_input2939299822982["interfaceName"] = "core.ordermanager.IOrderManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Update or modify an existing order.
	* @param order The order to modify
	* @throws ErrorException
	* @return void 
	*/

	public function saveOrder($order) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["order"] = json_encode($this->transport->object_unset_nulls($order));
	     $gs_data_input2939299822982["method"] = "saveOrder";
	     $gs_data_input2939299822982["interfaceName"] = "core.ordermanager.IOrderManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Returns how many pages there is for this store with the given pagesize
	* @return core_ordermanager_data_Order[] 
	*/

	public function searchForOrders($searchWord, $page, $pageSize) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["searchWord"] = json_encode($this->transport->object_unset_nulls($searchWord));
	     $gs_data_input2939299822982['args']["page"] = json_encode($this->transport->object_unset_nulls($page));
	     $gs_data_input2939299822982['args']["pageSize"] = json_encode($this->transport->object_unset_nulls($pageSize));
	     $gs_data_input2939299822982["method"] = "searchForOrders";
	     $gs_data_input2939299822982["interfaceName"] = "core.ordermanager.IOrderManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Returns the total amount of sales for a given year. If you year is left blank you
	* will get the total amount for all years.
	*
	* @param year
	* @return void 
	*/

	public function sendReciept($orderId, $email) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["orderId"] = json_encode($this->transport->object_unset_nulls($orderId));
	     $gs_data_input2939299822982['args']["email"] = json_encode($this->transport->object_unset_nulls($email));
	     $gs_data_input2939299822982["method"] = "sendReciept";
	     $gs_data_input2939299822982["interfaceName"] = "core.ordermanager.IOrderManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Returns the total amount of sales for a given year. If you year is left blank you
	* will get the total amount for all years.
	*
	* @param year
	* @return void 
	*/

	public function sendRecieptWithText($orderId, $email, $subject, $text) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["orderId"] = json_encode($this->transport->object_unset_nulls($orderId));
	     $gs_data_input2939299822982['args']["email"] = json_encode($this->transport->object_unset_nulls($email));
	     $gs_data_input2939299822982['args']["subject"] = json_encode($this->transport->object_unset_nulls($subject));
	     $gs_data_input2939299822982['args']["text"] = json_encode($this->transport->object_unset_nulls($text));
	     $gs_data_input2939299822982["method"] = "sendRecieptWithText";
	     $gs_data_input2939299822982["interfaceName"] = "core.ordermanager.IOrderManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Returns the total amount of sales for a given year. If you year is left blank you
	* will get the total amount for all years.
	*
	* @param year
	* @return void 
	*/

	public function setExternalRefOnCartItem($cartItem, $externalId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["cartItem"] = json_encode($this->transport->object_unset_nulls($cartItem));
	     $gs_data_input2939299822982['args']["externalId"] = json_encode($this->transport->object_unset_nulls($externalId));
	     $gs_data_input2939299822982["method"] = "setExternalRefOnCartItem";
	     $gs_data_input2939299822982["interfaceName"] = "core.ordermanager.IOrderManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* If everything is ok, the price is the same as the order and the currency, then update the status.
	* @param password A predefined password needed to update the status.
	* @param orderId The id of the order to update
	* @param currency The currency the transaction returned
	* @param price The price.
	* @throws ErrorException
	* @return void 
	*/

	public function setOrderStatus($password, $orderId, $currency, $price, $status) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["password"] = json_encode($this->transport->object_unset_nulls($password));
	     $gs_data_input2939299822982['args']["orderId"] = json_encode($this->transport->object_unset_nulls($orderId));
	     $gs_data_input2939299822982['args']["currency"] = json_encode($this->transport->object_unset_nulls($currency));
	     $gs_data_input2939299822982['args']["price"] = json_encode($this->transport->object_unset_nulls($price));
	     $gs_data_input2939299822982['args']["status"] = json_encode($this->transport->object_unset_nulls($status));
	     $gs_data_input2939299822982["method"] = "setOrderStatus";
	     $gs_data_input2939299822982["interfaceName"] = "core.ordermanager.IOrderManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Returns the total amount of sales for a given year. If you year is left blank you
	* will get the total amount for all years.
	*
	* @param year
	* @return void 
	*/

	public function startCheckForOrdersToCapture($internalPassword) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["internalPassword"] = json_encode($this->transport->object_unset_nulls($internalPassword));
	     $gs_data_input2939299822982["method"] = "startCheckForOrdersToCapture";
	     $gs_data_input2939299822982["interfaceName"] = "core.ordermanager.IOrderManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Fetch all orders for a user.
	* @param userId
	* @throws ErrorException
	* @return void 
	*/

	public function updateCountForOrderLine($cartItemId, $orderId, $count) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["cartItemId"] = json_encode($this->transport->object_unset_nulls($cartItemId));
	     $gs_data_input2939299822982['args']["orderId"] = json_encode($this->transport->object_unset_nulls($orderId));
	     $gs_data_input2939299822982['args']["count"] = json_encode($this->transport->object_unset_nulls($count));
	     $gs_data_input2939299822982["method"] = "updateCountForOrderLine";
	     $gs_data_input2939299822982["interfaceName"] = "core.ordermanager.IOrderManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Returns the total amount of sales for a given year. If you year is left blank you
	* will get the total amount for all years.
	*
	* @param year
	* @return void 
	*/

	public function updatePriceForOrderLine($cartItemId, $orderId, $price) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["cartItemId"] = json_encode($this->transport->object_unset_nulls($cartItemId));
	     $gs_data_input2939299822982['args']["orderId"] = json_encode($this->transport->object_unset_nulls($orderId));
	     $gs_data_input2939299822982['args']["price"] = json_encode($this->transport->object_unset_nulls($price));
	     $gs_data_input2939299822982["method"] = "updatePriceForOrderLine";
	     $gs_data_input2939299822982["interfaceName"] = "core.ordermanager.IOrderManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

}
class APIPageManager {

	var $transport;
	
	function APIPageManager($transport) {
		$this->transport = $transport;
	}

	/**
	* Set the carousel configuration.
	* @param pageId
	* @throws ErrorException
	* @return boolean 
	*/

	public function accessDenied($pageId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["pageId"] = json_encode($this->transport->object_unset_nulls($pageId));
	     $gs_data_input2939299822982["method"] = "accessDenied";
	     $gs_data_input2939299822982["interfaceName"] = "core.pagemanager.IPageManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Add application
	* @param id
	* @throws ErrorException
	* @return core_common_ApplicationInstance 
	*/

	public function addApplication($applicationId, $pageCellId, $pageId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["applicationId"] = json_encode($this->transport->object_unset_nulls($applicationId));
	     $gs_data_input2939299822982['args']["pageCellId"] = json_encode($this->transport->object_unset_nulls($pageCellId));
	     $gs_data_input2939299822982['args']["pageId"] = json_encode($this->transport->object_unset_nulls($pageId));
	     $gs_data_input2939299822982["method"] = "addApplication";
	     $gs_data_input2939299822982["interfaceName"] = "core.pagemanager.IPageManager";
	     return $this->transport->cast(new core_common_ApplicationInstance(), $this->transport->sendMessage($gs_data_input2939299822982));
	}

	/**
	* Set the carousel configuration.
	* @param pageId
	* @throws ErrorException
	* @return void 
	*/

	public function addComment($pageComment) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["pageComment"] = json_encode($this->transport->object_unset_nulls($pageComment));
	     $gs_data_input2939299822982["method"] = "addComment";
	     $gs_data_input2939299822982["interfaceName"] = "core.pagemanager.IPageManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Add an existing application to the application area
	*
	* @param pageId
	* @param appId
	* @param area
	* @throws ErrorException
	* @return void 
	*/

	public function addExistingApplicationToPageArea($pageId, $appId, $area) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["pageId"] = json_encode($this->transport->object_unset_nulls($pageId));
	     $gs_data_input2939299822982['args']["appId"] = json_encode($this->transport->object_unset_nulls($appId));
	     $gs_data_input2939299822982['args']["area"] = json_encode($this->transport->object_unset_nulls($area));
	     $gs_data_input2939299822982["method"] = "addExistingApplicationToPageArea";
	     $gs_data_input2939299822982["interfaceName"] = "core.pagemanager.IPageManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Add an cell to an specific earea.
	* @param pageId
	* @param incell
	* @param beforecell
	* @param direction
	* @param area header/footer/body if nothing set it will default to body.
	* @throws ErrorException
	* @return String 
	*/

	public function addLayoutCell($pageId, $incell, $beforecell, $direction, $area) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["pageId"] = json_encode($this->transport->object_unset_nulls($pageId));
	     $gs_data_input2939299822982['args']["incell"] = json_encode($this->transport->object_unset_nulls($incell));
	     $gs_data_input2939299822982['args']["beforecell"] = json_encode($this->transport->object_unset_nulls($beforecell));
	     $gs_data_input2939299822982['args']["direction"] = json_encode($this->transport->object_unset_nulls($direction));
	     $gs_data_input2939299822982['args']["area"] = json_encode($this->transport->object_unset_nulls($area));
	     $gs_data_input2939299822982["method"] = "addLayoutCell";
	     $gs_data_input2939299822982["interfaceName"] = "core.pagemanager.IPageManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Set the carousel configuration.
	* @param pageId
	* @throws ErrorException
	* @return void 
	*/

	public function changeModule($moduleId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["moduleId"] = json_encode($this->transport->object_unset_nulls($moduleId));
	     $gs_data_input2939299822982["method"] = "changeModule";
	     $gs_data_input2939299822982["interfaceName"] = "core.pagemanager.IPageManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Change the userlevel for a given page. Make it accessible for only administrators / editors / customers.<br>
	* Everyone with a higher userlevel will allways gain access to the userlevels below.
	* @param pageId The id of the page to change.
	* @param userLevel The userlevel to set ADMINISTRATOR = 100, EDITOR = 50, CUSTOMER = 10
	* @throws ErrorException
	* @return core_pagemanager_data_Page 
	*/

	public function changePageUserLevel($pageId, $userLevel) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["pageId"] = json_encode($this->transport->object_unset_nulls($pageId));
	     $gs_data_input2939299822982['args']["userLevel"] = json_encode($this->transport->object_unset_nulls($userLevel));
	     $gs_data_input2939299822982["method"] = "changePageUserLevel";
	     $gs_data_input2939299822982["interfaceName"] = "core.pagemanager.IPageManager";
	     return $this->transport->cast(new core_pagemanager_data_Page(), $this->transport->sendMessage($gs_data_input2939299822982));
	}

	/**
	* Remove all content on all page areas for this page.
	* @param pageId
	* @throws ErrorException
	* @return void 
	*/

	public function clearPage($pageId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["pageId"] = json_encode($this->transport->object_unset_nulls($pageId));
	     $gs_data_input2939299822982["method"] = "clearPage";
	     $gs_data_input2939299822982["interfaceName"] = "core.pagemanager.IPageManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Remove all applications for specified page area at specified page.
	*
	* @param pageId
	* @throws ErrorException
	* @return void 
	*/

	public function clearPageArea($pageId, $pageArea) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["pageId"] = json_encode($this->transport->object_unset_nulls($pageId));
	     $gs_data_input2939299822982['args']["pageArea"] = json_encode($this->transport->object_unset_nulls($pageArea));
	     $gs_data_input2939299822982["method"] = "clearPageArea";
	     $gs_data_input2939299822982["interfaceName"] = "core.pagemanager.IPageManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Add an cell to an specific earea.
	* @param pageId
	* @param incell
	* @param beforecell
	* @param direction
	* @param area header/footer/body if nothing set it will default to body.
	* @throws ErrorException
	* @return void 
	*/

	public function createHeaderFooter($type) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["type"] = json_encode($this->transport->object_unset_nulls($type));
	     $gs_data_input2939299822982["method"] = "createHeaderFooter";
	     $gs_data_input2939299822982["interfaceName"] = "core.pagemanager.IPageManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Set the carousel configuration.
	* @param pageId
	* @throws ErrorException
	* @return void 
	*/

	public function createModal($modalName) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["modalName"] = json_encode($this->transport->object_unset_nulls($modalName));
	     $gs_data_input2939299822982["method"] = "createModal";
	     $gs_data_input2939299822982["interfaceName"] = "core.pagemanager.IPageManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Create a new row to add application areas to for a given page.
	* @param pageId
	* @throws ErrorException
	* @return String 
	*/

	public function createNewRow($pageId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["pageId"] = json_encode($this->transport->object_unset_nulls($pageId));
	     $gs_data_input2939299822982["method"] = "createNewRow";
	     $gs_data_input2939299822982["interfaceName"] = "core.pagemanager.IPageManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Create a new page.
	* This page can be used to stick applications to it.
	*
	* @throws ErrorException
	* @return core_pagemanager_data_Page 
	*/

	public function createPage() {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982["method"] = "createPage";
	     $gs_data_input2939299822982["interfaceName"] = "core.pagemanager.IPageManager";
	     return $this->transport->cast(new core_pagemanager_data_Page(), $this->transport->sendMessage($gs_data_input2939299822982));
	}

	/**
	* Delete an application from the store
	* removes all references where it has been used.
	*
	* Suitable for singleton applications
	*
	* @param id
	* @throws ErrorException
	* @return void 
	*/

	public function deleteApplication($id) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["id"] = json_encode($this->transport->object_unset_nulls($id));
	     $gs_data_input2939299822982["method"] = "deleteApplication";
	     $gs_data_input2939299822982["interfaceName"] = "core.pagemanager.IPageManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Set the carousel configuration.
	* @param pageId
	* @throws ErrorException
	* @return void 
	*/

	public function deleteComment($commentId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["commentId"] = json_encode($this->transport->object_unset_nulls($commentId));
	     $gs_data_input2939299822982["method"] = "deleteComment";
	     $gs_data_input2939299822982["interfaceName"] = "core.pagemanager.IPageManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Delete the page with the id.
	*
	* @param id
	* @return void 
	*/

	public function deletePage($id) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["id"] = json_encode($this->transport->object_unset_nulls($id));
	     $gs_data_input2939299822982["method"] = "deletePage";
	     $gs_data_input2939299822982["interfaceName"] = "core.pagemanager.IPageManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Add an cell to an specific earea.
	* @param pageId
	* @param incell
	* @param beforecell
	* @param direction
	* @param area header/footer/body if nothing set it will default to body.
	* @throws ErrorException
	* @return core_pagemanager_data_Page 
	*/

	public function dropCell($pageId, $cellId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["pageId"] = json_encode($this->transport->object_unset_nulls($pageId));
	     $gs_data_input2939299822982['args']["cellId"] = json_encode($this->transport->object_unset_nulls($cellId));
	     $gs_data_input2939299822982["method"] = "dropCell";
	     $gs_data_input2939299822982["interfaceName"] = "core.pagemanager.IPageManager";
	     return $this->transport->cast(new core_pagemanager_data_Page(), $this->transport->sendMessage($gs_data_input2939299822982));
	}

	/**
	* Find all pages that a application instance is connected to..
	*
	* @param appIds A list of application ids to resolve pages for.
	* @throws ErrorException
	* @return void 
	*/

	public function flattenMobileLayout($pageId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["pageId"] = json_encode($this->transport->object_unset_nulls($pageId));
	     $gs_data_input2939299822982["method"] = "flattenMobileLayout";
	     $gs_data_input2939299822982["interfaceName"] = "core.pagemanager.IPageManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Get all applications from the applicationPool.
	*
	* @return core_common_ApplicationInstance[] 
	*/

	public function getApplications() {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982["method"] = "getApplications";
	     $gs_data_input2939299822982["interfaceName"] = "core.pagemanager.IPageManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Get all applications from the applicationPool.
	* based on the specified ApplicationSettingsId
	*
	* @return core_common_ApplicationInstance[] 
	*/

	public function getApplicationsBasedOnApplicationSettingsId($appSettingsId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["appSettingsId"] = json_encode($this->transport->object_unset_nulls($appSettingsId));
	     $gs_data_input2939299822982["method"] = "getApplicationsBasedOnApplicationSettingsId";
	     $gs_data_input2939299822982["interfaceName"] = "core.pagemanager.IPageManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Get all applications from the applicationPool.
	* based on the specified ApplicationSettingsId
	*
	* @return core_common_ApplicationInstance[] 
	*/

	public function getApplicationsByPageAreaAndSettingsId($appSettingsId, $pageArea) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["appSettingsId"] = json_encode($this->transport->object_unset_nulls($appSettingsId));
	     $gs_data_input2939299822982['args']["pageArea"] = json_encode($this->transport->object_unset_nulls($pageArea));
	     $gs_data_input2939299822982["method"] = "getApplicationsByPageAreaAndSettingsId";
	     $gs_data_input2939299822982["interfaceName"] = "core.pagemanager.IPageManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Fetch all application from the applicationPool (added applications) which has a given type.
	* @param type
	* @throws ErrorException
	* @return core_common_ApplicationInstance[] 
	*/

	public function getApplicationsByType($type) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["type"] = json_encode($this->transport->object_unset_nulls($type));
	     $gs_data_input2939299822982["method"] = "getApplicationsByType";
	     $gs_data_input2939299822982["interfaceName"] = "core.pagemanager.IPageManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Get all applications that is needed to render a page.
	*
	* @param pageId
	* @throws ErrorException
	* @return core_common_ApplicationInstance[] 
	*/

	public function getApplicationsForPage($pageId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["pageId"] = json_encode($this->transport->object_unset_nulls($pageId));
	     $gs_data_input2939299822982["method"] = "getApplicationsForPage";
	     $gs_data_input2939299822982["interfaceName"] = "core.pagemanager.IPageManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Set the carousel configuration.
	* @param pageId
	* @throws ErrorException
	* @return core_pagemanager_data_PageCell 
	*/

	public function getCell($pageId, $cellId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["pageId"] = json_encode($this->transport->object_unset_nulls($pageId));
	     $gs_data_input2939299822982['args']["cellId"] = json_encode($this->transport->object_unset_nulls($cellId));
	     $gs_data_input2939299822982["method"] = "getCell";
	     $gs_data_input2939299822982["interfaceName"] = "core.pagemanager.IPageManager";
	     return $this->transport->cast(new core_pagemanager_data_PageCell(), $this->transport->sendMessage($gs_data_input2939299822982));
	}

	/**
	* Set the carousel configuration.
	* @param pageId
	* @throws ErrorException
	* @return core_pagemanager_data_PageComment[] 
	*/

	public function getComments($pageId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["pageId"] = json_encode($this->transport->object_unset_nulls($pageId));
	     $gs_data_input2939299822982["method"] = "getComments";
	     $gs_data_input2939299822982["interfaceName"] = "core.pagemanager.IPageManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Set the carousel configuration.
	* @param pageId
	* @throws ErrorException
	* @return String[] 
	*/

	public function getLeftSideBarNames() {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982["method"] = "getLeftSideBarNames";
	     $gs_data_input2939299822982["interfaceName"] = "core.pagemanager.IPageManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Change the userlevel for a given page. Make it accessible for only administrators / editors / customers.<br>
	* Everyone with a higher userlevel will allways gain access to the userlevels below.
	* @param pageId The id of the page to change.
	* @param userLevel The userlevel to set ADMINISTRATOR = 100, EDITOR = 50, CUSTOMER = 10
	* @throws ErrorException
	* @return core_pagemanager_data_PageCell 
	*/

	public function getLooseCell($pageId, $cellId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["pageId"] = json_encode($this->transport->object_unset_nulls($pageId));
	     $gs_data_input2939299822982['args']["cellId"] = json_encode($this->transport->object_unset_nulls($cellId));
	     $gs_data_input2939299822982["method"] = "getLooseCell";
	     $gs_data_input2939299822982["interfaceName"] = "core.pagemanager.IPageManager";
	     return $this->transport->cast(new core_pagemanager_data_PageCell(), $this->transport->sendMessage($gs_data_input2939299822982));
	}

	/**
	* Find all pages that a application instance is connected to..
	*
	* @param appIds A list of application ids to resolve pages for.
	* @throws ErrorException
	* @return core_pagemanager_data_PageCell[] 
	*/

	public function getMobileBody($pageId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["pageId"] = json_encode($this->transport->object_unset_nulls($pageId));
	     $gs_data_input2939299822982["method"] = "getMobileBody";
	     $gs_data_input2939299822982["interfaceName"] = "core.pagemanager.IPageManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Set the carousel configuration.
	* @param pageId
	* @throws ErrorException
	* @return String 
	*/

	public function getMobileLink() {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982["method"] = "getMobileLink";
	     $gs_data_input2939299822982["interfaceName"] = "core.pagemanager.IPageManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Set the carousel configuration.
	* @param pageId
	* @throws ErrorException
	* @return String[] 
	*/

	public function getModalNames() {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982["method"] = "getModalNames";
	     $gs_data_input2939299822982["interfaceName"] = "core.pagemanager.IPageManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Set the carousel configuration.
	* @param pageId
	* @throws ErrorException
	* @return core_pagemanager_data_GetShopModule[] 
	*/

	public function getModules() {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982["method"] = "getModules";
	     $gs_data_input2939299822982["interfaceName"] = "core.pagemanager.IPageManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* fetch an existing page.
	* @param id The id for the page to fetch.
	* @throws ErrorException
	* @return core_pagemanager_data_Page 
	*/

	public function getPage($id) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["id"] = json_encode($this->transport->object_unset_nulls($id));
	     $gs_data_input2939299822982["method"] = "getPage";
	     $gs_data_input2939299822982["interfaceName"] = "core.pagemanager.IPageManager";
	     return $this->transport->cast(new core_pagemanager_data_Page(), $this->transport->sendMessage($gs_data_input2939299822982));
	}

	/**
	* Find all pages that a application instance is connected to..
	*
	* @param appIds A list of application ids to resolve pages for.
	* @throws ErrorException
	* @return String[] 
	*/

	public function getPagesForApplication($appId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["appId"] = json_encode($this->transport->object_unset_nulls($appId));
	     $gs_data_input2939299822982["method"] = "getPagesForApplication";
	     $gs_data_input2939299822982["interfaceName"] = "core.pagemanager.IPageManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Get secured settings
	* @return public class HashMap<K,V> 
	*/

	public function getSecuredSettings($applicationInstanceId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["applicationInstanceId"] = json_encode($this->transport->object_unset_nulls($applicationInstanceId));
	     $gs_data_input2939299822982["method"] = "getSecuredSettings";
	     $gs_data_input2939299822982["interfaceName"] = "core.pagemanager.IPageManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Change the userlevel for a given page. Make it accessible for only administrators / editors / customers.<br>
	* Everyone with a higher userlevel will allways gain access to the userlevels below.
	* @param pageId The id of the page to change.
	* @param userLevel The userlevel to set ADMINISTRATOR = 100, EDITOR = 50, CUSTOMER = 10
	* @throws ErrorException
	* @return public class HashMap<K,V> 
	*/

	public function getSecuredSettingsInternal($appName) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["appName"] = json_encode($this->transport->object_unset_nulls($appName));
	     $gs_data_input2939299822982["method"] = "getSecuredSettingsInternal";
	     $gs_data_input2939299822982["interfaceName"] = "core.pagemanager.IPageManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Remove all content on all page areas for this page.
	* @param pageId
	* @throws ErrorException
	* @return void 
	*/

	public function linkPageCell($pageId, $cellId, $link) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["pageId"] = json_encode($this->transport->object_unset_nulls($pageId));
	     $gs_data_input2939299822982['args']["cellId"] = json_encode($this->transport->object_unset_nulls($cellId));
	     $gs_data_input2939299822982['args']["link"] = json_encode($this->transport->object_unset_nulls($link));
	     $gs_data_input2939299822982["method"] = "linkPageCell";
	     $gs_data_input2939299822982["interfaceName"] = "core.pagemanager.IPageManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Move a cell either up or down.
	* @param pageId
	* @throws ErrorException
	* @return void 
	*/

	public function moveCell($pageId, $cellId, $up) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["pageId"] = json_encode($this->transport->object_unset_nulls($pageId));
	     $gs_data_input2939299822982['args']["cellId"] = json_encode($this->transport->object_unset_nulls($cellId));
	     $gs_data_input2939299822982['args']["up"] = json_encode($this->transport->object_unset_nulls($up));
	     $gs_data_input2939299822982["method"] = "moveCell";
	     $gs_data_input2939299822982["interfaceName"] = "core.pagemanager.IPageManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Set the carousel configuration.
	* @param pageId
	* @throws ErrorException
	* @return void 
	*/

	public function moveCellMobile($pageId, $cellId, $moveUp) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["pageId"] = json_encode($this->transport->object_unset_nulls($pageId));
	     $gs_data_input2939299822982['args']["cellId"] = json_encode($this->transport->object_unset_nulls($cellId));
	     $gs_data_input2939299822982['args']["moveUp"] = json_encode($this->transport->object_unset_nulls($moveUp));
	     $gs_data_input2939299822982["method"] = "moveCellMobile";
	     $gs_data_input2939299822982["interfaceName"] = "core.pagemanager.IPageManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Remove an application
	*
	* @param pageAreaId The id of the page area to remove.
	* @throws ErrorException
	* @return core_pagemanager_data_Page 
	*/

	public function removeAppFromCell($pageId, $cellid) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["pageId"] = json_encode($this->transport->object_unset_nulls($pageId));
	     $gs_data_input2939299822982['args']["cellid"] = json_encode($this->transport->object_unset_nulls($cellid));
	     $gs_data_input2939299822982["method"] = "removeAppFromCell";
	     $gs_data_input2939299822982["interfaceName"] = "core.pagemanager.IPageManager";
	     return $this->transport->cast(new core_pagemanager_data_Page(), $this->transport->sendMessage($gs_data_input2939299822982));
	}

	/**
	* Find all pages that a application instance is connected to..
	*
	* @param appIds A list of application ids to resolve pages for.
	* @throws ErrorException
	* @return void 
	*/

	public function resetMobileLayout($pageId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["pageId"] = json_encode($this->transport->object_unset_nulls($pageId));
	     $gs_data_input2939299822982["method"] = "resetMobileLayout";
	     $gs_data_input2939299822982["interfaceName"] = "core.pagemanager.IPageManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Add an cell to an specific earea.
	* @param pageId
	* @param incell
	* @param beforecell
	* @param direction
	* @param area header/footer/body if nothing set it will default to body.
	* @throws ErrorException
	* @return void 
	*/

	public function restoreLayout($pageId, $fromTime) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["pageId"] = json_encode($this->transport->object_unset_nulls($pageId));
	     $gs_data_input2939299822982['args']["fromTime"] = json_encode($this->transport->object_unset_nulls($fromTime));
	     $gs_data_input2939299822982["method"] = "restoreLayout";
	     $gs_data_input2939299822982["interfaceName"] = "core.pagemanager.IPageManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* For each instance of the application, there is an configuration object attached.<br>
	* Modify this object to set an application sticky, inheritable etc.
	* @param config The appconfiguration object to update / save.
	* @throws ErrorException
	* @return void 
	*/

	public function saveApplicationConfiguration($config) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["config"] = json_encode($this->transport->object_unset_nulls($config));
	     $gs_data_input2939299822982["method"] = "saveApplicationConfiguration";
	     $gs_data_input2939299822982["interfaceName"] = "core.pagemanager.IPageManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Set the carousel configuration.
	* @param pageId
	* @throws ErrorException
	* @return void 
	*/

	public function saveCell($pageId, $cell) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["pageId"] = json_encode($this->transport->object_unset_nulls($pageId));
	     $gs_data_input2939299822982['args']["cell"] = json_encode($this->transport->object_unset_nulls($cell));
	     $gs_data_input2939299822982["method"] = "saveCell";
	     $gs_data_input2939299822982["interfaceName"] = "core.pagemanager.IPageManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Set the carousel configuration.
	* @param pageId
	* @throws ErrorException
	* @return void 
	*/

	public function saveCellPosition($pageId, $cellId, $data) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["pageId"] = json_encode($this->transport->object_unset_nulls($pageId));
	     $gs_data_input2939299822982['args']["cellId"] = json_encode($this->transport->object_unset_nulls($cellId));
	     $gs_data_input2939299822982['args']["data"] = json_encode($this->transport->object_unset_nulls($data));
	     $gs_data_input2939299822982["method"] = "saveCellPosition";
	     $gs_data_input2939299822982["interfaceName"] = "core.pagemanager.IPageManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Set the carousel configuration.
	* @param pageId
	* @throws ErrorException
	* @return void 
	*/

	public function saveMobileLink($link) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["link"] = json_encode($this->transport->object_unset_nulls($link));
	     $gs_data_input2939299822982["method"] = "saveMobileLink";
	     $gs_data_input2939299822982["interfaceName"] = "core.pagemanager.IPageManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Save the page
	* @return void 
	*/

	public function savePage($page) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["page"] = json_encode($this->transport->object_unset_nulls($page));
	     $gs_data_input2939299822982["method"] = "savePage";
	     $gs_data_input2939299822982["interfaceName"] = "core.pagemanager.IPageManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Set Group access to cell.
	*
	* @param pageId
	* @param cellId
	* @param settings
	* @return void 
	*/

	public function savePageCellGroupAccess($pageId, $cellId, $groupAccess) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["pageId"] = json_encode($this->transport->object_unset_nulls($pageId));
	     $gs_data_input2939299822982['args']["cellId"] = json_encode($this->transport->object_unset_nulls($cellId));
	     $gs_data_input2939299822982['args']["groupAccess"] = json_encode($this->transport->object_unset_nulls($groupAccess));
	     $gs_data_input2939299822982["method"] = "savePageCellGroupAccess";
	     $gs_data_input2939299822982["interfaceName"] = "core.pagemanager.IPageManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Add application
	* @param id
	* @throws ErrorException
	* @return void 
	*/

	public function savePageCellSettings($pageId, $cellId, $settings) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["pageId"] = json_encode($this->transport->object_unset_nulls($pageId));
	     $gs_data_input2939299822982['args']["cellId"] = json_encode($this->transport->object_unset_nulls($cellId));
	     $gs_data_input2939299822982['args']["settings"] = json_encode($this->transport->object_unset_nulls($settings));
	     $gs_data_input2939299822982["method"] = "savePageCellSettings";
	     $gs_data_input2939299822982["interfaceName"] = "core.pagemanager.IPageManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Set the carousel configuration.
	* @param pageId
	* @throws ErrorException
	* @return void 
	*/

	public function setCarouselConfig($pageId, $cellId, $config) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["pageId"] = json_encode($this->transport->object_unset_nulls($pageId));
	     $gs_data_input2939299822982['args']["cellId"] = json_encode($this->transport->object_unset_nulls($cellId));
	     $gs_data_input2939299822982['args']["config"] = json_encode($this->transport->object_unset_nulls($config));
	     $gs_data_input2939299822982["method"] = "setCarouselConfig";
	     $gs_data_input2939299822982["interfaceName"] = "core.pagemanager.IPageManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Set the carousel configuration.
	* @param pageId
	* @throws ErrorException
	* @return void 
	*/

	public function setCellMode($pageId, $cellId, $mode) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["pageId"] = json_encode($this->transport->object_unset_nulls($pageId));
	     $gs_data_input2939299822982['args']["cellId"] = json_encode($this->transport->object_unset_nulls($cellId));
	     $gs_data_input2939299822982['args']["mode"] = json_encode($this->transport->object_unset_nulls($mode));
	     $gs_data_input2939299822982["method"] = "setCellMode";
	     $gs_data_input2939299822982["interfaceName"] = "core.pagemanager.IPageManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Set the carousel configuration.
	* @param pageId
	* @throws ErrorException
	* @return void 
	*/

	public function setCellName($pageId, $cellId, $cellName) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["pageId"] = json_encode($this->transport->object_unset_nulls($pageId));
	     $gs_data_input2939299822982['args']["cellId"] = json_encode($this->transport->object_unset_nulls($cellId));
	     $gs_data_input2939299822982['args']["cellName"] = json_encode($this->transport->object_unset_nulls($cellName));
	     $gs_data_input2939299822982["method"] = "setCellName";
	     $gs_data_input2939299822982["interfaceName"] = "core.pagemanager.IPageManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Set the page description.
	* @param description The description to add.
	* @param pageId The id of the page.
	* @throws ErrorException
	* @return void 
	*/

	public function setPageDescription($pageId, $description) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["pageId"] = json_encode($this->transport->object_unset_nulls($pageId));
	     $gs_data_input2939299822982['args']["description"] = json_encode($this->transport->object_unset_nulls($description));
	     $gs_data_input2939299822982["method"] = "setPageDescription";
	     $gs_data_input2939299822982["interfaceName"] = "core.pagemanager.IPageManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Update a page and give it a parent page. <br>
	* This is used to figure out a hiarcy for the menues.<br>
	* @param pageId The page to have a parent page.
	* @param parentPageId The id of the page to be set as the parent page.
	* @throws ErrorException
	* @return void 
	*/

	public function setParentPage($pageId, $parentPageId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["pageId"] = json_encode($this->transport->object_unset_nulls($pageId));
	     $gs_data_input2939299822982['args']["parentPageId"] = json_encode($this->transport->object_unset_nulls($parentPageId));
	     $gs_data_input2939299822982["method"] = "setParentPage";
	     $gs_data_input2939299822982["interfaceName"] = "core.pagemanager.IPageManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Add application
	* @param id
	* @throws ErrorException
	* @return void 
	*/

	public function setStylesOnCell($pageId, $cellId, $styles, $innerStyles, $width) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["pageId"] = json_encode($this->transport->object_unset_nulls($pageId));
	     $gs_data_input2939299822982['args']["cellId"] = json_encode($this->transport->object_unset_nulls($cellId));
	     $gs_data_input2939299822982['args']["styles"] = json_encode($this->transport->object_unset_nulls($styles));
	     $gs_data_input2939299822982['args']["innerStyles"] = json_encode($this->transport->object_unset_nulls($innerStyles));
	     $gs_data_input2939299822982['args']["width"] = json_encode($this->transport->object_unset_nulls($width));
	     $gs_data_input2939299822982["method"] = "setStylesOnCell";
	     $gs_data_input2939299822982["interfaceName"] = "core.pagemanager.IPageManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Set the carousel configuration.
	* @param pageId
	* @throws ErrorException
	* @return void 
	*/

	public function setWidth($pageId, $cellId, $outerWidth, $outerWidthWithMargins) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["pageId"] = json_encode($this->transport->object_unset_nulls($pageId));
	     $gs_data_input2939299822982['args']["cellId"] = json_encode($this->transport->object_unset_nulls($cellId));
	     $gs_data_input2939299822982['args']["outerWidth"] = json_encode($this->transport->object_unset_nulls($outerWidth));
	     $gs_data_input2939299822982['args']["outerWidthWithMargins"] = json_encode($this->transport->object_unset_nulls($outerWidthWithMargins));
	     $gs_data_input2939299822982["method"] = "setWidth";
	     $gs_data_input2939299822982["interfaceName"] = "core.pagemanager.IPageManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Set the carousel configuration.
	* @param pageId
	* @throws ErrorException
	* @return void 
	*/

	public function startLoadPage() {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982["method"] = "startLoadPage";
	     $gs_data_input2939299822982["interfaceName"] = "core.pagemanager.IPageManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Add application
	* @param id
	* @throws ErrorException
	* @return void 
	*/

	public function swapAppWithCell($pageId, $fromCellId, $toCellId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["pageId"] = json_encode($this->transport->object_unset_nulls($pageId));
	     $gs_data_input2939299822982['args']["fromCellId"] = json_encode($this->transport->object_unset_nulls($fromCellId));
	     $gs_data_input2939299822982['args']["toCellId"] = json_encode($this->transport->object_unset_nulls($toCellId));
	     $gs_data_input2939299822982["method"] = "swapAppWithCell";
	     $gs_data_input2939299822982["interfaceName"] = "core.pagemanager.IPageManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Set the carousel configuration.
	* @param pageId
	* @throws ErrorException
	* @return void 
	*/

	public function toggleHiddenOnMobile($pageId, $cellId, $hide) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["pageId"] = json_encode($this->transport->object_unset_nulls($pageId));
	     $gs_data_input2939299822982['args']["cellId"] = json_encode($this->transport->object_unset_nulls($cellId));
	     $gs_data_input2939299822982['args']["hide"] = json_encode($this->transport->object_unset_nulls($hide));
	     $gs_data_input2939299822982["method"] = "toggleHiddenOnMobile";
	     $gs_data_input2939299822982["interfaceName"] = "core.pagemanager.IPageManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Set the carousel configuration.
	* @param pageId
	* @throws ErrorException
	* @return void 
	*/

	public function toggleLeftSideBar($pageId, $columnName) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["pageId"] = json_encode($this->transport->object_unset_nulls($pageId));
	     $gs_data_input2939299822982['args']["columnName"] = json_encode($this->transport->object_unset_nulls($columnName));
	     $gs_data_input2939299822982["method"] = "toggleLeftSideBar";
	     $gs_data_input2939299822982["interfaceName"] = "core.pagemanager.IPageManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Set the carousel configuration.
	* @param pageId
	* @throws ErrorException
	* @return void 
	*/

	public function togglePinArea($pageId, $cellId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["pageId"] = json_encode($this->transport->object_unset_nulls($pageId));
	     $gs_data_input2939299822982['args']["cellId"] = json_encode($this->transport->object_unset_nulls($cellId));
	     $gs_data_input2939299822982["method"] = "togglePinArea";
	     $gs_data_input2939299822982["interfaceName"] = "core.pagemanager.IPageManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Need to translate a set of page ids?
	* @param pages A list (array) of page ids to translate.
	* @throws ErrorException
	* @return public class HashMap<K,V> 
	*/

	public function translatePages($pages) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["pages"] = json_encode($this->transport->object_unset_nulls($pages));
	     $gs_data_input2939299822982["method"] = "translatePages";
	     $gs_data_input2939299822982["interfaceName"] = "core.pagemanager.IPageManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Add application
	* @param id
	* @throws ErrorException
	* @return void 
	*/

	public function updateCellLayout($layout, $pageId, $cellId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["layout"] = json_encode($this->transport->object_unset_nulls($layout));
	     $gs_data_input2939299822982['args']["pageId"] = json_encode($this->transport->object_unset_nulls($pageId));
	     $gs_data_input2939299822982['args']["cellId"] = json_encode($this->transport->object_unset_nulls($cellId));
	     $gs_data_input2939299822982["method"] = "updateCellLayout";
	     $gs_data_input2939299822982["interfaceName"] = "core.pagemanager.IPageManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

}
class APIPaymentManager {

	var $transport;
	
	function APIPaymentManager($transport) {
		$this->transport = $transport;
	}

	/**
	*
	* @author ktonder
	* @return core_paymentmanager_PaymentConfiguration 
	*/

	public function getConfig($id) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["id"] = json_encode($this->transport->object_unset_nulls($id));
	     $gs_data_input2939299822982["method"] = "getConfig";
	     $gs_data_input2939299822982["interfaceName"] = "core.paymentmanager.IPaymentManager";
	     return $this->transport->cast(new core_paymentmanager_PaymentConfiguration(), $this->transport->sendMessage($gs_data_input2939299822982));
	}

	/**
	*
	* @author ktonder
	* @return core_paymentmanager_GeneralPaymentConfig 
	*/

	public function getGeneralPaymentConfig() {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982["method"] = "getGeneralPaymentConfig";
	     $gs_data_input2939299822982["interfaceName"] = "core.paymentmanager.IPaymentManager";
	     return $this->transport->cast(new core_paymentmanager_GeneralPaymentConfig(), $this->transport->sendMessage($gs_data_input2939299822982));
	}

	/**
	*
	* @author ktonder
	* @return core_paymentmanager_StorePaymentConfig 
	*/

	public function getStorePaymentConfiguration($paymentAppId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["paymentAppId"] = json_encode($this->transport->object_unset_nulls($paymentAppId));
	     $gs_data_input2939299822982["method"] = "getStorePaymentConfiguration";
	     $gs_data_input2939299822982["interfaceName"] = "core.paymentmanager.IPaymentManager";
	     return $this->transport->cast(new core_paymentmanager_StorePaymentConfig(), $this->transport->sendMessage($gs_data_input2939299822982));
	}

	/**
	*
	* @author ktonder
	* @return core_paymentmanager_StorePaymentConfig[] 
	*/

	public function getStorePaymentConfigurations($paymentAppId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["paymentAppId"] = json_encode($this->transport->object_unset_nulls($paymentAppId));
	     $gs_data_input2939299822982["method"] = "getStorePaymentConfigurations";
	     $gs_data_input2939299822982["interfaceName"] = "core.paymentmanager.IPaymentManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	*
	* @author ktonder
	* @return void 
	*/

	public function resetAllAccountingConfigurationForUsersAndOrders($password) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["password"] = json_encode($this->transport->object_unset_nulls($password));
	     $gs_data_input2939299822982["method"] = "resetAllAccountingConfigurationForUsersAndOrders";
	     $gs_data_input2939299822982["interfaceName"] = "core.paymentmanager.IPaymentManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	*
	* @author ktonder
	* @return void 
	*/

	public function saveGeneralPaymentConfig($config) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["config"] = json_encode($this->transport->object_unset_nulls($config));
	     $gs_data_input2939299822982["method"] = "saveGeneralPaymentConfig";
	     $gs_data_input2939299822982["interfaceName"] = "core.paymentmanager.IPaymentManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	*
	* @author ktonder
	* @return void 
	*/

	public function savePaymentConfiguration($config) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["config"] = json_encode($this->transport->object_unset_nulls($config));
	     $gs_data_input2939299822982["method"] = "savePaymentConfiguration";
	     $gs_data_input2939299822982["interfaceName"] = "core.paymentmanager.IPaymentManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	*
	* @author ktonder
	* @return void 
	*/

	public function saveStorePaymentConfiguration($config) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["config"] = json_encode($this->transport->object_unset_nulls($config));
	     $gs_data_input2939299822982["method"] = "saveStorePaymentConfiguration";
	     $gs_data_input2939299822982["interfaceName"] = "core.paymentmanager.IPaymentManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

}
class APIPaymentTerminalManager {

	var $transport;
	
	function APIPaymentTerminalManager($transport) {
		$this->transport = $transport;
	}

	/**
	* The payment terminal manager.<br>
	* @return core_paymentterminalmanager_PaymentTerminalSettings 
	*/

	public function getSetings($offset) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["offset"] = json_encode($this->transport->object_unset_nulls($offset));
	     $gs_data_input2939299822982["method"] = "getSetings";
	     $gs_data_input2939299822982["interfaceName"] = "core.paymentterminalmanager.IPaymentTerminalManager";
	     return $this->transport->cast(new core_paymentterminalmanager_PaymentTerminalSettings(), $this->transport->sendMessage($gs_data_input2939299822982));
	}

	/**
	* The payment terminal manager.<br>
	* @return void 
	*/

	public function saveSettings($settings) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["settings"] = json_encode($this->transport->object_unset_nulls($settings));
	     $gs_data_input2939299822982["method"] = "saveSettings";
	     $gs_data_input2939299822982["interfaceName"] = "core.paymentterminalmanager.IPaymentTerminalManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

}
class APIPkkControlManager {

	var $transport;
	
	function APIPkkControlManager($transport) {
		$this->transport = $transport;
	}

	/**
	*
	* @author ktonder
	* @return core_pkkcontrol_PkkControlData 
	*/

	public function getPkkControlData($licensePlate) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["licensePlate"] = json_encode($this->transport->object_unset_nulls($licensePlate));
	     $gs_data_input2939299822982["method"] = "getPkkControlData";
	     $gs_data_input2939299822982["interfaceName"] = "core.pkk.IPkkControlManager";
	     return $this->transport->cast(new core_pkkcontrol_PkkControlData(), $this->transport->sendMessage($gs_data_input2939299822982));
	}

	/**
	*
	* @author ktonder
	* @return core_pkkcontrol_PkkControlData[] 
	*/

	public function getPkkControls() {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982["method"] = "getPkkControls";
	     $gs_data_input2939299822982["interfaceName"] = "core.pkk.IPkkControlManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	*
	* @author ktonder
	* @return void 
	*/

	public function registerPkkControl($data) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["data"] = json_encode($this->transport->object_unset_nulls($data));
	     $gs_data_input2939299822982["method"] = "registerPkkControl";
	     $gs_data_input2939299822982["interfaceName"] = "core.pkk.IPkkControlManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	*
	* @author ktonder
	* @return void 
	*/

	public function removePkkControl($id) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["id"] = json_encode($this->transport->object_unset_nulls($id));
	     $gs_data_input2939299822982["method"] = "removePkkControl";
	     $gs_data_input2939299822982["interfaceName"] = "core.pkk.IPkkControlManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

}
class APIPmsBookingProcess {

	var $transport;
	
	function APIPmsBookingProcess($transport) {
		$this->transport = $transport;
	}

	/**
	* Booking process for property management system.<br>
	* @return core_pmsbookingprocess_GuestAddonsSummary 
	*/

	public function addAddons($gs_multilevel_name, $arg) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["arg"] = json_encode($this->transport->object_unset_nulls($arg));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "addAddons";
	     $gs_data_input2939299822982["interfaceName"] = "core.pmsbookingprocess.IPmsBookingProcess";
	     return $this->transport->cast(new core_pmsbookingprocess_GuestAddonsSummary(), $this->transport->sendMessage($gs_data_input2939299822982));
	}

	/**
	* Booking process for property management system.<br>
	* @return void 
	*/

	public function addTestMessagesToQueue($gs_multilevel_name, $message) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["message"] = json_encode($this->transport->object_unset_nulls($message));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "addTestMessagesToQueue";
	     $gs_data_input2939299822982["interfaceName"] = "core.pmsbookingprocess.IPmsBookingProcess";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Booking process for property management system.<br>
	* @return void 
	*/

	public function cancelPaymentProcess($gs_multilevel_name, $data) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["data"] = json_encode($this->transport->object_unset_nulls($data));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "cancelPaymentProcess";
	     $gs_data_input2939299822982["interfaceName"] = "core.pmsbookingprocess.IPmsBookingProcess";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Booking process for property management system.<br>
	* @return core_pmsbookingprocess_GuestAddonsSummary 
	*/

	public function changeDateOnRoom($gs_multilevel_name, $arg) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["arg"] = json_encode($this->transport->object_unset_nulls($arg));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "changeDateOnRoom";
	     $gs_data_input2939299822982["interfaceName"] = "core.pmsbookingprocess.IPmsBookingProcess";
	     return $this->transport->cast(new core_pmsbookingprocess_GuestAddonsSummary(), $this->transport->sendMessage($gs_data_input2939299822982));
	}

	/**
	* Booking process for property management system.<br>
	* @return core_pmsbookingprocess_GuestAddonsSummary 
	*/

	public function changeGuestCountForRoom($gs_multilevel_name, $roomId, $guestCount) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["roomId"] = json_encode($this->transport->object_unset_nulls($roomId));
	     $gs_data_input2939299822982['args']["guestCount"] = json_encode($this->transport->object_unset_nulls($guestCount));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "changeGuestCountForRoom";
	     $gs_data_input2939299822982["interfaceName"] = "core.pmsbookingprocess.IPmsBookingProcess";
	     return $this->transport->cast(new core_pmsbookingprocess_GuestAddonsSummary(), $this->transport->sendMessage($gs_data_input2939299822982));
	}

	/**
	* Booking process for property management system.<br>
	* @return core_pmsbookingprocess_GuestAddonsSummary 
	*/

	public function changeNumberOnType($gs_multilevel_name, $change) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["change"] = json_encode($this->transport->object_unset_nulls($change));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "changeNumberOnType";
	     $gs_data_input2939299822982["interfaceName"] = "core.pmsbookingprocess.IPmsBookingProcess";
	     return $this->transport->cast(new core_pmsbookingprocess_GuestAddonsSummary(), $this->transport->sendMessage($gs_data_input2939299822982));
	}

	/**
	* Booking process for property management system.<br>
	* @return void 
	*/

	public function chargeOrderWithVerifoneTerminal($gs_multilevel_name, $orderId, $terminalId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["orderId"] = json_encode($this->transport->object_unset_nulls($orderId));
	     $gs_data_input2939299822982['args']["terminalId"] = json_encode($this->transport->object_unset_nulls($terminalId));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "chargeOrderWithVerifoneTerminal";
	     $gs_data_input2939299822982["interfaceName"] = "core.pmsbookingprocess.IPmsBookingProcess";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Booking process for property management system.<br>
	* @return core_pmsbookingprocess_BookingResult 
	*/

	public function completeBooking($gs_multilevel_name, $input) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["input"] = json_encode($this->transport->object_unset_nulls($input));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "completeBooking";
	     $gs_data_input2939299822982["interfaceName"] = "core.pmsbookingprocess.IPmsBookingProcess";
	     return $this->transport->cast(new core_pmsbookingprocess_BookingResult(), $this->transport->sendMessage($gs_data_input2939299822982));
	}

	/**
	* Booking process for property management system.<br>
	* @return core_pmsbookingprocess_BookingResult 
	*/

	public function completeBookingForTerminal($gs_multilevel_name, $input) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["input"] = json_encode($this->transport->object_unset_nulls($input));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "completeBookingForTerminal";
	     $gs_data_input2939299822982["interfaceName"] = "core.pmsbookingprocess.IPmsBookingProcess";
	     return $this->transport->cast(new core_pmsbookingprocess_BookingResult(), $this->transport->sendMessage($gs_data_input2939299822982));
	}

	/**
	* Booking process for property management system.<br>
	* @return core_pmsbookingprocess_GuestAddonsSummary 
	*/

	public function getAddonsSummary($gs_multilevel_name, $arg) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["arg"] = json_encode($this->transport->object_unset_nulls($arg));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "getAddonsSummary";
	     $gs_data_input2939299822982["interfaceName"] = "core.pmsbookingprocess.IPmsBookingProcess";
	     return $this->transport->cast(new core_pmsbookingprocess_GuestAddonsSummary(), $this->transport->sendMessage($gs_data_input2939299822982));
	}

	/**
	* Booking process for property management system.<br>
	* @return core_pmsbookingprocess_BookingProcessRoomStatus[] 
	*/

	public function getBooking($gs_multilevel_name, $pmsBookingId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["pmsBookingId"] = json_encode($this->transport->object_unset_nulls($pmsBookingId));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "getBooking";
	     $gs_data_input2939299822982["interfaceName"] = "core.pmsbookingprocess.IPmsBookingProcess";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Booking process for property management system.<br>
	* @return core_pmsbookingprocess_BookingConfig 
	*/

	public function getConfiguration($gs_multilevel_name) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "getConfiguration";
	     $gs_data_input2939299822982["interfaceName"] = "core.pmsbookingprocess.IPmsBookingProcess";
	     return $this->transport->cast(new core_pmsbookingprocess_BookingConfig(), $this->transport->sendMessage($gs_data_input2939299822982));
	}

	/**
	* Booking process for property management system.<br>
	* @return String[] 
	*/

	public function getTerminalMessages($gs_multilevel_name) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "getTerminalMessages";
	     $gs_data_input2939299822982["interfaceName"] = "core.pmsbookingprocess.IPmsBookingProcess";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Booking process for property management system.<br>
	* @return core_pmsbookingprocess_GuestAddonsSummary 
	*/

	public function logOn($gs_multilevel_name, $logindata) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["logindata"] = json_encode($this->transport->object_unset_nulls($logindata));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "logOn";
	     $gs_data_input2939299822982["interfaceName"] = "core.pmsbookingprocess.IPmsBookingProcess";
	     return $this->transport->cast(new core_pmsbookingprocess_GuestAddonsSummary(), $this->transport->sendMessage($gs_data_input2939299822982));
	}

	/**
	* Booking process for property management system.<br>
	* @return core_pmsbookingprocess_GuestAddonsSummary 
	*/

	public function logOut($gs_multilevel_name) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "logOut";
	     $gs_data_input2939299822982["interfaceName"] = "core.pmsbookingprocess.IPmsBookingProcess";
	     return $this->transport->cast(new core_pmsbookingprocess_GuestAddonsSummary(), $this->transport->sendMessage($gs_data_input2939299822982));
	}

	/**
	* Booking process for property management system.<br>
	* @return void 
	*/

	public function printReciept($gs_multilevel_name, $data) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["data"] = json_encode($this->transport->object_unset_nulls($data));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "printReciept";
	     $gs_data_input2939299822982["interfaceName"] = "core.pmsbookingprocess.IPmsBookingProcess";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Booking process for property management system.<br>
	* @return core_pmsbookingprocess_GuestAddonsSummary 
	*/

	public function removeAddons($gs_multilevel_name, $arg) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["arg"] = json_encode($this->transport->object_unset_nulls($arg));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "removeAddons";
	     $gs_data_input2939299822982["interfaceName"] = "core.pmsbookingprocess.IPmsBookingProcess";
	     return $this->transport->cast(new core_pmsbookingprocess_GuestAddonsSummary(), $this->transport->sendMessage($gs_data_input2939299822982));
	}

	/**
	* Booking process for property management system.<br>
	* @return core_pmsbookingprocess_GuestAddonsSummary 
	*/

	public function removeGroupedRooms($gs_multilevel_name, $arg) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["arg"] = json_encode($this->transport->object_unset_nulls($arg));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "removeGroupedRooms";
	     $gs_data_input2939299822982["interfaceName"] = "core.pmsbookingprocess.IPmsBookingProcess";
	     return $this->transport->cast(new core_pmsbookingprocess_GuestAddonsSummary(), $this->transport->sendMessage($gs_data_input2939299822982));
	}

	/**
	* Booking process for property management system.<br>
	* @return core_pmsbookingprocess_GuestAddonsSummary 
	*/

	public function removeRoom($gs_multilevel_name, $roomId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["roomId"] = json_encode($this->transport->object_unset_nulls($roomId));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "removeRoom";
	     $gs_data_input2939299822982["interfaceName"] = "core.pmsbookingprocess.IPmsBookingProcess";
	     return $this->transport->cast(new core_pmsbookingprocess_GuestAddonsSummary(), $this->transport->sendMessage($gs_data_input2939299822982));
	}

	/**
	* Booking process for property management system.<br>
	* @return core_pmsbookingprocess_GuestAddonsSummary 
	*/

	public function saveGuestInformation($gs_multilevel_name, $arg) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["arg"] = json_encode($this->transport->object_unset_nulls($arg));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "saveGuestInformation";
	     $gs_data_input2939299822982["interfaceName"] = "core.pmsbookingprocess.IPmsBookingProcess";
	     return $this->transport->cast(new core_pmsbookingprocess_GuestAddonsSummary(), $this->transport->sendMessage($gs_data_input2939299822982));
	}

	/**
	* Booking process for property management system.<br>
	* @return void 
	*/

	public function setBookingItemToCurrentBooking($gs_multilevel_name, $roomId, $itemId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["roomId"] = json_encode($this->transport->object_unset_nulls($roomId));
	     $gs_data_input2939299822982['args']["itemId"] = json_encode($this->transport->object_unset_nulls($itemId));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "setBookingItemToCurrentBooking";
	     $gs_data_input2939299822982["interfaceName"] = "core.pmsbookingprocess.IPmsBookingProcess";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Booking process for property management system.<br>
	* @return core_pmsbookingprocess_GuestAddonsSummary 
	*/

	public function setGuestInformation($gs_multilevel_name, $bookerInfo) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["bookerInfo"] = json_encode($this->transport->object_unset_nulls($bookerInfo));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "setGuestInformation";
	     $gs_data_input2939299822982["interfaceName"] = "core.pmsbookingprocess.IPmsBookingProcess";
	     return $this->transport->cast(new core_pmsbookingprocess_GuestAddonsSummary(), $this->transport->sendMessage($gs_data_input2939299822982));
	}

	/**
	* Booking process for property management system.<br>
	* @return core_pmsbookingprocess_StartBookingResult 
	*/

	public function startBooking($gs_multilevel_name, $arg) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["arg"] = json_encode($this->transport->object_unset_nulls($arg));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "startBooking";
	     $gs_data_input2939299822982["interfaceName"] = "core.pmsbookingprocess.IPmsBookingProcess";
	     return $this->transport->cast(new core_pmsbookingprocess_StartBookingResult(), $this->transport->sendMessage($gs_data_input2939299822982));
	}

	/**
	* Booking process for property management system.<br>
	* @return core_pmsbookingprocess_StartPaymentProcessResult 
	*/

	public function startPaymentProcess($gs_multilevel_name, $data) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["data"] = json_encode($this->transport->object_unset_nulls($data));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "startPaymentProcess";
	     $gs_data_input2939299822982["interfaceName"] = "core.pmsbookingprocess.IPmsBookingProcess";
	     return $this->transport->cast(new core_pmsbookingprocess_StartPaymentProcessResult(), $this->transport->sendMessage($gs_data_input2939299822982));
	}

}
class APIPmsEventManager {

	var $transport;
	
	function APIPmsEventManager($transport) {
		$this->transport = $transport;
	}

	/**
	* Event calendar management.<br>
	* @return core_pmseventmanager_PmsBookingEventEntry 
	*/

	public function createEvent($gs_multilevel_name, $id) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["id"] = json_encode($this->transport->object_unset_nulls($id));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "createEvent";
	     $gs_data_input2939299822982["interfaceName"] = "core.pmseventmanager.IPmsEventManager";
	     return $this->transport->cast(new core_pmseventmanager_PmsBookingEventEntry(), $this->transport->sendMessage($gs_data_input2939299822982));
	}

	/**
	* Event calendar management.<br>
	* @return void 
	*/

	public function deleteEntry($gs_multilevel_name, $entryId, $day) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["entryId"] = json_encode($this->transport->object_unset_nulls($entryId));
	     $gs_data_input2939299822982['args']["day"] = json_encode($this->transport->object_unset_nulls($day));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "deleteEntry";
	     $gs_data_input2939299822982["interfaceName"] = "core.pmseventmanager.IPmsEventManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Event calendar management.<br>
	* @return core_pmseventmanager_PmsBookingEventEntry 
	*/

	public function getEntry($gs_multilevel_name, $entryId, $day) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["entryId"] = json_encode($this->transport->object_unset_nulls($entryId));
	     $gs_data_input2939299822982['args']["day"] = json_encode($this->transport->object_unset_nulls($day));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "getEntry";
	     $gs_data_input2939299822982["interfaceName"] = "core.pmseventmanager.IPmsEventManager";
	     return $this->transport->cast(new core_pmseventmanager_PmsBookingEventEntry(), $this->transport->sendMessage($gs_data_input2939299822982));
	}

	/**
	* Event calendar management.<br>
	* @return core_pmseventmanager_PmsBookingEventEntry 
	*/

	public function getEntryShort($gs_multilevel_name, $shortId, $day) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["shortId"] = json_encode($this->transport->object_unset_nulls($shortId));
	     $gs_data_input2939299822982['args']["day"] = json_encode($this->transport->object_unset_nulls($day));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "getEntryShort";
	     $gs_data_input2939299822982["interfaceName"] = "core.pmseventmanager.IPmsEventManager";
	     return $this->transport->cast(new core_pmseventmanager_PmsBookingEventEntry(), $this->transport->sendMessage($gs_data_input2939299822982));
	}

	/**
	* Event calendar management.<br>
	* @return core_pmseventmanager_PmsBookingEventEntry[] 
	*/

	public function getEventEntries($gs_multilevel_name, $filter) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["filter"] = json_encode($this->transport->object_unset_nulls($filter));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "getEventEntries";
	     $gs_data_input2939299822982["interfaceName"] = "core.pmseventmanager.IPmsEventManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Event calendar management.<br>
	* @return core_pmseventmanager_PmsEventListEntry[] 
	*/

	public function getEventList($gs_multilevel_name) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "getEventList";
	     $gs_data_input2939299822982["interfaceName"] = "core.pmseventmanager.IPmsEventManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Event calendar management.<br>
	* @return core_pmseventmanager_PmsEventListEntry[] 
	*/

	public function getEventListWithDeleted($gs_multilevel_name) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "getEventListWithDeleted";
	     $gs_data_input2939299822982["interfaceName"] = "core.pmseventmanager.IPmsEventManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Event calendar management.<br>
	* @return boolean 
	*/

	public function isChecked($gs_multilevel_name, $pmsBookingId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["pmsBookingId"] = json_encode($this->transport->object_unset_nulls($pmsBookingId));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "isChecked";
	     $gs_data_input2939299822982["interfaceName"] = "core.pmseventmanager.IPmsEventManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Event calendar management.<br>
	* @return void 
	*/

	public function saveEntry($gs_multilevel_name, $entry, $day) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["entry"] = json_encode($this->transport->object_unset_nulls($entry));
	     $gs_data_input2939299822982['args']["day"] = json_encode($this->transport->object_unset_nulls($day));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "saveEntry";
	     $gs_data_input2939299822982["interfaceName"] = "core.pmseventmanager.IPmsEventManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

}
class APIPmsInvoiceManager {

	var $transport;
	
	function APIPmsInvoiceManager($transport) {
		$this->transport = $transport;
	}

	/**
	* Pms invoice system.
	* @return void 
	*/

	public function clearOrder($gs_multilevel_name, $bookingId, $orderId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["bookingId"] = json_encode($this->transport->object_unset_nulls($bookingId));
	     $gs_data_input2939299822982['args']["orderId"] = json_encode($this->transport->object_unset_nulls($orderId));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "clearOrder";
	     $gs_data_input2939299822982["interfaceName"] = "core.pmsmanager.IPmsInvoiceManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Pms invoice system.
	* @return String[] 
	*/

	public function convertCartToOrders($gs_multilevel_name, $id, $address, $paymentId, $orderCreationType) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["id"] = json_encode($this->transport->object_unset_nulls($id));
	     $gs_data_input2939299822982['args']["address"] = json_encode($this->transport->object_unset_nulls($address));
	     $gs_data_input2939299822982['args']["paymentId"] = json_encode($this->transport->object_unset_nulls($paymentId));
	     $gs_data_input2939299822982['args']["orderCreationType"] = json_encode($this->transport->object_unset_nulls($orderCreationType));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "convertCartToOrders";
	     $gs_data_input2939299822982["interfaceName"] = "core.pmsmanager.IPmsInvoiceManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Pms invoice system.
	* @return String 
	*/

	public function createOrder($gs_multilevel_name, $bookingId, $filter) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["bookingId"] = json_encode($this->transport->object_unset_nulls($bookingId));
	     $gs_data_input2939299822982['args']["filter"] = json_encode($this->transport->object_unset_nulls($filter));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "createOrder";
	     $gs_data_input2939299822982["interfaceName"] = "core.pmsmanager.IPmsInvoiceManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Pms invoice system.
	* @return String 
	*/

	public function createOrderOnUnsettledAmount($gs_multilevel_name, $bookingId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["bookingId"] = json_encode($this->transport->object_unset_nulls($bookingId));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "createOrderOnUnsettledAmount";
	     $gs_data_input2939299822982["interfaceName"] = "core.pmsmanager.IPmsInvoiceManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Pms invoice system.
	* @return void 
	*/

	public function createPeriodeInvoice($gs_multilevel_name, $start, $end, $amount, $roomId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["start"] = json_encode($this->transport->object_unset_nulls($start));
	     $gs_data_input2939299822982['args']["end"] = json_encode($this->transport->object_unset_nulls($end));
	     $gs_data_input2939299822982['args']["amount"] = json_encode($this->transport->object_unset_nulls($amount));
	     $gs_data_input2939299822982['args']["roomId"] = json_encode($this->transport->object_unset_nulls($roomId));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "createPeriodeInvoice";
	     $gs_data_input2939299822982["interfaceName"] = "core.pmsmanager.IPmsInvoiceManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Pms invoice system.
	* @return String 
	*/

	public function createRegisterCardOrder($gs_multilevel_name, $item) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["item"] = json_encode($this->transport->object_unset_nulls($item));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "createRegisterCardOrder";
	     $gs_data_input2939299822982["interfaceName"] = "core.pmsmanager.IPmsInvoiceManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Pms invoice system.
	* @return void 
	*/

	public function creditOrder($gs_multilevel_name, $bookingId, $orderId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["bookingId"] = json_encode($this->transport->object_unset_nulls($bookingId));
	     $gs_data_input2939299822982['args']["orderId"] = json_encode($this->transport->object_unset_nulls($orderId));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "creditOrder";
	     $gs_data_input2939299822982["interfaceName"] = "core.pmsmanager.IPmsInvoiceManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Pms invoice system.
	* @return void 
	*/

	public function deleteStatisticsFilter($gs_multilevel_name, $id) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["id"] = json_encode($this->transport->object_unset_nulls($id));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "deleteStatisticsFilter";
	     $gs_data_input2939299822982["interfaceName"] = "core.pmsmanager.IPmsInvoiceManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Pms invoice system.
	* @return core_ordermanager_data_Order[] 
	*/

	public function fetchDibsOrdersToAutoPay($gs_multilevel_name) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "fetchDibsOrdersToAutoPay";
	     $gs_data_input2939299822982["interfaceName"] = "core.pmsmanager.IPmsInvoiceManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Pms invoice system.
	* @return core_pmsmanager_PmsOrderStatistics 
	*/

	public function generateStatistics($gs_multilevel_name, $filter) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["filter"] = json_encode($this->transport->object_unset_nulls($filter));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "generateStatistics";
	     $gs_data_input2939299822982["interfaceName"] = "core.pmsmanager.IPmsInvoiceManager";
	     return $this->transport->cast(new core_pmsmanager_PmsOrderStatistics(), $this->transport->sendMessage($gs_data_input2939299822982));
	}

	/**
	* Pms invoice system.
	* @return core_pmsmanager_PmsOrderStatsFilter[] 
	*/

	public function getAllStatisticsFilters($gs_multilevel_name) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "getAllStatisticsFilters";
	     $gs_data_input2939299822982["interfaceName"] = "core.pmsmanager.IPmsInvoiceManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Pms invoice system.
	* @return core_cartmanager_data_CartItem[] 
	*/

	public function getAllUnpaidItemsForRoom($gs_multilevel_name, $pmsRoomId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["pmsRoomId"] = json_encode($this->transport->object_unset_nulls($pmsRoomId));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "getAllUnpaidItemsForRoom";
	     $gs_data_input2939299822982["interfaceName"] = "core.pmsmanager.IPmsInvoiceManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Pms invoice system.
	* @return core_pmsmanager_PmsUserDiscount 
	*/

	public function getDiscountsForUser($gs_multilevel_name, $userId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["userId"] = json_encode($this->transport->object_unset_nulls($userId));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "getDiscountsForUser";
	     $gs_data_input2939299822982["interfaceName"] = "core.pmsmanager.IPmsInvoiceManager";
	     return $this->transport->cast(new core_pmsmanager_PmsUserDiscount(), $this->transport->sendMessage($gs_data_input2939299822982));
	}

	/**
	* Pms invoice system.
	* @return Long[] 
	*/

	public function getOrdersForRoomToPay($gs_multilevel_name, $pmsRoomId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["pmsRoomId"] = json_encode($this->transport->object_unset_nulls($pmsRoomId));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "getOrdersForRoomToPay";
	     $gs_data_input2939299822982["interfaceName"] = "core.pmsmanager.IPmsInvoiceManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Pms invoice system.
	* @return core_pmsmanager_PmsPaymentLinksConfiguration 
	*/

	public function getPaymentLinkConfig($gs_multilevel_name) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "getPaymentLinkConfig";
	     $gs_data_input2939299822982["interfaceName"] = "core.pmsmanager.IPmsInvoiceManager";
	     return $this->transport->cast(new core_pmsmanager_PmsPaymentLinksConfiguration(), $this->transport->sendMessage($gs_data_input2939299822982));
	}

	/**
	* Pms invoice system.
	* @return core_ordermanager_data_Payment 
	*/

	public function getPreferredPaymentMethod($gs_multilevel_name, $bookingId, $filter) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["bookingId"] = json_encode($this->transport->object_unset_nulls($bookingId));
	     $gs_data_input2939299822982['args']["filter"] = json_encode($this->transport->object_unset_nulls($filter));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "getPreferredPaymentMethod";
	     $gs_data_input2939299822982["interfaceName"] = "core.pmsmanager.IPmsInvoiceManager";
	     return $this->transport->cast(new core_ordermanager_data_Payment(), $this->transport->sendMessage($gs_data_input2939299822982));
	}

	/**
	* Pms invoice system.
	* @return core_pmsmanager_PmsSubscriptionOverview[] 
	*/

	public function getSubscriptionOverview($gs_multilevel_name, $start, $end) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["start"] = json_encode($this->transport->object_unset_nulls($start));
	     $gs_data_input2939299822982['args']["end"] = json_encode($this->transport->object_unset_nulls($end));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "getSubscriptionOverview";
	     $gs_data_input2939299822982["interfaceName"] = "core.pmsmanager.IPmsInvoiceManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Pms invoice system.
	* @return Double 
	*/

	public function getTotalOnOrdersForRoom($gs_multilevel_name, $pmsRoomId, $inctaxes) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["pmsRoomId"] = json_encode($this->transport->object_unset_nulls($pmsRoomId));
	     $gs_data_input2939299822982['args']["inctaxes"] = json_encode($this->transport->object_unset_nulls($inctaxes));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "getTotalOnOrdersForRoom";
	     $gs_data_input2939299822982["interfaceName"] = "core.pmsmanager.IPmsInvoiceManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Pms invoice system.
	* @return Double 
	*/

	public function getTotalPaidOnRoomOrBooking($gs_multilevel_name, $pmsBookingRoomId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["pmsBookingRoomId"] = json_encode($this->transport->object_unset_nulls($pmsBookingRoomId));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "getTotalPaidOnRoomOrBooking";
	     $gs_data_input2939299822982["interfaceName"] = "core.pmsmanager.IPmsInvoiceManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Pms invoice system.
	* @return core_pmsmanager_PmsUserDiscount 
	*/

	public function getUserDiscountByCouponCode($gs_multilevel_name, $couponCode) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["couponCode"] = json_encode($this->transport->object_unset_nulls($couponCode));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "getUserDiscountByCouponCode";
	     $gs_data_input2939299822982["interfaceName"] = "core.pmsmanager.IPmsInvoiceManager";
	     return $this->transport->cast(new core_pmsmanager_PmsUserDiscount(), $this->transport->sendMessage($gs_data_input2939299822982));
	}

	/**
	* Pms invoice system.
	* @return boolean 
	*/

	public function isRoomPaidFor($gs_multilevel_name, $pmsRoomId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["pmsRoomId"] = json_encode($this->transport->object_unset_nulls($pmsRoomId));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "isRoomPaidFor";
	     $gs_data_input2939299822982["interfaceName"] = "core.pmsmanager.IPmsInvoiceManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Pms invoice system.
	* @return void 
	*/

	public function markOrderAsPaid($gs_multilevel_name, $bookingId, $orderId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["bookingId"] = json_encode($this->transport->object_unset_nulls($bookingId));
	     $gs_data_input2939299822982['args']["orderId"] = json_encode($this->transport->object_unset_nulls($orderId));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "markOrderAsPaid";
	     $gs_data_input2939299822982["interfaceName"] = "core.pmsmanager.IPmsInvoiceManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Pms invoice system.
	* @return void 
	*/

	public function recalculateAllBookings($gs_multilevel_name, $password) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["password"] = json_encode($this->transport->object_unset_nulls($password));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "recalculateAllBookings";
	     $gs_data_input2939299822982["interfaceName"] = "core.pmsmanager.IPmsInvoiceManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Pms invoice system.
	* @return core_ordermanager_data_Order 
	*/

	public function removeDuplicateOrderLines($gs_multilevel_name, $order) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["order"] = json_encode($this->transport->object_unset_nulls($order));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "removeDuplicateOrderLines";
	     $gs_data_input2939299822982["interfaceName"] = "core.pmsmanager.IPmsInvoiceManager";
	     return $this->transport->cast(new core_ordermanager_data_Order(), $this->transport->sendMessage($gs_data_input2939299822982));
	}

	/**
	* Pms invoice system.
	* @return core_cartmanager_data_CartItem[] 
	*/

	public function removeOrderLinesOnOrdersForBooking($gs_multilevel_name, $id, $roomIds) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["id"] = json_encode($this->transport->object_unset_nulls($id));
	     $gs_data_input2939299822982['args']["roomIds"] = json_encode($this->transport->object_unset_nulls($roomIds));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "removeOrderLinesOnOrdersForBooking";
	     $gs_data_input2939299822982["interfaceName"] = "core.pmsmanager.IPmsInvoiceManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Pms invoice system.
	* @return void 
	*/

	public function saveDiscounts($gs_multilevel_name, $discounts) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["discounts"] = json_encode($this->transport->object_unset_nulls($discounts));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "saveDiscounts";
	     $gs_data_input2939299822982["interfaceName"] = "core.pmsmanager.IPmsInvoiceManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Pms invoice system.
	* @return void 
	*/

	public function savePaymentLinkConfig($gs_multilevel_name, $config) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["config"] = json_encode($this->transport->object_unset_nulls($config));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "savePaymentLinkConfig";
	     $gs_data_input2939299822982["interfaceName"] = "core.pmsmanager.IPmsInvoiceManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Pms invoice system.
	* @return void 
	*/

	public function saveStatisticsFilter($gs_multilevel_name, $filter) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["filter"] = json_encode($this->transport->object_unset_nulls($filter));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "saveStatisticsFilter";
	     $gs_data_input2939299822982["interfaceName"] = "core.pmsmanager.IPmsInvoiceManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Pms invoice system.
	* @return String 
	*/

	public function sendRecieptOrInvoice($gs_multilevel_name, $orderId, $email, $bookingId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["orderId"] = json_encode($this->transport->object_unset_nulls($orderId));
	     $gs_data_input2939299822982['args']["email"] = json_encode($this->transport->object_unset_nulls($email));
	     $gs_data_input2939299822982['args']["bookingId"] = json_encode($this->transport->object_unset_nulls($bookingId));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "sendRecieptOrInvoice";
	     $gs_data_input2939299822982["interfaceName"] = "core.pmsmanager.IPmsInvoiceManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Pms invoice system.
	* @return boolean 
	*/

	public function supportsDailyPmsInvoiceing($gs_multilevel_name, $bookingId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["bookingId"] = json_encode($this->transport->object_unset_nulls($bookingId));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "supportsDailyPmsInvoiceing";
	     $gs_data_input2939299822982["interfaceName"] = "core.pmsmanager.IPmsInvoiceManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Pms invoice system.
	* @return String[] 
	*/

	public function validateAllInvoiceToDates($gs_multilevel_name) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "validateAllInvoiceToDates";
	     $gs_data_input2939299822982["interfaceName"] = "core.pmsmanager.IPmsInvoiceManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

}
class APIPmsManager {

	var $transport;
	
	function APIPmsManager($transport) {
		$this->transport = $transport;
	}

	/**
	* Key = date / day
	* @return void 
	*/

	public function addAddonToCurrentBooking($gs_multilevel_name, $itemtypeId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["itemtypeId"] = json_encode($this->transport->object_unset_nulls($itemtypeId));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "addAddonToCurrentBooking";
	     $gs_data_input2939299822982["interfaceName"] = "core.pmsmanager.IPmsManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Key = date / day
	* @return void 
	*/

	public function addAddonToRoom($gs_multilevel_name, $addon, $pmsRoomId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["addon"] = json_encode($this->transport->object_unset_nulls($addon));
	     $gs_data_input2939299822982['args']["pmsRoomId"] = json_encode($this->transport->object_unset_nulls($pmsRoomId));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "addAddonToRoom";
	     $gs_data_input2939299822982["interfaceName"] = "core.pmsmanager.IPmsManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Key = date / day
	* @return void 
	*/

	public function addAddonsToBooking($gs_multilevel_name, $type, $roomId, $remove) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["type"] = json_encode($this->transport->object_unset_nulls($type));
	     $gs_data_input2939299822982['args']["roomId"] = json_encode($this->transport->object_unset_nulls($roomId));
	     $gs_data_input2939299822982['args']["remove"] = json_encode($this->transport->object_unset_nulls($remove));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "addAddonsToBooking";
	     $gs_data_input2939299822982["interfaceName"] = "core.pmsmanager.IPmsManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Property management system.<br>
	* @return String 
	*/

	public function addBookingItem($gs_multilevel_name, $bookingId, $item, $start, $end) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["bookingId"] = json_encode($this->transport->object_unset_nulls($bookingId));
	     $gs_data_input2939299822982['args']["item"] = json_encode($this->transport->object_unset_nulls($item));
	     $gs_data_input2939299822982['args']["start"] = json_encode($this->transport->object_unset_nulls($start));
	     $gs_data_input2939299822982['args']["end"] = json_encode($this->transport->object_unset_nulls($end));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "addBookingItem";
	     $gs_data_input2939299822982["interfaceName"] = "core.pmsmanager.IPmsManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Property management system.<br>
	* @return String 
	*/

	public function addBookingItemType($gs_multilevel_name, $bookingId, $item, $start, $end, $guestInfoFromRoom) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["bookingId"] = json_encode($this->transport->object_unset_nulls($bookingId));
	     $gs_data_input2939299822982['args']["item"] = json_encode($this->transport->object_unset_nulls($item));
	     $gs_data_input2939299822982['args']["start"] = json_encode($this->transport->object_unset_nulls($start));
	     $gs_data_input2939299822982['args']["end"] = json_encode($this->transport->object_unset_nulls($end));
	     $gs_data_input2939299822982['args']["guestInfoFromRoom"] = json_encode($this->transport->object_unset_nulls($guestInfoFromRoom));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "addBookingItemType";
	     $gs_data_input2939299822982["interfaceName"] = "core.pmsmanager.IPmsManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Property management system.<br>
	* @return void 
	*/

	public function addCartItemToRoom($gs_multilevel_name, $item, $pmsBookingRoomId, $addedBy) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["item"] = json_encode($this->transport->object_unset_nulls($item));
	     $gs_data_input2939299822982['args']["pmsBookingRoomId"] = json_encode($this->transport->object_unset_nulls($pmsBookingRoomId));
	     $gs_data_input2939299822982['args']["addedBy"] = json_encode($this->transport->object_unset_nulls($addedBy));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "addCartItemToRoom";
	     $gs_data_input2939299822982["interfaceName"] = "core.pmsmanager.IPmsManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Property management system.<br>
	* @return void 
	*/

	public function addComment($gs_multilevel_name, $bookingId, $comment) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["bookingId"] = json_encode($this->transport->object_unset_nulls($bookingId));
	     $gs_data_input2939299822982['args']["comment"] = json_encode($this->transport->object_unset_nulls($comment));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "addComment";
	     $gs_data_input2939299822982["interfaceName"] = "core.pmsmanager.IPmsManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Key = date / day
	* @return void 
	*/

	public function addProductToRoom($gs_multilevel_name, $productId, $pmsRoomId, $count) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["productId"] = json_encode($this->transport->object_unset_nulls($productId));
	     $gs_data_input2939299822982['args']["pmsRoomId"] = json_encode($this->transport->object_unset_nulls($pmsRoomId));
	     $gs_data_input2939299822982['args']["count"] = json_encode($this->transport->object_unset_nulls($count));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "addProductToRoom";
	     $gs_data_input2939299822982["interfaceName"] = "core.pmsmanager.IPmsManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Property management system.<br>
	* @return void 
	*/

	public function addRepeatingData($gs_multilevel_name, $data) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["data"] = json_encode($this->transport->object_unset_nulls($data));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "addRepeatingData";
	     $gs_data_input2939299822982["interfaceName"] = "core.pmsmanager.IPmsManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Property management system.<br>
	* @return boolean 
	*/

	public function addToWaitingList($gs_multilevel_name, $pmsRoomId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["pmsRoomId"] = json_encode($this->transport->object_unset_nulls($pmsRoomId));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "addToWaitingList";
	     $gs_data_input2939299822982["interfaceName"] = "core.pmsmanager.IPmsManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Property management system.<br>
	* @return void 
	*/

	public function addToWorkSpace($gs_multilevel_name, $pmsRoomId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["pmsRoomId"] = json_encode($this->transport->object_unset_nulls($pmsRoomId));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "addToWorkSpace";
	     $gs_data_input2939299822982["interfaceName"] = "core.pmsmanager.IPmsManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Property management system.<br>
	* @return core_pmsmanager_PmsBookingRooms 
	*/

	public function changeDates($gs_multilevel_name, $roomId, $bookingId, $start, $end) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["roomId"] = json_encode($this->transport->object_unset_nulls($roomId));
	     $gs_data_input2939299822982['args']["bookingId"] = json_encode($this->transport->object_unset_nulls($bookingId));
	     $gs_data_input2939299822982['args']["start"] = json_encode($this->transport->object_unset_nulls($start));
	     $gs_data_input2939299822982['args']["end"] = json_encode($this->transport->object_unset_nulls($end));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "changeDates";
	     $gs_data_input2939299822982["interfaceName"] = "core.pmsmanager.IPmsManager";
	     return $this->transport->cast(new core_pmsmanager_PmsBookingRooms(), $this->transport->sendMessage($gs_data_input2939299822982));
	}

	/**
	* Property management system.<br>
	* @return void 
	*/

	public function changeInvoiceDate($gs_multilevel_name, $roomId, $newDate) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["roomId"] = json_encode($this->transport->object_unset_nulls($roomId));
	     $gs_data_input2939299822982['args']["newDate"] = json_encode($this->transport->object_unset_nulls($newDate));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "changeInvoiceDate";
	     $gs_data_input2939299822982["interfaceName"] = "core.pmsmanager.IPmsManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Property management system.<br>
	* @return void 
	*/

	public function checkDoorStatusControl($gs_multilevel_name) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "checkDoorStatusControl";
	     $gs_data_input2939299822982["interfaceName"] = "core.pmsmanager.IPmsManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Key = date / day
	* @return void 
	*/

	public function checkForDeadCodesApac($gs_multilevel_name) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "checkForDeadCodesApac";
	     $gs_data_input2939299822982["interfaceName"] = "core.pmsmanager.IPmsManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Property management system.<br>
	* @return void 
	*/

	public function checkForRoomsToClose($gs_multilevel_name) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "checkForRoomsToClose";
	     $gs_data_input2939299822982["interfaceName"] = "core.pmsmanager.IPmsManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Property management system.<br>
	* @return void 
	*/

	public function checkIfGuestHasArrived($gs_multilevel_name) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "checkIfGuestHasArrived";
	     $gs_data_input2939299822982["interfaceName"] = "core.pmsmanager.IPmsManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Property management system.<br>
	* @return void 
	*/

	public function checkInRoom($gs_multilevel_name, $pmsBookingRoomId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["pmsBookingRoomId"] = json_encode($this->transport->object_unset_nulls($pmsBookingRoomId));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "checkInRoom";
	     $gs_data_input2939299822982["interfaceName"] = "core.pmsmanager.IPmsManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Property management system.<br>
	* @return void 
	*/

	public function checkOutRoom($gs_multilevel_name, $pmsBookingRoomId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["pmsBookingRoomId"] = json_encode($this->transport->object_unset_nulls($pmsBookingRoomId));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "checkOutRoom";
	     $gs_data_input2939299822982["interfaceName"] = "core.pmsmanager.IPmsManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Property management system.<br>
	* @return boolean 
	*/

	public function closeItem($gs_multilevel_name, $id, $start, $end, $source) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["id"] = json_encode($this->transport->object_unset_nulls($id));
	     $gs_data_input2939299822982['args']["start"] = json_encode($this->transport->object_unset_nulls($start));
	     $gs_data_input2939299822982['args']["end"] = json_encode($this->transport->object_unset_nulls($end));
	     $gs_data_input2939299822982['args']["source"] = json_encode($this->transport->object_unset_nulls($source));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "closeItem";
	     $gs_data_input2939299822982["interfaceName"] = "core.pmsmanager.IPmsManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Property management system.<br>
	* @return void 
	*/

	public function completeCareTakerJob($gs_multilevel_name, $id) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["id"] = json_encode($this->transport->object_unset_nulls($id));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "completeCareTakerJob";
	     $gs_data_input2939299822982["interfaceName"] = "core.pmsmanager.IPmsManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Property management system.<br>
	* @return core_pmsmanager_PmsBooking 
	*/

	public function completeCurrentBooking($gs_multilevel_name) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "completeCurrentBooking";
	     $gs_data_input2939299822982["interfaceName"] = "core.pmsmanager.IPmsManager";
	     return $this->transport->cast(new core_pmsmanager_PmsBooking(), $this->transport->sendMessage($gs_data_input2939299822982));
	}

	/**
	* Property management system.<br>
	* @return void 
	*/

	public function confirmBooking($gs_multilevel_name, $bookingId, $message) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["bookingId"] = json_encode($this->transport->object_unset_nulls($bookingId));
	     $gs_data_input2939299822982['args']["message"] = json_encode($this->transport->object_unset_nulls($message));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "confirmBooking";
	     $gs_data_input2939299822982["interfaceName"] = "core.pmsmanager.IPmsManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Property management system.<br>
	* @return public class Date 
	*/

	public function convertTextDate($gs_multilevel_name, $text) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["text"] = json_encode($this->transport->object_unset_nulls($text));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "convertTextDate";
	     $gs_data_input2939299822982["interfaceName"] = "core.pmsmanager.IPmsManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Key = date / day
	* @return core_pmsmanager_PmsBookingAddonItem[] 
	*/

	public function createAddonsThatCanBeAddedToRoom($gs_multilevel_name, $productId, $pmsBookingRoomId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["productId"] = json_encode($this->transport->object_unset_nulls($productId));
	     $gs_data_input2939299822982['args']["pmsBookingRoomId"] = json_encode($this->transport->object_unset_nulls($pmsBookingRoomId));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "createAddonsThatCanBeAddedToRoom";
	     $gs_data_input2939299822982["interfaceName"] = "core.pmsmanager.IPmsManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Property management system.<br>
	* @return void 
	*/

	public function createAllVirtualOrders($gs_multilevel_name) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "createAllVirtualOrders";
	     $gs_data_input2939299822982["interfaceName"] = "core.pmsmanager.IPmsManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Property management system.<br>
	* @return void 
	*/

	public function createChannel($gs_multilevel_name, $channel) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["channel"] = json_encode($this->transport->object_unset_nulls($channel));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "createChannel";
	     $gs_data_input2939299822982["interfaceName"] = "core.pmsmanager.IPmsManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Property management system.<br>
	* @return void 
	*/

	public function createNewPricePlan($gs_multilevel_name, $code) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["code"] = json_encode($this->transport->object_unset_nulls($code));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "createNewPricePlan";
	     $gs_data_input2939299822982["interfaceName"] = "core.pmsmanager.IPmsManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Property management system.<br>
	* @return void 
	*/

	public function createNewUserOnBooking($gs_multilevel_name, $bookingId, $name, $orgId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["bookingId"] = json_encode($this->transport->object_unset_nulls($bookingId));
	     $gs_data_input2939299822982['args']["name"] = json_encode($this->transport->object_unset_nulls($name));
	     $gs_data_input2939299822982['args']["orgId"] = json_encode($this->transport->object_unset_nulls($orgId));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "createNewUserOnBooking";
	     $gs_data_input2939299822982["interfaceName"] = "core.pmsmanager.IPmsManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Property management system.<br>
	* @return String 
	*/

	public function createOrder($gs_multilevel_name, $bookingId, $filter) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["bookingId"] = json_encode($this->transport->object_unset_nulls($bookingId));
	     $gs_data_input2939299822982['args']["filter"] = json_encode($this->transport->object_unset_nulls($filter));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "createOrder";
	     $gs_data_input2939299822982["interfaceName"] = "core.pmsmanager.IPmsManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Property management system.<br>
	* @return String 
	*/

	public function createPrepaymentOrder($gs_multilevel_name, $bookingId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["bookingId"] = json_encode($this->transport->object_unset_nulls($bookingId));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "createPrepaymentOrder";
	     $gs_data_input2939299822982["interfaceName"] = "core.pmsmanager.IPmsManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Property management system.<br>
	* @return core_usermanager_data_User 
	*/

	public function createUser($gs_multilevel_name, $newUser) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["newUser"] = json_encode($this->transport->object_unset_nulls($newUser));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "createUser";
	     $gs_data_input2939299822982["interfaceName"] = "core.pmsmanager.IPmsManager";
	     return $this->transport->cast(new core_usermanager_data_User(), $this->transport->sendMessage($gs_data_input2939299822982));
	}

	/**
	* Property management system.<br>
	* @return void 
	*/

	public function deleteAllBookings($gs_multilevel_name, $code) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["code"] = json_encode($this->transport->object_unset_nulls($code));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "deleteAllBookings";
	     $gs_data_input2939299822982["interfaceName"] = "core.pmsmanager.IPmsManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Property management system.<br>
	* @return void 
	*/

	public function deleteBooking($gs_multilevel_name, $bookingId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["bookingId"] = json_encode($this->transport->object_unset_nulls($bookingId));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "deleteBooking";
	     $gs_data_input2939299822982["interfaceName"] = "core.pmsmanager.IPmsManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Property management system.<br>
	* @return void 
	*/

	public function deleteDeliveryLogEntry($gs_multilevel_name, $id) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["id"] = json_encode($this->transport->object_unset_nulls($id));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "deleteDeliveryLogEntry";
	     $gs_data_input2939299822982["interfaceName"] = "core.pmsmanager.IPmsManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Property management system.<br>
	* @return void 
	*/

	public function deletePmsFilter($gs_multilevel_name, $name) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["name"] = json_encode($this->transport->object_unset_nulls($name));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "deletePmsFilter";
	     $gs_data_input2939299822982["interfaceName"] = "core.pmsmanager.IPmsManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Property management system.<br>
	* @return void 
	*/

	public function deletePricePlan($gs_multilevel_name, $code) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["code"] = json_encode($this->transport->object_unset_nulls($code));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "deletePricePlan";
	     $gs_data_input2939299822982["interfaceName"] = "core.pmsmanager.IPmsManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Key = date / day
	* @return void 
	*/

	public function detachOrderFromBooking($gs_multilevel_name, $bookingId, $orderId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["bookingId"] = json_encode($this->transport->object_unset_nulls($bookingId));
	     $gs_data_input2939299822982['args']["orderId"] = json_encode($this->transport->object_unset_nulls($orderId));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "detachOrderFromBooking";
	     $gs_data_input2939299822982["interfaceName"] = "core.pmsmanager.IPmsManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Property management system.<br>
	* @return void 
	*/

	public function doNotification($gs_multilevel_name, $key, $bookingId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["key"] = json_encode($this->transport->object_unset_nulls($key));
	     $gs_data_input2939299822982['args']["bookingId"] = json_encode($this->transport->object_unset_nulls($bookingId));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "doNotification";
	     $gs_data_input2939299822982["interfaceName"] = "core.pmsmanager.IPmsManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Property management system.<br>
	* @return void 
	*/

	public function endRoom($gs_multilevel_name, $roomId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["roomId"] = json_encode($this->transport->object_unset_nulls($roomId));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "endRoom";
	     $gs_data_input2939299822982["interfaceName"] = "core.pmsmanager.IPmsManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Property management system.<br>
	* @return void 
	*/

	public function endRoomWithDate($gs_multilevel_name, $pmsRoomId, $date) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["pmsRoomId"] = json_encode($this->transport->object_unset_nulls($pmsRoomId));
	     $gs_data_input2939299822982['args']["date"] = json_encode($this->transport->object_unset_nulls($date));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "endRoomWithDate";
	     $gs_data_input2939299822982["interfaceName"] = "core.pmsmanager.IPmsManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Property management system.<br>
	* @return void 
	*/

	public function failedChargeCard($gs_multilevel_name, $orderId, $bookingId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["orderId"] = json_encode($this->transport->object_unset_nulls($orderId));
	     $gs_data_input2939299822982['args']["bookingId"] = json_encode($this->transport->object_unset_nulls($bookingId));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "failedChargeCard";
	     $gs_data_input2939299822982["interfaceName"] = "core.pmsmanager.IPmsManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Property management system.<br>
	* @return void 
	*/

	public function forceMarkRoomAsCleaned($gs_multilevel_name, $itemId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["itemId"] = json_encode($this->transport->object_unset_nulls($itemId));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "forceMarkRoomAsCleaned";
	     $gs_data_input2939299822982["interfaceName"] = "core.pmsmanager.IPmsManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Property management system.<br>
	* @return void 
	*/

	public function freezeSubscription($gs_multilevel_name, $pmsBookingRoomId, $freezeUntil) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["pmsBookingRoomId"] = json_encode($this->transport->object_unset_nulls($pmsBookingRoomId));
	     $gs_data_input2939299822982['args']["freezeUntil"] = json_encode($this->transport->object_unset_nulls($freezeUntil));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "freezeSubscription";
	     $gs_data_input2939299822982["interfaceName"] = "core.pmsmanager.IPmsManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Property management system.<br>
	* @return String 
	*/

	public function generateNewCodeForRoom($gs_multilevel_name, $roomId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["roomId"] = json_encode($this->transport->object_unset_nulls($roomId));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "generateNewCodeForRoom";
	     $gs_data_input2939299822982["interfaceName"] = "core.pmsmanager.IPmsManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Key = date / day
	* @return public class LinkedList<E> 
	*/

	public function generateRepeatDateRanges($gs_multilevel_name, $data) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["data"] = json_encode($this->transport->object_unset_nulls($data));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "generateRepeatDateRanges";
	     $gs_data_input2939299822982["interfaceName"] = "core.pmsmanager.IPmsManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Key = date / day
	* @return core_pmsmanager_PmsRoomTypeAccessory[] 
	*/

	public function getAccesories($gs_multilevel_name) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "getAccesories";
	     $gs_data_input2939299822982["interfaceName"] = "core.pmsmanager.IPmsManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Property management system.<br>
	* @return core_pmsmanager_PmsAdditionalItemInformation 
	*/

	public function getAdditionalInfo($gs_multilevel_name, $itemId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["itemId"] = json_encode($this->transport->object_unset_nulls($itemId));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "getAdditionalInfo";
	     $gs_data_input2939299822982["interfaceName"] = "core.pmsmanager.IPmsManager";
	     return $this->transport->cast(new core_pmsmanager_PmsAdditionalItemInformation(), $this->transport->sendMessage($gs_data_input2939299822982));
	}

	/**
	* Property management system.<br>
	* @return core_pmsmanager_PmsAdditionalTypeInformation[] 
	*/

	public function getAdditionalTypeInformation($gs_multilevel_name) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "getAdditionalTypeInformation";
	     $gs_data_input2939299822982["interfaceName"] = "core.pmsmanager.IPmsManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Property management system.<br>
	* @return core_pmsmanager_PmsAdditionalTypeInformation 
	*/

	public function getAdditionalTypeInformationById($gs_multilevel_name, $typeId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["typeId"] = json_encode($this->transport->object_unset_nulls($typeId));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "getAdditionalTypeInformationById";
	     $gs_data_input2939299822982["interfaceName"] = "core.pmsmanager.IPmsManager";
	     return $this->transport->cast(new core_pmsmanager_PmsAdditionalTypeInformation(), $this->transport->sendMessage($gs_data_input2939299822982));
	}

	/**
	* Property management system.<br>
	* @return core_pmsmanager_PmsBookingAddonItem[] 
	*/

	public function getAddonsAvailable($gs_multilevel_name) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "getAddonsAvailable";
	     $gs_data_input2939299822982["interfaceName"] = "core.pmsmanager.IPmsManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Key = date / day
	* @return core_pmsmanager_PmsBookingAddonItem[] 
	*/

	public function getAddonsForRoom($gs_multilevel_name, $roomId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["roomId"] = json_encode($this->transport->object_unset_nulls($roomId));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "getAddonsForRoom";
	     $gs_data_input2939299822982["interfaceName"] = "core.pmsmanager.IPmsManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Key = date / day
	* @return core_pmsmanager_PmsBookingAddonItem[] 
	*/

	public function getAddonsWithDiscount($gs_multilevel_name, $pmsBookingRoomId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["pmsBookingRoomId"] = json_encode($this->transport->object_unset_nulls($pmsBookingRoomId));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "getAddonsWithDiscount";
	     $gs_data_input2939299822982["interfaceName"] = "core.pmsmanager.IPmsManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Key = date / day
	* @return core_pmsmanager_PmsBookingAddonItem[] 
	*/

	public function getAddonsWithDiscountForBooking($gs_multilevel_name, $pmsBookingRoomId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["pmsBookingRoomId"] = json_encode($this->transport->object_unset_nulls($pmsBookingRoomId));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "getAddonsWithDiscountForBooking";
	     $gs_data_input2939299822982["interfaceName"] = "core.pmsmanager.IPmsManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Property management system.<br>
	* @return core_pmsmanager_PmsAdditionalItemInformation[] 
	*/

	public function getAllAdditionalInformationOnRooms($gs_multilevel_name) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "getAllAdditionalInformationOnRooms";
	     $gs_data_input2939299822982["interfaceName"] = "core.pmsmanager.IPmsManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Property management system.<br>
	* @return core_pmsmanager_PmsBooking[] 
	*/

	public function getAllBookings($gs_multilevel_name, $state) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["state"] = json_encode($this->transport->object_unset_nulls($state));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "getAllBookings";
	     $gs_data_input2939299822982["interfaceName"] = "core.pmsmanager.IPmsManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Property management system.<br>
	* @return core_pmsmanager_PmsBooking[] 
	*/

	public function getAllBookingsForLoggedOnUser($gs_multilevel_name) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "getAllBookingsForLoggedOnUser";
	     $gs_data_input2939299822982["interfaceName"] = "core.pmsmanager.IPmsManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Property management system.<br>
	* @return core_pmsmanager_PmsBooking[] 
	*/

	public function getAllBookingsUnsecure($gs_multilevel_name, $state) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["state"] = json_encode($this->transport->object_unset_nulls($state));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "getAllBookingsUnsecure";
	     $gs_data_input2939299822982["interfaceName"] = "core.pmsmanager.IPmsManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Property management system.<br>
	* @return core_common_FilteredData 
	*/

	public function getAllCrmUsers($gs_multilevel_name, $filter) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["filter"] = json_encode($this->transport->object_unset_nulls($filter));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "getAllCrmUsers";
	     $gs_data_input2939299822982["interfaceName"] = "core.pmsmanager.IPmsManager";
	     return $this->transport->cast(new core_common_FilteredData(), $this->transport->sendMessage($gs_data_input2939299822982));
	}

	/**
	* Property management system.<br>
	* @return core_pmsmanager_PmsBookingFilter[] 
	*/

	public function getAllPmsFilters($gs_multilevel_name) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "getAllPmsFilters";
	     $gs_data_input2939299822982["interfaceName"] = "core.pmsmanager.IPmsManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Property management system.<br>
	* @return core_pmsmanager_PmsBookingRooms[] 
	*/

	public function getAllRoomTypes($gs_multilevel_name, $start, $end) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["start"] = json_encode($this->transport->object_unset_nulls($start));
	     $gs_data_input2939299822982['args']["end"] = json_encode($this->transport->object_unset_nulls($end));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "getAllRoomTypes";
	     $gs_data_input2939299822982["interfaceName"] = "core.pmsmanager.IPmsManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Property management system.<br>
	* @return core_pmsmanager_RoomCleanedInformation[] 
	*/

	public function getAllRoomsNeedCleaningToday($gs_multilevel_name) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "getAllRoomsNeedCleaningToday";
	     $gs_data_input2939299822982["interfaceName"] = "core.pmsmanager.IPmsManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Key = date / day
	* @return core_pmsmanager_PmsRoomSimple[] 
	*/

	public function getAllRoomsThatHasAddonsOfType($gs_multilevel_name, $type) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["type"] = json_encode($this->transport->object_unset_nulls($type));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "getAllRoomsThatHasAddonsOfType";
	     $gs_data_input2939299822982["interfaceName"] = "core.pmsmanager.IPmsManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Property management system.<br>
	* @return core_pmsmanager_PmsCustomerRow[] 
	*/

	public function getAllUsers($gs_multilevel_name, $filter) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["filter"] = json_encode($this->transport->object_unset_nulls($filter));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "getAllUsers";
	     $gs_data_input2939299822982["interfaceName"] = "core.pmsmanager.IPmsManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Property management system.<br>
	* @return Integer[] 
	*/

	public function getAvailabilityForType($gs_multilevel_name, $bookingItemId, $startTime, $endTime, $intervalInMinutes) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["bookingItemId"] = json_encode($this->transport->object_unset_nulls($bookingItemId));
	     $gs_data_input2939299822982['args']["startTime"] = json_encode($this->transport->object_unset_nulls($startTime));
	     $gs_data_input2939299822982['args']["endTime"] = json_encode($this->transport->object_unset_nulls($endTime));
	     $gs_data_input2939299822982['args']["intervalInMinutes"] = json_encode($this->transport->object_unset_nulls($intervalInMinutes));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "getAvailabilityForType";
	     $gs_data_input2939299822982["interfaceName"] = "core.pmsmanager.IPmsManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Property management system.<br>
	* @return core_pmsmanager_PmsBooking 
	*/

	public function getBooking($gs_multilevel_name, $bookingId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["bookingId"] = json_encode($this->transport->object_unset_nulls($bookingId));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "getBooking";
	     $gs_data_input2939299822982["interfaceName"] = "core.pmsmanager.IPmsManager";
	     return $this->transport->cast(new core_pmsmanager_PmsBooking(), $this->transport->sendMessage($gs_data_input2939299822982));
	}

	/**
	* Property management system.<br>
	* @return core_pmsmanager_PmsBooking 
	*/

	public function getBookingFromBookingEngineId($gs_multilevel_name, $bookingEngineId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["bookingEngineId"] = json_encode($this->transport->object_unset_nulls($bookingEngineId));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "getBookingFromBookingEngineId";
	     $gs_data_input2939299822982["interfaceName"] = "core.pmsmanager.IPmsManager";
	     return $this->transport->cast(new core_pmsmanager_PmsBooking(), $this->transport->sendMessage($gs_data_input2939299822982));
	}

	/**
	* Property management system.<br>
	* @return core_pmsmanager_PmsBooking 
	*/

	public function getBookingFromRoom($gs_multilevel_name, $pmsBookingRoomId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["pmsBookingRoomId"] = json_encode($this->transport->object_unset_nulls($pmsBookingRoomId));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "getBookingFromRoom";
	     $gs_data_input2939299822982["interfaceName"] = "core.pmsmanager.IPmsManager";
	     return $this->transport->cast(new core_pmsmanager_PmsBooking(), $this->transport->sendMessage($gs_data_input2939299822982));
	}

	/**
	* Property management system.<br>
	* @return core_pmsmanager_PmsBooking 
	*/

	public function getBookingFromRoomIgnoreDeleted($gs_multilevel_name, $roomId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["roomId"] = json_encode($this->transport->object_unset_nulls($roomId));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "getBookingFromRoomIgnoreDeleted";
	     $gs_data_input2939299822982["interfaceName"] = "core.pmsmanager.IPmsManager";
	     return $this->transport->cast(new core_pmsmanager_PmsBooking(), $this->transport->sendMessage($gs_data_input2939299822982));
	}

	/**
	* Property management system.<br>
	* @return core_pmsmanager_PmsBooking 
	*/

	public function getBookingWithOrderId($gs_multilevel_name, $orderId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["orderId"] = json_encode($this->transport->object_unset_nulls($orderId));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "getBookingWithOrderId";
	     $gs_data_input2939299822982["interfaceName"] = "core.pmsmanager.IPmsManager";
	     return $this->transport->cast(new core_pmsmanager_PmsBooking(), $this->transport->sendMessage($gs_data_input2939299822982));
	}

	/**
	* Property management system.<br>
	* @return core_pmsmanager_PmsCareTaker 
	*/

	public function getCareTakerJob($gs_multilevel_name, $id) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["id"] = json_encode($this->transport->object_unset_nulls($id));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "getCareTakerJob";
	     $gs_data_input2939299822982["interfaceName"] = "core.pmsmanager.IPmsManager";
	     return $this->transport->cast(new core_pmsmanager_PmsCareTaker(), $this->transport->sendMessage($gs_data_input2939299822982));
	}

	/**
	* Property management system.<br>
	* @return core_pmsmanager_PmsCareTaker[] 
	*/

	public function getCareTakerJobs($gs_multilevel_name) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "getCareTakerJobs";
	     $gs_data_input2939299822982["interfaceName"] = "core.pmsmanager.IPmsManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Property management system.<br>
	* @return public class HashMap<K,V> 
	*/

	public function getChannelMatrix($gs_multilevel_name) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "getChannelMatrix";
	     $gs_data_input2939299822982["interfaceName"] = "core.pmsmanager.IPmsManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Property management system.<br>
	* @return core_pmsmanager_PmsCleaningHistory[] 
	*/

	public function getCleaningHistoryForItem($gs_multilevel_name, $itemId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["itemId"] = json_encode($this->transport->object_unset_nulls($itemId));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "getCleaningHistoryForItem";
	     $gs_data_input2939299822982["interfaceName"] = "core.pmsmanager.IPmsManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Property management system.<br>
	* @return core_pmsmanager_CleaningStatistics[] 
	*/

	public function getCleaningStatistics($gs_multilevel_name, $start, $end) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["start"] = json_encode($this->transport->object_unset_nulls($start));
	     $gs_data_input2939299822982['args']["end"] = json_encode($this->transport->object_unset_nulls($end));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "getCleaningStatistics";
	     $gs_data_input2939299822982["interfaceName"] = "core.pmsmanager.IPmsManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Property management system.<br>
	* @return core_pmsmanager_ConferenceData 
	*/

	public function getConferenceData($gs_multilevel_name, $bookingId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["bookingId"] = json_encode($this->transport->object_unset_nulls($bookingId));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "getConferenceData";
	     $gs_data_input2939299822982["interfaceName"] = "core.pmsmanager.IPmsManager";
	     return $this->transport->cast(new core_pmsmanager_ConferenceData(), $this->transport->sendMessage($gs_data_input2939299822982));
	}

	/**
	* Property management system.<br>
	* @return core_pmsmanager_PmsConfiguration 
	*/

	public function getConfiguration($gs_multilevel_name) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "getConfiguration";
	     $gs_data_input2939299822982["interfaceName"] = "core.pmsmanager.IPmsManager";
	     return $this->transport->cast(new core_pmsmanager_PmsConfiguration(), $this->transport->sendMessage($gs_data_input2939299822982));
	}

	/**
	* Property management system.<br>
	* @return String 
	*/

	public function getContract($gs_multilevel_name, $bookingId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["bookingId"] = json_encode($this->transport->object_unset_nulls($bookingId));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "getContract";
	     $gs_data_input2939299822982["interfaceName"] = "core.pmsmanager.IPmsManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Property management system.<br>
	* @return String 
	*/

	public function getCurrenctContract($gs_multilevel_name) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "getCurrenctContract";
	     $gs_data_input2939299822982["interfaceName"] = "core.pmsmanager.IPmsManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Property management system.<br>
	* @return core_pmsmanager_PmsBooking 
	*/

	public function getCurrentBooking($gs_multilevel_name) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "getCurrentBooking";
	     $gs_data_input2939299822982["interfaceName"] = "core.pmsmanager.IPmsManager";
	     return $this->transport->cast(new core_pmsmanager_PmsBooking(), $this->transport->sendMessage($gs_data_input2939299822982));
	}

	/**
	* Property management system.<br>
	* @return core_pmsmanager_PmsBookingDateRange 
	*/

	public function getDefaultDateRange($gs_multilevel_name) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "getDefaultDateRange";
	     $gs_data_input2939299822982["interfaceName"] = "core.pmsmanager.IPmsManager";
	     return $this->transport->cast(new core_pmsmanager_PmsBookingDateRange(), $this->transport->sendMessage($gs_data_input2939299822982));
	}

	/**
	* Property management system.<br>
	* @return String 
	*/

	public function getDefaultMessage($gs_multilevel_name, $bookingId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["bookingId"] = json_encode($this->transport->object_unset_nulls($bookingId));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "getDefaultMessage";
	     $gs_data_input2939299822982["interfaceName"] = "core.pmsmanager.IPmsManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Property management system.<br>
	* @return core_pmsmanager_PmsAddonDeliveryLogEntry[] 
	*/

	public function getDeliveryLog($gs_multilevel_name, $productIds, $start, $end) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["productIds"] = json_encode($this->transport->object_unset_nulls($productIds));
	     $gs_data_input2939299822982['args']["start"] = json_encode($this->transport->object_unset_nulls($start));
	     $gs_data_input2939299822982['args']["end"] = json_encode($this->transport->object_unset_nulls($end));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "getDeliveryLog";
	     $gs_data_input2939299822982["interfaceName"] = "core.pmsmanager.IPmsManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Property management system.<br>
	* @return core_pmsmanager_PmsAddonDeliveryLogEntry[] 
	*/

	public function getDeliveryLogByView($gs_multilevel_name, $viewId, $start, $end) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["viewId"] = json_encode($this->transport->object_unset_nulls($viewId));
	     $gs_data_input2939299822982['args']["start"] = json_encode($this->transport->object_unset_nulls($start));
	     $gs_data_input2939299822982['args']["end"] = json_encode($this->transport->object_unset_nulls($end));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "getDeliveryLogByView";
	     $gs_data_input2939299822982["interfaceName"] = "core.pmsmanager.IPmsManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Property management system.<br>
	* @return public class Date 
	*/

	public function getEarliestEndDate($gs_multilevel_name, $pmsBookingRoomId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["pmsBookingRoomId"] = json_encode($this->transport->object_unset_nulls($pmsBookingRoomId));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "getEarliestEndDate";
	     $gs_data_input2939299822982["interfaceName"] = "core.pmsmanager.IPmsManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Property management system.<br>
	* @return core_pmsmanager_ConferenceData[] 
	*/

	public function getFutureConferenceData($gs_multilevel_name, $fromDate) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["fromDate"] = json_encode($this->transport->object_unset_nulls($fromDate));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "getFutureConferenceData";
	     $gs_data_input2939299822982["interfaceName"] = "core.pmsmanager.IPmsManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Key = date / day
	* @return public abstract interface Map<K,V> 
	*/

	public function getGroupedConferenceData($gs_multilevel_name, $fromDate) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["fromDate"] = json_encode($this->transport->object_unset_nulls($fromDate));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "getGroupedConferenceData";
	     $gs_data_input2939299822982["interfaceName"] = "core.pmsmanager.IPmsManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Property management system.<br>
	* @return core_pmsmanager_PmsIntervalResult 
	*/

	public function getIntervalAvailability($gs_multilevel_name, $filter) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["filter"] = json_encode($this->transport->object_unset_nulls($filter));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "getIntervalAvailability";
	     $gs_data_input2939299822982["interfaceName"] = "core.pmsmanager.IPmsManager";
	     return $this->transport->cast(new core_pmsmanager_PmsIntervalResult(), $this->transport->sendMessage($gs_data_input2939299822982));
	}

	/**
	* Property management system.<br>
	* @return core_pmsmanager_PmsBookingAddonViewItem[] 
	*/

	public function getItemsForView($gs_multilevel_name, $viewId, $date) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["viewId"] = json_encode($this->transport->object_unset_nulls($viewId));
	     $gs_data_input2939299822982['args']["date"] = json_encode($this->transport->object_unset_nulls($date));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "getItemsForView";
	     $gs_data_input2939299822982["interfaceName"] = "core.pmsmanager.IPmsManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Property management system.<br>
	* @return core_pmsmanager_PmsLog[] 
	*/

	public function getLogEntries($gs_multilevel_name, $filter) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["filter"] = json_encode($this->transport->object_unset_nulls($filter));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "getLogEntries";
	     $gs_data_input2939299822982["interfaceName"] = "core.pmsmanager.IPmsManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Property management system.<br>
	* @return String 
	*/

	public function getMessage($gs_multilevel_name, $bookingId, $key) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["bookingId"] = json_encode($this->transport->object_unset_nulls($bookingId));
	     $gs_data_input2939299822982['args']["key"] = json_encode($this->transport->object_unset_nulls($key));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "getMessage";
	     $gs_data_input2939299822982["interfaceName"] = "core.pmsmanager.IPmsManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Property management system.<br>
	* @return core_pmsmanager_PmsRoomSimple[] 
	*/

	public function getMyRooms($gs_multilevel_name) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "getMyRooms";
	     $gs_data_input2939299822982["interfaceName"] = "core.pmsmanager.IPmsManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Property management system.<br>
	* @return Integer 
	*/

	public function getNumberOfAvailable($gs_multilevel_name, $itemType, $start, $end) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["itemType"] = json_encode($this->transport->object_unset_nulls($itemType));
	     $gs_data_input2939299822982['args']["start"] = json_encode($this->transport->object_unset_nulls($start));
	     $gs_data_input2939299822982['args']["end"] = json_encode($this->transport->object_unset_nulls($end));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "getNumberOfAvailable";
	     $gs_data_input2939299822982["interfaceName"] = "core.pmsmanager.IPmsManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Property management system.<br>
	* @return Integer 
	*/

	public function getNumberOfCustomers($gs_multilevel_name, $state) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["state"] = json_encode($this->transport->object_unset_nulls($state));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "getNumberOfCustomers";
	     $gs_data_input2939299822982["interfaceName"] = "core.pmsmanager.IPmsManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Property management system.<br>
	* @return core_pmsmanager_PmsBookingFilter 
	*/

	public function getPmsBookingFilter($gs_multilevel_name, $name) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["name"] = json_encode($this->transport->object_unset_nulls($name));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "getPmsBookingFilter";
	     $gs_data_input2939299822982["interfaceName"] = "core.pmsmanager.IPmsManager";
	     return $this->transport->cast(new core_pmsmanager_PmsBookingFilter(), $this->transport->sendMessage($gs_data_input2939299822982));
	}

	/**
	* Key = date / day
	* @return core_pmsmanager_PmsBookingRooms 
	*/

	public function getPrecastedRoom($gs_multilevel_name, $roomId, $bookingItemTypeId, $from, $to) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["roomId"] = json_encode($this->transport->object_unset_nulls($roomId));
	     $gs_data_input2939299822982['args']["bookingItemTypeId"] = json_encode($this->transport->object_unset_nulls($bookingItemTypeId));
	     $gs_data_input2939299822982['args']["from"] = json_encode($this->transport->object_unset_nulls($from));
	     $gs_data_input2939299822982['args']["to"] = json_encode($this->transport->object_unset_nulls($to));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "getPrecastedRoom";
	     $gs_data_input2939299822982["interfaceName"] = "core.pmsmanager.IPmsManager";
	     return $this->transport->cast(new core_pmsmanager_PmsBookingRooms(), $this->transport->sendMessage($gs_data_input2939299822982));
	}

	/**
	* Property management system.<br>
	* @return core_pmsmanager_PmsPricing 
	*/

	public function getPrices($gs_multilevel_name, $start, $end) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["start"] = json_encode($this->transport->object_unset_nulls($start));
	     $gs_data_input2939299822982['args']["end"] = json_encode($this->transport->object_unset_nulls($end));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "getPrices";
	     $gs_data_input2939299822982["interfaceName"] = "core.pmsmanager.IPmsManager";
	     return $this->transport->cast(new core_pmsmanager_PmsPricing(), $this->transport->sendMessage($gs_data_input2939299822982));
	}

	/**
	* Property management system.<br>
	* @return core_pmsmanager_PmsPricing 
	*/

	public function getPricesByCode($gs_multilevel_name, $code, $start, $end) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["code"] = json_encode($this->transport->object_unset_nulls($code));
	     $gs_data_input2939299822982['args']["start"] = json_encode($this->transport->object_unset_nulls($start));
	     $gs_data_input2939299822982['args']["end"] = json_encode($this->transport->object_unset_nulls($end));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "getPricesByCode";
	     $gs_data_input2939299822982["interfaceName"] = "core.pmsmanager.IPmsManager";
	     return $this->transport->cast(new core_pmsmanager_PmsPricing(), $this->transport->sendMessage($gs_data_input2939299822982));
	}

	/**
	* Property management system.<br>
	* @return core_pmsmanager_PmsBookingRooms 
	*/

	public function getRoomForItem($gs_multilevel_name, $itemId, $atTime) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["itemId"] = json_encode($this->transport->object_unset_nulls($itemId));
	     $gs_data_input2939299822982['args']["atTime"] = json_encode($this->transport->object_unset_nulls($atTime));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "getRoomForItem";
	     $gs_data_input2939299822982["interfaceName"] = "core.pmsmanager.IPmsManager";
	     return $this->transport->cast(new core_pmsmanager_PmsBookingRooms(), $this->transport->sendMessage($gs_data_input2939299822982));
	}

	/**
	* Property management system.<br>
	* @return core_pmsmanager_PmsBookingRooms[] 
	*/

	public function getRoomsNeedingCheckoutCleaning($gs_multilevel_name, $day) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["day"] = json_encode($this->transport->object_unset_nulls($day));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "getRoomsNeedingCheckoutCleaning";
	     $gs_data_input2939299822982["interfaceName"] = "core.pmsmanager.IPmsManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Property management system.<br>
	* @return core_pmsmanager_PmsBookingRooms[] 
	*/

	public function getRoomsNeedingIntervalCleaning($gs_multilevel_name, $day) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["day"] = json_encode($this->transport->object_unset_nulls($day));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "getRoomsNeedingIntervalCleaning";
	     $gs_data_input2939299822982["interfaceName"] = "core.pmsmanager.IPmsManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Property management system.<br>
	* @return core_pmsmanager_PmsRoomSimple[] 
	*/

	public function getRoomsNeedingIntervalCleaningSimple($gs_multilevel_name, $day) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["day"] = json_encode($this->transport->object_unset_nulls($day));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "getRoomsNeedingIntervalCleaningSimple";
	     $gs_data_input2939299822982["interfaceName"] = "core.pmsmanager.IPmsManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Property management system.<br>
	* @return core_pmsmanager_PmsRoomSimple[] 
	*/

	public function getRoomsToSwap($gs_multilevel_name, $roomId, $moveToType) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["roomId"] = json_encode($this->transport->object_unset_nulls($roomId));
	     $gs_data_input2939299822982['args']["moveToType"] = json_encode($this->transport->object_unset_nulls($moveToType));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "getRoomsToSwap";
	     $gs_data_input2939299822982["interfaceName"] = "core.pmsmanager.IPmsManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Property management system.<br>
	* @return core_pmsmanager_SimpleCleaningOverview[] 
	*/

	public function getSimpleCleaningOverview($gs_multilevel_name, $start, $end) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["start"] = json_encode($this->transport->object_unset_nulls($start));
	     $gs_data_input2939299822982['args']["end"] = json_encode($this->transport->object_unset_nulls($end));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "getSimpleCleaningOverview";
	     $gs_data_input2939299822982["interfaceName"] = "core.pmsmanager.IPmsManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Property management system.<br>
	* @return core_pmsmanager_SimpleInventory[] 
	*/

	public function getSimpleInventoryList($gs_multilevel_name, $roomName) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["roomName"] = json_encode($this->transport->object_unset_nulls($roomName));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "getSimpleInventoryList";
	     $gs_data_input2939299822982["interfaceName"] = "core.pmsmanager.IPmsManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Property management system.<br>
	* @return core_pmsmanager_PmsRoomSimple[] 
	*/

	public function getSimpleRooms($gs_multilevel_name, $filter) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["filter"] = json_encode($this->transport->object_unset_nulls($filter));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "getSimpleRooms";
	     $gs_data_input2939299822982["interfaceName"] = "core.pmsmanager.IPmsManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Property management system.<br>
	* @return core_pmsmanager_PmsRoomSimple[] 
	*/

	public function getSimpleRoomsForGroup($gs_multilevel_name, $bookingEngineId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["bookingEngineId"] = json_encode($this->transport->object_unset_nulls($bookingEngineId));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "getSimpleRoomsForGroup";
	     $gs_data_input2939299822982["interfaceName"] = "core.pmsmanager.IPmsManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Property management system.<br>
	* @return core_pmsmanager_PmsStatistics 
	*/

	public function getStatistics($gs_multilevel_name, $filter) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["filter"] = json_encode($this->transport->object_unset_nulls($filter));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "getStatistics";
	     $gs_data_input2939299822982["interfaceName"] = "core.pmsmanager.IPmsManager";
	     return $this->transport->cast(new core_pmsmanager_PmsStatistics(), $this->transport->sendMessage($gs_data_input2939299822982));
	}

	/**
	* Property management system.<br>
	* @return core_pmsmanager_PmsBookingRooms[] 
	*/

	public function getWorkSpaceRooms($gs_multilevel_name) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "getWorkSpaceRooms";
	     $gs_data_input2939299822982["interfaceName"] = "core.pmsmanager.IPmsManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Property management system.<br>
	* @return String[] 
	*/

	public function getpriceCodes($gs_multilevel_name) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "getpriceCodes";
	     $gs_data_input2939299822982["interfaceName"] = "core.pmsmanager.IPmsManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Property management system.<br>
	* @return boolean 
	*/

	public function hasLockSystemActive($gs_multilevel_name) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "hasLockSystemActive";
	     $gs_data_input2939299822982["interfaceName"] = "core.pmsmanager.IPmsManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Key = date / day
	* @return boolean 
	*/

	public function hasNoBookings($gs_multilevel_name) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "hasNoBookings";
	     $gs_data_input2939299822982["interfaceName"] = "core.pmsmanager.IPmsManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Property management system.<br>
	* @return void 
	*/

	public function hourlyProcessor($gs_multilevel_name) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "hourlyProcessor";
	     $gs_data_input2939299822982["interfaceName"] = "core.pmsmanager.IPmsManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Property management system.<br>
	* @return core_bookingengine_data_RegistrationRules 
	*/

	public function initBookingRules($gs_multilevel_name) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "initBookingRules";
	     $gs_data_input2939299822982["interfaceName"] = "core.pmsmanager.IPmsManager";
	     return $this->transport->cast(new core_bookingengine_data_RegistrationRules(), $this->transport->sendMessage($gs_data_input2939299822982));
	}

	/**
	* Property management system.<br>
	* @return boolean 
	*/

	public function isActive($gs_multilevel_name) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "isActive";
	     $gs_data_input2939299822982["interfaceName"] = "core.pmsmanager.IPmsManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Property management system.<br>
	* @return Boolean 
	*/

	public function isClean($gs_multilevel_name, $itemId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["itemId"] = json_encode($this->transport->object_unset_nulls($itemId));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "isClean";
	     $gs_data_input2939299822982["interfaceName"] = "core.pmsmanager.IPmsManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Property management system.<br>
	* @return Boolean 
	*/

	public function isUsedToday($gs_multilevel_name, $itemId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["itemId"] = json_encode($this->transport->object_unset_nulls($itemId));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "isUsedToday";
	     $gs_data_input2939299822982["interfaceName"] = "core.pmsmanager.IPmsManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Property management system.<br>
	* @return void 
	*/

	public function logEntry($gs_multilevel_name, $logText, $bookingId, $itemId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["logText"] = json_encode($this->transport->object_unset_nulls($logText));
	     $gs_data_input2939299822982['args']["bookingId"] = json_encode($this->transport->object_unset_nulls($bookingId));
	     $gs_data_input2939299822982['args']["itemId"] = json_encode($this->transport->object_unset_nulls($itemId));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "logEntry";
	     $gs_data_input2939299822982["interfaceName"] = "core.pmsmanager.IPmsManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Property management system.<br>
	* @return void 
	*/

	public function logEntryObject($gs_multilevel_name, $log) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["log"] = json_encode($this->transport->object_unset_nulls($log));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "logEntryObject";
	     $gs_data_input2939299822982["interfaceName"] = "core.pmsmanager.IPmsManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Property management system.<br>
	* @return void 
	*/

	public function markAddonDelivered($gs_multilevel_name, $id) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["id"] = json_encode($this->transport->object_unset_nulls($id));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "markAddonDelivered";
	     $gs_data_input2939299822982["interfaceName"] = "core.pmsmanager.IPmsManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Property management system.<br>
	* @return void 
	*/

	public function markKeyDeliveredForAllEndedRooms($gs_multilevel_name) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "markKeyDeliveredForAllEndedRooms";
	     $gs_data_input2939299822982["interfaceName"] = "core.pmsmanager.IPmsManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Property management system.<br>
	* @return void 
	*/

	public function markRoomAsCleaned($gs_multilevel_name, $itemId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["itemId"] = json_encode($this->transport->object_unset_nulls($itemId));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "markRoomAsCleaned";
	     $gs_data_input2939299822982["interfaceName"] = "core.pmsmanager.IPmsManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Property management system.<br>
	* @return void 
	*/

	public function markRoomAsCleanedWithoutLogging($gs_multilevel_name, $itemId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["itemId"] = json_encode($this->transport->object_unset_nulls($itemId));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "markRoomAsCleanedWithoutLogging";
	     $gs_data_input2939299822982["interfaceName"] = "core.pmsmanager.IPmsManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Property management system.<br>
	* @return void 
	*/

	public function markRoomDirty($gs_multilevel_name, $itemId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["itemId"] = json_encode($this->transport->object_unset_nulls($itemId));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "markRoomDirty";
	     $gs_data_input2939299822982["interfaceName"] = "core.pmsmanager.IPmsManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Property management system.<br>
	* @return void 
	*/

	public function massUpdatePrices($gs_multilevel_name, $price, $bookingId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["price"] = json_encode($this->transport->object_unset_nulls($price));
	     $gs_data_input2939299822982['args']["bookingId"] = json_encode($this->transport->object_unset_nulls($bookingId));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "massUpdatePrices";
	     $gs_data_input2939299822982["interfaceName"] = "core.pmsmanager.IPmsManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Property management system.<br>
	* @return void 
	*/

	public function mergeBookingsOnOrders($gs_multilevel_name) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "mergeBookingsOnOrders";
	     $gs_data_input2939299822982["interfaceName"] = "core.pmsmanager.IPmsManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Key = date / day
	* @return void 
	*/

	public function orderChanged($gs_multilevel_name, $orderId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["orderId"] = json_encode($this->transport->object_unset_nulls($orderId));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "orderChanged";
	     $gs_data_input2939299822982["interfaceName"] = "core.pmsmanager.IPmsManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Key = date / day
	* @return void 
	*/

	public function orderCreated($gs_multilevel_name, $orderId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["orderId"] = json_encode($this->transport->object_unset_nulls($orderId));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "orderCreated";
	     $gs_data_input2939299822982["interfaceName"] = "core.pmsmanager.IPmsManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Property management system.<br>
	* @return void 
	*/

	public function processor($gs_multilevel_name) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "processor";
	     $gs_data_input2939299822982["interfaceName"] = "core.pmsmanager.IPmsManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Property management system.<br>
	* @return void 
	*/

	public function removeAddonFromRoom($gs_multilevel_name, $id, $pmsBookingRooms) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["id"] = json_encode($this->transport->object_unset_nulls($id));
	     $gs_data_input2939299822982['args']["pmsBookingRooms"] = json_encode($this->transport->object_unset_nulls($pmsBookingRooms));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "removeAddonFromRoom";
	     $gs_data_input2939299822982["interfaceName"] = "core.pmsmanager.IPmsManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Property management system.<br>
	* @return void 
	*/

	public function removeAddonFromRoomById($gs_multilevel_name, $addonId, $roomId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["addonId"] = json_encode($this->transport->object_unset_nulls($addonId));
	     $gs_data_input2939299822982['args']["roomId"] = json_encode($this->transport->object_unset_nulls($roomId));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "removeAddonFromRoomById";
	     $gs_data_input2939299822982["interfaceName"] = "core.pmsmanager.IPmsManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Property management system.<br>
	* @return void 
	*/

	public function removeCareTakerJob($gs_multilevel_name, $jobId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["jobId"] = json_encode($this->transport->object_unset_nulls($jobId));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "removeCareTakerJob";
	     $gs_data_input2939299822982["interfaceName"] = "core.pmsmanager.IPmsManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Property management system.<br>
	* @return void 
	*/

	public function removeChannel($gs_multilevel_name, $channel) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["channel"] = json_encode($this->transport->object_unset_nulls($channel));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "removeChannel";
	     $gs_data_input2939299822982["interfaceName"] = "core.pmsmanager.IPmsManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Property management system.<br>
	* @return String 
	*/

	public function removeFromBooking($gs_multilevel_name, $bookingId, $roomId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["bookingId"] = json_encode($this->transport->object_unset_nulls($bookingId));
	     $gs_data_input2939299822982['args']["roomId"] = json_encode($this->transport->object_unset_nulls($roomId));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "removeFromBooking";
	     $gs_data_input2939299822982["interfaceName"] = "core.pmsmanager.IPmsManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Property management system.<br>
	* @return void 
	*/

	public function removeFromCurrentBooking($gs_multilevel_name, $roomId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["roomId"] = json_encode($this->transport->object_unset_nulls($roomId));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "removeFromCurrentBooking";
	     $gs_data_input2939299822982["interfaceName"] = "core.pmsmanager.IPmsManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Property management system.<br>
	* @return boolean 
	*/

	public function removeFromWaitingList($gs_multilevel_name, $pmsRoomId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["pmsRoomId"] = json_encode($this->transport->object_unset_nulls($pmsRoomId));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "removeFromWaitingList";
	     $gs_data_input2939299822982["interfaceName"] = "core.pmsmanager.IPmsManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Property management system.<br>
	* @return void 
	*/

	public function removeProductFromRoom($gs_multilevel_name, $pmsBookingRoomId, $productId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["pmsBookingRoomId"] = json_encode($this->transport->object_unset_nulls($pmsBookingRoomId));
	     $gs_data_input2939299822982['args']["productId"] = json_encode($this->transport->object_unset_nulls($productId));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "removeProductFromRoom";
	     $gs_data_input2939299822982["interfaceName"] = "core.pmsmanager.IPmsManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Property management system.<br>
	* @return void 
	*/

	public function reportMissingInventory($gs_multilevel_name, $inventories, $itemId, $roomId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["inventories"] = json_encode($this->transport->object_unset_nulls($inventories));
	     $gs_data_input2939299822982['args']["itemId"] = json_encode($this->transport->object_unset_nulls($itemId));
	     $gs_data_input2939299822982['args']["roomId"] = json_encode($this->transport->object_unset_nulls($roomId));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "reportMissingInventory";
	     $gs_data_input2939299822982["interfaceName"] = "core.pmsmanager.IPmsManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Property management system.<br>
	* @return void 
	*/

	public function resetPriceForRoom($gs_multilevel_name, $pmsRoomId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["pmsRoomId"] = json_encode($this->transport->object_unset_nulls($pmsRoomId));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "resetPriceForRoom";
	     $gs_data_input2939299822982["interfaceName"] = "core.pmsmanager.IPmsManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Property management system.<br>
	* @return void 
	*/

	public function returnedKey($gs_multilevel_name, $roomId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["roomId"] = json_encode($this->transport->object_unset_nulls($roomId));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "returnedKey";
	     $gs_data_input2939299822982["interfaceName"] = "core.pmsmanager.IPmsManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Key = date / day
	* @return core_pmsmanager_PmsRoomTypeAccessory 
	*/

	public function saveAccessory($gs_multilevel_name, $accessory) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["accessory"] = json_encode($this->transport->object_unset_nulls($accessory));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "saveAccessory";
	     $gs_data_input2939299822982["interfaceName"] = "core.pmsmanager.IPmsManager";
	     return $this->transport->cast(new core_pmsmanager_PmsRoomTypeAccessory(), $this->transport->sendMessage($gs_data_input2939299822982));
	}

	/**
	* Property management system.<br>
	* @return void 
	*/

	public function saveAdditionalTypeInformation($gs_multilevel_name, $info) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["info"] = json_encode($this->transport->object_unset_nulls($info));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "saveAdditionalTypeInformation";
	     $gs_data_input2939299822982["interfaceName"] = "core.pmsmanager.IPmsManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Property management system.<br>
	* @return void 
	*/

	public function saveBooking($gs_multilevel_name, $booking) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["booking"] = json_encode($this->transport->object_unset_nulls($booking));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "saveBooking";
	     $gs_data_input2939299822982["interfaceName"] = "core.pmsmanager.IPmsManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Property management system.<br>
	* @return void 
	*/

	public function saveCareTakerJob($gs_multilevel_name, $job) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["job"] = json_encode($this->transport->object_unset_nulls($job));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "saveCareTakerJob";
	     $gs_data_input2939299822982["interfaceName"] = "core.pmsmanager.IPmsManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Property management system.<br>
	* @return void 
	*/

	public function saveConferenceData($gs_multilevel_name, $data) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["data"] = json_encode($this->transport->object_unset_nulls($data));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "saveConferenceData";
	     $gs_data_input2939299822982["interfaceName"] = "core.pmsmanager.IPmsManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Property management system.<br>
	* @return void 
	*/

	public function saveConfiguration($gs_multilevel_name, $notifications) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["notifications"] = json_encode($this->transport->object_unset_nulls($notifications));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "saveConfiguration";
	     $gs_data_input2939299822982["interfaceName"] = "core.pmsmanager.IPmsManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Property management system.<br>
	* @return void 
	*/

	public function saveFilter($gs_multilevel_name, $name, $filter) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["name"] = json_encode($this->transport->object_unset_nulls($name));
	     $gs_data_input2939299822982['args']["filter"] = json_encode($this->transport->object_unset_nulls($filter));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "saveFilter";
	     $gs_data_input2939299822982["interfaceName"] = "core.pmsmanager.IPmsManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Property management system.<br>
	* @return void 
	*/

	public function sendCode($gs_multilevel_name, $prefix, $phoneNumber, $roomId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["prefix"] = json_encode($this->transport->object_unset_nulls($prefix));
	     $gs_data_input2939299822982['args']["phoneNumber"] = json_encode($this->transport->object_unset_nulls($phoneNumber));
	     $gs_data_input2939299822982['args']["roomId"] = json_encode($this->transport->object_unset_nulls($roomId));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "sendCode";
	     $gs_data_input2939299822982["interfaceName"] = "core.pmsmanager.IPmsManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Property management system.<br>
	* @return void 
	*/

	public function sendConfirmation($gs_multilevel_name, $email, $bookingId, $type) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["email"] = json_encode($this->transport->object_unset_nulls($email));
	     $gs_data_input2939299822982['args']["bookingId"] = json_encode($this->transport->object_unset_nulls($bookingId));
	     $gs_data_input2939299822982['args']["type"] = json_encode($this->transport->object_unset_nulls($type));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "sendConfirmation";
	     $gs_data_input2939299822982["interfaceName"] = "core.pmsmanager.IPmsManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Property management system.<br>
	* @return void 
	*/

	public function sendMessage($gs_multilevel_name, $bookingId, $email, $title, $message) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["bookingId"] = json_encode($this->transport->object_unset_nulls($bookingId));
	     $gs_data_input2939299822982['args']["email"] = json_encode($this->transport->object_unset_nulls($email));
	     $gs_data_input2939299822982['args']["title"] = json_encode($this->transport->object_unset_nulls($title));
	     $gs_data_input2939299822982['args']["message"] = json_encode($this->transport->object_unset_nulls($message));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "sendMessage";
	     $gs_data_input2939299822982["interfaceName"] = "core.pmsmanager.IPmsManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Property management system.<br>
	* @return void 
	*/

	public function sendMessageOnRoom($gs_multilevel_name, $email, $title, $message, $roomId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["email"] = json_encode($this->transport->object_unset_nulls($email));
	     $gs_data_input2939299822982['args']["title"] = json_encode($this->transport->object_unset_nulls($title));
	     $gs_data_input2939299822982['args']["message"] = json_encode($this->transport->object_unset_nulls($message));
	     $gs_data_input2939299822982['args']["roomId"] = json_encode($this->transport->object_unset_nulls($roomId));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "sendMessageOnRoom";
	     $gs_data_input2939299822982["interfaceName"] = "core.pmsmanager.IPmsManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Property management system.<br>
	* @return void 
	*/

	public function sendMessageToAllTodaysGuests($gs_multilevel_name, $message) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["message"] = json_encode($this->transport->object_unset_nulls($message));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "sendMessageToAllTodaysGuests";
	     $gs_data_input2939299822982["interfaceName"] = "core.pmsmanager.IPmsManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Property management system.<br>
	* @return void 
	*/

	public function sendMissingPayment($gs_multilevel_name, $orderId, $bookingId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["orderId"] = json_encode($this->transport->object_unset_nulls($orderId));
	     $gs_data_input2939299822982['args']["bookingId"] = json_encode($this->transport->object_unset_nulls($bookingId));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "sendMissingPayment";
	     $gs_data_input2939299822982["interfaceName"] = "core.pmsmanager.IPmsManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Property management system.<br>
	* @return void 
	*/

	public function sendPaymentLink($gs_multilevel_name, $orderId, $bookingId, $email, $prefix, $phone) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["orderId"] = json_encode($this->transport->object_unset_nulls($orderId));
	     $gs_data_input2939299822982['args']["bookingId"] = json_encode($this->transport->object_unset_nulls($bookingId));
	     $gs_data_input2939299822982['args']["email"] = json_encode($this->transport->object_unset_nulls($email));
	     $gs_data_input2939299822982['args']["prefix"] = json_encode($this->transport->object_unset_nulls($prefix));
	     $gs_data_input2939299822982['args']["phone"] = json_encode($this->transport->object_unset_nulls($phone));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "sendPaymentLink";
	     $gs_data_input2939299822982["interfaceName"] = "core.pmsmanager.IPmsManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Property management system.<br>
	* @return void 
	*/

	public function sendPaymentLinkWithText($gs_multilevel_name, $orderId, $bookingId, $email, $prefix, $phone, $message) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["orderId"] = json_encode($this->transport->object_unset_nulls($orderId));
	     $gs_data_input2939299822982['args']["bookingId"] = json_encode($this->transport->object_unset_nulls($bookingId));
	     $gs_data_input2939299822982['args']["email"] = json_encode($this->transport->object_unset_nulls($email));
	     $gs_data_input2939299822982['args']["prefix"] = json_encode($this->transport->object_unset_nulls($prefix));
	     $gs_data_input2939299822982['args']["phone"] = json_encode($this->transport->object_unset_nulls($phone));
	     $gs_data_input2939299822982['args']["message"] = json_encode($this->transport->object_unset_nulls($message));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "sendPaymentLinkWithText";
	     $gs_data_input2939299822982["interfaceName"] = "core.pmsmanager.IPmsManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Property management system.<br>
	* @return void 
	*/

	public function sendSmsOnRoom($gs_multilevel_name, $prefix, $phone, $message, $roomId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["prefix"] = json_encode($this->transport->object_unset_nulls($prefix));
	     $gs_data_input2939299822982['args']["phone"] = json_encode($this->transport->object_unset_nulls($phone));
	     $gs_data_input2939299822982['args']["message"] = json_encode($this->transport->object_unset_nulls($message));
	     $gs_data_input2939299822982['args']["roomId"] = json_encode($this->transport->object_unset_nulls($roomId));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "sendSmsOnRoom";
	     $gs_data_input2939299822982["interfaceName"] = "core.pmsmanager.IPmsManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Property management system.<br>
	* @return void 
	*/

	public function sendSmsToGuest($gs_multilevel_name, $guestId, $message) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["guestId"] = json_encode($this->transport->object_unset_nulls($guestId));
	     $gs_data_input2939299822982['args']["message"] = json_encode($this->transport->object_unset_nulls($message));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "sendSmsToGuest";
	     $gs_data_input2939299822982["interfaceName"] = "core.pmsmanager.IPmsManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Property management system.<br>
	* @return void 
	*/

	public function sendStatistics($gs_multilevel_name) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "sendStatistics";
	     $gs_data_input2939299822982["interfaceName"] = "core.pmsmanager.IPmsManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Property management system.<br>
	* @return void 
	*/

	public function setBooking($gs_multilevel_name, $addons) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["addons"] = json_encode($this->transport->object_unset_nulls($addons));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "setBooking";
	     $gs_data_input2939299822982["interfaceName"] = "core.pmsmanager.IPmsManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Property management system.<br>
	* @return String 
	*/

	public function setBookingItem($gs_multilevel_name, $roomId, $bookingId, $itemId, $split) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["roomId"] = json_encode($this->transport->object_unset_nulls($roomId));
	     $gs_data_input2939299822982['args']["bookingId"] = json_encode($this->transport->object_unset_nulls($bookingId));
	     $gs_data_input2939299822982['args']["itemId"] = json_encode($this->transport->object_unset_nulls($itemId));
	     $gs_data_input2939299822982['args']["split"] = json_encode($this->transport->object_unset_nulls($split));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "setBookingItem";
	     $gs_data_input2939299822982["interfaceName"] = "core.pmsmanager.IPmsManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Property management system.<br>
	* @return String 
	*/

	public function setBookingItemAndDate($gs_multilevel_name, $roomId, $itemId, $split, $start, $end) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["roomId"] = json_encode($this->transport->object_unset_nulls($roomId));
	     $gs_data_input2939299822982['args']["itemId"] = json_encode($this->transport->object_unset_nulls($itemId));
	     $gs_data_input2939299822982['args']["split"] = json_encode($this->transport->object_unset_nulls($split));
	     $gs_data_input2939299822982['args']["start"] = json_encode($this->transport->object_unset_nulls($start));
	     $gs_data_input2939299822982['args']["end"] = json_encode($this->transport->object_unset_nulls($end));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "setBookingItemAndDate";
	     $gs_data_input2939299822982["interfaceName"] = "core.pmsmanager.IPmsManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Property management system.<br>
	* @return void 
	*/

	public function setGuestOnRoom($gs_multilevel_name, $guests, $bookingId, $roomId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["guests"] = json_encode($this->transport->object_unset_nulls($guests));
	     $gs_data_input2939299822982['args']["bookingId"] = json_encode($this->transport->object_unset_nulls($bookingId));
	     $gs_data_input2939299822982['args']["roomId"] = json_encode($this->transport->object_unset_nulls($roomId));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "setGuestOnRoom";
	     $gs_data_input2939299822982["interfaceName"] = "core.pmsmanager.IPmsManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Property management system.<br>
	* @return void 
	*/

	public function setNewCleaningIntervalOnRoom($gs_multilevel_name, $roomId, $interval) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["roomId"] = json_encode($this->transport->object_unset_nulls($roomId));
	     $gs_data_input2939299822982['args']["interval"] = json_encode($this->transport->object_unset_nulls($interval));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "setNewCleaningIntervalOnRoom";
	     $gs_data_input2939299822982["interfaceName"] = "core.pmsmanager.IPmsManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Property management system.<br>
	* @return String 
	*/

	public function setNewRoomType($gs_multilevel_name, $roomId, $bookingId, $newType) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["roomId"] = json_encode($this->transport->object_unset_nulls($roomId));
	     $gs_data_input2939299822982['args']["bookingId"] = json_encode($this->transport->object_unset_nulls($bookingId));
	     $gs_data_input2939299822982['args']["newType"] = json_encode($this->transport->object_unset_nulls($newType));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "setNewRoomType";
	     $gs_data_input2939299822982["interfaceName"] = "core.pmsmanager.IPmsManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Key = date / day
	* @return void 
	*/

	public function setNewStartDateAndAssignToRoom($gs_multilevel_name, $roomId, $newStartDate, $bookingItemId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["roomId"] = json_encode($this->transport->object_unset_nulls($roomId));
	     $gs_data_input2939299822982['args']["newStartDate"] = json_encode($this->transport->object_unset_nulls($newStartDate));
	     $gs_data_input2939299822982['args']["bookingItemId"] = json_encode($this->transport->object_unset_nulls($bookingItemId));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "setNewStartDateAndAssignToRoom";
	     $gs_data_input2939299822982["interfaceName"] = "core.pmsmanager.IPmsManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Property management system.<br>
	* @return core_pmsmanager_PmsPricing 
	*/

	public function setPrices($gs_multilevel_name, $code, $prices) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["code"] = json_encode($this->transport->object_unset_nulls($code));
	     $gs_data_input2939299822982['args']["prices"] = json_encode($this->transport->object_unset_nulls($prices));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "setPrices";
	     $gs_data_input2939299822982["interfaceName"] = "core.pmsmanager.IPmsManager";
	     return $this->transport->cast(new core_pmsmanager_PmsPricing(), $this->transport->sendMessage($gs_data_input2939299822982));
	}

	/**
	* Property management system.<br>
	* @return void 
	*/

	public function splitBooking($gs_multilevel_name, $roomIds) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["roomIds"] = json_encode($this->transport->object_unset_nulls($roomIds));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "splitBooking";
	     $gs_data_input2939299822982["interfaceName"] = "core.pmsmanager.IPmsManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Property management system.<br>
	* @return core_pmsmanager_PmsBooking 
	*/

	public function startBooking($gs_multilevel_name) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "startBooking";
	     $gs_data_input2939299822982["interfaceName"] = "core.pmsmanager.IPmsManager";
	     return $this->transport->cast(new core_pmsmanager_PmsBooking(), $this->transport->sendMessage($gs_data_input2939299822982));
	}

	/**
	* Property management system.<br>
	* @return String 
	*/

	public function swapRoom($gs_multilevel_name, $roomId, $roomIds) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["roomId"] = json_encode($this->transport->object_unset_nulls($roomId));
	     $gs_data_input2939299822982['args']["roomIds"] = json_encode($this->transport->object_unset_nulls($roomIds));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "swapRoom";
	     $gs_data_input2939299822982["interfaceName"] = "core.pmsmanager.IPmsManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Key = date / day
	* @return void 
	*/

	public function toggleAddon($gs_multilevel_name, $itemId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["itemId"] = json_encode($this->transport->object_unset_nulls($itemId));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "toggleAddon";
	     $gs_data_input2939299822982["interfaceName"] = "core.pmsmanager.IPmsManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Key = date / day
	* @return void 
	*/

	public function transferFromOldCodeToNew($gs_multilevel_name, $pmsBookingRoomId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["pmsBookingRoomId"] = json_encode($this->transport->object_unset_nulls($pmsBookingRoomId));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "transferFromOldCodeToNew";
	     $gs_data_input2939299822982["interfaceName"] = "core.pmsmanager.IPmsManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Key = date / day
	* @return void 
	*/

	public function transferTicketsAsAddons($gs_multilevel_name) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "transferTicketsAsAddons";
	     $gs_data_input2939299822982["interfaceName"] = "core.pmsmanager.IPmsManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Property management system.<br>
	* @return void 
	*/

	public function tryAddToEngine($gs_multilevel_name, $pmsBookingRoomId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["pmsBookingRoomId"] = json_encode($this->transport->object_unset_nulls($pmsBookingRoomId));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "tryAddToEngine";
	     $gs_data_input2939299822982["interfaceName"] = "core.pmsmanager.IPmsManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Property management system.<br>
	* @return void 
	*/

	public function unConfirmBooking($gs_multilevel_name, $bookingId, $message) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["bookingId"] = json_encode($this->transport->object_unset_nulls($bookingId));
	     $gs_data_input2939299822982['args']["message"] = json_encode($this->transport->object_unset_nulls($message));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "unConfirmBooking";
	     $gs_data_input2939299822982["interfaceName"] = "core.pmsmanager.IPmsManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Property management system.<br>
	* @return void 
	*/

	public function undeleteBooking($gs_multilevel_name, $bookingId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["bookingId"] = json_encode($this->transport->object_unset_nulls($bookingId));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "undeleteBooking";
	     $gs_data_input2939299822982["interfaceName"] = "core.pmsmanager.IPmsManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Property management system.<br>
	* @return void 
	*/

	public function undoLastCleaning($gs_multilevel_name, $itemId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["itemId"] = json_encode($this->transport->object_unset_nulls($itemId));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "undoLastCleaning";
	     $gs_data_input2939299822982["interfaceName"] = "core.pmsmanager.IPmsManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Property management system.<br>
	* @return void 
	*/

	public function updateAdditionalInformationOnRooms($gs_multilevel_name, $info) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["info"] = json_encode($this->transport->object_unset_nulls($info));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "updateAdditionalInformationOnRooms";
	     $gs_data_input2939299822982["interfaceName"] = "core.pmsmanager.IPmsManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Key = date / day
	* @return void 
	*/

	public function updateAddons($gs_multilevel_name, $items, $bookingId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["items"] = json_encode($this->transport->object_unset_nulls($items));
	     $gs_data_input2939299822982['args']["bookingId"] = json_encode($this->transport->object_unset_nulls($bookingId));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "updateAddons";
	     $gs_data_input2939299822982["interfaceName"] = "core.pmsmanager.IPmsManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Property management system.<br>
	* @return void 
	*/

	public function updateAddonsBasedOnGuestCount($gs_multilevel_name, $pmsRoomId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["pmsRoomId"] = json_encode($this->transport->object_unset_nulls($pmsRoomId));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "updateAddonsBasedOnGuestCount";
	     $gs_data_input2939299822982["interfaceName"] = "core.pmsmanager.IPmsManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Key = date / day
	* @return void 
	*/

	public function updateAddonsCountToBooking($gs_multilevel_name, $type, $roomId, $count) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["type"] = json_encode($this->transport->object_unset_nulls($type));
	     $gs_data_input2939299822982['args']["roomId"] = json_encode($this->transport->object_unset_nulls($roomId));
	     $gs_data_input2939299822982['args']["count"] = json_encode($this->transport->object_unset_nulls($count));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "updateAddonsCountToBooking";
	     $gs_data_input2939299822982["interfaceName"] = "core.pmsmanager.IPmsManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Property management system.<br>
	* @return void 
	*/

	public function updatePriceMatrixOnRoom($gs_multilevel_name, $pmsBookingRoomId, $priceMatrix) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["pmsBookingRoomId"] = json_encode($this->transport->object_unset_nulls($pmsBookingRoomId));
	     $gs_data_input2939299822982['args']["priceMatrix"] = json_encode($this->transport->object_unset_nulls($priceMatrix));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "updatePriceMatrixOnRoom";
	     $gs_data_input2939299822982["interfaceName"] = "core.pmsmanager.IPmsManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Property management system.<br>
	* @return core_pmsmanager_PmsBookingRooms[] 
	*/

	public function updateRepeatingDataForBooking($gs_multilevel_name, $data, $bookingId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["data"] = json_encode($this->transport->object_unset_nulls($data));
	     $gs_data_input2939299822982['args']["bookingId"] = json_encode($this->transport->object_unset_nulls($bookingId));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "updateRepeatingDataForBooking";
	     $gs_data_input2939299822982["interfaceName"] = "core.pmsmanager.IPmsManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Property management system.<br>
	* @return Integer[] 
	*/

	public function updateRoomByUser($gs_multilevel_name, $bookingId, $room) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["bookingId"] = json_encode($this->transport->object_unset_nulls($bookingId));
	     $gs_data_input2939299822982['args']["room"] = json_encode($this->transport->object_unset_nulls($room));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "updateRoomByUser";
	     $gs_data_input2939299822982["interfaceName"] = "core.pmsmanager.IPmsManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Property management system.<br>
	* @return void 
	*/

	public function warnFailedBooking($gs_multilevel_name, $booking) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["booking"] = json_encode($this->transport->object_unset_nulls($booking));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "warnFailedBooking";
	     $gs_data_input2939299822982["interfaceName"] = "core.pmsmanager.IPmsManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

}
class APIPmsManagerProcessor {

	var $transport;
	
	function APIPmsManagerProcessor($transport) {
		$this->transport = $transport;
	}

	/**
	* Property management system processor.<br>
	* @return void 
	*/

	public function doProcessing($gs_multilevel_name) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "doProcessing";
	     $gs_data_input2939299822982["interfaceName"] = "core.pmsmanager.IPmsManagerProcessor";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

}
class APIPmsPaymentTerminal {

	var $transport;
	
	function APIPmsPaymentTerminal($transport) {
		$this->transport = $transport;
	}

	/**
	* Property management system.<br>
	* @return void 
	*/

	public function addProductToRoom($gs_multilevel_name, $productId, $pmsBookingRoomId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["productId"] = json_encode($this->transport->object_unset_nulls($productId));
	     $gs_data_input2939299822982['args']["pmsBookingRoomId"] = json_encode($this->transport->object_unset_nulls($pmsBookingRoomId));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "addProductToRoom";
	     $gs_data_input2939299822982["interfaceName"] = "core.pmsmanager.IPmsPaymentTerminal";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Change the number of guests on a room.
	* @param pmsBookingRoomId
	* @param count
	* @return Double 
	*/

	public function changeGuestCountOnRoom($gs_multilevel_name, $pmsBookingRoomId, $count) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["pmsBookingRoomId"] = json_encode($this->transport->object_unset_nulls($pmsBookingRoomId));
	     $gs_data_input2939299822982['args']["count"] = json_encode($this->transport->object_unset_nulls($count));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "changeGuestCountOnRoom";
	     $gs_data_input2939299822982["interfaceName"] = "core.pmsmanager.IPmsPaymentTerminal";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Returns a map of types that the booking can be changed to with number of rooms available accioated to it.
	* @param pmsBookingRoomId
	* @return core_pmsmanager_PmsBookingRooms 
	*/

	public function changeRoomTypeOnRoom($gs_multilevel_name, $pmsBookingRoomId, $newTypeId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["pmsBookingRoomId"] = json_encode($this->transport->object_unset_nulls($pmsBookingRoomId));
	     $gs_data_input2939299822982['args']["newTypeId"] = json_encode($this->transport->object_unset_nulls($newTypeId));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "changeRoomTypeOnRoom";
	     $gs_data_input2939299822982["interfaceName"] = "core.pmsmanager.IPmsPaymentTerminal";
	     return $this->transport->cast(new core_pmsmanager_PmsBookingRooms(), $this->transport->sendMessage($gs_data_input2939299822982));
	}

	/**
	* Property management system.<br>
	* @return core_pmsmanager_PaymentTerminalSearchResult[] 
	*/

	public function findBookings($gs_multilevel_name, $phoneNumber) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["phoneNumber"] = json_encode($this->transport->object_unset_nulls($phoneNumber));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "findBookings";
	     $gs_data_input2939299822982["interfaceName"] = "core.pmsmanager.IPmsPaymentTerminal";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Property management system.<br>
	* @return core_pmsmanager_PmsBooking 
	*/

	public function getBooking($gs_multilevel_name, $bookingId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["bookingId"] = json_encode($this->transport->object_unset_nulls($bookingId));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "getBooking";
	     $gs_data_input2939299822982["interfaceName"] = "core.pmsmanager.IPmsPaymentTerminal";
	     return $this->transport->cast(new core_pmsmanager_PmsBooking(), $this->transport->sendMessage($gs_data_input2939299822982));
	}

	/**
	* Returns all rooms available as a map where the room size (number of guest) is returned as second result.
	* Sorted as largest room first.
	* @param data
	* @return public class HashMap<K,V> 
	*/

	public function getMaxNumberOfRooms($gs_multilevel_name, $data) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["data"] = json_encode($this->transport->object_unset_nulls($data));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "getMaxNumberOfRooms";
	     $gs_data_input2939299822982["interfaceName"] = "core.pmsmanager.IPmsPaymentTerminal";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Property management system.<br>
	* @return core_pmsmanager_PmsOrderSummary[] 
	*/

	public function getOrderSummary($gs_multilevel_name, $bookingId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["bookingId"] = json_encode($this->transport->object_unset_nulls($bookingId));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "getOrderSummary";
	     $gs_data_input2939299822982["interfaceName"] = "core.pmsmanager.IPmsPaymentTerminal";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Returns a map of types that the booking can be changed to with number of rooms available accioated to it.
	* @param pmsBookingRoomId
	* @return public class HashMap<K,V> 
	*/

	public function getRoomTypesThatRoomCanBeChangedTo($gs_multilevel_name, $pmsBookingRoomId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["pmsBookingRoomId"] = json_encode($this->transport->object_unset_nulls($pmsBookingRoomId));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "getRoomTypesThatRoomCanBeChangedTo";
	     $gs_data_input2939299822982["interfaceName"] = "core.pmsmanager.IPmsPaymentTerminal";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Property management system.<br>
	* @return String 
	*/

	public function payIndividualRoom($gs_multilevel_name, $pmsBookingRoomId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["pmsBookingRoomId"] = json_encode($this->transport->object_unset_nulls($pmsBookingRoomId));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "payIndividualRoom";
	     $gs_data_input2939299822982["interfaceName"] = "core.pmsmanager.IPmsPaymentTerminal";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Change the number of guests on a room.
	* @param pmsBookingRoomId
	* @param count
	* @return void 
	*/

	public function printReciept($gs_multilevel_name, $orderId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["orderId"] = json_encode($this->transport->object_unset_nulls($orderId));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "printReciept";
	     $gs_data_input2939299822982["interfaceName"] = "core.pmsmanager.IPmsPaymentTerminal";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Property management system.<br>
	* @return void 
	*/

	public function removeProductFromRoom($gs_multilevel_name, $productId, $pmsBookingRoomId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["productId"] = json_encode($this->transport->object_unset_nulls($productId));
	     $gs_data_input2939299822982['args']["pmsBookingRoomId"] = json_encode($this->transport->object_unset_nulls($pmsBookingRoomId));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "removeProductFromRoom";
	     $gs_data_input2939299822982["interfaceName"] = "core.pmsmanager.IPmsPaymentTerminal";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Property management system.<br>
	* @return core_pmsmanager_PmsBooking 
	*/

	public function startBooking($gs_multilevel_name, $data) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["data"] = json_encode($this->transport->object_unset_nulls($data));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "startBooking";
	     $gs_data_input2939299822982["interfaceName"] = "core.pmsmanager.IPmsPaymentTerminal";
	     return $this->transport->cast(new core_pmsmanager_PmsBooking(), $this->transport->sendMessage($gs_data_input2939299822982));
	}

	/**
	* Change the number of guests on a room.
	* @param pmsBookingRoomId
	* @param count
	* @return boolean 
	*/

	public function updateBooking($gs_multilevel_name, $booking, $user, $company) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["booking"] = json_encode($this->transport->object_unset_nulls($booking));
	     $gs_data_input2939299822982['args']["user"] = json_encode($this->transport->object_unset_nulls($user));
	     $gs_data_input2939299822982['args']["company"] = json_encode($this->transport->object_unset_nulls($company));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "updateBooking";
	     $gs_data_input2939299822982["interfaceName"] = "core.pmsmanager.IPmsPaymentTerminal";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

}
class APIPmsReportManager {

	var $transport;
	
	function APIPmsReportManager($transport) {
		$this->transport = $transport;
	}

	/**
	* Pms report manager.
	* @return core_pmsmanager_PmsLog[] 
	*/

	public function getCleaningLog($gs_multilevel_name, $start, $end) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["start"] = json_encode($this->transport->object_unset_nulls($start));
	     $gs_data_input2939299822982['args']["end"] = json_encode($this->transport->object_unset_nulls($end));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "getCleaningLog";
	     $gs_data_input2939299822982["interfaceName"] = "core.pmsmanager.IPmsReportManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Pms report manager.
	* @return core_pmsmanager_PmsConferenceStatistics 
	*/

	public function getConferenceStatistics($gs_multilevel_name, $start, $end) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["start"] = json_encode($this->transport->object_unset_nulls($start));
	     $gs_data_input2939299822982['args']["end"] = json_encode($this->transport->object_unset_nulls($end));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "getConferenceStatistics";
	     $gs_data_input2939299822982["interfaceName"] = "core.pmsmanager.IPmsReportManager";
	     return $this->transport->cast(new core_pmsmanager_PmsConferenceStatistics(), $this->transport->sendMessage($gs_data_input2939299822982));
	}

	/**
	* Pms report manager.
	* @return core_pmsmanager_PmsMonthlyOrderStatistics 
	*/

	public function getMonthlyStatistics($gs_multilevel_name) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "getMonthlyStatistics";
	     $gs_data_input2939299822982["interfaceName"] = "core.pmsmanager.IPmsReportManager";
	     return $this->transport->cast(new core_pmsmanager_PmsMonthlyOrderStatistics(), $this->transport->sendMessage($gs_data_input2939299822982));
	}

	/**
	* Pms report manager.
	* @return core_pmsmanager_PmsMobileReport[] 
	*/

	public function getReport($gs_multilevel_name, $start, $end, $compareTo, $excludeClosedRooms) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["start"] = json_encode($this->transport->object_unset_nulls($start));
	     $gs_data_input2939299822982['args']["end"] = json_encode($this->transport->object_unset_nulls($end));
	     $gs_data_input2939299822982['args']["compareTo"] = json_encode($this->transport->object_unset_nulls($compareTo));
	     $gs_data_input2939299822982['args']["excludeClosedRooms"] = json_encode($this->transport->object_unset_nulls($excludeClosedRooms));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "getReport";
	     $gs_data_input2939299822982["interfaceName"] = "core.pmsmanager.IPmsReportManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Pms report manager.
	* @return core_pmsmanager_PmsMobileRoomCoverage[] 
	*/

	public function getRoomCoverage($gs_multilevel_name, $start, $end) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["start"] = json_encode($this->transport->object_unset_nulls($start));
	     $gs_data_input2939299822982['args']["end"] = json_encode($this->transport->object_unset_nulls($end));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "getRoomCoverage";
	     $gs_data_input2939299822982["interfaceName"] = "core.pmsmanager.IPmsReportManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Pms report manager.
	* @return core_pmsmanager_PmsSubscriptionReportEntry[] 
	*/

	public function getSubscriptionReport($gs_multilevel_name, $start, $end) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["start"] = json_encode($this->transport->object_unset_nulls($start));
	     $gs_data_input2939299822982['args']["end"] = json_encode($this->transport->object_unset_nulls($end));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "getSubscriptionReport";
	     $gs_data_input2939299822982["interfaceName"] = "core.pmsmanager.IPmsReportManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Pms report manager.
	* @return core_pmsmanager_PmsMobileUsage[] 
	*/

	public function getUsage($gs_multilevel_name, $start, $end) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["start"] = json_encode($this->transport->object_unset_nulls($start));
	     $gs_data_input2939299822982['args']["end"] = json_encode($this->transport->object_unset_nulls($end));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "getUsage";
	     $gs_data_input2939299822982["interfaceName"] = "core.pmsmanager.IPmsReportManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

}
class APIPmsSelfManagement {

	var $transport;
	
	function APIPmsSelfManagement($transport) {
		$this->transport = $transport;
	}

	/**
	*
	* @author ktonder
	* @return core_pmsmanager_PmsBookingAddonItem[] 
	*/

	public function getAddonsWithDiscountForBooking($gs_multilevel_name, $id, $pmsBookingRoomId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["id"] = json_encode($this->transport->object_unset_nulls($id));
	     $gs_data_input2939299822982['args']["pmsBookingRoomId"] = json_encode($this->transport->object_unset_nulls($pmsBookingRoomId));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "getAddonsWithDiscountForBooking";
	     $gs_data_input2939299822982["interfaceName"] = "core.pmsmanager.IPmsSelfManagement";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	*
	* @author ktonder
	* @return core_pmsmanager_PmsBooking 
	*/

	public function getBookingById($gs_multilevel_name, $id) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["id"] = json_encode($this->transport->object_unset_nulls($id));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "getBookingById";
	     $gs_data_input2939299822982["interfaceName"] = "core.pmsmanager.IPmsSelfManagement";
	     return $this->transport->cast(new core_pmsmanager_PmsBooking(), $this->transport->sendMessage($gs_data_input2939299822982));
	}

	/**
	*
	* @author ktonder
	* @return core_ordermanager_data_Order 
	*/

	public function getOrderById($gs_multilevel_name, $id, $orderId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["id"] = json_encode($this->transport->object_unset_nulls($id));
	     $gs_data_input2939299822982['args']["orderId"] = json_encode($this->transport->object_unset_nulls($orderId));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "getOrderById";
	     $gs_data_input2939299822982["interfaceName"] = "core.pmsmanager.IPmsSelfManagement";
	     return $this->transport->cast(new core_ordermanager_data_Order(), $this->transport->sendMessage($gs_data_input2939299822982));
	}

	/**
	*
	* @author ktonder
	* @return void 
	*/

	public function saveAddonSetup($gs_multilevel_name, $id, $addons) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["id"] = json_encode($this->transport->object_unset_nulls($id));
	     $gs_data_input2939299822982['args']["addons"] = json_encode($this->transport->object_unset_nulls($addons));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "saveAddonSetup";
	     $gs_data_input2939299822982["interfaceName"] = "core.pmsmanager.IPmsSelfManagement";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

}
class APIPmsWebBookingManager {

	var $transport;
	
	function APIPmsWebBookingManager($transport) {
		$this->transport = $transport;
	}

	/**
	* Web booking for property management system.<br>
	* @return core_wubook_webbookingmanager_PmsWebRoom[] 
	*/

	public function getAllRooms($gs_multilevel_name, $start, $end) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["start"] = json_encode($this->transport->object_unset_nulls($start));
	     $gs_data_input2939299822982['args']["end"] = json_encode($this->transport->object_unset_nulls($end));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "getAllRooms";
	     $gs_data_input2939299822982["interfaceName"] = "core.pmsmanager.IPmsWebBookingManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

}
class APIPrintManager {

	var $transport;
	
	function APIPrintManager($transport) {
		$this->transport = $transport;
	}

	/**
	* This function is multithreaded
	* It will not cause the rest of the system to hang and
	* is though of being called multiple times during a second.
	*
	* Designed for invoiking 4 times a second.
	*
	* @param printerId
	* @return core_printmanager_PrintJob[] 
	*/

	public function getPrintJobs($printerId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["printerId"] = json_encode($this->transport->object_unset_nulls($printerId));
	     $gs_data_input2939299822982["method"] = "getPrintJobs";
	     $gs_data_input2939299822982["interfaceName"] = "core.printmanager.IPrintManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

}
class APIProductManager {

	var $transport;
	
	function APIProductManager($transport) {
		$this->transport = $transport;
	}

	/**
	* You can use this function to change the stock quantity for a given product
	*
	* @param productId The id for the product to change.
	* @param count Number of entries to substract from the product stock quantity, an be negative number to decrease the stock quantity.
	* @throws ErrorException
	* @return void 
	*/

	public function changeStockQuantity($productId, $count) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["productId"] = json_encode($this->transport->object_unset_nulls($productId));
	     $gs_data_input2939299822982['args']["count"] = json_encode($this->transport->object_unset_nulls($count));
	     $gs_data_input2939299822982["method"] = "changeStockQuantity";
	     $gs_data_input2939299822982["interfaceName"] = "core.productmanager.IProductManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Returns a list of products for a given searchword,
	* if blank all products will be returned.
	*
	* @param searchWord
	* @param pageSize
	* @param page
	* @return core_productmanager_data_Product 
	*/

	public function copyProduct($fromProductId, $newName) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["fromProductId"] = json_encode($this->transport->object_unset_nulls($fromProductId));
	     $gs_data_input2939299822982['args']["newName"] = json_encode($this->transport->object_unset_nulls($newName));
	     $gs_data_input2939299822982["method"] = "copyProduct";
	     $gs_data_input2939299822982["interfaceName"] = "core.productmanager.IProductManager";
	     return $this->transport->cast(new core_productmanager_data_Product(), $this->transport->sendMessage($gs_data_input2939299822982));
	}

	/**
	* Create a new product instance.
	* @throws ErrorException
	* @return core_productmanager_data_Product 
	*/

	public function createProduct() {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982["method"] = "createProduct";
	     $gs_data_input2939299822982["interfaceName"] = "core.productmanager.IProductManager";
	     return $this->transport->cast(new core_productmanager_data_Product(), $this->transport->sendMessage($gs_data_input2939299822982));
	}

	/**
	* Create a new product list.
	*
	* @param listName
	* @return core_productmanager_data_ProductList 
	*/

	public function createProductList($listName) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["listName"] = json_encode($this->transport->object_unset_nulls($listName));
	     $gs_data_input2939299822982["method"] = "createProductList";
	     $gs_data_input2939299822982["interfaceName"] = "core.productmanager.IProductManager";
	     return $this->transport->cast(new core_productmanager_data_ProductList(), $this->transport->sendMessage($gs_data_input2939299822982));
	}

	/**
	* Returns a list of products for a given searchword,
	* if blank all products will be returned.
	*
	* @param searchWord
	* @param pageSize
	* @param page
	* @return void 
	*/

	public function deleteCategory($categoryId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["categoryId"] = json_encode($this->transport->object_unset_nulls($categoryId));
	     $gs_data_input2939299822982["method"] = "deleteCategory";
	     $gs_data_input2939299822982["interfaceName"] = "core.productmanager.IProductManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Create a new product list.
	*
	* @param listName
	* @return void 
	*/

	public function deleteProductList($listId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["listId"] = json_encode($this->transport->object_unset_nulls($listId));
	     $gs_data_input2939299822982["method"] = "deleteProductList";
	     $gs_data_input2939299822982["interfaceName"] = "core.productmanager.IProductManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Returns a list of products for a given searchword,
	* if blank all products will be returned.
	*
	* @param searchWord
	* @param pageSize
	* @param page
	* @return core_productmanager_data_ProductCategory[] 
	*/

	public function getAllCategories() {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982["method"] = "getAllCategories";
	     $gs_data_input2939299822982["interfaceName"] = "core.productmanager.IProductManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Fetch all products the store has available.
	* @throws ErrorException
	* @return core_productmanager_data_Product[] 
	*/

	public function getAllProducts() {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982["method"] = "getAllProducts";
	     $gs_data_input2939299822982["interfaceName"] = "core.productmanager.IProductManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Returns a list of products for a given searchword,
	* if blank all products will be returned.
	*
	* @param searchWord
	* @param pageSize
	* @param page
	* @return core_common_FilteredData 
	*/

	public function getAllProductsForRestaurant($filterOptions) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["filterOptions"] = json_encode($this->transport->object_unset_nulls($filterOptions));
	     $gs_data_input2939299822982["method"] = "getAllProductsForRestaurant";
	     $gs_data_input2939299822982["interfaceName"] = "core.productmanager.IProductManager";
	     return $this->transport->cast(new core_common_FilteredData(), $this->transport->sendMessage($gs_data_input2939299822982));
	}

	/**
	* Fetch all products the store has available.
	* @throws ErrorException
	* @return core_productmanager_data_Product[] 
	*/

	public function getAllProductsIncDeleted() {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982["method"] = "getAllProductsIncDeleted";
	     $gs_data_input2939299822982["interfaceName"] = "core.productmanager.IProductManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Returns a list of all products with only name, price and id.
	* @throws ErrorException
	* @return core_productmanager_data_Product[] 
	*/

	public function getAllProductsLight() {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982["method"] = "getAllProductsLight";
	     $gs_data_input2939299822982["interfaceName"] = "core.productmanager.IProductManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Returns a list of products for a given searchword,
	* if blank all products will be returned.
	*
	* @param searchWord
	* @param pageSize
	* @param page
	* @return core_productmanager_data_ProductCategory 
	*/

	public function getCategory($categoryId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["categoryId"] = json_encode($this->transport->object_unset_nulls($categoryId));
	     $gs_data_input2939299822982["method"] = "getCategory";
	     $gs_data_input2939299822982["interfaceName"] = "core.productmanager.IProductManager";
	     return $this->transport->cast(new core_productmanager_data_ProductCategory(), $this->transport->sendMessage($gs_data_input2939299822982));
	}

	/**
	* Fetch one single product by id
	* If product does not exists, null is returned.
	*
	* @param id
	* @throws ErrorException
	* @return core_productmanager_data_Product 
	*/

	public function getDeletedProduct($id) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["id"] = json_encode($this->transport->object_unset_nulls($id));
	     $gs_data_input2939299822982["method"] = "getDeletedProduct";
	     $gs_data_input2939299822982["interfaceName"] = "core.productmanager.IProductManager";
	     return $this->transport->cast(new core_productmanager_data_Product(), $this->transport->sendMessage($gs_data_input2939299822982));
	}

	/**
	* Fetch a list of all the latest products.
	* @param count Number of products to fetch.
	* @throws ErrorException
	* @return core_productmanager_data_Product[] 
	*/

	public function getLatestProducts($count) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["count"] = json_encode($this->transport->object_unset_nulls($count));
	     $gs_data_input2939299822982["method"] = "getLatestProducts";
	     $gs_data_input2939299822982["interfaceName"] = "core.productmanager.IProductManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Get page by name
	* @return String 
	*/

	public function getPageIdByName($productName) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["productName"] = json_encode($this->transport->object_unset_nulls($productName));
	     $gs_data_input2939299822982["method"] = "getPageIdByName";
	     $gs_data_input2939299822982["interfaceName"] = "core.productmanager.IProductManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Get price for a product with variations
	* @return Double 
	*/

	public function getPrice($productId, $variations) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["productId"] = json_encode($this->transport->object_unset_nulls($productId));
	     $gs_data_input2939299822982['args']["variations"] = json_encode($this->transport->object_unset_nulls($variations));
	     $gs_data_input2939299822982["method"] = "getPrice";
	     $gs_data_input2939299822982["interfaceName"] = "core.productmanager.IProductManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Fetch one single product by id
	* If product does not exists, null is returned.
	*
	* @param id
	* @throws ErrorException
	* @return core_productmanager_data_Product 
	*/

	public function getProduct($id) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["id"] = json_encode($this->transport->object_unset_nulls($id));
	     $gs_data_input2939299822982["method"] = "getProduct";
	     $gs_data_input2939299822982["interfaceName"] = "core.productmanager.IProductManager";
	     return $this->transport->cast(new core_productmanager_data_Product(), $this->transport->sendMessage($gs_data_input2939299822982));
	}

	/**
	* Returns a product connected to a specific page.
	* @return core_productmanager_data_Product 
	*/

	public function getProductByPage($id) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["id"] = json_encode($this->transport->object_unset_nulls($id));
	     $gs_data_input2939299822982["method"] = "getProductByPage";
	     $gs_data_input2939299822982["interfaceName"] = "core.productmanager.IProductManager";
	     return $this->transport->cast(new core_productmanager_data_Product(), $this->transport->sendMessage($gs_data_input2939299822982));
	}

	/**
	* Find the product uuid set for an application.
	* @param uuid
	* @throws ErrorException
	* @return core_productmanager_data_Product 
	*/

	public function getProductFromApplicationId($app_uuid) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["app_uuid"] = json_encode($this->transport->object_unset_nulls($app_uuid));
	     $gs_data_input2939299822982["method"] = "getProductFromApplicationId";
	     $gs_data_input2939299822982["interfaceName"] = "core.productmanager.IProductManager";
	     return $this->transport->cast(new core_productmanager_data_Product(), $this->transport->sendMessage($gs_data_input2939299822982));
	}

	/**
	* Create a new product list.
	*
	* @param listName
	* @return core_productmanager_data_ProductList 
	*/

	public function getProductList($listId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["listId"] = json_encode($this->transport->object_unset_nulls($listId));
	     $gs_data_input2939299822982["method"] = "getProductList";
	     $gs_data_input2939299822982["interfaceName"] = "core.productmanager.IProductManager";
	     return $this->transport->cast(new core_productmanager_data_ProductList(), $this->transport->sendMessage($gs_data_input2939299822982));
	}

	/**
	* Create a new product list.
	*
	* @param listName
	* @return core_productmanager_data_ProductList[] 
	*/

	public function getProductLists() {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982["method"] = "getProductLists";
	     $gs_data_input2939299822982["interfaceName"] = "core.productmanager.IProductManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Fetch products
	*
	* @param productCriteria
	* @throws ErrorException
	* @return core_productmanager_data_Product[] 
	*/

	public function getProducts($productCriteria) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["productCriteria"] = json_encode($this->transport->object_unset_nulls($productCriteria));
	     $gs_data_input2939299822982["method"] = "getProducts";
	     $gs_data_input2939299822982["interfaceName"] = "core.productmanager.IProductManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Returns a random set of products
	* If the store does not have enough products it will return as close as possible to
	* the fetchsize specified.
	*
	* @param fetchSize Amount of products that you wish to fetch.
	* @param ignoreProductId Will skip this id, can be the productId or the productPageId.
	* @return public class ArrayList<E> 
	*/

	public function getRandomProducts($fetchSize, $ignoreProductId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["fetchSize"] = json_encode($this->transport->object_unset_nulls($fetchSize));
	     $gs_data_input2939299822982['args']["ignoreProductId"] = json_encode($this->transport->object_unset_nulls($ignoreProductId));
	     $gs_data_input2939299822982["method"] = "getRandomProducts";
	     $gs_data_input2939299822982["interfaceName"] = "core.productmanager.IProductManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Get a list of all the taxes set for this store.
	* @throws ErrorException
	* @return core_productmanager_data_TaxGroup[] 
	*/

	public function getTaxes() {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982["method"] = "getTaxes";
	     $gs_data_input2939299822982["interfaceName"] = "core.productmanager.IProductManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Remove an existing product.
	*
	* @param productId The id of the product to remove.
	* @throws ErrorException
	* @return void 
	*/

	public function removeProduct($productId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["productId"] = json_encode($this->transport->object_unset_nulls($productId));
	     $gs_data_input2939299822982["method"] = "removeProduct";
	     $gs_data_input2939299822982["interfaceName"] = "core.productmanager.IProductManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Returns a list of products for a given searchword,
	* if blank all products will be returned.
	*
	* @param searchWord
	* @param pageSize
	* @param page
	* @return void 
	*/

	public function saveCategory($categories) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["categories"] = json_encode($this->transport->object_unset_nulls($categories));
	     $gs_data_input2939299822982["method"] = "saveCategory";
	     $gs_data_input2939299822982["interfaceName"] = "core.productmanager.IProductManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Save a product.
	*
	* @param product The product to save, if the id for the product is not set.
	* @param parentPageId Attach this product to a given page, leave this empty to avoid attaching it.
	* @throws ErrorException
	* @return core_productmanager_data_Product 
	*/

	public function saveProduct($product) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["product"] = json_encode($this->transport->object_unset_nulls($product));
	     $gs_data_input2939299822982["method"] = "saveProduct";
	     $gs_data_input2939299822982["interfaceName"] = "core.productmanager.IProductManager";
	     return $this->transport->cast(new core_productmanager_data_Product(), $this->transport->sendMessage($gs_data_input2939299822982));
	}

	/**
	* Create a new product list.
	*
	* @param listName
	* @return void 
	*/

	public function saveProductList($productList) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["productList"] = json_encode($this->transport->object_unset_nulls($productList));
	     $gs_data_input2939299822982["method"] = "saveProductList";
	     $gs_data_input2939299822982["interfaceName"] = "core.productmanager.IProductManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Returns a list of products for a given searchword,
	* if blank all products will be returned.
	*
	* @param searchWord
	* @param pageSize
	* @param page
	* @return core_productmanager_data_SearchResult 
	*/

	public function search($searchWord, $pageSize, $page) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["searchWord"] = json_encode($this->transport->object_unset_nulls($searchWord));
	     $gs_data_input2939299822982['args']["pageSize"] = json_encode($this->transport->object_unset_nulls($pageSize));
	     $gs_data_input2939299822982['args']["page"] = json_encode($this->transport->object_unset_nulls($page));
	     $gs_data_input2939299822982["method"] = "search";
	     $gs_data_input2939299822982["interfaceName"] = "core.productmanager.IProductManager";
	     return $this->transport->cast(new core_productmanager_data_SearchResult(), $this->transport->sendMessage($gs_data_input2939299822982));
	}

	/**
	* Method for setting a known product image as main image.
	*
	* @param productId
	* @param imageId
	* @throws ErrorException
	* @return void 
	*/

	public function setMainImage($productId, $imageId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["productId"] = json_encode($this->transport->object_unset_nulls($productId));
	     $gs_data_input2939299822982['args']["imageId"] = json_encode($this->transport->object_unset_nulls($imageId));
	     $gs_data_input2939299822982["method"] = "setMainImage";
	     $gs_data_input2939299822982["interfaceName"] = "core.productmanager.IProductManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Returns a list of products for a given searchword,
	* if blank all products will be returned.
	*
	* @param searchWord
	* @param pageSize
	* @param page
	* @return void 
	*/

	public function setProductDynamicPrice($productId, $count) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["productId"] = json_encode($this->transport->object_unset_nulls($productId));
	     $gs_data_input2939299822982['args']["count"] = json_encode($this->transport->object_unset_nulls($count));
	     $gs_data_input2939299822982["method"] = "setProductDynamicPrice";
	     $gs_data_input2939299822982["interfaceName"] = "core.productmanager.IProductManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Set the tax groups for the the products, (0-5).
	* @param group
	* @throws ErrorException
	* @return void 
	*/

	public function setTaxes($group) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["group"] = json_encode($this->transport->object_unset_nulls($group));
	     $gs_data_input2939299822982["method"] = "setTaxes";
	     $gs_data_input2939299822982["interfaceName"] = "core.productmanager.IProductManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Translate all antries found in a given list of entry ids.
	* @param entryIds A list of entries id to translate.
	* @throws ErrorException
	* @return public class HashMap<K,V> 
	*/

	public function translateEntries($entryIds) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["entryIds"] = json_encode($this->transport->object_unset_nulls($entryIds));
	     $gs_data_input2939299822982["method"] = "translateEntries";
	     $gs_data_input2939299822982["interfaceName"] = "core.productmanager.IProductManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

}
class APIPullServerManager {

	var $transport;
	
	function APIPullServerManager($transport) {
		$this->transport = $transport;
	}

	/**
	*
	* @author ktonder
	* @return core_pullserver_data_PullMessage[] 
	*/

	public function getPullMessages($keyId, $storeId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["keyId"] = json_encode($this->transport->object_unset_nulls($keyId));
	     $gs_data_input2939299822982['args']["storeId"] = json_encode($this->transport->object_unset_nulls($storeId));
	     $gs_data_input2939299822982["method"] = "getPullMessages";
	     $gs_data_input2939299822982["interfaceName"] = "core.pullserver.IPullServerManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	*
	* @author ktonder
	* @return void 
	*/

	public function markMessageAsReceived($messageId, $storeId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["messageId"] = json_encode($this->transport->object_unset_nulls($messageId));
	     $gs_data_input2939299822982['args']["storeId"] = json_encode($this->transport->object_unset_nulls($storeId));
	     $gs_data_input2939299822982["method"] = "markMessageAsReceived";
	     $gs_data_input2939299822982["interfaceName"] = "core.pullserver.IPullServerManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	*
	* @author ktonder
	* @return void 
	*/

	public function savePullMessage($pullMessage) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["pullMessage"] = json_encode($this->transport->object_unset_nulls($pullMessage));
	     $gs_data_input2939299822982["method"] = "savePullMessage";
	     $gs_data_input2939299822982["interfaceName"] = "core.pullserver.IPullServerManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	*
	* @author ktonder
	* @return void 
	*/

	public function triggerCheckForPullMessage() {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982["method"] = "triggerCheckForPullMessage";
	     $gs_data_input2939299822982["interfaceName"] = "core.pullserver.IPullServerManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

}
class APIQuestBackManager {

	var $transport;
	
	function APIQuestBackManager($transport) {
		$this->transport = $transport;
	}

	/**
	* Return a list of all tests that the logged in user is assigned to.
	*
	* @return String 
	*/

	public function answerQuestions($testId, $applicationId, $pageId, $answers) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["testId"] = json_encode($this->transport->object_unset_nulls($testId));
	     $gs_data_input2939299822982['args']["applicationId"] = json_encode($this->transport->object_unset_nulls($applicationId));
	     $gs_data_input2939299822982['args']["pageId"] = json_encode($this->transport->object_unset_nulls($pageId));
	     $gs_data_input2939299822982['args']["answers"] = json_encode($this->transport->object_unset_nulls($answers));
	     $gs_data_input2939299822982["method"] = "answerQuestions";
	     $gs_data_input2939299822982["interfaceName"] = "core.questback.IQuestBackManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Returns the calculated result in percent (0 - 100)
	* @param userId
	* @param testId
	* @return void 
	*/

	public function assignTestsToUsers($testIds, $userids) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["testIds"] = json_encode($this->transport->object_unset_nulls($testIds));
	     $gs_data_input2939299822982['args']["userids"] = json_encode($this->transport->object_unset_nulls($userids));
	     $gs_data_input2939299822982["method"] = "assignTestsToUsers";
	     $gs_data_input2939299822982["interfaceName"] = "core.questback.IQuestBackManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Return a list of all tests that the logged in user is assigned to.
	*
	* @return void 
	*/

	public function assignUserToTest($testId, $userId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["testId"] = json_encode($this->transport->object_unset_nulls($testId));
	     $gs_data_input2939299822982['args']["userId"] = json_encode($this->transport->object_unset_nulls($userId));
	     $gs_data_input2939299822982["method"] = "assignUserToTest";
	     $gs_data_input2939299822982["interfaceName"] = "core.questback.IQuestBackManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	*
	* @author ktonder
	* @return void 
	*/

	public function createTemplatePageIfNotExists() {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982["method"] = "createTemplatePageIfNotExists";
	     $gs_data_input2939299822982["interfaceName"] = "core.questback.IQuestBackManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	*
	* @author ktonder
	* @return core_questback_data_QuestTest 
	*/

	public function createTest($testName) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["testName"] = json_encode($this->transport->object_unset_nulls($testName));
	     $gs_data_input2939299822982["method"] = "createTest";
	     $gs_data_input2939299822982["interfaceName"] = "core.questback.IQuestBackManager";
	     return $this->transport->cast(new core_questback_data_QuestTest(), $this->transport->sendMessage($gs_data_input2939299822982));
	}

	/**
	*
	* @author ktonder
	* @return void 
	*/

	public function deleteTest($testId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["testId"] = json_encode($this->transport->object_unset_nulls($testId));
	     $gs_data_input2939299822982["method"] = "deleteTest";
	     $gs_data_input2939299822982["interfaceName"] = "core.questback.IQuestBackManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Returns the calculated result in percent (0 - 100)
	* @param userId
	* @param testId
	* @return String 
	*/

	public function exportToExcel() {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982["method"] = "exportToExcel";
	     $gs_data_input2939299822982["interfaceName"] = "core.questback.IQuestBackManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	*
	* @author ktonder
	* @return core_questback_data_QuestTest[] 
	*/

	public function getAllTests() {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982["method"] = "getAllTests";
	     $gs_data_input2939299822982["interfaceName"] = "core.questback.IQuestBackManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Return a list of all tests that the logged in user is assigned to.
	*
	* @return core_questback_data_UserTestResult 
	*/

	public function getBestCategoryResultForCompany($userId, $catId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["userId"] = json_encode($this->transport->object_unset_nulls($userId));
	     $gs_data_input2939299822982['args']["catId"] = json_encode($this->transport->object_unset_nulls($catId));
	     $gs_data_input2939299822982["method"] = "getBestCategoryResultForCompany";
	     $gs_data_input2939299822982["interfaceName"] = "core.questback.IQuestBackManager";
	     return $this->transport->cast(new core_questback_data_UserTestResult(), $this->transport->sendMessage($gs_data_input2939299822982));
	}

	/**
	* Return a list of all tests that the logged in user is assigned to.
	*
	* @return core_questback_data_QuestBackQuestion[] 
	*/

	public function getCategories() {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982["method"] = "getCategories";
	     $gs_data_input2939299822982["interfaceName"] = "core.questback.IQuestBackManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Returns the calculated result in percent (0 - 100)
	* @param userId
	* @param testId
	* @return core_questback_data_QuestBackQuestion[] 
	*/

	public function getCategoriesForTest($testId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["testId"] = json_encode($this->transport->object_unset_nulls($testId));
	     $gs_data_input2939299822982["method"] = "getCategoriesForTest";
	     $gs_data_input2939299822982["interfaceName"] = "core.questback.IQuestBackManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Returns the calculated result in percent (0 - 100)
	* @param userId
	* @param testId
	* @return Integer 
	*/

	public function getCompanyScoreForTestForCurrentUser($testId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["testId"] = json_encode($this->transport->object_unset_nulls($testId));
	     $gs_data_input2939299822982["method"] = "getCompanyScoreForTestForCurrentUser";
	     $gs_data_input2939299822982["interfaceName"] = "core.questback.IQuestBackManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Return a list of all tests that the logged in user is assigned to.
	*
	* @return String 
	*/

	public function getNextQuestionPage($testId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["testId"] = json_encode($this->transport->object_unset_nulls($testId));
	     $gs_data_input2939299822982["method"] = "getNextQuestionPage";
	     $gs_data_input2939299822982["interfaceName"] = "core.questback.IQuestBackManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Returns the calculated result in percent (0 - 100)
	* @param userId
	* @param testId
	* @return core_questback_data_QuestBackOption[] 
	*/

	public function getOptionsByPageId($pageId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["pageId"] = json_encode($this->transport->object_unset_nulls($pageId));
	     $gs_data_input2939299822982["method"] = "getOptionsByPageId";
	     $gs_data_input2939299822982["interfaceName"] = "core.questback.IQuestBackManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	*
	* @author ktonder
	* @return String 
	*/

	public function getPageId($questionId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["questionId"] = json_encode($this->transport->object_unset_nulls($questionId));
	     $gs_data_input2939299822982["method"] = "getPageId";
	     $gs_data_input2939299822982["interfaceName"] = "core.questback.IQuestBackManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Return a list of all tests that the logged in user is assigned to.
	*
	* @return int 
	*/

	public function getProgress($testId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["testId"] = json_encode($this->transport->object_unset_nulls($testId));
	     $gs_data_input2939299822982["method"] = "getProgress";
	     $gs_data_input2939299822982["interfaceName"] = "core.questback.IQuestBackManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Return a list of all tests that the logged in user is assigned to.
	*
	* @return int 
	*/

	public function getProgressForUser($userId, $testId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["userId"] = json_encode($this->transport->object_unset_nulls($userId));
	     $gs_data_input2939299822982['args']["testId"] = json_encode($this->transport->object_unset_nulls($testId));
	     $gs_data_input2939299822982["method"] = "getProgressForUser";
	     $gs_data_input2939299822982["interfaceName"] = "core.questback.IQuestBackManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Return a list of all tests that the logged in user is assigned to.
	*
	* @return core_questback_data_QuestBackQuestion 
	*/

	public function getQuestion($id) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["id"] = json_encode($this->transport->object_unset_nulls($id));
	     $gs_data_input2939299822982["method"] = "getQuestion";
	     $gs_data_input2939299822982["interfaceName"] = "core.questback.IQuestBackManager";
	     return $this->transport->cast(new core_questback_data_QuestBackQuestion(), $this->transport->sendMessage($gs_data_input2939299822982));
	}

	/**
	*
	* @author ktonder
	* @return String 
	*/

	public function getQuestionTitle($pageId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["pageId"] = json_encode($this->transport->object_unset_nulls($pageId));
	     $gs_data_input2939299822982["method"] = "getQuestionTitle";
	     $gs_data_input2939299822982["interfaceName"] = "core.questback.IQuestBackManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Returns the calculated result in percent (0 - 100)
	* @param userId
	* @param testId
	* @return core_questback_data_QuestBackResult 
	*/

	public function getResult($testId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["testId"] = json_encode($this->transport->object_unset_nulls($testId));
	     $gs_data_input2939299822982["method"] = "getResult";
	     $gs_data_input2939299822982["interfaceName"] = "core.questback.IQuestBackManager";
	     return $this->transport->cast(new core_questback_data_QuestBackResult(), $this->transport->sendMessage($gs_data_input2939299822982));
	}

	/**
	* Return a list of all tests that the logged in user is assigned to.
	*
	* @return core_questback_data_ResultRequirement 
	*/

	public function getResultRequirement() {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982["method"] = "getResultRequirement";
	     $gs_data_input2939299822982["interfaceName"] = "core.questback.IQuestBackManager";
	     return $this->transport->cast(new core_questback_data_ResultRequirement(), $this->transport->sendMessage($gs_data_input2939299822982));
	}

	/**
	* Returns the calculated result in percent (0 - 100)
	* @param userId
	* @param testId
	* @return core_questback_data_QuestBackResult 
	*/

	public function getResultWithReference($testId, $referenceId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["testId"] = json_encode($this->transport->object_unset_nulls($testId));
	     $gs_data_input2939299822982['args']["referenceId"] = json_encode($this->transport->object_unset_nulls($referenceId));
	     $gs_data_input2939299822982["method"] = "getResultWithReference";
	     $gs_data_input2939299822982["interfaceName"] = "core.questback.IQuestBackManager";
	     return $this->transport->cast(new core_questback_data_QuestBackResult(), $this->transport->sendMessage($gs_data_input2939299822982));
	}

	/**
	* Returns the calculated result in percent (0 - 100)
	* @param userId
	* @param testId
	* @return Integer 
	*/

	public function getScoreForTest($userId, $testId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["userId"] = json_encode($this->transport->object_unset_nulls($userId));
	     $gs_data_input2939299822982['args']["testId"] = json_encode($this->transport->object_unset_nulls($testId));
	     $gs_data_input2939299822982["method"] = "getScoreForTest";
	     $gs_data_input2939299822982["interfaceName"] = "core.questback.IQuestBackManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	*
	* @author ktonder
	* @return core_questback_data_QuestTest 
	*/

	public function getTest($testId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["testId"] = json_encode($this->transport->object_unset_nulls($testId));
	     $gs_data_input2939299822982["method"] = "getTest";
	     $gs_data_input2939299822982["interfaceName"] = "core.questback.IQuestBackManager";
	     return $this->transport->cast(new core_questback_data_QuestTest(), $this->transport->sendMessage($gs_data_input2939299822982));
	}

	/**
	* Return a list of all tests that the logged in user is assigned to.
	*
	* @return core_questback_data_UserTestResult 
	*/

	public function getTestResult($testId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["testId"] = json_encode($this->transport->object_unset_nulls($testId));
	     $gs_data_input2939299822982["method"] = "getTestResult";
	     $gs_data_input2939299822982["interfaceName"] = "core.questback.IQuestBackManager";
	     return $this->transport->cast(new core_questback_data_UserTestResult(), $this->transport->sendMessage($gs_data_input2939299822982));
	}

	/**
	* Return a list of all tests that the logged in user is assigned to.
	*
	* @return core_questback_data_UserTestResult 
	*/

	public function getTestResultForUser($testId, $userId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["testId"] = json_encode($this->transport->object_unset_nulls($testId));
	     $gs_data_input2939299822982['args']["userId"] = json_encode($this->transport->object_unset_nulls($userId));
	     $gs_data_input2939299822982["method"] = "getTestResultForUser";
	     $gs_data_input2939299822982["interfaceName"] = "core.questback.IQuestBackManager";
	     return $this->transport->cast(new core_questback_data_UserTestResult(), $this->transport->sendMessage($gs_data_input2939299822982));
	}

	/**
	* Return a list of all tests that the logged in user is assigned to.
	*
	* @return core_questback_data_UserTestResult 
	*/

	public function getTestResults($userId, $testId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["userId"] = json_encode($this->transport->object_unset_nulls($userId));
	     $gs_data_input2939299822982['args']["testId"] = json_encode($this->transport->object_unset_nulls($testId));
	     $gs_data_input2939299822982["method"] = "getTestResults";
	     $gs_data_input2939299822982["interfaceName"] = "core.questback.IQuestBackManager";
	     return $this->transport->cast(new core_questback_data_UserTestResult(), $this->transport->sendMessage($gs_data_input2939299822982));
	}

	/**
	* Return a list of all tests that the logged in user is assigned to.
	*
	* @return core_questback_data_QuestTest[] 
	*/

	public function getTests() {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982["method"] = "getTests";
	     $gs_data_input2939299822982["interfaceName"] = "core.questback.IQuestBackManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Return a list of all tests that the logged in user is assigned to.
	*
	* @return core_questback_data_QuestTest[] 
	*/

	public function getTestsForUser($userId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["userId"] = json_encode($this->transport->object_unset_nulls($userId));
	     $gs_data_input2939299822982["method"] = "getTestsForUser";
	     $gs_data_input2939299822982["interfaceName"] = "core.questback.IQuestBackManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Returns the calculated result in percent (0 - 100)
	* @param userId
	* @param testId
	* @return String 
	*/

	public function getTypeByPageId($pageId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["pageId"] = json_encode($this->transport->object_unset_nulls($pageId));
	     $gs_data_input2939299822982["method"] = "getTypeByPageId";
	     $gs_data_input2939299822982["interfaceName"] = "core.questback.IQuestBackManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Return a list of all tests that the logged in user is assigned to.
	*
	* @return boolean 
	*/

	public function hasAnswered($pageId, $testId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["pageId"] = json_encode($this->transport->object_unset_nulls($pageId));
	     $gs_data_input2939299822982['args']["testId"] = json_encode($this->transport->object_unset_nulls($testId));
	     $gs_data_input2939299822982["method"] = "hasAnswered";
	     $gs_data_input2939299822982["interfaceName"] = "core.questback.IQuestBackManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Returns the calculated result in percent (0 - 100)
	* @param userId
	* @param testId
	* @return String 
	*/

	public function importExcel($base64, $language) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["base64"] = json_encode($this->transport->object_unset_nulls($base64));
	     $gs_data_input2939299822982['args']["language"] = json_encode($this->transport->object_unset_nulls($language));
	     $gs_data_input2939299822982["method"] = "importExcel";
	     $gs_data_input2939299822982["interfaceName"] = "core.questback.IQuestBackManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Returns the calculated result in percent (0 - 100)
	* @param userId
	* @param testId
	* @return boolean 
	*/

	public function isQuestBackSent($userId, $testId, $reference) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["userId"] = json_encode($this->transport->object_unset_nulls($userId));
	     $gs_data_input2939299822982['args']["testId"] = json_encode($this->transport->object_unset_nulls($testId));
	     $gs_data_input2939299822982['args']["reference"] = json_encode($this->transport->object_unset_nulls($reference));
	     $gs_data_input2939299822982["method"] = "isQuestBackSent";
	     $gs_data_input2939299822982["interfaceName"] = "core.questback.IQuestBackManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	*
	* @author ktonder
	* @return void 
	*/

	public function questionTreeChanged($applicationId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["applicationId"] = json_encode($this->transport->object_unset_nulls($applicationId));
	     $gs_data_input2939299822982["method"] = "questionTreeChanged";
	     $gs_data_input2939299822982["interfaceName"] = "core.questback.IQuestBackManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Returns the calculated result in percent (0 - 100)
	* @param userId
	* @param testId
	* @return void 
	*/

	public function saveQuestBackAnswerResponse($answerId, $answer) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["answerId"] = json_encode($this->transport->object_unset_nulls($answerId));
	     $gs_data_input2939299822982['args']["answer"] = json_encode($this->transport->object_unset_nulls($answer));
	     $gs_data_input2939299822982["method"] = "saveQuestBackAnswerResponse";
	     $gs_data_input2939299822982["interfaceName"] = "core.questback.IQuestBackManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Return a list of all tests that the logged in user is assigned to.
	*
	* @return void 
	*/

	public function saveQuestBackResultRequirement($requirement) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["requirement"] = json_encode($this->transport->object_unset_nulls($requirement));
	     $gs_data_input2939299822982["method"] = "saveQuestBackResultRequirement";
	     $gs_data_input2939299822982["interfaceName"] = "core.questback.IQuestBackManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	*
	* @author ktonder
	* @return core_questback_data_QuestTest 
	*/

	public function saveTest($test) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["test"] = json_encode($this->transport->object_unset_nulls($test));
	     $gs_data_input2939299822982["method"] = "saveTest";
	     $gs_data_input2939299822982["interfaceName"] = "core.questback.IQuestBackManager";
	     return $this->transport->cast(new core_questback_data_QuestTest(), $this->transport->sendMessage($gs_data_input2939299822982));
	}

	/**
	* Returns the calculated result in percent (0 - 100)
	* @param userId
	* @param testId
	* @return void 
	*/

	public function sendQuestBack($testId, $userId, $reference, $event) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["testId"] = json_encode($this->transport->object_unset_nulls($testId));
	     $gs_data_input2939299822982['args']["userId"] = json_encode($this->transport->object_unset_nulls($userId));
	     $gs_data_input2939299822982['args']["reference"] = json_encode($this->transport->object_unset_nulls($reference));
	     $gs_data_input2939299822982['args']["event"] = json_encode($this->transport->object_unset_nulls($event));
	     $gs_data_input2939299822982["method"] = "sendQuestBack";
	     $gs_data_input2939299822982["interfaceName"] = "core.questback.IQuestBackManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

}
class APIReportingManager {

	var $transport;
	
	function APIReportingManager($transport) {
		$this->transport = $transport;
	}

	/**
	* Fetch all activity data for a given session at a given period in time.
	* @param startDate "yyyy-mm-dd"
	* @param stopDate "yyyy-mm-dd"
	* @param searchSessionId The id of the session to fetch data from.
	* @throws ErrorException
	* @return core_reportingmanager_data_EventLog[] 
	*/

	public function getAllEventsFromSession($startDate, $stopDate, $searchSessionId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["startDate"] = json_encode($this->transport->object_unset_nulls($startDate));
	     $gs_data_input2939299822982['args']["stopDate"] = json_encode($this->transport->object_unset_nulls($stopDate));
	     $gs_data_input2939299822982['args']["searchSessionId"] = json_encode($this->transport->object_unset_nulls($searchSessionId));
	     $gs_data_input2939299822982["method"] = "getAllEventsFromSession";
	     $gs_data_input2939299822982["interfaceName"] = "core.reportingmanager.IReportingManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Fetch all users which connected at a given time period.
	* These are users who has been logging on to your store.
	* @param startdate "yyyy-mm-dd"
	* @param stopDate "yyyy-mm-dd"
	* @param filter A report filter if you want to filter out more information, use null to avoid the filter.
	* @throws ErrorException
	* @return core_reportingmanager_data_UserConnected[] 
	*/

	public function getConnectedUsers($startdate, $stopDate, $filter) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["startdate"] = json_encode($this->transport->object_unset_nulls($startdate));
	     $gs_data_input2939299822982['args']["stopDate"] = json_encode($this->transport->object_unset_nulls($stopDate));
	     $gs_data_input2939299822982['args']["filter"] = json_encode($this->transport->object_unset_nulls($filter));
	     $gs_data_input2939299822982["method"] = "getConnectedUsers";
	     $gs_data_input2939299822982["interfaceName"] = "core.reportingmanager.IReportingManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* List all orders created at a given time period.
	* @param startDate "yyyy-mm-dd"
	* @param stopDate "yyyy-mm-dd"
	* @throws ErrorException
	* @return core_reportingmanager_data_OrderCreated[] 
	*/

	public function getOrdersCreated($startDate, $stopDate) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["startDate"] = json_encode($this->transport->object_unset_nulls($startDate));
	     $gs_data_input2939299822982['args']["stopDate"] = json_encode($this->transport->object_unset_nulls($stopDate));
	     $gs_data_input2939299822982["method"] = "getOrdersCreated";
	     $gs_data_input2939299822982["interfaceName"] = "core.reportingmanager.IReportingManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Fetch the page id for all page
	* @param startDate "yyyy-mm-dd"
	* @param stopDate "yyyy-mm-dd"
	* @throws ErrorException
	* @return core_reportingmanager_data_PageView[] 
	*/

	public function getPageViews($startDate, $stopDate) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["startDate"] = json_encode($this->transport->object_unset_nulls($startDate));
	     $gs_data_input2939299822982['args']["stopDate"] = json_encode($this->transport->object_unset_nulls($stopDate));
	     $gs_data_input2939299822982["method"] = "getPageViews";
	     $gs_data_input2939299822982["interfaceName"] = "core.reportingmanager.IReportingManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Fetch all viewed product for a given time period.
	* @param startDate "yyyy-mm-dd"
	* @param stopDate "yyyy-mm-dd"
	* @throws ErrorException
	* @return core_reportingmanager_data_ProductViewed[] 
	*/

	public function getProductViewed($startDate, $stopDate) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["startDate"] = json_encode($this->transport->object_unset_nulls($startDate));
	     $gs_data_input2939299822982['args']["stopDate"] = json_encode($this->transport->object_unset_nulls($stopDate));
	     $gs_data_input2939299822982["method"] = "getProductViewed";
	     $gs_data_input2939299822982["interfaceName"] = "core.reportingmanager.IReportingManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Fetch a report for a given time period.
	* @param startDate "yyyy-mm-dd"
	* @param stopDate "yyyy-mm-dd"
	* @param type 0, hourly, 1. daily, 2. weekly, 3. monthly
	* @throws ErrorException
	* @return core_reportingmanager_data_Report[] 
	*/

	public function getReport($startDate, $stopDate, $type) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["startDate"] = json_encode($this->transport->object_unset_nulls($startDate));
	     $gs_data_input2939299822982['args']["stopDate"] = json_encode($this->transport->object_unset_nulls($stopDate));
	     $gs_data_input2939299822982['args']["type"] = json_encode($this->transport->object_unset_nulls($type));
	     $gs_data_input2939299822982["method"] = "getReport";
	     $gs_data_input2939299822982["interfaceName"] = "core.reportingmanager.IReportingManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Fetch a list of all users trying / logging on at a given time interval.
	* @param startDate "yyyy-mm-dd"
	* @param stopDate "yyyy-mm-dd"
	* @throws ErrorException
	* @return core_reportingmanager_data_LoggedOnUser[] 
	*/

	public function getUserLoggedOn($startDate, $stopDate) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["startDate"] = json_encode($this->transport->object_unset_nulls($startDate));
	     $gs_data_input2939299822982['args']["stopDate"] = json_encode($this->transport->object_unset_nulls($stopDate));
	     $gs_data_input2939299822982["method"] = "getUserLoggedOn";
	     $gs_data_input2939299822982["interfaceName"] = "core.reportingmanager.IReportingManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

}
class APIResturantManager {

	var $transport;
	
	function APIResturantManager($transport) {
		$this->transport = $transport;
	}

	/**
	* Returns all the sessions which the current table can change to,
	* this means that the session that is currently active is hidden.
	*
	* @param tableId
	* @return void 
	*/

	public function addCartItemToCurrentTableSession($tableId, $cartItem) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["tableId"] = json_encode($this->transport->object_unset_nulls($tableId));
	     $gs_data_input2939299822982['args']["cartItem"] = json_encode($this->transport->object_unset_nulls($cartItem));
	     $gs_data_input2939299822982["method"] = "addCartItemToCurrentTableSession";
	     $gs_data_input2939299822982["interfaceName"] = "core.resturantmanager.IResturantManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	*
	* @author ktonder
	* @return void 
	*/

	public function addCartItems($cartItems, $tableId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["cartItems"] = json_encode($this->transport->object_unset_nulls($cartItems));
	     $gs_data_input2939299822982['args']["tableId"] = json_encode($this->transport->object_unset_nulls($tableId));
	     $gs_data_input2939299822982["method"] = "addCartItems";
	     $gs_data_input2939299822982["interfaceName"] = "core.resturantmanager.IResturantManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Returns all the sessions which the current table can change to,
	* this means that the session that is currently active is hidden.
	*
	* @param tableId
	* @return void 
	*/

	public function addCartItemsToReservation($cartItems, $reservationId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["cartItems"] = json_encode($this->transport->object_unset_nulls($cartItems));
	     $gs_data_input2939299822982['args']["reservationId"] = json_encode($this->transport->object_unset_nulls($reservationId));
	     $gs_data_input2939299822982["method"] = "addCartItemsToReservation";
	     $gs_data_input2939299822982["interfaceName"] = "core.resturantmanager.IResturantManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Returns all the sessions which the current table can change to,
	* this means that the session that is currently active is hidden.
	*
	* @param tableId
	* @return core_resturantmanager_ResturantCartItem[] 
	*/

	public function changeToDifferentSession($sessionId, $tableId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["sessionId"] = json_encode($this->transport->object_unset_nulls($sessionId));
	     $gs_data_input2939299822982['args']["tableId"] = json_encode($this->transport->object_unset_nulls($tableId));
	     $gs_data_input2939299822982["method"] = "changeToDifferentSession";
	     $gs_data_input2939299822982["interfaceName"] = "core.resturantmanager.IResturantManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Returns all the sessions which the current table can change to,
	* this means that the session that is currently active is hidden.
	*
	* @param tableId
	* @return core_pmsmanager_PmsRoomSimple 
	*/

	public function checkPinCode($pincode, $bookingId, $pmsRoomId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["pincode"] = json_encode($this->transport->object_unset_nulls($pincode));
	     $gs_data_input2939299822982['args']["bookingId"] = json_encode($this->transport->object_unset_nulls($bookingId));
	     $gs_data_input2939299822982['args']["pmsRoomId"] = json_encode($this->transport->object_unset_nulls($pmsRoomId));
	     $gs_data_input2939299822982["method"] = "checkPinCode";
	     $gs_data_input2939299822982["interfaceName"] = "core.resturantmanager.IResturantManager";
	     return $this->transport->cast(new core_pmsmanager_PmsRoomSimple(), $this->transport->sendMessage($gs_data_input2939299822982));
	}

	/**
	* Returns all the sessions which the current table can change to,
	* this means that the session that is currently active is hidden.
	*
	* @param tableId
	* @return core_ordermanager_data_Order 
	*/

	public function completePayment($paymentMethodId, $cartItemIds) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["paymentMethodId"] = json_encode($this->transport->object_unset_nulls($paymentMethodId));
	     $gs_data_input2939299822982['args']["cartItemIds"] = json_encode($this->transport->object_unset_nulls($cartItemIds));
	     $gs_data_input2939299822982["method"] = "completePayment";
	     $gs_data_input2939299822982["interfaceName"] = "core.resturantmanager.IResturantManager";
	     return $this->transport->cast(new core_ordermanager_data_Order(), $this->transport->sendMessage($gs_data_input2939299822982));
	}

	/**
	* Returns all the sessions which the current table can change to,
	* this means that the session that is currently active is hidden.
	*
	* @param tableId
	* @return void 
	*/

	public function createCartForReservation($reservationId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["reservationId"] = json_encode($this->transport->object_unset_nulls($reservationId));
	     $gs_data_input2939299822982["method"] = "createCartForReservation";
	     $gs_data_input2939299822982["interfaceName"] = "core.resturantmanager.IResturantManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Returns all the sessions which the current table can change to,
	* this means that the session that is currently active is hidden.
	*
	* @param tableId
	* @return void 
	*/

	public function createCartForTable($tableId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["tableId"] = json_encode($this->transport->object_unset_nulls($tableId));
	     $gs_data_input2939299822982["method"] = "createCartForTable";
	     $gs_data_input2939299822982["interfaceName"] = "core.resturantmanager.IResturantManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	*
	* @author ktonder
	* @return void 
	*/

	public function createRoom($roomName) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["roomName"] = json_encode($this->transport->object_unset_nulls($roomName));
	     $gs_data_input2939299822982["method"] = "createRoom";
	     $gs_data_input2939299822982["interfaceName"] = "core.resturantmanager.IResturantManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	*
	* @author ktonder
	* @return void 
	*/

	public function createTable($roomId, $tableId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["roomId"] = json_encode($this->transport->object_unset_nulls($roomId));
	     $gs_data_input2939299822982['args']["tableId"] = json_encode($this->transport->object_unset_nulls($tableId));
	     $gs_data_input2939299822982["method"] = "createTable";
	     $gs_data_input2939299822982["interfaceName"] = "core.resturantmanager.IResturantManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	*
	* @author ktonder
	* @return core_resturantmanager_TableSession 
	*/

	public function createTableSession($tableId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["tableId"] = json_encode($this->transport->object_unset_nulls($tableId));
	     $gs_data_input2939299822982["method"] = "createTableSession";
	     $gs_data_input2939299822982["interfaceName"] = "core.resturantmanager.IResturantManager";
	     return $this->transport->cast(new core_resturantmanager_TableSession(), $this->transport->sendMessage($gs_data_input2939299822982));
	}

	/**
	*
	* @author ktonder
	* @return void 
	*/

	public function deleteTable($tableId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["tableId"] = json_encode($this->transport->object_unset_nulls($tableId));
	     $gs_data_input2939299822982["method"] = "deleteTable";
	     $gs_data_input2939299822982["interfaceName"] = "core.resturantmanager.IResturantManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	*
	* @author ktonder
	* @return core_resturantmanager_TableSession[] 
	*/

	public function getAllSessions() {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982["method"] = "getAllSessions";
	     $gs_data_input2939299822982["interfaceName"] = "core.resturantmanager.IResturantManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Returns all the sessions which the current table can change to,
	* this means that the session that is currently active is hidden.
	*
	* @param tableId
	* @return core_resturantmanager_TableSession[] 
	*/

	public function getAllSessionsForTable($tableId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["tableId"] = json_encode($this->transport->object_unset_nulls($tableId));
	     $gs_data_input2939299822982["method"] = "getAllSessionsForTable";
	     $gs_data_input2939299822982["interfaceName"] = "core.resturantmanager.IResturantManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Returns all the sessions which the current table can change to,
	* this means that the session that is currently active is hidden.
	*
	* @param tableId
	* @return core_resturantmanager_TableData 
	*/

	public function getCurrentTableData($tableId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["tableId"] = json_encode($this->transport->object_unset_nulls($tableId));
	     $gs_data_input2939299822982["method"] = "getCurrentTableData";
	     $gs_data_input2939299822982["interfaceName"] = "core.resturantmanager.IResturantManager";
	     return $this->transport->cast(new core_resturantmanager_TableData(), $this->transport->sendMessage($gs_data_input2939299822982));
	}

	/**
	*
	* @author ktonder
	* @return core_resturantmanager_ResturantRoom 
	*/

	public function getRoomById($roomId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["roomId"] = json_encode($this->transport->object_unset_nulls($roomId));
	     $gs_data_input2939299822982["method"] = "getRoomById";
	     $gs_data_input2939299822982["interfaceName"] = "core.resturantmanager.IResturantManager";
	     return $this->transport->cast(new core_resturantmanager_ResturantRoom(), $this->transport->sendMessage($gs_data_input2939299822982));
	}

	/**
	*
	* @author ktonder
	* @return core_resturantmanager_ResturantRoom[] 
	*/

	public function getRooms() {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982["method"] = "getRooms";
	     $gs_data_input2939299822982["interfaceName"] = "core.resturantmanager.IResturantManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	*
	* @author ktonder
	* @return core_resturantmanager_ResturantTable 
	*/

	public function getTableById($tableId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["tableId"] = json_encode($this->transport->object_unset_nulls($tableId));
	     $gs_data_input2939299822982["method"] = "getTableById";
	     $gs_data_input2939299822982["interfaceName"] = "core.resturantmanager.IResturantManager";
	     return $this->transport->cast(new core_resturantmanager_ResturantTable(), $this->transport->sendMessage($gs_data_input2939299822982));
	}

	/**
	* Returns all the sessions which the current table can change to,
	* this means that the session that is currently active is hidden.
	*
	* @param tableId
	* @return core_resturantmanager_TableData 
	*/

	public function getTableDataForReservation($reservationId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["reservationId"] = json_encode($this->transport->object_unset_nulls($reservationId));
	     $gs_data_input2939299822982["method"] = "getTableDataForReservation";
	     $gs_data_input2939299822982["interfaceName"] = "core.resturantmanager.IResturantManager";
	     return $this->transport->cast(new core_resturantmanager_TableData(), $this->transport->sendMessage($gs_data_input2939299822982));
	}

	/**
	* Returns all the sessions which the current table can change to,
	* this means that the session that is currently active is hidden.
	*
	* @param tableId
	* @return core_resturantmanager_RestaurantTableDay 
	*/

	public function getTableDayData($date, $tableId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["date"] = json_encode($this->transport->object_unset_nulls($date));
	     $gs_data_input2939299822982['args']["tableId"] = json_encode($this->transport->object_unset_nulls($tableId));
	     $gs_data_input2939299822982["method"] = "getTableDayData";
	     $gs_data_input2939299822982["interfaceName"] = "core.resturantmanager.IResturantManager";
	     return $this->transport->cast(new core_resturantmanager_RestaurantTableDay(), $this->transport->sendMessage($gs_data_input2939299822982));
	}

	/**
	* Returns all the sessions which the current table can change to,
	* this means that the session that is currently active is hidden.
	*
	* @param tableId
	* @return core_resturantmanager_TableReservation 
	*/

	public function getTableReservation($reservationId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["reservationId"] = json_encode($this->transport->object_unset_nulls($reservationId));
	     $gs_data_input2939299822982["method"] = "getTableReservation";
	     $gs_data_input2939299822982["interfaceName"] = "core.resturantmanager.IResturantManager";
	     return $this->transport->cast(new core_resturantmanager_TableReservation(), $this->transport->sendMessage($gs_data_input2939299822982));
	}

	/**
	* Returns all the sessions which the current table can change to,
	* this means that the session that is currently active is hidden.
	*
	* @param tableId
	* @return boolean 
	*/

	public function isOrderPriceCorrect($paymentMethodId, $cartItems, $price) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["paymentMethodId"] = json_encode($this->transport->object_unset_nulls($paymentMethodId));
	     $gs_data_input2939299822982['args']["cartItems"] = json_encode($this->transport->object_unset_nulls($cartItems));
	     $gs_data_input2939299822982['args']["price"] = json_encode($this->transport->object_unset_nulls($price));
	     $gs_data_input2939299822982["method"] = "isOrderPriceCorrect";
	     $gs_data_input2939299822982["interfaceName"] = "core.resturantmanager.IResturantManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Returns all the sessions which the current table can change to,
	* this means that the session that is currently active is hidden.
	*
	* @param tableId
	* @return void 
	*/

	public function payOnRoom($room, $cartItemsIds) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["room"] = json_encode($this->transport->object_unset_nulls($room));
	     $gs_data_input2939299822982['args']["cartItemsIds"] = json_encode($this->transport->object_unset_nulls($cartItemsIds));
	     $gs_data_input2939299822982["method"] = "payOnRoom";
	     $gs_data_input2939299822982["interfaceName"] = "core.resturantmanager.IResturantManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Returns all the sessions which the current table can change to,
	* this means that the session that is currently active is hidden.
	*
	* @param tableId
	* @return void 
	*/

	public function prePrint($paymentMethodId, $cartItemIds, $printerId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["paymentMethodId"] = json_encode($this->transport->object_unset_nulls($paymentMethodId));
	     $gs_data_input2939299822982['args']["cartItemIds"] = json_encode($this->transport->object_unset_nulls($cartItemIds));
	     $gs_data_input2939299822982['args']["printerId"] = json_encode($this->transport->object_unset_nulls($printerId));
	     $gs_data_input2939299822982["method"] = "prePrint";
	     $gs_data_input2939299822982["interfaceName"] = "core.resturantmanager.IResturantManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Returns all the sessions which the current table can change to,
	* this means that the session that is currently active is hidden.
	*
	* @param tableId
	* @return void 
	*/

	public function startNewReservation($start, $end, $name, $tableId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["start"] = json_encode($this->transport->object_unset_nulls($start));
	     $gs_data_input2939299822982['args']["end"] = json_encode($this->transport->object_unset_nulls($end));
	     $gs_data_input2939299822982['args']["name"] = json_encode($this->transport->object_unset_nulls($name));
	     $gs_data_input2939299822982['args']["tableId"] = json_encode($this->transport->object_unset_nulls($tableId));
	     $gs_data_input2939299822982["method"] = "startNewReservation";
	     $gs_data_input2939299822982["interfaceName"] = "core.resturantmanager.IResturantManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

}
class APISalesManager {

	var $transport;
	
	function APISalesManager($transport) {
		$this->transport = $transport;
	}

	/**
	* Manager for handling sales for getshop.
	* @return core_salesmanager_SalesCustomer[] 
	*/

	public function findCustomer($key, $type) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["key"] = json_encode($this->transport->object_unset_nulls($key));
	     $gs_data_input2939299822982['args']["type"] = json_encode($this->transport->object_unset_nulls($type));
	     $gs_data_input2939299822982["method"] = "findCustomer";
	     $gs_data_input2939299822982["interfaceName"] = "core.sales.ISalesManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Manager for handling sales for getshop.
	* @return core_salesmanager_SalesCustomer 
	*/

	public function getCustomer($orgId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["orgId"] = json_encode($this->transport->object_unset_nulls($orgId));
	     $gs_data_input2939299822982["method"] = "getCustomer";
	     $gs_data_input2939299822982["interfaceName"] = "core.sales.ISalesManager";
	     return $this->transport->cast(new core_salesmanager_SalesCustomer(), $this->transport->sendMessage($gs_data_input2939299822982));
	}

	/**
	* Manager for handling sales for getshop.
	* @return core_salesmanager_SalesEvent 
	*/

	public function getEvent($eventId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["eventId"] = json_encode($this->transport->object_unset_nulls($eventId));
	     $gs_data_input2939299822982["method"] = "getEvent";
	     $gs_data_input2939299822982["interfaceName"] = "core.sales.ISalesManager";
	     return $this->transport->cast(new core_salesmanager_SalesEvent(), $this->transport->sendMessage($gs_data_input2939299822982));
	}

	/**
	* Manager for handling sales for getshop.
	* @return core_salesmanager_SalesEvent[] 
	*/

	public function getEventsForCustomer($orgId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["orgId"] = json_encode($this->transport->object_unset_nulls($orgId));
	     $gs_data_input2939299822982["method"] = "getEventsForCustomer";
	     $gs_data_input2939299822982["interfaceName"] = "core.sales.ISalesManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Manager for handling sales for getshop.
	* @return core_salesmanager_SalesEvent[] 
	*/

	public function getEventsForDay($day) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["day"] = json_encode($this->transport->object_unset_nulls($day));
	     $gs_data_input2939299822982["method"] = "getEventsForDay";
	     $gs_data_input2939299822982["interfaceName"] = "core.sales.ISalesManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Manager for handling sales for getshop.
	* @return core_salesmanager_SalesCustomer 
	*/

	public function getLatestCustomer() {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982["method"] = "getLatestCustomer";
	     $gs_data_input2939299822982["interfaceName"] = "core.sales.ISalesManager";
	     return $this->transport->cast(new core_salesmanager_SalesCustomer(), $this->transport->sendMessage($gs_data_input2939299822982));
	}

	/**
	* Manager for handling sales for getshop.
	* @return core_salesmanager_SalesEvent 
	*/

	public function getLatestEvent() {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982["method"] = "getLatestEvent";
	     $gs_data_input2939299822982["interfaceName"] = "core.sales.ISalesManager";
	     return $this->transport->cast(new core_salesmanager_SalesEvent(), $this->transport->sendMessage($gs_data_input2939299822982));
	}

	/**
	* Manager for handling sales for getshop.
	* @return void 
	*/

	public function saveCustomer($customer) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["customer"] = json_encode($this->transport->object_unset_nulls($customer));
	     $gs_data_input2939299822982["method"] = "saveCustomer";
	     $gs_data_input2939299822982["interfaceName"] = "core.sales.ISalesManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Manager for handling sales for getshop.
	* @return void 
	*/

	public function saveEvent($event) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["event"] = json_encode($this->transport->object_unset_nulls($event));
	     $gs_data_input2939299822982["method"] = "saveEvent";
	     $gs_data_input2939299822982["interfaceName"] = "core.sales.ISalesManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

}
class APIScormManager {

	var $transport;
	
	function APIScormManager($transport) {
		$this->transport = $transport;
	}

	/**
	*
	* @author ktonder
	* @return void 
	*/

	public function deleteScormPackage($packageId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["packageId"] = json_encode($this->transport->object_unset_nulls($packageId));
	     $gs_data_input2939299822982["method"] = "deleteScormPackage";
	     $gs_data_input2939299822982["interfaceName"] = "core.scormmanager.IScormManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	*
	* @author ktonder
	* @return core_scormmanager_ScormPackage[] 
	*/

	public function getAllPackages() {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982["method"] = "getAllPackages";
	     $gs_data_input2939299822982["interfaceName"] = "core.scormmanager.IScormManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	*
	* @author ktonder
	* @return core_scormmanager_ScormPackage[] 
	*/

	public function getMandatoryPackages($userId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["userId"] = json_encode($this->transport->object_unset_nulls($userId));
	     $gs_data_input2939299822982["method"] = "getMandatoryPackages";
	     $gs_data_input2939299822982["interfaceName"] = "core.scormmanager.IScormManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	*
	* @author ktonder
	* @return core_scormmanager_Scorm[] 
	*/

	public function getMyScorm($userId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["userId"] = json_encode($this->transport->object_unset_nulls($userId));
	     $gs_data_input2939299822982["method"] = "getMyScorm";
	     $gs_data_input2939299822982["interfaceName"] = "core.scormmanager.IScormManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	*
	* @author ktonder
	* @return core_scormmanager_ScormPackage 
	*/

	public function getPackage($packageId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["packageId"] = json_encode($this->transport->object_unset_nulls($packageId));
	     $gs_data_input2939299822982["method"] = "getPackage";
	     $gs_data_input2939299822982["interfaceName"] = "core.scormmanager.IScormManager";
	     return $this->transport->cast(new core_scormmanager_ScormPackage(), $this->transport->sendMessage($gs_data_input2939299822982));
	}

	/**
	*
	* @author ktonder
	* @return core_scormmanager_ScormCertificateContent 
	*/

	public function getScormCertificateContent($id) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["id"] = json_encode($this->transport->object_unset_nulls($id));
	     $gs_data_input2939299822982["method"] = "getScormCertificateContent";
	     $gs_data_input2939299822982["interfaceName"] = "core.scormmanager.IScormManager";
	     return $this->transport->cast(new core_scormmanager_ScormCertificateContent(), $this->transport->sendMessage($gs_data_input2939299822982));
	}

	/**
	*
	* @author ktonder
	* @return core_scormmanager_Scorm 
	*/

	public function getScormForCurrentUser($scormId, $userId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["scormId"] = json_encode($this->transport->object_unset_nulls($scormId));
	     $gs_data_input2939299822982['args']["userId"] = json_encode($this->transport->object_unset_nulls($userId));
	     $gs_data_input2939299822982["method"] = "getScormForCurrentUser";
	     $gs_data_input2939299822982["interfaceName"] = "core.scormmanager.IScormManager";
	     return $this->transport->cast(new core_scormmanager_Scorm(), $this->transport->sendMessage($gs_data_input2939299822982));
	}

	/**
	*
	* @author ktonder
	* @return boolean 
	*/

	public function needUpdate($username, $scormid, $isCompleted, $isPassed, $isFailed) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["username"] = json_encode($this->transport->object_unset_nulls($username));
	     $gs_data_input2939299822982['args']["scormid"] = json_encode($this->transport->object_unset_nulls($scormid));
	     $gs_data_input2939299822982['args']["isCompleted"] = json_encode($this->transport->object_unset_nulls($isCompleted));
	     $gs_data_input2939299822982['args']["isPassed"] = json_encode($this->transport->object_unset_nulls($isPassed));
	     $gs_data_input2939299822982['args']["isFailed"] = json_encode($this->transport->object_unset_nulls($isFailed));
	     $gs_data_input2939299822982["method"] = "needUpdate";
	     $gs_data_input2939299822982["interfaceName"] = "core.scormmanager.IScormManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	*
	* @author ktonder
	* @return void 
	*/

	public function saveScormCertificateContent($content) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["content"] = json_encode($this->transport->object_unset_nulls($content));
	     $gs_data_input2939299822982["method"] = "saveScormCertificateContent";
	     $gs_data_input2939299822982["interfaceName"] = "core.scormmanager.IScormManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	*
	* @author ktonder
	* @return void 
	*/

	public function saveSetup($scormPackage) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["scormPackage"] = json_encode($this->transport->object_unset_nulls($scormPackage));
	     $gs_data_input2939299822982["method"] = "saveSetup";
	     $gs_data_input2939299822982["interfaceName"] = "core.scormmanager.IScormManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	*
	* @author ktonder
	* @return void 
	*/

	public function syncMoodle() {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982["method"] = "syncMoodle";
	     $gs_data_input2939299822982["interfaceName"] = "core.scormmanager.IScormManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	*
	* @author ktonder
	* @return void 
	*/

	public function updateResult($scorm) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["scorm"] = json_encode($this->transport->object_unset_nulls($scorm));
	     $gs_data_input2939299822982["method"] = "updateResult";
	     $gs_data_input2939299822982["interfaceName"] = "core.scormmanager.IScormManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

}
class APISearchManager {

	var $transport;
	
	function APISearchManager($transport) {
		$this->transport = $transport;
	}

	/**
	* Search for a word.
	* Returns a map where key is the content and value is the pageId.
	* @param searchWord
	* @return public class HashMap<K,V> 
	*/

	public function search($searchWord) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["searchWord"] = json_encode($this->transport->object_unset_nulls($searchWord));
	     $gs_data_input2939299822982["method"] = "search";
	     $gs_data_input2939299822982["interfaceName"] = "core.searchmanager.ISearchManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

}
class APISedoxProductManager {

	var $transport;
	
	function APISedoxProductManager($transport) {
		$this->transport = $transport;
	}

	/**
	* Developers is simply an getshop user that is registered as an developer.
	* Active developers are administrators that has an SedoxUser with the flag
	* isActiveDeveloper = true
	*
	* @throws ErrorException
	* @return void 
	*/

	public function addCommentToUser($userId, $comment) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["userId"] = json_encode($this->transport->object_unset_nulls($userId));
	     $gs_data_input2939299822982['args']["comment"] = json_encode($this->transport->object_unset_nulls($comment));
	     $gs_data_input2939299822982["method"] = "addCommentToUser";
	     $gs_data_input2939299822982["interfaceName"] = "core.sedox.ISedoxProductManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Developers is simply an getshop user that is registered as an developer.
	* Active developers are administrators that has an SedoxUser with the flag
	* isActiveDeveloper = true
	*
	* @throws ErrorException
	* @return void 
	*/

	public function addCreditToSlave($slaveId, $amount) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["slaveId"] = json_encode($this->transport->object_unset_nulls($slaveId));
	     $gs_data_input2939299822982['args']["amount"] = json_encode($this->transport->object_unset_nulls($amount));
	     $gs_data_input2939299822982["method"] = "addCreditToSlave";
	     $gs_data_input2939299822982["interfaceName"] = "core.sedox.ISedoxProductManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Return the products created by days back.
	* day = 0 // Means that it will returns the list of todays files
	* day = 1 // Means that it will returns the list of yesterdays files
	*
	* @param day
	* @throws ErrorException
	* @return void 
	*/

	public function addFileToProduct($base64EncodedFile, $fileName, $fileType, $productId, $options) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["base64EncodedFile"] = json_encode($this->transport->object_unset_nulls($base64EncodedFile));
	     $gs_data_input2939299822982['args']["fileName"] = json_encode($this->transport->object_unset_nulls($fileName));
	     $gs_data_input2939299822982['args']["fileType"] = json_encode($this->transport->object_unset_nulls($fileType));
	     $gs_data_input2939299822982['args']["productId"] = json_encode($this->transport->object_unset_nulls($productId));
	     $gs_data_input2939299822982['args']["options"] = json_encode($this->transport->object_unset_nulls($options));
	     $gs_data_input2939299822982["method"] = "addFileToProduct";
	     $gs_data_input2939299822982["interfaceName"] = "core.sedox.ISedoxProductManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Return the products created by days back.
	* day = 0 // Means that it will returns the list of todays files
	* day = 1 // Means that it will returns the list of yesterdays files
	*
	* @param day
	* @throws ErrorException
	* @return void 
	*/

	public function addFileToProductAsync($sedoxBinaryFile, $fileType, $fileName, $productId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["sedoxBinaryFile"] = json_encode($this->transport->object_unset_nulls($sedoxBinaryFile));
	     $gs_data_input2939299822982['args']["fileType"] = json_encode($this->transport->object_unset_nulls($fileType));
	     $gs_data_input2939299822982['args']["fileName"] = json_encode($this->transport->object_unset_nulls($fileName));
	     $gs_data_input2939299822982['args']["productId"] = json_encode($this->transport->object_unset_nulls($productId));
	     $gs_data_input2939299822982["method"] = "addFileToProductAsync";
	     $gs_data_input2939299822982["interfaceName"] = "core.sedox.ISedoxProductManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Developers is simply an getshop user that is registered as an developer.
	* Active developers are administrators that has an SedoxUser with the flag
	* isActiveDeveloper = true
	*
	* @throws ErrorException
	* @return void 
	*/

	public function addReference($productId, $reference) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["productId"] = json_encode($this->transport->object_unset_nulls($productId));
	     $gs_data_input2939299822982['args']["reference"] = json_encode($this->transport->object_unset_nulls($reference));
	     $gs_data_input2939299822982["method"] = "addReference";
	     $gs_data_input2939299822982["interfaceName"] = "core.sedox.ISedoxProductManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Developers is simply an getshop user that is registered as an developer.
	* Active developers are administrators that has an SedoxUser with the flag
	* isActiveDeveloper = true
	*
	* @throws ErrorException
	* @return void 
	*/

	public function addSlaveToUser($masterUserId, $slaveUserId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["masterUserId"] = json_encode($this->transport->object_unset_nulls($masterUserId));
	     $gs_data_input2939299822982['args']["slaveUserId"] = json_encode($this->transport->object_unset_nulls($slaveUserId));
	     $gs_data_input2939299822982["method"] = "addSlaveToUser";
	     $gs_data_input2939299822982["interfaceName"] = "core.sedox.ISedoxProductManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Return the products created by days back.
	* day = 0 // Means that it will returns the list of todays files
	* day = 1 // Means that it will returns the list of yesterdays files
	*
	* @param day
	* @throws ErrorException
	* @return void 
	*/

	public function addUserCredit($id, $description, $amount) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["id"] = json_encode($this->transport->object_unset_nulls($id));
	     $gs_data_input2939299822982['args']["description"] = json_encode($this->transport->object_unset_nulls($description));
	     $gs_data_input2939299822982['args']["amount"] = json_encode($this->transport->object_unset_nulls($amount));
	     $gs_data_input2939299822982["method"] = "addUserCredit";
	     $gs_data_input2939299822982["interfaceName"] = "core.sedox.ISedoxProductManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* This will disable/enable the developer. Useful if a developer goes on vacation
	* or needs an hour sleep.
	* @return void 
	*/

	public function changeDeveloperStatus($userId, $disabled) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["userId"] = json_encode($this->transport->object_unset_nulls($userId));
	     $gs_data_input2939299822982['args']["disabled"] = json_encode($this->transport->object_unset_nulls($disabled));
	     $gs_data_input2939299822982["method"] = "changeDeveloperStatus";
	     $gs_data_input2939299822982["interfaceName"] = "core.sedox.ISedoxProductManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Developers is simply an getshop user that is registered as an developer.
	* Active developers are administrators that has an SedoxUser with the flag
	* isActiveDeveloper = true
	*
	* @throws ErrorException
	* @return void 
	*/

	public function clearManager() {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982["method"] = "clearManager";
	     $gs_data_input2939299822982["interfaceName"] = "core.sedox.ISedoxProductManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Return the products created by days back.
	* day = 0 // Means that it will returns the list of todays files
	* day = 1 // Means that it will returns the list of yesterdays files
	*
	* @param day
	* @throws ErrorException
	* @return void 
	*/

	public function createSedoxProduct($sedoxProduct, $base64encodedOriginalFile, $originalFileName, $forSlaveId, $origin, $comment, $useCredit, $options, $reference) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["sedoxProduct"] = json_encode($this->transport->object_unset_nulls($sedoxProduct));
	     $gs_data_input2939299822982['args']["base64encodedOriginalFile"] = json_encode($this->transport->object_unset_nulls($base64encodedOriginalFile));
	     $gs_data_input2939299822982['args']["originalFileName"] = json_encode($this->transport->object_unset_nulls($originalFileName));
	     $gs_data_input2939299822982['args']["forSlaveId"] = json_encode($this->transport->object_unset_nulls($forSlaveId));
	     $gs_data_input2939299822982['args']["origin"] = json_encode($this->transport->object_unset_nulls($origin));
	     $gs_data_input2939299822982['args']["comment"] = json_encode($this->transport->object_unset_nulls($comment));
	     $gs_data_input2939299822982['args']["useCredit"] = json_encode($this->transport->object_unset_nulls($useCredit));
	     $gs_data_input2939299822982['args']["options"] = json_encode($this->transport->object_unset_nulls($options));
	     $gs_data_input2939299822982['args']["reference"] = json_encode($this->transport->object_unset_nulls($reference));
	     $gs_data_input2939299822982["method"] = "createSedoxProduct";
	     $gs_data_input2939299822982["interfaceName"] = "core.sedox.ISedoxProductManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Return the products created by days back.
	* day = 0 // Means that it will returns the list of todays files
	* day = 1 // Means that it will returns the list of yesterdays files
	*
	* @param day
	* @throws ErrorException
	* @return void 
	*/

	public function finishUpload($forSlaveId, $sharedProduct, $useCredit, $comment, $originalFile, $cmdEncryptedFile, $options, $base64EncodeString, $originalFileName, $origin, $fromUserId, $referenceId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["forSlaveId"] = json_encode($this->transport->object_unset_nulls($forSlaveId));
	     $gs_data_input2939299822982['args']["sharedProduct"] = json_encode($this->transport->object_unset_nulls($sharedProduct));
	     $gs_data_input2939299822982['args']["useCredit"] = json_encode($this->transport->object_unset_nulls($useCredit));
	     $gs_data_input2939299822982['args']["comment"] = json_encode($this->transport->object_unset_nulls($comment));
	     $gs_data_input2939299822982['args']["originalFile"] = json_encode($this->transport->object_unset_nulls($originalFile));
	     $gs_data_input2939299822982['args']["cmdEncryptedFile"] = json_encode($this->transport->object_unset_nulls($cmdEncryptedFile));
	     $gs_data_input2939299822982['args']["options"] = json_encode($this->transport->object_unset_nulls($options));
	     $gs_data_input2939299822982['args']["base64EncodeString"] = json_encode($this->transport->object_unset_nulls($base64EncodeString));
	     $gs_data_input2939299822982['args']["originalFileName"] = json_encode($this->transport->object_unset_nulls($originalFileName));
	     $gs_data_input2939299822982['args']["origin"] = json_encode($this->transport->object_unset_nulls($origin));
	     $gs_data_input2939299822982['args']["fromUserId"] = json_encode($this->transport->object_unset_nulls($fromUserId));
	     $gs_data_input2939299822982['args']["referenceId"] = json_encode($this->transport->object_unset_nulls($referenceId));
	     $gs_data_input2939299822982["method"] = "finishUpload";
	     $gs_data_input2939299822982["interfaceName"] = "core.sedox.ISedoxProductManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Developers is simply an getshop user that is registered as an developer.
	* Active developers are administrators that has an SedoxUser with the flag
	* isActiveDeveloper = true
	*
	* @throws ErrorException
	* @return core_usermanager_data_User[] 
	*/

	public function getAllUsers() {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982["method"] = "getAllUsers";
	     $gs_data_input2939299822982["interfaceName"] = "core.sedox.ISedoxProductManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	*
	* @author ktonder
	* @return core_listmanager_data_TreeNode[] 
	*/

	public function getAllUsersAsTreeNodes() {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982["method"] = "getAllUsersAsTreeNodes";
	     $gs_data_input2939299822982["interfaceName"] = "core.sedox.ISedoxProductManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	*
	* @author ktonder
	* @return core_sedox_SedoxUser[] 
	*/

	public function getAllUsersWithNegativeCreditLimit() {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982["method"] = "getAllUsersWithNegativeCreditLimit";
	     $gs_data_input2939299822982["interfaceName"] = "core.sedox.ISedoxProductManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Developers is simply an getshop user that is registered as an developer.
	* Active developers are administrators that has an SedoxUser with the flag
	* isActiveDeveloper = true
	*
	* @throws ErrorException
	* @return core_sedox_SedoxCreditHistory[] 
	*/

	public function getCurrentUserCreditHistory($filterData) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["filterData"] = json_encode($this->transport->object_unset_nulls($filterData));
	     $gs_data_input2939299822982["method"] = "getCurrentUserCreditHistory";
	     $gs_data_input2939299822982["interfaceName"] = "core.sedox.ISedoxProductManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Developers is simply an getshop user that is registered as an developer.
	* Active developers are administrators that has an SedoxUser with the flag
	* isActiveDeveloper = true
	*
	* @throws ErrorException
	* @return int 
	*/

	public function getCurrentUserCreditHistoryCount($filterData) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["filterData"] = json_encode($this->transport->object_unset_nulls($filterData));
	     $gs_data_input2939299822982["method"] = "getCurrentUserCreditHistoryCount";
	     $gs_data_input2939299822982["interfaceName"] = "core.sedox.ISedoxProductManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Developers is simply an getshop user that is registered as an developer.
	* Active developers are administrators that has an SedoxUser with the flag
	* isActiveDeveloper = true
	*
	* @throws ErrorException
	* @return core_sedox_SedoxUser[] 
	*/

	public function getDevelopers() {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982["method"] = "getDevelopers";
	     $gs_data_input2939299822982["interfaceName"] = "core.sedox.ISedoxProductManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Developers is simply an getshop user that is registered as an developer.
	* Active developers are administrators that has an SedoxUser with the flag
	* isActiveDeveloper = true
	*
	* @throws ErrorException
	* @return String 
	*/

	public function getExtraInformationForFile($productId, $fileId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["productId"] = json_encode($this->transport->object_unset_nulls($productId));
	     $gs_data_input2939299822982['args']["fileId"] = json_encode($this->transport->object_unset_nulls($fileId));
	     $gs_data_input2939299822982["method"] = "getExtraInformationForFile";
	     $gs_data_input2939299822982["interfaceName"] = "core.sedox.ISedoxProductManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Developers is simply an getshop user that is registered as an developer.
	* Active developers are administrators that has an SedoxUser with the flag
	* isActiveDeveloper = true
	*
	* @throws ErrorException
	* @return int 
	*/

	public function getFileNotProcessedToDayCount($daysBack) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["daysBack"] = json_encode($this->transport->object_unset_nulls($daysBack));
	     $gs_data_input2939299822982["method"] = "getFileNotProcessedToDayCount";
	     $gs_data_input2939299822982["interfaceName"] = "core.sedox.ISedoxProductManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Developers is simply an getshop user that is registered as an developer.
	* Active developers are administrators that has an SedoxUser with the flag
	* isActiveDeveloper = true
	*
	* @throws ErrorException
	* @return core_sedox_SedoxProduct[] 
	*/

	public function getLatestProductsList($count) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["count"] = json_encode($this->transport->object_unset_nulls($count));
	     $gs_data_input2939299822982["method"] = "getLatestProductsList";
	     $gs_data_input2939299822982["interfaceName"] = "core.sedox.ISedoxProductManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Return the products created by days back.
	* day = 0 // Means that it will returns the list of todays files
	* day = 1 // Means that it will returns the list of yesterdays files
	*
	* @param day
	* @throws ErrorException
	* @return int 
	*/

	public function getNextFileId() {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982["method"] = "getNextFileId";
	     $gs_data_input2939299822982["interfaceName"] = "core.sedox.ISedoxProductManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Developers is simply an getshop user that is registered as an developer.
	* Active developers are administrators that has an SedoxUser with the flag
	* isActiveDeveloper = true
	*
	* @throws ErrorException
	* @return core_sedox_SedoxOrder[] 
	*/

	public function getOrders($filterData) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["filterData"] = json_encode($this->transport->object_unset_nulls($filterData));
	     $gs_data_input2939299822982["method"] = "getOrders";
	     $gs_data_input2939299822982["interfaceName"] = "core.sedox.ISedoxProductManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Developers is simply an getshop user that is registered as an developer.
	* Active developers are administrators that has an SedoxUser with the flag
	* isActiveDeveloper = true
	*
	* @throws ErrorException
	* @return int 
	*/

	public function getOrdersPageCount($filterData) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["filterData"] = json_encode($this->transport->object_unset_nulls($filterData));
	     $gs_data_input2939299822982["method"] = "getOrdersPageCount";
	     $gs_data_input2939299822982["interfaceName"] = "core.sedox.ISedoxProductManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Developers is simply an getshop user that is registered as an developer.
	* Active developers are administrators that has an SedoxUser with the flag
	* isActiveDeveloper = true
	*
	* @throws ErrorException
	* @return Double 
	*/

	public function getPriceForProduct($productId, $files) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["productId"] = json_encode($this->transport->object_unset_nulls($productId));
	     $gs_data_input2939299822982['args']["files"] = json_encode($this->transport->object_unset_nulls($files));
	     $gs_data_input2939299822982["method"] = "getPriceForProduct";
	     $gs_data_input2939299822982["interfaceName"] = "core.sedox.ISedoxProductManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Return the products created by days back.
	* day = 0 // Means that it will returns the list of todays files
	* day = 1 // Means that it will returns the list of yesterdays files
	*
	* @param day
	* @throws ErrorException
	* @return core_sedox_SedoxProduct 
	*/

	public function getProductById($id) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["id"] = json_encode($this->transport->object_unset_nulls($id));
	     $gs_data_input2939299822982["method"] = "getProductById";
	     $gs_data_input2939299822982["interfaceName"] = "core.sedox.ISedoxProductManager";
	     return $this->transport->cast(new core_sedox_SedoxProduct(), $this->transport->sendMessage($gs_data_input2939299822982));
	}

	/**
	* Developers is simply an getshop user that is registered as an developer.
	* Active developers are administrators that has an SedoxUser with the flag
	* isActiveDeveloper = true
	*
	* @throws ErrorException
	* @return String[] 
	*/

	public function getProductIds() {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982["method"] = "getProductIds";
	     $gs_data_input2939299822982["interfaceName"] = "core.sedox.ISedoxProductManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Return the products created by days back.
	* day = 0 // Means that it will returns the list of todays files
	* day = 1 // Means that it will returns the list of yesterdays files
	*
	* @param day
	* @throws ErrorException
	* @return core_sedox_SedoxProduct[] 
	*/

	public function getProductsByDaysBack($day) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["day"] = json_encode($this->transport->object_unset_nulls($day));
	     $gs_data_input2939299822982["method"] = "getProductsByDaysBack";
	     $gs_data_input2939299822982["interfaceName"] = "core.sedox.ISedoxProductManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	*
	* @author ktonder
	* @return core_sedox_SedoxProduct[] 
	*/

	public function getProductsFirstUploadedByCurrentUser($filterData) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["filterData"] = json_encode($this->transport->object_unset_nulls($filterData));
	     $gs_data_input2939299822982["method"] = "getProductsFirstUploadedByCurrentUser";
	     $gs_data_input2939299822982["interfaceName"] = "core.sedox.ISedoxProductManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	*
	* @author ktonder
	* @return int 
	*/

	public function getProductsFirstUploadedByCurrentUserTotalPages($filterData) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["filterData"] = json_encode($this->transport->object_unset_nulls($filterData));
	     $gs_data_input2939299822982["method"] = "getProductsFirstUploadedByCurrentUserTotalPages";
	     $gs_data_input2939299822982["interfaceName"] = "core.sedox.ISedoxProductManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Return the products created by days back.
	* day = 0 // Means that it will returns the list of todays files
	* day = 1 // Means that it will returns the list of yesterdays files
	*
	* @param day
	* @throws ErrorException
	* @return core_sedox_SedoxSharedProduct 
	*/

	public function getSedoxProductByMd5Sum($md5sum) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["md5sum"] = json_encode($this->transport->object_unset_nulls($md5sum));
	     $gs_data_input2939299822982["method"] = "getSedoxProductByMd5Sum";
	     $gs_data_input2939299822982["interfaceName"] = "core.sedox.ISedoxProductManager";
	     return $this->transport->cast(new core_sedox_SedoxSharedProduct(), $this->transport->sendMessage($gs_data_input2939299822982));
	}

	/**
	*
	* @author ktonder
	* @return core_sedox_SedoxUser 
	*/

	public function getSedoxUserAccount() {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982["method"] = "getSedoxUserAccount";
	     $gs_data_input2939299822982["interfaceName"] = "core.sedox.ISedoxProductManager";
	     return $this->transport->cast(new core_sedox_SedoxUser(), $this->transport->sendMessage($gs_data_input2939299822982));
	}

	/**
	*
	* @author ktonder
	* @return core_sedox_SedoxUser 
	*/

	public function getSedoxUserAccountById($userid) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["userid"] = json_encode($this->transport->object_unset_nulls($userid));
	     $gs_data_input2939299822982["method"] = "getSedoxUserAccountById";
	     $gs_data_input2939299822982["interfaceName"] = "core.sedox.ISedoxProductManager";
	     return $this->transport->cast(new core_sedox_SedoxUser(), $this->transport->sendMessage($gs_data_input2939299822982));
	}

	/**
	* Return the products created by days back.
	* day = 0 // Means that it will returns the list of todays files
	* day = 1 // Means that it will returns the list of yesterdays files
	*
	* @param day
	* @throws ErrorException
	* @return core_sedox_SedoxSharedProduct 
	*/

	public function getSharedProductById($id) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["id"] = json_encode($this->transport->object_unset_nulls($id));
	     $gs_data_input2939299822982["method"] = "getSharedProductById";
	     $gs_data_input2939299822982["interfaceName"] = "core.sedox.ISedoxProductManager";
	     return $this->transport->cast(new core_sedox_SedoxSharedProduct(), $this->transport->sendMessage($gs_data_input2939299822982));
	}

	/**
	* Developers is simply an getshop user that is registered as an developer.
	* Active developers are administrators that has an SedoxUser with the flag
	* isActiveDeveloper = true
	*
	* @throws ErrorException
	* @return core_sedox_SedoxUser[] 
	*/

	public function getSlaves($masterUserId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["masterUserId"] = json_encode($this->transport->object_unset_nulls($masterUserId));
	     $gs_data_input2939299822982["method"] = "getSlaves";
	     $gs_data_input2939299822982["interfaceName"] = "core.sedox.ISedoxProductManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Developers is simply an getshop user that is registered as an developer.
	* Active developers are administrators that has an SedoxUser with the flag
	* isActiveDeveloper = true
	*
	* @throws ErrorException
	* @return core_sedox_SedoxProductStatistic[] 
	*/

	public function getStatistic() {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982["method"] = "getStatistic";
	     $gs_data_input2939299822982["interfaceName"] = "core.sedox.ISedoxProductManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Developers is simply an getshop user that is registered as an developer.
	* Active developers are administrators that has an SedoxUser with the flag
	* isActiveDeveloper = true
	*
	* @throws ErrorException
	* @return core_sedox_SedoxFileHistory[] 
	*/

	public function getUploadHistory() {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982["method"] = "getUploadHistory";
	     $gs_data_input2939299822982["interfaceName"] = "core.sedox.ISedoxProductManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Developers is simply an getshop user that is registered as an developer.
	* Active developers are administrators that has an SedoxUser with the flag
	* isActiveDeveloper = true
	*
	* @throws ErrorException
	* @return Long 
	*/

	public function getUserFileDownloadCount() {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982["method"] = "getUserFileDownloadCount";
	     $gs_data_input2939299822982["interfaceName"] = "core.sedox.ISedoxProductManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Developers is simply an getshop user that is registered as an developer.
	* Active developers are administrators that has an SedoxUser with the flag
	* isActiveDeveloper = true
	*
	* @throws ErrorException
	* @return Long 
	*/

	public function getUserFileUploadCount() {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982["method"] = "getUserFileUploadCount";
	     $gs_data_input2939299822982["interfaceName"] = "core.sedox.ISedoxProductManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Developers is simply an getshop user that is registered as an developer.
	* Active developers are administrators that has an SedoxUser with the flag
	* isActiveDeveloper = true
	*
	* @throws ErrorException
	* @return void 
	*/

	public function invokeCreditUpdate() {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982["method"] = "invokeCreditUpdate";
	     $gs_data_input2939299822982["interfaceName"] = "core.sedox.ISedoxProductManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Return the products created by days back.
	* day = 0 // Means that it will returns the list of todays files
	* day = 1 // Means that it will returns the list of yesterdays files
	*
	* @param day
	* @throws ErrorException
	* @return core_usermanager_data_User 
	*/

	public function login($emailAddress, $password) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["emailAddress"] = json_encode($this->transport->object_unset_nulls($emailAddress));
	     $gs_data_input2939299822982['args']["password"] = json_encode($this->transport->object_unset_nulls($password));
	     $gs_data_input2939299822982["method"] = "login";
	     $gs_data_input2939299822982["interfaceName"] = "core.sedox.ISedoxProductManager";
	     return $this->transport->cast(new core_usermanager_data_User(), $this->transport->sendMessage($gs_data_input2939299822982));
	}

	/**
	* Developers is simply an getshop user that is registered as an developer.
	* Active developers are administrators that has an SedoxUser with the flag
	* isActiveDeveloper = true
	*
	* @throws ErrorException
	* @return void 
	*/

	public function markAsFinished($productId, $finished) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["productId"] = json_encode($this->transport->object_unset_nulls($productId));
	     $gs_data_input2939299822982['args']["finished"] = json_encode($this->transport->object_unset_nulls($finished));
	     $gs_data_input2939299822982["method"] = "markAsFinished";
	     $gs_data_input2939299822982["interfaceName"] = "core.sedox.ISedoxProductManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Return the products created by days back.
	* day = 0 // Means that it will returns the list of todays files
	* day = 1 // Means that it will returns the list of yesterdays files
	*
	* @param day
	* @throws ErrorException
	* @return void 
	*/

	public function notifyForCustomer($productId, $extraText) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["productId"] = json_encode($this->transport->object_unset_nulls($productId));
	     $gs_data_input2939299822982['args']["extraText"] = json_encode($this->transport->object_unset_nulls($extraText));
	     $gs_data_input2939299822982["method"] = "notifyForCustomer";
	     $gs_data_input2939299822982["interfaceName"] = "core.sedox.ISedoxProductManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Return the products created by days back.
	* day = 0 // Means that it will returns the list of todays files
	* day = 1 // Means that it will returns the list of yesterdays files
	*
	* @param day
	* @throws ErrorException
	* @return core_sedox_SedoxOrder 
	*/

	public function purchaseOnlyForCustomer($productId, $files) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["productId"] = json_encode($this->transport->object_unset_nulls($productId));
	     $gs_data_input2939299822982['args']["files"] = json_encode($this->transport->object_unset_nulls($files));
	     $gs_data_input2939299822982["method"] = "purchaseOnlyForCustomer";
	     $gs_data_input2939299822982["interfaceName"] = "core.sedox.ISedoxProductManager";
	     return $this->transport->cast(new core_sedox_SedoxOrder(), $this->transport->sendMessage($gs_data_input2939299822982));
	}

	/**
	* Return the products created by days back.
	* day = 0 // Means that it will returns the list of todays files
	* day = 1 // Means that it will returns the list of yesterdays files
	*
	* @param day
	* @throws ErrorException
	* @return String 
	*/

	public function purchaseProduct($productId, $files) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["productId"] = json_encode($this->transport->object_unset_nulls($productId));
	     $gs_data_input2939299822982['args']["files"] = json_encode($this->transport->object_unset_nulls($files));
	     $gs_data_input2939299822982["method"] = "purchaseProduct";
	     $gs_data_input2939299822982["interfaceName"] = "core.sedox.ISedoxProductManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Developers is simply an getshop user that is registered as an developer.
	* Active developers are administrators that has an SedoxUser with the flag
	* isActiveDeveloper = true
	*
	* @throws ErrorException
	* @return void 
	*/

	public function refreshEvcCredit() {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982["method"] = "refreshEvcCredit";
	     $gs_data_input2939299822982["interfaceName"] = "core.sedox.ISedoxProductManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Developers is simply an getshop user that is registered as an developer.
	* Active developers are administrators that has an SedoxUser with the flag
	* isActiveDeveloper = true
	*
	* @throws ErrorException
	* @return void 
	*/

	public function removeBinaryFileFromProduct($productId, $fileId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["productId"] = json_encode($this->transport->object_unset_nulls($productId));
	     $gs_data_input2939299822982['args']["fileId"] = json_encode($this->transport->object_unset_nulls($fileId));
	     $gs_data_input2939299822982["method"] = "removeBinaryFileFromProduct";
	     $gs_data_input2939299822982["interfaceName"] = "core.sedox.ISedoxProductManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Developers is simply an getshop user that is registered as an developer.
	* Active developers are administrators that has an SedoxUser with the flag
	* isActiveDeveloper = true
	*
	* @throws ErrorException
	* @return void 
	*/

	public function removeSlaveFromMaster($slaveId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["slaveId"] = json_encode($this->transport->object_unset_nulls($slaveId));
	     $gs_data_input2939299822982["method"] = "removeSlaveFromMaster";
	     $gs_data_input2939299822982["interfaceName"] = "core.sedox.ISedoxProductManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Return the products created by days back.
	* day = 0 // Means that it will returns the list of todays files
	* day = 1 // Means that it will returns the list of yesterdays files
	*
	* @param day
	* @throws ErrorException
	* @return void 
	*/

	public function requestSpecialFile($productId, $comment) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["productId"] = json_encode($this->transport->object_unset_nulls($productId));
	     $gs_data_input2939299822982['args']["comment"] = json_encode($this->transport->object_unset_nulls($comment));
	     $gs_data_input2939299822982["method"] = "requestSpecialFile";
	     $gs_data_input2939299822982["interfaceName"] = "core.sedox.ISedoxProductManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	*
	* @author ktonder
	* @return core_sedox_SedoxProductSearchPage 
	*/

	public function search($search) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["search"] = json_encode($this->transport->object_unset_nulls($search));
	     $gs_data_input2939299822982["method"] = "search";
	     $gs_data_input2939299822982["interfaceName"] = "core.sedox.ISedoxProductManager";
	     return $this->transport->cast(new core_sedox_SedoxProductSearchPage(), $this->transport->sendMessage($gs_data_input2939299822982));
	}

	/**
	* Return the products created by days back.
	* day = 0 // Means that it will returns the list of todays files
	* day = 1 // Means that it will returns the list of yesterdays files
	*
	* @param day
	* @throws ErrorException
	* @return core_usermanager_data_User[] 
	*/

	public function searchForUsers($searchString) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["searchString"] = json_encode($this->transport->object_unset_nulls($searchString));
	     $gs_data_input2939299822982["method"] = "searchForUsers";
	     $gs_data_input2939299822982["interfaceName"] = "core.sedox.ISedoxProductManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	*
	* @author ktonder
	* @return core_sedox_SedoxProductSearchPage 
	*/

	public function searchUserFiles($search) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["search"] = json_encode($this->transport->object_unset_nulls($search));
	     $gs_data_input2939299822982["method"] = "searchUserFiles";
	     $gs_data_input2939299822982["interfaceName"] = "core.sedox.ISedoxProductManager";
	     return $this->transport->cast(new core_sedox_SedoxProductSearchPage(), $this->transport->sendMessage($gs_data_input2939299822982));
	}

	/**
	* Return the products created by days back.
	* day = 0 // Means that it will returns the list of todays files
	* day = 1 // Means that it will returns the list of yesterdays files
	*
	* @param day
	* @throws ErrorException
	* @return void 
	*/

	public function sendProductByMail($productId, $extraText, $files) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["productId"] = json_encode($this->transport->object_unset_nulls($productId));
	     $gs_data_input2939299822982['args']["extraText"] = json_encode($this->transport->object_unset_nulls($extraText));
	     $gs_data_input2939299822982['args']["files"] = json_encode($this->transport->object_unset_nulls($files));
	     $gs_data_input2939299822982["method"] = "sendProductByMail";
	     $gs_data_input2939299822982["interfaceName"] = "core.sedox.ISedoxProductManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Developers is simply an getshop user that is registered as an developer.
	* Active developers are administrators that has an SedoxUser with the flag
	* isActiveDeveloper = true
	*
	* @throws ErrorException
	* @return void 
	*/

	public function sendProductToDifferentEmail($productId, $emailAddress, $files, $extraText) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["productId"] = json_encode($this->transport->object_unset_nulls($productId));
	     $gs_data_input2939299822982['args']["emailAddress"] = json_encode($this->transport->object_unset_nulls($emailAddress));
	     $gs_data_input2939299822982['args']["files"] = json_encode($this->transport->object_unset_nulls($files));
	     $gs_data_input2939299822982['args']["extraText"] = json_encode($this->transport->object_unset_nulls($extraText));
	     $gs_data_input2939299822982["method"] = "sendProductToDifferentEmail";
	     $gs_data_input2939299822982["interfaceName"] = "core.sedox.ISedoxProductManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Return the products created by days back.
	* day = 0 // Means that it will returns the list of todays files
	* day = 1 // Means that it will returns the list of yesterdays files
	*
	* @param day
	* @throws ErrorException
	* @return void 
	*/

	public function setChecksum($productId, $checksum) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["productId"] = json_encode($this->transport->object_unset_nulls($productId));
	     $gs_data_input2939299822982['args']["checksum"] = json_encode($this->transport->object_unset_nulls($checksum));
	     $gs_data_input2939299822982["method"] = "setChecksum";
	     $gs_data_input2939299822982["interfaceName"] = "core.sedox.ISedoxProductManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Developers is simply an getshop user that is registered as an developer.
	* Active developers are administrators that has an SedoxUser with the flag
	* isActiveDeveloper = true
	*
	* @throws ErrorException
	* @return void 
	*/

	public function setCreditAllowedLimist($userId, $creditlimit) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["userId"] = json_encode($this->transport->object_unset_nulls($userId));
	     $gs_data_input2939299822982['args']["creditlimit"] = json_encode($this->transport->object_unset_nulls($creditlimit));
	     $gs_data_input2939299822982["method"] = "setCreditAllowedLimist";
	     $gs_data_input2939299822982["interfaceName"] = "core.sedox.ISedoxProductManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Developers is simply an getshop user that is registered as an developer.
	* Active developers are administrators that has an SedoxUser with the flag
	* isActiveDeveloper = true
	*
	* @throws ErrorException
	* @return void 
	*/

	public function setEvcId($userId, $evcId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["userId"] = json_encode($this->transport->object_unset_nulls($userId));
	     $gs_data_input2939299822982['args']["evcId"] = json_encode($this->transport->object_unset_nulls($evcId));
	     $gs_data_input2939299822982["method"] = "setEvcId";
	     $gs_data_input2939299822982["interfaceName"] = "core.sedox.ISedoxProductManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Developers is simply an getshop user that is registered as an developer.
	* Active developers are administrators that has an SedoxUser with the flag
	* isActiveDeveloper = true
	*
	* @throws ErrorException
	* @return void 
	*/

	public function setExtraInformationForFile($productId, $fileId, $text) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["productId"] = json_encode($this->transport->object_unset_nulls($productId));
	     $gs_data_input2939299822982['args']["fileId"] = json_encode($this->transport->object_unset_nulls($fileId));
	     $gs_data_input2939299822982['args']["text"] = json_encode($this->transport->object_unset_nulls($text));
	     $gs_data_input2939299822982["method"] = "setExtraInformationForFile";
	     $gs_data_input2939299822982["interfaceName"] = "core.sedox.ISedoxProductManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Developers is simply an getshop user that is registered as an developer.
	* Active developers are administrators that has an SedoxUser with the flag
	* isActiveDeveloper = true
	*
	* @throws ErrorException
	* @return void 
	*/

	public function setFixedPrice($userId, $price) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["userId"] = json_encode($this->transport->object_unset_nulls($userId));
	     $gs_data_input2939299822982['args']["price"] = json_encode($this->transport->object_unset_nulls($price));
	     $gs_data_input2939299822982["method"] = "setFixedPrice";
	     $gs_data_input2939299822982["interfaceName"] = "core.sedox.ISedoxProductManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Developers is simply an getshop user that is registered as an developer.
	* Active developers are administrators that has an SedoxUser with the flag
	* isActiveDeveloper = true
	*
	* @throws ErrorException
	* @return void 
	*/

	public function setPushoverId($pushover) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["pushover"] = json_encode($this->transport->object_unset_nulls($pushover));
	     $gs_data_input2939299822982["method"] = "setPushoverId";
	     $gs_data_input2939299822982["interfaceName"] = "core.sedox.ISedoxProductManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Developers is simply an getshop user that is registered as an developer.
	* Active developers are administrators that has an SedoxUser with the flag
	* isActiveDeveloper = true
	*
	* @throws ErrorException
	* @return void 
	*/

	public function setPushoverIdForUser($pushover, $userId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["pushover"] = json_encode($this->transport->object_unset_nulls($pushover));
	     $gs_data_input2939299822982['args']["userId"] = json_encode($this->transport->object_unset_nulls($userId));
	     $gs_data_input2939299822982["method"] = "setPushoverIdForUser";
	     $gs_data_input2939299822982["interfaceName"] = "core.sedox.ISedoxProductManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Developers is simply an getshop user that is registered as an developer.
	* Active developers are administrators that has an SedoxUser with the flag
	* isActiveDeveloper = true
	*
	* @throws ErrorException
	* @return void 
	*/

	public function setSpecialRequestsForFile($productId, $fileId, $dpf, $egr, $decat, $vmax, $adblue, $dtc, $flaps) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["productId"] = json_encode($this->transport->object_unset_nulls($productId));
	     $gs_data_input2939299822982['args']["fileId"] = json_encode($this->transport->object_unset_nulls($fileId));
	     $gs_data_input2939299822982['args']["dpf"] = json_encode($this->transport->object_unset_nulls($dpf));
	     $gs_data_input2939299822982['args']["egr"] = json_encode($this->transport->object_unset_nulls($egr));
	     $gs_data_input2939299822982['args']["decat"] = json_encode($this->transport->object_unset_nulls($decat));
	     $gs_data_input2939299822982['args']["vmax"] = json_encode($this->transport->object_unset_nulls($vmax));
	     $gs_data_input2939299822982['args']["adblue"] = json_encode($this->transport->object_unset_nulls($adblue));
	     $gs_data_input2939299822982['args']["dtc"] = json_encode($this->transport->object_unset_nulls($dtc));
	     $gs_data_input2939299822982['args']["flaps"] = json_encode($this->transport->object_unset_nulls($flaps));
	     $gs_data_input2939299822982["method"] = "setSpecialRequestsForFile";
	     $gs_data_input2939299822982["interfaceName"] = "core.sedox.ISedoxProductManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Developers is simply an getshop user that is registered as an developer.
	* Active developers are administrators that has an SedoxUser with the flag
	* isActiveDeveloper = true
	*
	* @throws ErrorException
	* @return void 
	*/

	public function setType($productId, $type) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["productId"] = json_encode($this->transport->object_unset_nulls($productId));
	     $gs_data_input2939299822982['args']["type"] = json_encode($this->transport->object_unset_nulls($type));
	     $gs_data_input2939299822982["method"] = "setType";
	     $gs_data_input2939299822982["interfaceName"] = "core.sedox.ISedoxProductManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	*
	* @author ktonder
	* @return void 
	*/

	public function sync($option) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["option"] = json_encode($this->transport->object_unset_nulls($option));
	     $gs_data_input2939299822982["method"] = "sync";
	     $gs_data_input2939299822982["interfaceName"] = "core.sedox.ISedoxProductManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Developers is simply an getshop user that is registered as an developer.
	* Active developers are administrators that has an SedoxUser with the flag
	* isActiveDeveloper = true
	*
	* @throws ErrorException
	* @return void 
	*/

	public function syncFromMagento($userId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["userId"] = json_encode($this->transport->object_unset_nulls($userId));
	     $gs_data_input2939299822982["method"] = "syncFromMagento";
	     $gs_data_input2939299822982["interfaceName"] = "core.sedox.ISedoxProductManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Developers is simply an getshop user that is registered as an developer.
	* Active developers are administrators that has an SedoxUser with the flag
	* isActiveDeveloper = true
	*
	* @throws ErrorException
	* @return void 
	*/

	public function toggleAllowNegativeCredit($userId, $allow) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["userId"] = json_encode($this->transport->object_unset_nulls($userId));
	     $gs_data_input2939299822982['args']["allow"] = json_encode($this->transport->object_unset_nulls($allow));
	     $gs_data_input2939299822982["method"] = "toggleAllowNegativeCredit";
	     $gs_data_input2939299822982["interfaceName"] = "core.sedox.ISedoxProductManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Developers is simply an getshop user that is registered as an developer.
	* Active developers are administrators that has an SedoxUser with the flag
	* isActiveDeveloper = true
	*
	* @throws ErrorException
	* @return void 
	*/

	public function toggleAllowWindowsApp($userId, $allow) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["userId"] = json_encode($this->transport->object_unset_nulls($userId));
	     $gs_data_input2939299822982['args']["allow"] = json_encode($this->transport->object_unset_nulls($allow));
	     $gs_data_input2939299822982["method"] = "toggleAllowWindowsApp";
	     $gs_data_input2939299822982["interfaceName"] = "core.sedox.ISedoxProductManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Developers is simply an getshop user that is registered as an developer.
	* Active developers are administrators that has an SedoxUser with the flag
	* isActiveDeveloper = true
	*
	* @throws ErrorException
	* @return void 
	*/

	public function toggleBadCustomer($userId, $badCustomer) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["userId"] = json_encode($this->transport->object_unset_nulls($userId));
	     $gs_data_input2939299822982['args']["badCustomer"] = json_encode($this->transport->object_unset_nulls($badCustomer));
	     $gs_data_input2939299822982["method"] = "toggleBadCustomer";
	     $gs_data_input2939299822982["interfaceName"] = "core.sedox.ISedoxProductManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Developers is simply an getshop user that is registered as an developer.
	* Active developers are administrators that has an SedoxUser with the flag
	* isActiveDeveloper = true
	*
	* @throws ErrorException
	* @return void 
	*/

	public function toggleIsNorwegian($userId, $isNorwegian) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["userId"] = json_encode($this->transport->object_unset_nulls($userId));
	     $gs_data_input2939299822982['args']["isNorwegian"] = json_encode($this->transport->object_unset_nulls($isNorwegian));
	     $gs_data_input2939299822982["method"] = "toggleIsNorwegian";
	     $gs_data_input2939299822982["interfaceName"] = "core.sedox.ISedoxProductManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Developers is simply an getshop user that is registered as an developer.
	* Active developers are administrators that has an SedoxUser with the flag
	* isActiveDeveloper = true
	*
	* @throws ErrorException
	* @return void 
	*/

	public function togglePassiveSlaveMode($userId, $toggle) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["userId"] = json_encode($this->transport->object_unset_nulls($userId));
	     $gs_data_input2939299822982['args']["toggle"] = json_encode($this->transport->object_unset_nulls($toggle));
	     $gs_data_input2939299822982["method"] = "togglePassiveSlaveMode";
	     $gs_data_input2939299822982["interfaceName"] = "core.sedox.ISedoxProductManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Developers is simply an getshop user that is registered as an developer.
	* Active developers are administrators that has an SedoxUser with the flag
	* isActiveDeveloper = true
	*
	* @throws ErrorException
	* @return void 
	*/

	public function toggleSaleableProduct($productId, $saleable) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["productId"] = json_encode($this->transport->object_unset_nulls($productId));
	     $gs_data_input2939299822982['args']["saleable"] = json_encode($this->transport->object_unset_nulls($saleable));
	     $gs_data_input2939299822982["method"] = "toggleSaleableProduct";
	     $gs_data_input2939299822982["interfaceName"] = "core.sedox.ISedoxProductManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Developers is simply an getshop user that is registered as an developer.
	* Active developers are administrators that has an SedoxUser with the flag
	* isActiveDeveloper = true
	*
	* @throws ErrorException
	* @return void 
	*/

	public function toggleStartStop($productId, $toggle) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["productId"] = json_encode($this->transport->object_unset_nulls($productId));
	     $gs_data_input2939299822982['args']["toggle"] = json_encode($this->transport->object_unset_nulls($toggle));
	     $gs_data_input2939299822982["method"] = "toggleStartStop";
	     $gs_data_input2939299822982["interfaceName"] = "core.sedox.ISedoxProductManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Developers is simply an getshop user that is registered as an developer.
	* Active developers are administrators that has an SedoxUser with the flag
	* isActiveDeveloper = true
	*
	* @throws ErrorException
	* @return void 
	*/

	public function transferCreditToSlave($slaveId, $amount) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["slaveId"] = json_encode($this->transport->object_unset_nulls($slaveId));
	     $gs_data_input2939299822982['args']["amount"] = json_encode($this->transport->object_unset_nulls($amount));
	     $gs_data_input2939299822982["method"] = "transferCreditToSlave";
	     $gs_data_input2939299822982["interfaceName"] = "core.sedox.ISedoxProductManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Developers is simply an getshop user that is registered as an developer.
	* Active developers are administrators that has an SedoxUser with the flag
	* isActiveDeveloper = true
	*
	* @throws ErrorException
	* @return void 
	*/

	public function updateEvcCreditAccounts() {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982["method"] = "updateEvcCreditAccounts";
	     $gs_data_input2939299822982["interfaceName"] = "core.sedox.ISedoxProductManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

}
class APISendRegningManager {

	var $transport;
	
	function APISendRegningManager($transport) {
		$this->transport = $transport;
	}

	/**
	*
	* @author boggi
	* @return String 
	*/

	public function sendOrder($orderId, $email) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["orderId"] = json_encode($this->transport->object_unset_nulls($orderId));
	     $gs_data_input2939299822982['args']["email"] = json_encode($this->transport->object_unset_nulls($email));
	     $gs_data_input2939299822982["method"] = "sendOrder";
	     $gs_data_input2939299822982["interfaceName"] = "core.sendregning.ISendRegningManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

}
class APISimpleEventManager {

	var $transport;
	
	function APISimpleEventManager($transport) {
		$this->transport = $transport;
	}

	/**
	*
	* @author ktonder
	* @return void 
	*/

	public function addUserToEvent($pageId, $userId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["pageId"] = json_encode($this->transport->object_unset_nulls($pageId));
	     $gs_data_input2939299822982['args']["userId"] = json_encode($this->transport->object_unset_nulls($userId));
	     $gs_data_input2939299822982["method"] = "addUserToEvent";
	     $gs_data_input2939299822982["interfaceName"] = "core.simpleeventmanager.ISimpleEventManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	*
	* @author ktonder
	* @return void 
	*/

	public function deleteEvent($eventId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["eventId"] = json_encode($this->transport->object_unset_nulls($eventId));
	     $gs_data_input2939299822982["method"] = "deleteEvent";
	     $gs_data_input2939299822982["interfaceName"] = "core.simpleeventmanager.ISimpleEventManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	*
	* @author ktonder
	* @return core_simpleeventmanager_SimpleEvent[] 
	*/

	public function getAllEvents($listPageId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["listPageId"] = json_encode($this->transport->object_unset_nulls($listPageId));
	     $gs_data_input2939299822982["method"] = "getAllEvents";
	     $gs_data_input2939299822982["interfaceName"] = "core.simpleeventmanager.ISimpleEventManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	*
	* @author ktonder
	* @return core_simpleeventmanager_SimpleEvent 
	*/

	public function getEventById($eventId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["eventId"] = json_encode($this->transport->object_unset_nulls($eventId));
	     $gs_data_input2939299822982["method"] = "getEventById";
	     $gs_data_input2939299822982["interfaceName"] = "core.simpleeventmanager.ISimpleEventManager";
	     return $this->transport->cast(new core_simpleeventmanager_SimpleEvent(), $this->transport->sendMessage($gs_data_input2939299822982));
	}

	/**
	*
	* @author ktonder
	* @return core_simpleeventmanager_SimpleEvent 
	*/

	public function getEventByPageId($pageId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["pageId"] = json_encode($this->transport->object_unset_nulls($pageId));
	     $gs_data_input2939299822982["method"] = "getEventByPageId";
	     $gs_data_input2939299822982["interfaceName"] = "core.simpleeventmanager.ISimpleEventManager";
	     return $this->transport->cast(new core_simpleeventmanager_SimpleEvent(), $this->transport->sendMessage($gs_data_input2939299822982));
	}

	/**
	*
	* @author ktonder
	* @return core_simpleeventmanager_SimpleEvent[] 
	*/

	public function getEventsInFuture($listPageId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["listPageId"] = json_encode($this->transport->object_unset_nulls($listPageId));
	     $gs_data_input2939299822982["method"] = "getEventsInFuture";
	     $gs_data_input2939299822982["interfaceName"] = "core.simpleeventmanager.ISimpleEventManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	*
	* @author ktonder
	* @return void 
	*/

	public function saveEvent($simpleEvent) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["simpleEvent"] = json_encode($this->transport->object_unset_nulls($simpleEvent));
	     $gs_data_input2939299822982["method"] = "saveEvent";
	     $gs_data_input2939299822982["interfaceName"] = "core.simpleeventmanager.ISimpleEventManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

}
class APISmsHistoryManager {

	var $transport;
	
	function APISmsHistoryManager($transport) {
		$this->transport = $transport;
	}

	/**
	* Sms historycontroller.
	* @return void 
	*/

	public function generateSmsUsage($gs_multilevel_name) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "generateSmsUsage";
	     $gs_data_input2939299822982["interfaceName"] = "core.pmsmanager.ISmsHistoryManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

}
class APIStoreApplicationInstancePool {

	var $transport;
	
	function APIStoreApplicationInstancePool($transport) {
		$this->transport = $transport;
	}

	/**
	*
	* @author ktonder
	* @return core_common_ApplicationInstance 
	*/

	public function createNewInstance($applicationId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["applicationId"] = json_encode($this->transport->object_unset_nulls($applicationId));
	     $gs_data_input2939299822982["method"] = "createNewInstance";
	     $gs_data_input2939299822982["interfaceName"] = "core.applications.IStoreApplicationInstancePool";
	     return $this->transport->cast(new core_common_ApplicationInstance(), $this->transport->sendMessage($gs_data_input2939299822982));
	}

	/**
	*
	* @author ktonder
	* @return core_common_ApplicationInstance 
	*/

	public function getApplicationInstance($applicationInstanceId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["applicationInstanceId"] = json_encode($this->transport->object_unset_nulls($applicationInstanceId));
	     $gs_data_input2939299822982["method"] = "getApplicationInstance";
	     $gs_data_input2939299822982["interfaceName"] = "core.applications.IStoreApplicationInstancePool";
	     return $this->transport->cast(new core_common_ApplicationInstance(), $this->transport->sendMessage($gs_data_input2939299822982));
	}

	/**
	*
	* @author ktonder
	* @return core_common_ApplicationInstance 
	*/

	public function getApplicationInstanceWithModule($applicationInstanceId, $moduleName) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["applicationInstanceId"] = json_encode($this->transport->object_unset_nulls($applicationInstanceId));
	     $gs_data_input2939299822982['args']["moduleName"] = json_encode($this->transport->object_unset_nulls($moduleName));
	     $gs_data_input2939299822982["method"] = "getApplicationInstanceWithModule";
	     $gs_data_input2939299822982["interfaceName"] = "core.applications.IStoreApplicationInstancePool";
	     return $this->transport->cast(new core_common_ApplicationInstance(), $this->transport->sendMessage($gs_data_input2939299822982));
	}

	/**
	*
	* @author ktonder
	* @return core_common_ApplicationInstance[] 
	*/

	public function getApplicationInstances($applicationId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["applicationId"] = json_encode($this->transport->object_unset_nulls($applicationId));
	     $gs_data_input2939299822982["method"] = "getApplicationInstances";
	     $gs_data_input2939299822982["interfaceName"] = "core.applications.IStoreApplicationInstancePool";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	*
	* @author ktonder
	* @return core_common_ApplicationInstance 
	*/

	public function setApplicationSettings($settings) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["settings"] = json_encode($this->transport->object_unset_nulls($settings));
	     $gs_data_input2939299822982["method"] = "setApplicationSettings";
	     $gs_data_input2939299822982["interfaceName"] = "core.applications.IStoreApplicationInstancePool";
	     return $this->transport->cast(new core_common_ApplicationInstance(), $this->transport->sendMessage($gs_data_input2939299822982));
	}

}
class APIStoreApplicationPool {

	var $transport;
	
	function APIStoreApplicationPool($transport) {
		$this->transport = $transport;
	}

	/**
	* Activate an application.
	*
	* @param applicationId
	* @return void 
	*/

	public function activateApplication($applicationId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["applicationId"] = json_encode($this->transport->object_unset_nulls($applicationId));
	     $gs_data_input2939299822982["method"] = "activateApplication";
	     $gs_data_input2939299822982["interfaceName"] = "core.applications.IStoreApplicationPool";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Actiave a module by a given module id.
	*
	* @param module
	* @return void 
	*/

	public function activateModule($module) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["module"] = json_encode($this->transport->object_unset_nulls($module));
	     $gs_data_input2939299822982["method"] = "activateModule";
	     $gs_data_input2939299822982["interfaceName"] = "core.applications.IStoreApplicationPool";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Actiave a module by a given module id.
	*
	* @param module
	* @return void 
	*/

	public function deactivateApplication($applicationId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["applicationId"] = json_encode($this->transport->object_unset_nulls($applicationId));
	     $gs_data_input2939299822982["method"] = "deactivateApplication";
	     $gs_data_input2939299822982["interfaceName"] = "core.applications.IStoreApplicationPool";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Returns a list of all available applications.
	*
	* @return core_appmanager_data_ApplicationModule[] 
	*/

	public function getActivatedModules() {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982["method"] = "getActivatedModules";
	     $gs_data_input2939299822982["interfaceName"] = "core.applications.IStoreApplicationPool";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Returns shipment applications.
	*
	* @return core_appmanager_data_Application[] 
	*/

	public function getActivatedPaymentApplications() {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982["method"] = "getActivatedPaymentApplications";
	     $gs_data_input2939299822982["interfaceName"] = "core.applications.IStoreApplicationPool";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Return a list of all applucation modules available
	*
	* @return core_appmanager_data_ApplicationModule[] 
	*/

	public function getAllAvailableModules() {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982["method"] = "getAllAvailableModules";
	     $gs_data_input2939299822982["interfaceName"] = "core.applications.IStoreApplicationPool";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Return an activated application by the given Id.
	*
	* @param id
	* @return core_appmanager_data_Application 
	*/

	public function getApplication($id) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["id"] = json_encode($this->transport->object_unset_nulls($id));
	     $gs_data_input2939299822982["method"] = "getApplication";
	     $gs_data_input2939299822982["interfaceName"] = "core.applications.IStoreApplicationPool";
	     return $this->transport->cast(new core_appmanager_data_Application(), $this->transport->sendMessage($gs_data_input2939299822982));
	}

	/**
	* Returns a list of all applications this store has activated.
	*
	* @return core_appmanager_data_Application[] 
	*/

	public function getApplications() {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982["method"] = "getApplications";
	     $gs_data_input2939299822982["interfaceName"] = "core.applications.IStoreApplicationPool";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Returns a list of all applications that are available for this store.
	* This also includes applications that has not yet been activated by the
	* administrator.
	*
	* @return core_appmanager_data_Application[] 
	*/

	public function getAvailableApplications() {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982["method"] = "getAvailableApplications";
	     $gs_data_input2939299822982["interfaceName"] = "core.applications.IStoreApplicationPool";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* This is a filtered list of the getAvailableApplications function.
	*
	* @return core_appmanager_data_Application[] 
	*/

	public function getAvailableApplicationsThatIsNotActivated() {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982["method"] = "getAvailableApplicationsThatIsNotActivated";
	     $gs_data_input2939299822982["interfaceName"] = "core.applications.IStoreApplicationPool";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Returns a list of all available theme applications.
	*
	* @return core_appmanager_data_Application[] 
	*/

	public function getAvailableThemeApplications() {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982["method"] = "getAvailableThemeApplications";
	     $gs_data_input2939299822982["interfaceName"] = "core.applications.IStoreApplicationPool";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Activate an application.
	*
	* @param applicationId
	* @return public class HashMap<K,V> 
	*/

	public function getPaymentSettingsApplication() {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982["method"] = "getPaymentSettingsApplication";
	     $gs_data_input2939299822982["interfaceName"] = "core.applications.IStoreApplicationPool";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Returns shipment applications.
	*
	* @return core_appmanager_data_Application[] 
	*/

	public function getShippingApplications() {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982["method"] = "getShippingApplications";
	     $gs_data_input2939299822982["interfaceName"] = "core.applications.IStoreApplicationPool";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Return the themeapplication that is currently set.
	*
	* @return core_appmanager_data_Application 
	*/

	public function getThemeApplication() {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982["method"] = "getThemeApplication";
	     $gs_data_input2939299822982["interfaceName"] = "core.applications.IStoreApplicationPool";
	     return $this->transport->cast(new core_appmanager_data_Application(), $this->transport->sendMessage($gs_data_input2939299822982));
	}

	/**
	* Returns a list of all applications this store has activated.
	*
	* @return boolean 
	*/

	public function isActivated($appId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["appId"] = json_encode($this->transport->object_unset_nulls($appId));
	     $gs_data_input2939299822982["method"] = "isActivated";
	     $gs_data_input2939299822982["interfaceName"] = "core.applications.IStoreApplicationPool";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Actiave a module by a given module id.
	*
	* @param module
	* @return void 
	*/

	public function setSetting($applicationId, $settings) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["applicationId"] = json_encode($this->transport->object_unset_nulls($applicationId));
	     $gs_data_input2939299822982['args']["settings"] = json_encode($this->transport->object_unset_nulls($settings));
	     $gs_data_input2939299822982["method"] = "setSetting";
	     $gs_data_input2939299822982["interfaceName"] = "core.applications.IStoreApplicationPool";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Use this function to change or set the theme application you wish to use.
	*
	* @param applicationId
	* @return void 
	*/

	public function setThemeApplication($applicationId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["applicationId"] = json_encode($this->transport->object_unset_nulls($applicationId));
	     $gs_data_input2939299822982["method"] = "setThemeApplication";
	     $gs_data_input2939299822982["interfaceName"] = "core.applications.IStoreApplicationPool";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

}
class APIStoreManager {

	var $transport;
	
	function APIStoreManager($transport) {
		$this->transport = $transport;
	}

	/**
	* Initializing this api. This will identify the webshop and will act as the root for everything in this api.
	* @param initSessionId The session id to identify to this user.
	* @throws ErrorException
	* @return void 
	*/

	public function acceptGDPR() {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982["method"] = "acceptGDPR";
	     $gs_data_input2939299822982["interfaceName"] = "core.storemanager.IStoreManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* On registration, generate a new id this store, which will become a part of the hostname.
	* @throws ErrorException
	* @return void 
	*/

	public function acceptSlave($slaveStoreId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["slaveStoreId"] = json_encode($this->transport->object_unset_nulls($slaveStoreId));
	     $gs_data_input2939299822982["method"] = "acceptSlave";
	     $gs_data_input2939299822982["interfaceName"] = "core.storemanager.IStoreManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Create a new store / webshop with a given name.
	* @param hostname The hostname to the webshop.
	* @param email The email to identify the first user with,
	* @param password The password to logon the first user added to this webshop.
	* @param notify Notify the web shop owner by email about this new store.
	* @throws ErrorException
	* @return core_storemanager_data_Store 
	*/

	public function autoCreateStore($hostname) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["hostname"] = json_encode($this->transport->object_unset_nulls($hostname));
	     $gs_data_input2939299822982["method"] = "autoCreateStore";
	     $gs_data_input2939299822982["interfaceName"] = "core.storemanager.IStoreManager";
	     return $this->transport->cast(new core_storemanager_data_Store(), $this->transport->sendMessage($gs_data_input2939299822982));
	}

	/**
	* On registration, generate a new id this store, which will become a part of the hostname.
	* @throws ErrorException
	* @return void 
	*/

	public function changeTimeZone($timezone) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["timezone"] = json_encode($this->transport->object_unset_nulls($timezone));
	     $gs_data_input2939299822982["method"] = "changeTimeZone";
	     $gs_data_input2939299822982["interfaceName"] = "core.storemanager.IStoreManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Create a new store / webshop with a given name.
	* @param hostname The hostname to the webshop.
	* @param email The email to identify the first user with,
	* @param password The password to logon the first user added to this webshop.
	* @param notify Notify the web shop owner by email about this new store.
	* @throws ErrorException
	* @return core_storemanager_data_Store 
	*/

	public function createStore($hostname, $email, $password, $notify) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["hostname"] = json_encode($this->transport->object_unset_nulls($hostname));
	     $gs_data_input2939299822982['args']["email"] = json_encode($this->transport->object_unset_nulls($email));
	     $gs_data_input2939299822982['args']["password"] = json_encode($this->transport->object_unset_nulls($password));
	     $gs_data_input2939299822982['args']["notify"] = json_encode($this->transport->object_unset_nulls($notify));
	     $gs_data_input2939299822982["method"] = "createStore";
	     $gs_data_input2939299822982["interfaceName"] = "core.storemanager.IStoreManager";
	     return $this->transport->cast(new core_storemanager_data_Store(), $this->transport->sendMessage($gs_data_input2939299822982));
	}

	/**
	* Enable extended support for this webshop.
	* Extended mode is a more advanced version of the ui where there is no limitation to what can be created / made.
	* @param toggle True or false depending if this webshop should have access to the extended mode.
	* @param password A password given by getshop to toggle this option.
	* @throws ErrorException
	* @return void 
	*/

	public function delete() {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982["method"] = "delete";
	     $gs_data_input2939299822982["interfaceName"] = "core.storemanager.IStoreManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Enable extended support for this webshop.
	* Extended mode is a more advanced version of the ui where there is no limitation to what can be created / made.
	* @param toggle True or false depending if this webshop should have access to the extended mode.
	* @param password A password given by getshop to toggle this option.
	* @throws ErrorException
	* @return core_storemanager_data_Store 
	*/

	public function enableExtendedMode($toggle, $password) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["toggle"] = json_encode($this->transport->object_unset_nulls($toggle));
	     $gs_data_input2939299822982['args']["password"] = json_encode($this->transport->object_unset_nulls($password));
	     $gs_data_input2939299822982["method"] = "enableExtendedMode";
	     $gs_data_input2939299822982["interfaceName"] = "core.storemanager.IStoreManager";
	     return $this->transport->cast(new core_storemanager_data_Store(), $this->transport->sendMessage($gs_data_input2939299822982));
	}

	/**
	* Enable support to send sms for this webshop.
	* This option is not free since there is a cost for each sms sent.
	* @param toggle true or false depending on if this webshop should have access to sms.
	* @param password A password given by getshop to toggle this option.
	* @throws ErrorException
	* @return core_storemanager_data_Store 
	*/

	public function enableSMSAccess($toggle, $password) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["toggle"] = json_encode($this->transport->object_unset_nulls($toggle));
	     $gs_data_input2939299822982['args']["password"] = json_encode($this->transport->object_unset_nulls($password));
	     $gs_data_input2939299822982["method"] = "enableSMSAccess";
	     $gs_data_input2939299822982["interfaceName"] = "core.storemanager.IStoreManager";
	     return $this->transport->cast(new core_storemanager_data_Store(), $this->transport->sendMessage($gs_data_input2939299822982));
	}

	/**
	* On registration, generate a new id this store, which will become a part of the hostname.
	* @throws ErrorException
	* @return int 
	*/

	public function generateStoreId() {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982["method"] = "generateStoreId";
	     $gs_data_input2939299822982["interfaceName"] = "core.storemanager.IStoreManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* On registration, generate a new id this store, which will become a part of the hostname.
	* @throws ErrorException
	* @return String[] 
	*/

	public function getAllEnvironments() {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982["method"] = "getAllEnvironments";
	     $gs_data_input2939299822982["interfaceName"] = "core.storemanager.IStoreManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* On registration, generate a new id this store, which will become a part of the hostname.
	* @throws ErrorException
	* @return core_storemanager_data_StoreCriticalMessage 
	*/

	public function getCriticalMessage() {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982["method"] = "getCriticalMessage";
	     $gs_data_input2939299822982["interfaceName"] = "core.storemanager.IStoreManager";
	     return $this->transport->cast(new core_storemanager_data_StoreCriticalMessage(), $this->transport->sendMessage($gs_data_input2939299822982));
	}

	/**
	* Save whatever data you want to the store.
	* @param key The key to save to
	* @param value The value to save
	* @param secure Secure? Need to be administrator to read it?
	* @return String 
	*/

	public function getCurrentSession() {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982["method"] = "getCurrentSession";
	     $gs_data_input2939299822982["interfaceName"] = "core.storemanager.IStoreManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Save whatever data you want to the store.
	* @param key The key to save to
	* @param value The value to save
	* @param secure Secure? Need to be administrator to read it?
	* @return String 
	*/

	public function getKey($key) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["key"] = json_encode($this->transport->object_unset_nulls($key));
	     $gs_data_input2939299822982["method"] = "getKey";
	     $gs_data_input2939299822982["interfaceName"] = "core.storemanager.IStoreManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Save whatever data you want to the store.
	* @param key The key to save to
	* @param value The value to save
	* @param secure Secure? Need to be administrator to read it?
	* @return String 
	*/

	public function getKeySecure($key, $password) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["key"] = json_encode($this->transport->object_unset_nulls($key));
	     $gs_data_input2939299822982['args']["password"] = json_encode($this->transport->object_unset_nulls($password));
	     $gs_data_input2939299822982["method"] = "getKeySecure";
	     $gs_data_input2939299822982["interfaceName"] = "core.storemanager.IStoreManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* On registration, generate a new id this store, which will become a part of the hostname.
	* @throws ErrorException
	* @return String[] 
	*/

	public function getMultiLevelNames() {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982["method"] = "getMultiLevelNames";
	     $gs_data_input2939299822982["interfaceName"] = "core.storemanager.IStoreManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Get the store added to this session.
	* @throws ErrorException
	* @return core_storemanager_data_Store 
	*/

	public function getMyStore() {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982["method"] = "getMyStore";
	     $gs_data_input2939299822982["interfaceName"] = "core.storemanager.IStoreManager";
	     return $this->transport->cast(new core_storemanager_data_Store(), $this->transport->sendMessage($gs_data_input2939299822982));
	}

	/**
	* On registration, generate a new id this store, which will become a part of the hostname.
	* @throws ErrorException
	* @return core_storemanager_data_SlaveStore[] 
	*/

	public function getSlaves() {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982["method"] = "getSlaves";
	     $gs_data_input2939299822982["interfaceName"] = "core.storemanager.IStoreManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Fetch the store id identified to this user.
	* @throws ErrorException
	* @return String 
	*/

	public function getStoreId() {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982["method"] = "getStoreId";
	     $gs_data_input2939299822982["interfaceName"] = "core.storemanager.IStoreManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Initializing this api. This will identify the webshop and will act as the root for everything in this api.
	* @param initSessionId The session id to identify to this user.
	* @throws ErrorException
	* @return core_storemanager_data_Store 
	*/

	public function initializeStore($webAddress, $initSessionId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["webAddress"] = json_encode($this->transport->object_unset_nulls($webAddress));
	     $gs_data_input2939299822982['args']["initSessionId"] = json_encode($this->transport->object_unset_nulls($initSessionId));
	     $gs_data_input2939299822982["method"] = "initializeStore";
	     $gs_data_input2939299822982["interfaceName"] = "core.storemanager.IStoreManager";
	     return $this->transport->cast(new core_storemanager_data_Store(), $this->transport->sendMessage($gs_data_input2939299822982));
	}

	/**
	* Initializing this api. This will identify the webshop and will act as the root for everything in this api.
	* @param initSessionId The session id to identify to this user.
	* @throws ErrorException
	* @return core_storemanager_data_Store 
	*/

	public function initializeStoreByStoreId($storeId, $initSessionId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["storeId"] = json_encode($this->transport->object_unset_nulls($storeId));
	     $gs_data_input2939299822982['args']["initSessionId"] = json_encode($this->transport->object_unset_nulls($initSessionId));
	     $gs_data_input2939299822982["method"] = "initializeStoreByStoreId";
	     $gs_data_input2939299822982["interfaceName"] = "core.storemanager.IStoreManager";
	     return $this->transport->cast(new core_storemanager_data_Store(), $this->transport->sendMessage($gs_data_input2939299822982));
	}

	/**
	* Initializing this api. This will identify the webshop and will act as the root for everything in this api.
	* @param initSessionId The session id to identify to this user.
	* @throws ErrorException
	* @return core_storemanager_data_Store 
	*/

	public function initializeStoreWithModuleId($webAddress, $initSessionId, $moduleId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["webAddress"] = json_encode($this->transport->object_unset_nulls($webAddress));
	     $gs_data_input2939299822982['args']["initSessionId"] = json_encode($this->transport->object_unset_nulls($initSessionId));
	     $gs_data_input2939299822982['args']["moduleId"] = json_encode($this->transport->object_unset_nulls($moduleId));
	     $gs_data_input2939299822982["method"] = "initializeStoreWithModuleId";
	     $gs_data_input2939299822982["interfaceName"] = "core.storemanager.IStoreManager";
	     return $this->transport->cast(new core_storemanager_data_Store(), $this->transport->sendMessage($gs_data_input2939299822982));
	}

	/**
	* Check if a web shop address has already been taken.
	* @param address The address to check for.
	* @throws ErrorException
	* @return boolean 
	*/

	public function isAddressTaken($address) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["address"] = json_encode($this->transport->object_unset_nulls($address));
	     $gs_data_input2939299822982["method"] = "isAddressTaken";
	     $gs_data_input2939299822982["interfaceName"] = "core.storemanager.IStoreManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* On registration, generate a new id this store, which will become a part of the hostname.
	* @throws ErrorException
	* @return boolean 
	*/

	public function isProductMode() {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982["method"] = "isProductMode";
	     $gs_data_input2939299822982["interfaceName"] = "core.storemanager.IStoreManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* On registration, generate a new id this store, which will become a part of the hostname.
	* @throws ErrorException
	* @return void 
	*/

	public function receiveSyncData($json) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["json"] = json_encode($this->transport->object_unset_nulls($json));
	     $gs_data_input2939299822982["method"] = "receiveSyncData";
	     $gs_data_input2939299822982["interfaceName"] = "core.storemanager.IStoreManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Remove an already added domain name.
	* @param domainName The domain name to remove.
	* @throws ErrorException
	* @return core_storemanager_data_Store 
	*/

	public function removeDomainName($domainName) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["domainName"] = json_encode($this->transport->object_unset_nulls($domainName));
	     $gs_data_input2939299822982["method"] = "removeDomainName";
	     $gs_data_input2939299822982["interfaceName"] = "core.storemanager.IStoreManager";
	     return $this->transport->cast(new core_storemanager_data_Store(), $this->transport->sendMessage($gs_data_input2939299822982));
	}

	/**
	* Save whatever data you want to the store.
	* @param key The key to save to
	* @param value The value to save
	* @param secure Secure? Need to be administrator to read it?
	* @return void 
	*/

	public function removeKey($key) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["key"] = json_encode($this->transport->object_unset_nulls($key));
	     $gs_data_input2939299822982["method"] = "removeKey";
	     $gs_data_input2939299822982["interfaceName"] = "core.storemanager.IStoreManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Save whatever data you want to the store.
	* @param key The key to save to
	* @param value The value to save
	* @param secure Secure? Need to be administrator to read it?
	* @return void 
	*/

	public function saveKey($key, $value, $secure) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["key"] = json_encode($this->transport->object_unset_nulls($key));
	     $gs_data_input2939299822982['args']["value"] = json_encode($this->transport->object_unset_nulls($value));
	     $gs_data_input2939299822982['args']["secure"] = json_encode($this->transport->object_unset_nulls($secure));
	     $gs_data_input2939299822982["method"] = "saveKey";
	     $gs_data_input2939299822982["interfaceName"] = "core.storemanager.IStoreManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Update the current store with new configuration data.
	* @param config The configuration data to update.
	* @throws ErrorException
	* @return core_storemanager_data_Store 
	*/

	public function saveStore($config) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["config"] = json_encode($this->transport->object_unset_nulls($config));
	     $gs_data_input2939299822982["method"] = "saveStore";
	     $gs_data_input2939299822982["interfaceName"] = "core.storemanager.IStoreManager";
	     return $this->transport->cast(new core_storemanager_data_Store(), $this->transport->sendMessage($gs_data_input2939299822982));
	}

	/**
	* On registration, generate a new id this store, which will become a part of the hostname.
	* @throws ErrorException
	* @return void 
	*/

	public function seenCriticalMessage($id) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["id"] = json_encode($this->transport->object_unset_nulls($id));
	     $gs_data_input2939299822982["method"] = "seenCriticalMessage";
	     $gs_data_input2939299822982["interfaceName"] = "core.storemanager.IStoreManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* On registration, generate a new id this store, which will become a part of the hostname.
	* @throws ErrorException
	* @return void 
	*/

	public function setDefaultMultilevelName($multilevelname) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["multilevelname"] = json_encode($this->transport->object_unset_nulls($multilevelname));
	     $gs_data_input2939299822982["method"] = "setDefaultMultilevelName";
	     $gs_data_input2939299822982["interfaceName"] = "core.storemanager.IStoreManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* On registration, generate a new id this store, which will become a part of the hostname.
	* @throws ErrorException
	* @return void 
	*/

	public function setImageIdToFavicon($id) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["id"] = json_encode($this->transport->object_unset_nulls($id));
	     $gs_data_input2939299822982["method"] = "setImageIdToFavicon";
	     $gs_data_input2939299822982["interfaceName"] = "core.storemanager.IStoreManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* This will set the readintroduction variable in the Store object to true.
	* @throws ErrorException
	* @return core_storemanager_data_Store 
	*/

	public function setIntroductionRead() {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982["method"] = "setIntroductionRead";
	     $gs_data_input2939299822982["interfaceName"] = "core.storemanager.IStoreManager";
	     return $this->transport->cast(new core_storemanager_data_Store(), $this->transport->sendMessage($gs_data_input2939299822982));
	}

	/**
	* Setting this store to be a template or not.
	*
	* @param storeId
	* @param isTemplate
	* @return void 
	*/

	public function setIsTemplate($storeId, $isTemplate) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["storeId"] = json_encode($this->transport->object_unset_nulls($storeId));
	     $gs_data_input2939299822982['args']["isTemplate"] = json_encode($this->transport->object_unset_nulls($isTemplate));
	     $gs_data_input2939299822982["method"] = "setIsTemplate";
	     $gs_data_input2939299822982["interfaceName"] = "core.storemanager.IStoreManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* On registration, generate a new id this store, which will become a part of the hostname.
	* @throws ErrorException
	* @return void 
	*/

	public function setMasterStoreId($masterStoreId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["masterStoreId"] = json_encode($this->transport->object_unset_nulls($masterStoreId));
	     $gs_data_input2939299822982["method"] = "setMasterStoreId";
	     $gs_data_input2939299822982["interfaceName"] = "core.storemanager.IStoreManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Set a new domain name to this store / webshop
	* @param domainName The domain name to identify this shop with.
	* @throws ErrorException
	* @return core_storemanager_data_Store 
	*/

	public function setPrimaryDomainName($domainName) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["domainName"] = json_encode($this->transport->object_unset_nulls($domainName));
	     $gs_data_input2939299822982["method"] = "setPrimaryDomainName";
	     $gs_data_input2939299822982["interfaceName"] = "core.storemanager.IStoreManager";
	     return $this->transport->cast(new core_storemanager_data_Store(), $this->transport->sendMessage($gs_data_input2939299822982));
	}

	/**
	* A user can set a different language for its session.
	* @param id
	* @throws ErrorException
	* @return void 
	*/

	public function setSessionLanguage($id) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["id"] = json_encode($this->transport->object_unset_nulls($id));
	     $gs_data_input2939299822982["method"] = "setSessionLanguage";
	     $gs_data_input2939299822982["interfaceName"] = "core.storemanager.IStoreManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* On registration, generate a new id this store, which will become a part of the hostname.
	* @throws ErrorException
	* @return void 
	*/

	public function setStoreIdentifier($identifier) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["identifier"] = json_encode($this->transport->object_unset_nulls($identifier));
	     $gs_data_input2939299822982["method"] = "setStoreIdentifier";
	     $gs_data_input2939299822982["interfaceName"] = "core.storemanager.IStoreManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* On registration, generate a new id this store, which will become a part of the hostname.
	* @throws ErrorException
	* @return void 
	*/

	public function syncData($environment, $username, $password) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["environment"] = json_encode($this->transport->object_unset_nulls($environment));
	     $gs_data_input2939299822982['args']["username"] = json_encode($this->transport->object_unset_nulls($username));
	     $gs_data_input2939299822982['args']["password"] = json_encode($this->transport->object_unset_nulls($password));
	     $gs_data_input2939299822982["method"] = "syncData";
	     $gs_data_input2939299822982["interfaceName"] = "core.storemanager.IStoreManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* On registration, generate a new id this store, which will become a part of the hostname.
	* @throws ErrorException
	* @return void 
	*/

	public function toggleIgnoreBookingErrors($password) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["password"] = json_encode($this->transport->object_unset_nulls($password));
	     $gs_data_input2939299822982["method"] = "toggleIgnoreBookingErrors";
	     $gs_data_input2939299822982["interfaceName"] = "core.storemanager.IStoreManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

}
class APIStorePrintManager {

	var $transport;
	
	function APIStorePrintManager($transport) {
		$this->transport = $transport;
	}

	/**
	*
	* @author ktonder
	* @return void 
	*/

	public function deletePrinter($id) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["id"] = json_encode($this->transport->object_unset_nulls($id));
	     $gs_data_input2939299822982["method"] = "deletePrinter";
	     $gs_data_input2939299822982["interfaceName"] = "core.printmanager.IStorePrintManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	*
	* @author ktonder
	* @return core_printmanager_Printer[] 
	*/

	public function getPrinters() {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982["method"] = "getPrinters";
	     $gs_data_input2939299822982["interfaceName"] = "core.printmanager.IStorePrintManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	*
	* @author ktonder
	* @return void 
	*/

	public function savePrinter($printer) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["printer"] = json_encode($this->transport->object_unset_nulls($printer));
	     $gs_data_input2939299822982["method"] = "savePrinter";
	     $gs_data_input2939299822982["interfaceName"] = "core.printmanager.IStorePrintManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

}
class APIStripeManager {

	var $transport;
	
	function APIStripeManager($transport) {
		$this->transport = $transport;
	}

	/**
	*
	* @author boggi
	* @return boolean 
	*/

	public function chargeOrder($orderId, $cardId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["orderId"] = json_encode($this->transport->object_unset_nulls($orderId));
	     $gs_data_input2939299822982['args']["cardId"] = json_encode($this->transport->object_unset_nulls($cardId));
	     $gs_data_input2939299822982["method"] = "chargeOrder";
	     $gs_data_input2939299822982["interfaceName"] = "core.stripe.IStripeManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	*
	* @author boggi
	* @return boolean 
	*/

	public function createAndChargeCustomer($orderId, $token) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["orderId"] = json_encode($this->transport->object_unset_nulls($orderId));
	     $gs_data_input2939299822982['args']["token"] = json_encode($this->transport->object_unset_nulls($token));
	     $gs_data_input2939299822982["method"] = "createAndChargeCustomer";
	     $gs_data_input2939299822982["interfaceName"] = "core.stripe.IStripeManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

}
class APITicketManager {

	var $transport;
	
	function APITicketManager($transport) {
		$this->transport = $transport;
	}

	/**
	*
	* @author ktonder
	* @return void 
	*/

	public function deleteTicket($ticketId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["ticketId"] = json_encode($this->transport->object_unset_nulls($ticketId));
	     $gs_data_input2939299822982["method"] = "deleteTicket";
	     $gs_data_input2939299822982["interfaceName"] = "core.ticket.ITicketManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	*
	* @author ktonder
	* @return core_ticket_Ticket[] 
	*/

	public function getAllTickets($filter) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["filter"] = json_encode($this->transport->object_unset_nulls($filter));
	     $gs_data_input2939299822982["method"] = "getAllTickets";
	     $gs_data_input2939299822982["interfaceName"] = "core.ticket.ITicketManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	*
	* @author ktonder
	* @return core_ticket_Ticket 
	*/

	public function getTicket($ticketId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["ticketId"] = json_encode($this->transport->object_unset_nulls($ticketId));
	     $gs_data_input2939299822982["method"] = "getTicket";
	     $gs_data_input2939299822982["interfaceName"] = "core.ticket.ITicketManager";
	     return $this->transport->cast(new core_ticket_Ticket(), $this->transport->sendMessage($gs_data_input2939299822982));
	}

	/**
	*
	* @author ktonder
	* @return void 
	*/

	public function saveTicket($ticket) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["ticket"] = json_encode($this->transport->object_unset_nulls($ticket));
	     $gs_data_input2939299822982["method"] = "saveTicket";
	     $gs_data_input2939299822982["interfaceName"] = "core.ticket.ITicketManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	*
	* @author ktonder
	* @return void 
	*/

	public function updateEvent($ticketId, $event) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["ticketId"] = json_encode($this->transport->object_unset_nulls($ticketId));
	     $gs_data_input2939299822982['args']["event"] = json_encode($this->transport->object_unset_nulls($event));
	     $gs_data_input2939299822982["method"] = "updateEvent";
	     $gs_data_input2939299822982["interfaceName"] = "core.ticket.ITicketManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

}
class APITimeRegisteringManager {

	var $transport;
	
	function APITimeRegisteringManager($transport) {
		$this->transport = $transport;
	}

	/**
	* Time registering management system.<br>
	* @return void 
	*/

	public function deleteTimeUnsecure($id) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["id"] = json_encode($this->transport->object_unset_nulls($id));
	     $gs_data_input2939299822982["method"] = "deleteTimeUnsecure";
	     $gs_data_input2939299822982["interfaceName"] = "core.timeregisteringmanager.ITimeRegisteringManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Time registering management system.<br>
	* @return core_timeregisteringmanager_TimeRegistered[] 
	*/

	public function getAllTimesRegistered() {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982["method"] = "getAllTimesRegistered";
	     $gs_data_input2939299822982["interfaceName"] = "core.timeregisteringmanager.ITimeRegisteringManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Time registering management system.<br>
	* @return core_timeregisteringmanager_TimeRegistered[] 
	*/

	public function getMyHours() {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982["method"] = "getMyHours";
	     $gs_data_input2939299822982["interfaceName"] = "core.timeregisteringmanager.ITimeRegisteringManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Time registering management system.<br>
	* @return core_timeregisteringmanager_TimeRegistered[] 
	*/

	public function getRegisteredHoursForUser($userId, $start, $end) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["userId"] = json_encode($this->transport->object_unset_nulls($userId));
	     $gs_data_input2939299822982['args']["start"] = json_encode($this->transport->object_unset_nulls($start));
	     $gs_data_input2939299822982['args']["end"] = json_encode($this->transport->object_unset_nulls($end));
	     $gs_data_input2939299822982["method"] = "getRegisteredHoursForUser";
	     $gs_data_input2939299822982["interfaceName"] = "core.timeregisteringmanager.ITimeRegisteringManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Time registering management system.<br>
	* @return void 
	*/

	public function registerTime($start, $end, $comment) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["start"] = json_encode($this->transport->object_unset_nulls($start));
	     $gs_data_input2939299822982['args']["end"] = json_encode($this->transport->object_unset_nulls($end));
	     $gs_data_input2939299822982['args']["comment"] = json_encode($this->transport->object_unset_nulls($comment));
	     $gs_data_input2939299822982["method"] = "registerTime";
	     $gs_data_input2939299822982["interfaceName"] = "core.timeregisteringmanager.ITimeRegisteringManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

}
class APITrackAndTraceManager {

	var $transport;
	
	function APITrackAndTraceManager($transport) {
		$this->transport = $transport;
	}

	/**
	* Returns a list of all the pooled destinations.
	*
	* @param routeId
	* @param destinationId
	* @return void 
	*/

	public function acceptTodaysInstruction($routeId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["routeId"] = json_encode($this->transport->object_unset_nulls($routeId));
	     $gs_data_input2939299822982["method"] = "acceptTodaysInstruction";
	     $gs_data_input2939299822982["interfaceName"] = "core.trackandtrace.ITrackAndTraceManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Returns a list of all the pooled destinations.
	*
	* @param routeId
	* @param destinationId
	* @return void 
	*/

	public function acknowledgeDriverMessage($msgId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["msgId"] = json_encode($this->transport->object_unset_nulls($msgId));
	     $gs_data_input2939299822982["method"] = "acknowledgeDriverMessage";
	     $gs_data_input2939299822982["interfaceName"] = "core.trackandtrace.ITrackAndTraceManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	*
	* @author ktonder
	* @return void 
	*/

	public function addDeliveryTaskToDestionation($destionatId, $task) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["destionatId"] = json_encode($this->transport->object_unset_nulls($destionatId));
	     $gs_data_input2939299822982['args']["task"] = json_encode($this->transport->object_unset_nulls($task));
	     $gs_data_input2939299822982["method"] = "addDeliveryTaskToDestionation";
	     $gs_data_input2939299822982["interfaceName"] = "core.trackandtrace.ITrackAndTraceManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	*
	* @author ktonder
	* @return void 
	*/

	public function addDriverToRoute($userId, $routeId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["userId"] = json_encode($this->transport->object_unset_nulls($userId));
	     $gs_data_input2939299822982['args']["routeId"] = json_encode($this->transport->object_unset_nulls($routeId));
	     $gs_data_input2939299822982["method"] = "addDriverToRoute";
	     $gs_data_input2939299822982["interfaceName"] = "core.trackandtrace.ITrackAndTraceManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Returns a list of all the pooled destinations.
	*
	* @param routeId
	* @param destinationId
	* @return core_trackandtrace_TaskAdded 
	*/

	public function addPickupOrder($destnationId, $order, $inTask) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["destnationId"] = json_encode($this->transport->object_unset_nulls($destnationId));
	     $gs_data_input2939299822982['args']["order"] = json_encode($this->transport->object_unset_nulls($order));
	     $gs_data_input2939299822982['args']["inTask"] = json_encode($this->transport->object_unset_nulls($inTask));
	     $gs_data_input2939299822982["method"] = "addPickupOrder";
	     $gs_data_input2939299822982["interfaceName"] = "core.trackandtrace.ITrackAndTraceManager";
	     return $this->transport->cast(new core_trackandtrace_TaskAdded(), $this->transport->sendMessage($gs_data_input2939299822982));
	}

	/**
	*
	* @author ktonder
	* @return void 
	*/

	public function changeCountedDriverCopies($taskId, $orderReference, $quantity) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["taskId"] = json_encode($this->transport->object_unset_nulls($taskId));
	     $gs_data_input2939299822982['args']["orderReference"] = json_encode($this->transport->object_unset_nulls($orderReference));
	     $gs_data_input2939299822982['args']["quantity"] = json_encode($this->transport->object_unset_nulls($quantity));
	     $gs_data_input2939299822982["method"] = "changeCountedDriverCopies";
	     $gs_data_input2939299822982["interfaceName"] = "core.trackandtrace.ITrackAndTraceManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	*
	* @author ktonder
	* @return void 
	*/

	public function changeQuantity($taskId, $orderReference, $parcels, $containers) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["taskId"] = json_encode($this->transport->object_unset_nulls($taskId));
	     $gs_data_input2939299822982['args']["orderReference"] = json_encode($this->transport->object_unset_nulls($orderReference));
	     $gs_data_input2939299822982['args']["parcels"] = json_encode($this->transport->object_unset_nulls($parcels));
	     $gs_data_input2939299822982['args']["containers"] = json_encode($this->transport->object_unset_nulls($containers));
	     $gs_data_input2939299822982["method"] = "changeQuantity";
	     $gs_data_input2939299822982["interfaceName"] = "core.trackandtrace.ITrackAndTraceManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Returns a list of all the pooled destinations.
	*
	* @param routeId
	* @param destinationId
	* @return void 
	*/

	public function checkRemovalOfRoutes() {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982["method"] = "checkRemovalOfRoutes";
	     $gs_data_input2939299822982["interfaceName"] = "core.trackandtrace.ITrackAndTraceManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Returns a list of all the pooled destinations.
	*
	* @param routeId
	* @param destinationId
	* @return void 
	*/

	public function deleteReplyMessage($replyMessageId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["replyMessageId"] = json_encode($this->transport->object_unset_nulls($replyMessageId));
	     $gs_data_input2939299822982["method"] = "deleteReplyMessage";
	     $gs_data_input2939299822982["interfaceName"] = "core.trackandtrace.ITrackAndTraceManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	*
	* @author ktonder
	* @return void 
	*/

	public function deleteRoute($routeId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["routeId"] = json_encode($this->transport->object_unset_nulls($routeId));
	     $gs_data_input2939299822982["method"] = "deleteRoute";
	     $gs_data_input2939299822982["interfaceName"] = "core.trackandtrace.ITrackAndTraceManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	*
	* @author ktonder
	* @return core_trackandtrace_AcculogixExport[] 
	*/

	public function getAllExportedDataForRoute($routeId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["routeId"] = json_encode($this->transport->object_unset_nulls($routeId));
	     $gs_data_input2939299822982["method"] = "getAllExportedDataForRoute";
	     $gs_data_input2939299822982["interfaceName"] = "core.trackandtrace.ITrackAndTraceManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	*
	* @author ktonder
	* @return core_trackandtrace_Route[] 
	*/

	public function getAllRoutes() {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982["method"] = "getAllRoutes";
	     $gs_data_input2939299822982["interfaceName"] = "core.trackandtrace.ITrackAndTraceManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	*
	* @author ktonder
	* @return core_trackandtrace_Destination 
	*/

	public function getDestinationById($destinationId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["destinationId"] = json_encode($this->transport->object_unset_nulls($destinationId));
	     $gs_data_input2939299822982["method"] = "getDestinationById";
	     $gs_data_input2939299822982["interfaceName"] = "core.trackandtrace.ITrackAndTraceManager";
	     return $this->transport->cast(new core_trackandtrace_Destination(), $this->transport->sendMessage($gs_data_input2939299822982));
	}

	/**
	* Returns a list of all the pooled destinations.
	*
	* @param routeId
	* @param destinationId
	* @return core_trackandtrace_DriverMessage 
	*/

	public function getDriverMessage($msgId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["msgId"] = json_encode($this->transport->object_unset_nulls($msgId));
	     $gs_data_input2939299822982["method"] = "getDriverMessage";
	     $gs_data_input2939299822982["interfaceName"] = "core.trackandtrace.ITrackAndTraceManager";
	     return $this->transport->cast(new core_trackandtrace_DriverMessage(), $this->transport->sendMessage($gs_data_input2939299822982));
	}

	/**
	* Returns a list of all the pooled destinations.
	*
	* @param routeId
	* @param destinationId
	* @return core_trackandtrace_DriverMessage[] 
	*/

	public function getDriverMessages($userId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["userId"] = json_encode($this->transport->object_unset_nulls($userId));
	     $gs_data_input2939299822982["method"] = "getDriverMessages";
	     $gs_data_input2939299822982["interfaceName"] = "core.trackandtrace.ITrackAndTraceManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	*
	* @author ktonder
	* @return core_trackandtrace_TrackAndTraceException[] 
	*/

	public function getExceptions() {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982["method"] = "getExceptions";
	     $gs_data_input2939299822982["interfaceName"] = "core.trackandtrace.ITrackAndTraceManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	*
	* @author ktonder
	* @return core_trackandtrace_AcculogixExport[] 
	*/

	public function getExport($routeId, $currentState) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["routeId"] = json_encode($this->transport->object_unset_nulls($routeId));
	     $gs_data_input2939299822982['args']["currentState"] = json_encode($this->transport->object_unset_nulls($currentState));
	     $gs_data_input2939299822982["method"] = "getExport";
	     $gs_data_input2939299822982["interfaceName"] = "core.trackandtrace.ITrackAndTraceManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	*
	* @author ktonder
	* @return core_trackandtrace_AcculogixExport[] 
	*/

	public function getExportedData($start, $end) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["start"] = json_encode($this->transport->object_unset_nulls($start));
	     $gs_data_input2939299822982['args']["end"] = json_encode($this->transport->object_unset_nulls($end));
	     $gs_data_input2939299822982["method"] = "getExportedData";
	     $gs_data_input2939299822982["interfaceName"] = "core.trackandtrace.ITrackAndTraceManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	*
	* @author ktonder
	* @return core_trackandtrace_DataLoadStatus 
	*/

	public function getLoadStatus($statusId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["statusId"] = json_encode($this->transport->object_unset_nulls($statusId));
	     $gs_data_input2939299822982["method"] = "getLoadStatus";
	     $gs_data_input2939299822982["interfaceName"] = "core.trackandtrace.ITrackAndTraceManager";
	     return $this->transport->cast(new core_trackandtrace_DataLoadStatus(), $this->transport->sendMessage($gs_data_input2939299822982));
	}

	/**
	*
	* @author ktonder
	* @return core_trackandtrace_DataLoadStatus[] 
	*/

	public function getLoadStatuses() {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982["method"] = "getLoadStatuses";
	     $gs_data_input2939299822982["interfaceName"] = "core.trackandtrace.ITrackAndTraceManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	*
	* @author ktonder
	* @return core_trackandtrace_Route[] 
	*/

	public function getMyRoutes() {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982["method"] = "getMyRoutes";
	     $gs_data_input2939299822982["interfaceName"] = "core.trackandtrace.ITrackAndTraceManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Returns a list of all the pooled destinations.
	*
	* @param routeId
	* @param destinationId
	* @return core_trackandtrace_PooledDestionation[] 
	*/

	public function getPooledDestiontions() {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982["method"] = "getPooledDestiontions";
	     $gs_data_input2939299822982["interfaceName"] = "core.trackandtrace.ITrackAndTraceManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Returns a list of all the pooled destinations.
	*
	* @param routeId
	* @param destinationId
	* @return core_trackandtrace_PooledDestionation[] 
	*/

	public function getPooledDestiontionsByUsersDepotId() {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982["method"] = "getPooledDestiontionsByUsersDepotId";
	     $gs_data_input2939299822982["interfaceName"] = "core.trackandtrace.ITrackAndTraceManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Returns a list of all the pooled destinations.
	*
	* @param routeId
	* @param destinationId
	* @return core_trackandtrace_ReplyMessage[] 
	*/

	public function getReplyMessages() {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982["method"] = "getReplyMessages";
	     $gs_data_input2939299822982["interfaceName"] = "core.trackandtrace.ITrackAndTraceManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Returns a list of all the pooled destinations.
	*
	* @param routeId
	* @param destinationId
	* @return String[] 
	*/

	public function getRouteIdsThatHasNotCompleted() {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982["method"] = "getRouteIdsThatHasNotCompleted";
	     $gs_data_input2939299822982["interfaceName"] = "core.trackandtrace.ITrackAndTraceManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	*
	* @author ktonder
	* @return core_trackandtrace_Route[] 
	*/

	public function getRoutesById($routeId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["routeId"] = json_encode($this->transport->object_unset_nulls($routeId));
	     $gs_data_input2939299822982["method"] = "getRoutesById";
	     $gs_data_input2939299822982["interfaceName"] = "core.trackandtrace.ITrackAndTraceManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Returns a list of all the pooled destinations.
	*
	* @param routeId
	* @param destinationId
	* @return core_trackandtrace_Route[] 
	*/

	public function getRoutesCompletedPast24Hours() {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982["method"] = "getRoutesCompletedPast24Hours";
	     $gs_data_input2939299822982["interfaceName"] = "core.trackandtrace.ITrackAndTraceManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	*
	* @author ktonder
	* @return void 
	*/

	public function loadData($base64, $fileName) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["base64"] = json_encode($this->transport->object_unset_nulls($base64));
	     $gs_data_input2939299822982['args']["fileName"] = json_encode($this->transport->object_unset_nulls($fileName));
	     $gs_data_input2939299822982["method"] = "loadData";
	     $gs_data_input2939299822982["interfaceName"] = "core.trackandtrace.ITrackAndTraceManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	*
	* @author ktonder
	* @return void 
	*/

	public function loadDataBase64($base64, $fileName) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["base64"] = json_encode($this->transport->object_unset_nulls($base64));
	     $gs_data_input2939299822982['args']["fileName"] = json_encode($this->transport->object_unset_nulls($fileName));
	     $gs_data_input2939299822982["method"] = "loadDataBase64";
	     $gs_data_input2939299822982["interfaceName"] = "core.trackandtrace.ITrackAndTraceManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Returns a list of all the pooled destinations.
	*
	* @param routeId
	* @param destinationId
	* @return void 
	*/

	public function markAsArrived($destinationId, $startedTimeStamp, $lon, $lat) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["destinationId"] = json_encode($this->transport->object_unset_nulls($destinationId));
	     $gs_data_input2939299822982['args']["startedTimeStamp"] = json_encode($this->transport->object_unset_nulls($startedTimeStamp));
	     $gs_data_input2939299822982['args']["lon"] = json_encode($this->transport->object_unset_nulls($lon));
	     $gs_data_input2939299822982['args']["lat"] = json_encode($this->transport->object_unset_nulls($lat));
	     $gs_data_input2939299822982["method"] = "markAsArrived";
	     $gs_data_input2939299822982["interfaceName"] = "core.trackandtrace.ITrackAndTraceManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Returns a list of all the pooled destinations.
	*
	* @param routeId
	* @param destinationId
	* @return void 
	*/

	public function markAsCompleted($routeId, $lat, $lon) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["routeId"] = json_encode($this->transport->object_unset_nulls($routeId));
	     $gs_data_input2939299822982['args']["lat"] = json_encode($this->transport->object_unset_nulls($lat));
	     $gs_data_input2939299822982['args']["lon"] = json_encode($this->transport->object_unset_nulls($lon));
	     $gs_data_input2939299822982["method"] = "markAsCompleted";
	     $gs_data_input2939299822982["interfaceName"] = "core.trackandtrace.ITrackAndTraceManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Returns a list of all the pooled destinations.
	*
	* @param routeId
	* @param destinationId
	* @return void 
	*/

	public function markAsCompletedWithTimeStamp($routeId, $lat, $lon, $date) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["routeId"] = json_encode($this->transport->object_unset_nulls($routeId));
	     $gs_data_input2939299822982['args']["lat"] = json_encode($this->transport->object_unset_nulls($lat));
	     $gs_data_input2939299822982['args']["lon"] = json_encode($this->transport->object_unset_nulls($lon));
	     $gs_data_input2939299822982['args']["date"] = json_encode($this->transport->object_unset_nulls($date));
	     $gs_data_input2939299822982["method"] = "markAsCompletedWithTimeStamp";
	     $gs_data_input2939299822982["interfaceName"] = "core.trackandtrace.ITrackAndTraceManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Returns a list of all the pooled destinations.
	*
	* @param routeId
	* @param destinationId
	* @return boolean 
	*/

	public function markAsCompletedWithTimeStampAndPassword($routeId, $lat, $lon, $date, $password) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["routeId"] = json_encode($this->transport->object_unset_nulls($routeId));
	     $gs_data_input2939299822982['args']["lat"] = json_encode($this->transport->object_unset_nulls($lat));
	     $gs_data_input2939299822982['args']["lon"] = json_encode($this->transport->object_unset_nulls($lon));
	     $gs_data_input2939299822982['args']["date"] = json_encode($this->transport->object_unset_nulls($date));
	     $gs_data_input2939299822982['args']["password"] = json_encode($this->transport->object_unset_nulls($password));
	     $gs_data_input2939299822982["method"] = "markAsCompletedWithTimeStampAndPassword";
	     $gs_data_input2939299822982["interfaceName"] = "core.trackandtrace.ITrackAndTraceManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	*
	* @author ktonder
	* @return void 
	*/

	public function markAsDeliverd($taskId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["taskId"] = json_encode($this->transport->object_unset_nulls($taskId));
	     $gs_data_input2939299822982["method"] = "markAsDeliverd";
	     $gs_data_input2939299822982["interfaceName"] = "core.trackandtrace.ITrackAndTraceManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Returns a list of all the pooled destinations.
	*
	* @param routeId
	* @param destinationId
	* @return void 
	*/

	public function markDeparting($destinationId, $latitude, $longitude, $timeStamp, $signatureImage, $typedSignature) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["destinationId"] = json_encode($this->transport->object_unset_nulls($destinationId));
	     $gs_data_input2939299822982['args']["latitude"] = json_encode($this->transport->object_unset_nulls($latitude));
	     $gs_data_input2939299822982['args']["longitude"] = json_encode($this->transport->object_unset_nulls($longitude));
	     $gs_data_input2939299822982['args']["timeStamp"] = json_encode($this->transport->object_unset_nulls($timeStamp));
	     $gs_data_input2939299822982['args']["signatureImage"] = json_encode($this->transport->object_unset_nulls($signatureImage));
	     $gs_data_input2939299822982['args']["typedSignature"] = json_encode($this->transport->object_unset_nulls($typedSignature));
	     $gs_data_input2939299822982["method"] = "markDeparting";
	     $gs_data_input2939299822982["interfaceName"] = "core.trackandtrace.ITrackAndTraceManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Returns a list of all the pooled destinations.
	*
	* @param routeId
	* @param destinationId
	* @return void 
	*/

	public function markInstructionAsRead($destinationId, $date) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["destinationId"] = json_encode($this->transport->object_unset_nulls($destinationId));
	     $gs_data_input2939299822982['args']["date"] = json_encode($this->transport->object_unset_nulls($date));
	     $gs_data_input2939299822982["method"] = "markInstructionAsRead";
	     $gs_data_input2939299822982["interfaceName"] = "core.trackandtrace.ITrackAndTraceManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	*
	* @author ktonder
	* @return void 
	*/

	public function markOrderWithException($taskId, $orderReferenceNumber, $exceptionId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["taskId"] = json_encode($this->transport->object_unset_nulls($taskId));
	     $gs_data_input2939299822982['args']["orderReferenceNumber"] = json_encode($this->transport->object_unset_nulls($orderReferenceNumber));
	     $gs_data_input2939299822982['args']["exceptionId"] = json_encode($this->transport->object_unset_nulls($exceptionId));
	     $gs_data_input2939299822982["method"] = "markOrderWithException";
	     $gs_data_input2939299822982["interfaceName"] = "core.trackandtrace.ITrackAndTraceManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Returns a list of all the pooled destinations.
	*
	* @param routeId
	* @param destinationId
	* @return void 
	*/

	public function markRouteAsStarted($routeId, $startedTimeStamp, $lon, $lat) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["routeId"] = json_encode($this->transport->object_unset_nulls($routeId));
	     $gs_data_input2939299822982['args']["startedTimeStamp"] = json_encode($this->transport->object_unset_nulls($startedTimeStamp));
	     $gs_data_input2939299822982['args']["lon"] = json_encode($this->transport->object_unset_nulls($lon));
	     $gs_data_input2939299822982['args']["lat"] = json_encode($this->transport->object_unset_nulls($lat));
	     $gs_data_input2939299822982["method"] = "markRouteAsStarted";
	     $gs_data_input2939299822982["interfaceName"] = "core.trackandtrace.ITrackAndTraceManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Returns a list of all the pooled destinations.
	*
	* @param routeId
	* @param destinationId
	* @return String 
	*/

	public function markRouteAsStartedWithCheck($routeId, $startedTimeStamp, $lon, $lat) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["routeId"] = json_encode($this->transport->object_unset_nulls($routeId));
	     $gs_data_input2939299822982['args']["startedTimeStamp"] = json_encode($this->transport->object_unset_nulls($startedTimeStamp));
	     $gs_data_input2939299822982['args']["lon"] = json_encode($this->transport->object_unset_nulls($lon));
	     $gs_data_input2939299822982['args']["lat"] = json_encode($this->transport->object_unset_nulls($lat));
	     $gs_data_input2939299822982["method"] = "markRouteAsStartedWithCheck";
	     $gs_data_input2939299822982["interfaceName"] = "core.trackandtrace.ITrackAndTraceManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	*
	* @author ktonder
	* @return void 
	*/

	public function markTaskWithExceptionDeliverd($taskId, $exceptionId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["taskId"] = json_encode($this->transport->object_unset_nulls($taskId));
	     $gs_data_input2939299822982['args']["exceptionId"] = json_encode($this->transport->object_unset_nulls($exceptionId));
	     $gs_data_input2939299822982["method"] = "markTaskWithExceptionDeliverd";
	     $gs_data_input2939299822982["interfaceName"] = "core.trackandtrace.ITrackAndTraceManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Returns a list of all the pooled destinations.
	*
	* @param routeId
	* @param destinationId
	* @return core_trackandtrace_Route[] 
	*/

	public function moveDesitinationToPool($routeId, $destinationId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["routeId"] = json_encode($this->transport->object_unset_nulls($routeId));
	     $gs_data_input2939299822982['args']["destinationId"] = json_encode($this->transport->object_unset_nulls($destinationId));
	     $gs_data_input2939299822982["method"] = "moveDesitinationToPool";
	     $gs_data_input2939299822982["interfaceName"] = "core.trackandtrace.ITrackAndTraceManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Returns a list of all the pooled destinations.
	*
	* @param routeId
	* @param destinationId
	* @return core_trackandtrace_Route[] 
	*/

	public function moveDestinationFromPoolToRoute($destId, $routeId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["destId"] = json_encode($this->transport->object_unset_nulls($destId));
	     $gs_data_input2939299822982['args']["routeId"] = json_encode($this->transport->object_unset_nulls($routeId));
	     $gs_data_input2939299822982["method"] = "moveDestinationFromPoolToRoute";
	     $gs_data_input2939299822982["interfaceName"] = "core.trackandtrace.ITrackAndTraceManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	*
	* @author ktonder
	* @return void 
	*/

	public function removeDriverToRoute($userId, $routeId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["userId"] = json_encode($this->transport->object_unset_nulls($userId));
	     $gs_data_input2939299822982['args']["routeId"] = json_encode($this->transport->object_unset_nulls($routeId));
	     $gs_data_input2939299822982["method"] = "removeDriverToRoute";
	     $gs_data_input2939299822982["interfaceName"] = "core.trackandtrace.ITrackAndTraceManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Returns a list of all the pooled destinations.
	*
	* @param routeId
	* @param destinationId
	* @return void 
	*/

	public function replyGeneral($routeId, $text, $date) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["routeId"] = json_encode($this->transport->object_unset_nulls($routeId));
	     $gs_data_input2939299822982['args']["text"] = json_encode($this->transport->object_unset_nulls($text));
	     $gs_data_input2939299822982['args']["date"] = json_encode($this->transport->object_unset_nulls($date));
	     $gs_data_input2939299822982["method"] = "replyGeneral";
	     $gs_data_input2939299822982["interfaceName"] = "core.trackandtrace.ITrackAndTraceManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Returns a list of all the pooled destinations.
	*
	* @param routeId
	* @param destinationId
	* @return void 
	*/

	public function replyMessage($messageId, $text, $date) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["messageId"] = json_encode($this->transport->object_unset_nulls($messageId));
	     $gs_data_input2939299822982['args']["text"] = json_encode($this->transport->object_unset_nulls($text));
	     $gs_data_input2939299822982['args']["date"] = json_encode($this->transport->object_unset_nulls($date));
	     $gs_data_input2939299822982["method"] = "replyMessage";
	     $gs_data_input2939299822982["interfaceName"] = "core.trackandtrace.ITrackAndTraceManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Returns a list of all the pooled destinations.
	*
	* @param routeId
	* @param destinationId
	* @return void 
	*/

	public function replyMessageForDestionation($destinationId, $text, $date) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["destinationId"] = json_encode($this->transport->object_unset_nulls($destinationId));
	     $gs_data_input2939299822982['args']["text"] = json_encode($this->transport->object_unset_nulls($text));
	     $gs_data_input2939299822982['args']["date"] = json_encode($this->transport->object_unset_nulls($date));
	     $gs_data_input2939299822982["method"] = "replyMessageForDestionation";
	     $gs_data_input2939299822982["interfaceName"] = "core.trackandtrace.ITrackAndTraceManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	*
	* @author ktonder
	* @return core_trackandtrace_Destination 
	*/

	public function saveDestination($destination) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["destination"] = json_encode($this->transport->object_unset_nulls($destination));
	     $gs_data_input2939299822982["method"] = "saveDestination";
	     $gs_data_input2939299822982["interfaceName"] = "core.trackandtrace.ITrackAndTraceManager";
	     return $this->transport->cast(new core_trackandtrace_Destination(), $this->transport->sendMessage($gs_data_input2939299822982));
	}

	/**
	*
	* @author ktonder
	* @return void 
	*/

	public function saveException($exception) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["exception"] = json_encode($this->transport->object_unset_nulls($exception));
	     $gs_data_input2939299822982["method"] = "saveException";
	     $gs_data_input2939299822982["interfaceName"] = "core.trackandtrace.ITrackAndTraceManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	*
	* @author ktonder
	* @return void 
	*/

	public function saveRoute($route) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["route"] = json_encode($this->transport->object_unset_nulls($route));
	     $gs_data_input2939299822982["method"] = "saveRoute";
	     $gs_data_input2939299822982["interfaceName"] = "core.trackandtrace.ITrackAndTraceManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Returns a list of all the pooled destinations.
	*
	* @param routeId
	* @param destinationId
	* @return core_trackandtrace_DriverMessage 
	*/

	public function sendMessageToDriver($driverId, $message) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["driverId"] = json_encode($this->transport->object_unset_nulls($driverId));
	     $gs_data_input2939299822982['args']["message"] = json_encode($this->transport->object_unset_nulls($message));
	     $gs_data_input2939299822982["method"] = "sendMessageToDriver";
	     $gs_data_input2939299822982["interfaceName"] = "core.trackandtrace.ITrackAndTraceManager";
	     return $this->transport->cast(new core_trackandtrace_DriverMessage(), $this->transport->sendMessage($gs_data_input2939299822982));
	}

	/**
	*
	* @author ktonder
	* @return void 
	*/

	public function setCagesOrPalletCount($taskId, $quantity) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["taskId"] = json_encode($this->transport->object_unset_nulls($taskId));
	     $gs_data_input2939299822982['args']["quantity"] = json_encode($this->transport->object_unset_nulls($quantity));
	     $gs_data_input2939299822982["method"] = "setCagesOrPalletCount";
	     $gs_data_input2939299822982["interfaceName"] = "core.trackandtrace.ITrackAndTraceManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	*
	* @author ktonder
	* @return void 
	*/

	public function setDesitionationException($destinationId, $exceptionId, $lon, $lat) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["destinationId"] = json_encode($this->transport->object_unset_nulls($destinationId));
	     $gs_data_input2939299822982['args']["exceptionId"] = json_encode($this->transport->object_unset_nulls($exceptionId));
	     $gs_data_input2939299822982['args']["lon"] = json_encode($this->transport->object_unset_nulls($lon));
	     $gs_data_input2939299822982['args']["lat"] = json_encode($this->transport->object_unset_nulls($lat));
	     $gs_data_input2939299822982["method"] = "setDesitionationException";
	     $gs_data_input2939299822982["interfaceName"] = "core.trackandtrace.ITrackAndTraceManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Returns a list of all the pooled destinations.
	*
	* @param routeId
	* @param destinationId
	* @return String 
	*/

	public function setInstructionOnDestination($routeId, $destinationId, $message) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["routeId"] = json_encode($this->transport->object_unset_nulls($routeId));
	     $gs_data_input2939299822982['args']["destinationId"] = json_encode($this->transport->object_unset_nulls($destinationId));
	     $gs_data_input2939299822982['args']["message"] = json_encode($this->transport->object_unset_nulls($message));
	     $gs_data_input2939299822982["method"] = "setInstructionOnDestination";
	     $gs_data_input2939299822982["interfaceName"] = "core.trackandtrace.ITrackAndTraceManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Returns a list of all the pooled destinations.
	*
	* @param routeId
	* @param destinationId
	* @return void 
	*/

	public function setScannedBarcodes($taskId, $orderReference, $barcodes, $barcodeEnteredManually) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["taskId"] = json_encode($this->transport->object_unset_nulls($taskId));
	     $gs_data_input2939299822982['args']["orderReference"] = json_encode($this->transport->object_unset_nulls($orderReference));
	     $gs_data_input2939299822982['args']["barcodes"] = json_encode($this->transport->object_unset_nulls($barcodes));
	     $gs_data_input2939299822982['args']["barcodeEnteredManually"] = json_encode($this->transport->object_unset_nulls($barcodeEnteredManually));
	     $gs_data_input2939299822982["method"] = "setScannedBarcodes";
	     $gs_data_input2939299822982["interfaceName"] = "core.trackandtrace.ITrackAndTraceManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	*
	* @author ktonder
	* @return void 
	*/

	public function setSequence($exceptionId, $sequence) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["exceptionId"] = json_encode($this->transport->object_unset_nulls($exceptionId));
	     $gs_data_input2939299822982['args']["sequence"] = json_encode($this->transport->object_unset_nulls($sequence));
	     $gs_data_input2939299822982["method"] = "setSequence";
	     $gs_data_input2939299822982["interfaceName"] = "core.trackandtrace.ITrackAndTraceManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Returns a list of all the pooled destinations.
	*
	* @param routeId
	* @param destinationId
	* @return void 
	*/

	public function setSortingOfRoutes($sortingName) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["sortingName"] = json_encode($this->transport->object_unset_nulls($sortingName));
	     $gs_data_input2939299822982["method"] = "setSortingOfRoutes";
	     $gs_data_input2939299822982["interfaceName"] = "core.trackandtrace.ITrackAndTraceManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	*
	* @author ktonder
	* @return void 
	*/

	public function unsetSkippedReason($destinationId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["destinationId"] = json_encode($this->transport->object_unset_nulls($destinationId));
	     $gs_data_input2939299822982["method"] = "unsetSkippedReason";
	     $gs_data_input2939299822982["interfaceName"] = "core.trackandtrace.ITrackAndTraceManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

}
class APITrackerManager {

	var $transport;
	
	function APITrackerManager($transport) {
		$this->transport = $transport;
	}

	/**
	*
	* @author ktonder
	* @return core_trackermanager_TrackLog[] 
	*/

	public function getActivities($start, $end) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["start"] = json_encode($this->transport->object_unset_nulls($start));
	     $gs_data_input2939299822982['args']["end"] = json_encode($this->transport->object_unset_nulls($end));
	     $gs_data_input2939299822982["method"] = "getActivities";
	     $gs_data_input2939299822982["interfaceName"] = "core.trackermanager.ITrackerManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	*
	* @author ktonder
	* @return void 
	*/

	public function logTracking($applicationName, $type, $value, $textDescription) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["applicationName"] = json_encode($this->transport->object_unset_nulls($applicationName));
	     $gs_data_input2939299822982['args']["type"] = json_encode($this->transport->object_unset_nulls($type));
	     $gs_data_input2939299822982['args']["value"] = json_encode($this->transport->object_unset_nulls($value));
	     $gs_data_input2939299822982['args']["textDescription"] = json_encode($this->transport->object_unset_nulls($textDescription));
	     $gs_data_input2939299822982["method"] = "logTracking";
	     $gs_data_input2939299822982["interfaceName"] = "core.trackermanager.ITrackerManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

}
class APIUUIDSecurityManager {

	var $transport;
	
	function APIUUIDSecurityManager($transport) {
		$this->transport = $transport;
	}

	/**
	* Manager for handling security for uuids in getshop.
	* @return void 
	*/

	public function grantAccess($userId, $uuid, $read, $write) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["userId"] = json_encode($this->transport->object_unset_nulls($userId));
	     $gs_data_input2939299822982['args']["uuid"] = json_encode($this->transport->object_unset_nulls($uuid));
	     $gs_data_input2939299822982['args']["read"] = json_encode($this->transport->object_unset_nulls($read));
	     $gs_data_input2939299822982['args']["write"] = json_encode($this->transport->object_unset_nulls($write));
	     $gs_data_input2939299822982["method"] = "grantAccess";
	     $gs_data_input2939299822982["interfaceName"] = "core.uuidsecuritymanager.IUUIDSecurityManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Manager for handling security for uuids in getshop.
	* @return boolean 
	*/

	public function hasAccess($uuid, $read, $write) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["uuid"] = json_encode($this->transport->object_unset_nulls($uuid));
	     $gs_data_input2939299822982['args']["read"] = json_encode($this->transport->object_unset_nulls($read));
	     $gs_data_input2939299822982['args']["write"] = json_encode($this->transport->object_unset_nulls($write));
	     $gs_data_input2939299822982["method"] = "hasAccess";
	     $gs_data_input2939299822982["interfaceName"] = "core.uuidsecuritymanager.IUUIDSecurityManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

}
class APIUserManager {

	var $transport;
	
	function APIUserManager($transport) {
		$this->transport = $transport;
	}

	/**
	* Logon a given user.
	* @param email The username to use when logging on, an also be the users email.
	* @param password The password for this user in plain text.
	* @throws ErrorException
	* @return void 
	*/

	public function addCardToUser($userId, $card) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["userId"] = json_encode($this->transport->object_unset_nulls($userId));
	     $gs_data_input2939299822982['args']["card"] = json_encode($this->transport->object_unset_nulls($card));
	     $gs_data_input2939299822982["method"] = "addCardToUser";
	     $gs_data_input2939299822982["interfaceName"] = "core.usermanager.IUserManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Add a comment to a specific user.
	*
	* @param userId
	* @param comment
	* @throws ErrorException
	* @return void 
	*/

	public function addComment($userId, $comment) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["userId"] = json_encode($this->transport->object_unset_nulls($userId));
	     $gs_data_input2939299822982['args']["comment"] = json_encode($this->transport->object_unset_nulls($comment));
	     $gs_data_input2939299822982["method"] = "addComment";
	     $gs_data_input2939299822982["interfaceName"] = "core.usermanager.IUserManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* If an administrator is impersonating a lower user,
	* this function will return true.
	*
	* @throws ErrorException
	* @return void 
	*/

	public function addGroupToUser($userId, $groupId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["userId"] = json_encode($this->transport->object_unset_nulls($userId));
	     $gs_data_input2939299822982['args']["groupId"] = json_encode($this->transport->object_unset_nulls($groupId));
	     $gs_data_input2939299822982["method"] = "addGroupToUser";
	     $gs_data_input2939299822982["interfaceName"] = "core.usermanager.IUserManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* If an administrator is impersonating a lower user,
	* this function will return true.
	*
	* @throws ErrorException
	* @return void 
	*/

	public function addMetaData($userId, $key, $value) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["userId"] = json_encode($this->transport->object_unset_nulls($userId));
	     $gs_data_input2939299822982['args']["key"] = json_encode($this->transport->object_unset_nulls($key));
	     $gs_data_input2939299822982['args']["value"] = json_encode($this->transport->object_unset_nulls($value));
	     $gs_data_input2939299822982["method"] = "addMetaData";
	     $gs_data_input2939299822982["interfaceName"] = "core.usermanager.IUserManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Add priviliges to a another admin user.
	*
	* If a user is given a privilege, all the defaults are removed.
	* @param userId
	* @param managerName
	* @param managerFunction
	* @throws ErrorException
	* @return void 
	*/

	public function addUserPrivilege($userId, $managerName, $managerFunction) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["userId"] = json_encode($this->transport->object_unset_nulls($userId));
	     $gs_data_input2939299822982['args']["managerName"] = json_encode($this->transport->object_unset_nulls($managerName));
	     $gs_data_input2939299822982['args']["managerFunction"] = json_encode($this->transport->object_unset_nulls($managerFunction));
	     $gs_data_input2939299822982["method"] = "addUserPrivilege";
	     $gs_data_input2939299822982["interfaceName"] = "core.usermanager.IUserManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* If an administrator is impersonating a lower user,
	* this function will return true.
	*
	* @throws ErrorException
	* @return void 
	*/

	public function assignCompanyToGroup($company, $groupId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["company"] = json_encode($this->transport->object_unset_nulls($company));
	     $gs_data_input2939299822982['args']["groupId"] = json_encode($this->transport->object_unset_nulls($groupId));
	     $gs_data_input2939299822982["method"] = "assignCompanyToGroup";
	     $gs_data_input2939299822982["interfaceName"] = "core.usermanager.IUserManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* If an administrator is impersonating a lower user,
	* this function will return true.
	*
	* @throws ErrorException
	* @return void 
	*/

	public function assignCompanyToUser($company, $userId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["company"] = json_encode($this->transport->object_unset_nulls($company));
	     $gs_data_input2939299822982['args']["userId"] = json_encode($this->transport->object_unset_nulls($userId));
	     $gs_data_input2939299822982["method"] = "assignCompanyToUser";
	     $gs_data_input2939299822982["interfaceName"] = "core.usermanager.IUserManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* If an administrator is impersonating a lower user,
	* this function will return true.
	*
	* @throws ErrorException
	* @return void 
	*/

	public function assignMetaDataToVirtualSessionUser($key, $value) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["key"] = json_encode($this->transport->object_unset_nulls($key));
	     $gs_data_input2939299822982['args']["value"] = json_encode($this->transport->object_unset_nulls($value));
	     $gs_data_input2939299822982["method"] = "assignMetaDataToVirtualSessionUser";
	     $gs_data_input2939299822982["interfaceName"] = "core.usermanager.IUserManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* If an administrator is impersonating a lower user,
	* this function will return true.
	*
	* @throws ErrorException
	* @return void 
	*/

	public function assignReferenceToCompany($companyId, $companyReference) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["companyId"] = json_encode($this->transport->object_unset_nulls($companyId));
	     $gs_data_input2939299822982['args']["companyReference"] = json_encode($this->transport->object_unset_nulls($companyReference));
	     $gs_data_input2939299822982["method"] = "assignReferenceToCompany";
	     $gs_data_input2939299822982["interfaceName"] = "core.usermanager.IUserManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Check if its possible to create the user
	*
	* @throws ErrorException
	* @return Boolean 
	*/

	public function canCreateUser($user) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["user"] = json_encode($this->transport->object_unset_nulls($user));
	     $gs_data_input2939299822982["method"] = "canCreateUser";
	     $gs_data_input2939299822982["interfaceName"] = "core.usermanager.IUserManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Cancel the impersonation of a user.
	*
	* @throws ErrorException
	* @return void 
	*/

	public function cancelImpersonating() {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982["method"] = "cancelImpersonating";
	     $gs_data_input2939299822982["interfaceName"] = "core.usermanager.IUserManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* If an administrator is impersonating a lower user,
	* this function will return true.
	*
	* @throws ErrorException
	* @return boolean 
	*/

	public function checkIfFieldOnUserIsOkey($field, $value) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["field"] = json_encode($this->transport->object_unset_nulls($field));
	     $gs_data_input2939299822982['args']["value"] = json_encode($this->transport->object_unset_nulls($value));
	     $gs_data_input2939299822982["method"] = "checkIfFieldOnUserIsOkey";
	     $gs_data_input2939299822982["interfaceName"] = "core.usermanager.IUserManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* If an administrator is impersonating a lower user,
	* this function will return true.
	*
	* @throws ErrorException
	* @return core_usermanager_data_User 
	*/

	public function checkUserNameAndPassword($username, $password) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["username"] = json_encode($this->transport->object_unset_nulls($username));
	     $gs_data_input2939299822982['args']["password"] = json_encode($this->transport->object_unset_nulls($password));
	     $gs_data_input2939299822982["method"] = "checkUserNameAndPassword";
	     $gs_data_input2939299822982["interfaceName"] = "core.usermanager.IUserManager";
	     return $this->transport->cast(new core_usermanager_data_User(), $this->transport->sendMessage($gs_data_input2939299822982));
	}

	/**
	* If an administrator is impersonating a lower user,
	* this function will return true.
	*
	* @throws ErrorException
	* @return void 
	*/

	public function clearUserManagerForAllData() {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982["method"] = "clearUserManagerForAllData";
	     $gs_data_input2939299822982["interfaceName"] = "core.usermanager.IUserManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* If an administrator is impersonating a lower user,
	* this function will return true.
	*
	* @throws ErrorException
	* @return void 
	*/

	public function confirmCompanyOwner($userId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["userId"] = json_encode($this->transport->object_unset_nulls($userId));
	     $gs_data_input2939299822982["method"] = "confirmCompanyOwner";
	     $gs_data_input2939299822982["interfaceName"] = "core.usermanager.IUserManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Logon a given user.
	* @param email The username to use when logging on, an also be the users email.
	* @param password The password for this user in plain text.
	* @throws ErrorException
	* @return void 
	*/

	public function connectCompanyToUser($userId, $taxNumber) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["userId"] = json_encode($this->transport->object_unset_nulls($userId));
	     $gs_data_input2939299822982['args']["taxNumber"] = json_encode($this->transport->object_unset_nulls($taxNumber));
	     $gs_data_input2939299822982["method"] = "connectCompanyToUser";
	     $gs_data_input2939299822982["interfaceName"] = "core.usermanager.IUserManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* If an administrator is impersonating a lower user,
	* this function will return true.
	*
	* @throws ErrorException
	* @return core_usermanager_data_User 
	*/

	public function createCompany($vatNumber, $name) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["vatNumber"] = json_encode($this->transport->object_unset_nulls($vatNumber));
	     $gs_data_input2939299822982['args']["name"] = json_encode($this->transport->object_unset_nulls($name));
	     $gs_data_input2939299822982["method"] = "createCompany";
	     $gs_data_input2939299822982["interfaceName"] = "core.usermanager.IUserManager";
	     return $this->transport->cast(new core_usermanager_data_User(), $this->transport->sendMessage($gs_data_input2939299822982));
	}

	/**
	* If an administrator is impersonating a lower user,
	* this function will return true.
	*
	* @throws ErrorException
	* @return void 
	*/

	public function createGoogleTotpForUser($userId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["userId"] = json_encode($this->transport->object_unset_nulls($userId));
	     $gs_data_input2939299822982["method"] = "createGoogleTotpForUser";
	     $gs_data_input2939299822982["interfaceName"] = "core.usermanager.IUserManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Create a new user to your webshop.<br>
	* This will fail if you are trying to create a user which is granted more access then you have yourself.<br>
	* If no users has been created, then the user object will automatically be set as an administrator.<br>
	* That is how you create your first user, set the User.type field to 0.
	* @param user The new user to be created. and the password is sent as plain text.
	* @throws ErrorException
	* @return core_usermanager_data_User 
	*/

	public function createUser($user) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["user"] = json_encode($this->transport->object_unset_nulls($user));
	     $gs_data_input2939299822982["method"] = "createUser";
	     $gs_data_input2939299822982["interfaceName"] = "core.usermanager.IUserManager";
	     return $this->transport->cast(new core_usermanager_data_User(), $this->transport->sendMessage($gs_data_input2939299822982));
	}

	/**
	* If an administrator is impersonating a lower user,
	* this function will return true.
	*
	* @throws ErrorException
	* @return void 
	*/

	public function deleteCompany($companyId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["companyId"] = json_encode($this->transport->object_unset_nulls($companyId));
	     $gs_data_input2939299822982["method"] = "deleteCompany";
	     $gs_data_input2939299822982["interfaceName"] = "core.usermanager.IUserManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* If an administrator is impersonating a lower user,
	* this function will return true.
	*
	* @throws ErrorException
	* @return void 
	*/

	public function deleteExtraAddressToGroup($groupId, $addressId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["groupId"] = json_encode($this->transport->object_unset_nulls($groupId));
	     $gs_data_input2939299822982['args']["addressId"] = json_encode($this->transport->object_unset_nulls($addressId));
	     $gs_data_input2939299822982["method"] = "deleteExtraAddressToGroup";
	     $gs_data_input2939299822982["interfaceName"] = "core.usermanager.IUserManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Delete a registered user.
	* This will fail if you are trying to create a user which is granted more access then you have yourself.
	* @param userId The id for the user to delete.
	* @throws ErrorException
	* @return void 
	*/

	public function deleteUser($userId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["userId"] = json_encode($this->transport->object_unset_nulls($userId));
	     $gs_data_input2939299822982["method"] = "deleteUser";
	     $gs_data_input2939299822982["interfaceName"] = "core.usermanager.IUserManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* If an administrator is impersonating a lower user,
	* this function will return true.
	*
	* @throws ErrorException
	* @return void 
	*/

	public function deleteUserRole($roleId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["roleId"] = json_encode($this->transport->object_unset_nulls($roleId));
	     $gs_data_input2939299822982["method"] = "deleteUserRole";
	     $gs_data_input2939299822982["interfaceName"] = "core.usermanager.IUserManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Check if a user already exists with the given email.
	* @param email The email used when registering.
	* @throws ErrorException
	* @return boolean 
	*/

	public function doEmailExists($email) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["email"] = json_encode($this->transport->object_unset_nulls($email));
	     $gs_data_input2939299822982["method"] = "doEmailExists";
	     $gs_data_input2939299822982["interfaceName"] = "core.usermanager.IUserManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* If an administrator is impersonating a lower user,
	* this function will return true.
	*
	* @throws ErrorException
	* @return boolean 
	*/

	public function doesUserExistsOnReferenceNumber($number) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["number"] = json_encode($this->transport->object_unset_nulls($number));
	     $gs_data_input2939299822982["method"] = "doesUserExistsOnReferenceNumber";
	     $gs_data_input2939299822982["interfaceName"] = "core.usermanager.IUserManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Find all users with a given search criteria.
	* @param searchCriteria The criteria to search for
	* @throws ErrorException
	* @return core_usermanager_data_User[] 
	*/

	public function findUsers($searchCriteria) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["searchCriteria"] = json_encode($this->transport->object_unset_nulls($searchCriteria));
	     $gs_data_input2939299822982["method"] = "findUsers";
	     $gs_data_input2939299822982["interfaceName"] = "core.usermanager.IUserManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* If an administrator is impersonating a lower user,
	* this function will return true.
	*
	* @throws ErrorException
	* @return void 
	*/

	public function forceCompanyOwner($userId, $isCompanyOwner) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["userId"] = json_encode($this->transport->object_unset_nulls($userId));
	     $gs_data_input2939299822982['args']["isCompanyOwner"] = json_encode($this->transport->object_unset_nulls($isCompanyOwner));
	     $gs_data_input2939299822982["method"] = "forceCompanyOwner";
	     $gs_data_input2939299822982["interfaceName"] = "core.usermanager.IUserManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Gets the count of how many adminsitrators
	* is available for the page
	* @return int 
	*/

	public function getAdministratorCount() {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982["method"] = "getAdministratorCount";
	     $gs_data_input2939299822982["interfaceName"] = "core.usermanager.IUserManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* If an administrator is impersonating a lower user,
	* this function will return true.
	*
	* @throws ErrorException
	* @return core_usermanager_data_Company[] 
	*/

	public function getAllCompanies() {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982["method"] = "getAllCompanies";
	     $gs_data_input2939299822982["interfaceName"] = "core.usermanager.IUserManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* If an administrator is impersonating a lower user,
	* this function will return true.
	*
	* @throws ErrorException
	* @return core_usermanager_data_Company[] 
	*/

	public function getAllCompaniesForGroup($groupId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["groupId"] = json_encode($this->transport->object_unset_nulls($groupId));
	     $gs_data_input2939299822982["method"] = "getAllCompaniesForGroup";
	     $gs_data_input2939299822982["interfaceName"] = "core.usermanager.IUserManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Fetch all the companies registered to this webshop.
	* @throws ErrorException
	* @return core_common_FilteredData 
	*/

	public function getAllCompanyFiltered($filter) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["filter"] = json_encode($this->transport->object_unset_nulls($filter));
	     $gs_data_input2939299822982["method"] = "getAllCompanyFiltered";
	     $gs_data_input2939299822982["interfaceName"] = "core.usermanager.IUserManager";
	     return $this->transport->cast(new core_common_FilteredData(), $this->transport->sendMessage($gs_data_input2939299822982));
	}

	/**
	* Returns all the groups
	* that has been created for this
	* webpage.
	*
	* @return core_usermanager_data_Group[] 
	*/

	public function getAllGroups() {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982["method"] = "getAllGroups";
	     $gs_data_input2939299822982["interfaceName"] = "core.usermanager.IUserManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Gets a set of filetered groups
	*
	* @param filter
	* @return core_common_FilteredData 
	*/

	public function getAllGroupsFiletered($filter) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["filter"] = json_encode($this->transport->object_unset_nulls($filter));
	     $gs_data_input2939299822982["method"] = "getAllGroupsFiletered";
	     $gs_data_input2939299822982["interfaceName"] = "core.usermanager.IUserManager";
	     return $this->transport->cast(new core_common_FilteredData(), $this->transport->sendMessage($gs_data_input2939299822982));
	}

	/**
	* Fetch all the users registered to this webshop.
	* @throws ErrorException
	* @return core_usermanager_data_User[] 
	*/

	public function getAllUsers() {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982["method"] = "getAllUsers";
	     $gs_data_input2939299822982["interfaceName"] = "core.usermanager.IUserManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Fetch all the users registered to this webshop.
	* @throws ErrorException
	* @return core_common_FilteredData 
	*/

	public function getAllUsersFiltered($filter) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["filter"] = json_encode($this->transport->object_unset_nulls($filter));
	     $gs_data_input2939299822982["method"] = "getAllUsersFiltered";
	     $gs_data_input2939299822982["interfaceName"] = "core.usermanager.IUserManager";
	     return $this->transport->cast(new core_common_FilteredData(), $this->transport->sendMessage($gs_data_input2939299822982));
	}

	/**
	* Find all users that has one or more comments
	* connected to the specified appId.
	*
	* @param appId
	* @return core_usermanager_data_SimpleUser[] 
	*/

	public function getAllUsersSimple() {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982["method"] = "getAllUsersSimple";
	     $gs_data_input2939299822982["interfaceName"] = "core.usermanager.IUserManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Find all users that has one or more comments
	* connected to the specified appId.
	*
	* @param appId
	* @return core_usermanager_data_User[] 
	*/

	public function getAllUsersWithCommentToApp($appId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["appId"] = json_encode($this->transport->object_unset_nulls($appId));
	     $gs_data_input2939299822982["method"] = "getAllUsersWithCommentToApp";
	     $gs_data_input2939299822982["interfaceName"] = "core.usermanager.IUserManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Create a new user to your webshop.<br>
	* This will fail if you are trying to create a user which is granted more access then you have yourself.<br>
	* If no users has been created, then the user object will automatically be set as an administrator.<br>
	* That is how you create your first user, set the User.type field to 0.
	* @param user The new user to be created. and the password is sent as plain text.
	* @throws ErrorException
	* @return core_usermanager_data_UserCard 
	*/

	public function getCard($cardId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["cardId"] = json_encode($this->transport->object_unset_nulls($cardId));
	     $gs_data_input2939299822982["method"] = "getCard";
	     $gs_data_input2939299822982["interfaceName"] = "core.usermanager.IUserManager";
	     return $this->transport->cast(new core_usermanager_data_UserCard(), $this->transport->sendMessage($gs_data_input2939299822982));
	}

	/**
	* If an administrator is impersonating a lower user,
	* this function will return true.
	*
	* @throws ErrorException
	* @return Long 
	*/

	public function getCompaniesConnectedToGroupCount($groupId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["groupId"] = json_encode($this->transport->object_unset_nulls($groupId));
	     $gs_data_input2939299822982["method"] = "getCompaniesConnectedToGroupCount";
	     $gs_data_input2939299822982["interfaceName"] = "core.usermanager.IUserManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* If an administrator is impersonating a lower user,
	* this function will return true.
	*
	* @throws ErrorException
	* @return core_usermanager_data_Company 
	*/

	public function getCompany($id) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["id"] = json_encode($this->transport->object_unset_nulls($id));
	     $gs_data_input2939299822982["method"] = "getCompany";
	     $gs_data_input2939299822982["interfaceName"] = "core.usermanager.IUserManager";
	     return $this->transport->cast(new core_usermanager_data_Company(), $this->transport->sendMessage($gs_data_input2939299822982));
	}

	/**
	* If an administrator is impersonating a lower user,
	* this function will return true.
	*
	* @throws ErrorException
	* @return core_usermanager_data_Company 
	*/

	public function getCompanyByReference($companyReference) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["companyReference"] = json_encode($this->transport->object_unset_nulls($companyReference));
	     $gs_data_input2939299822982["method"] = "getCompanyByReference";
	     $gs_data_input2939299822982["interfaceName"] = "core.usermanager.IUserManager";
	     return $this->transport->cast(new core_usermanager_data_Company(), $this->transport->sendMessage($gs_data_input2939299822982));
	}

	/**
	* Gets the count of how many customers
	* is available for the page
	* @return int 
	*/

	public function getCustomersCount() {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982["method"] = "getCustomersCount";
	     $gs_data_input2939299822982["interfaceName"] = "core.usermanager.IUserManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Gets the count of how many editors
	* is available for the page
	* @return int 
	*/

	public function getEditorCount() {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982["method"] = "getEditorCount";
	     $gs_data_input2939299822982["interfaceName"] = "core.usermanager.IUserManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* If an administrator is impersonating a lower user,
	* this function will return true.
	*
	* @throws ErrorException
	* @return core_usermanager_data_Group 
	*/

	public function getGroup($groupId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["groupId"] = json_encode($this->transport->object_unset_nulls($groupId));
	     $gs_data_input2939299822982["method"] = "getGroup";
	     $gs_data_input2939299822982["interfaceName"] = "core.usermanager.IUserManager";
	     return $this->transport->cast(new core_usermanager_data_Group(), $this->transport->sendMessage($gs_data_input2939299822982));
	}

	/**
	* Fetch the currently logged on user.
	* @return core_usermanager_data_User 
	*/

	public function getLoggedOnUser() {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982["method"] = "getLoggedOnUser";
	     $gs_data_input2939299822982["interfaceName"] = "core.usermanager.IUserManager";
	     return $this->transport->cast(new core_usermanager_data_User(), $this->transport->sendMessage($gs_data_input2939299822982));
	}

	/**
	* If an administrator is impersonating a lower user,
	* this function will return true.
	*
	* @throws ErrorException
	* @return Integer[] 
	*/

	public function getLogins($year) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["year"] = json_encode($this->transport->object_unset_nulls($year));
	     $gs_data_input2939299822982["method"] = "getLogins";
	     $gs_data_input2939299822982["interfaceName"] = "core.usermanager.IUserManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* If an administrator is impersonating a lower user,
	* this function will return true.
	*
	* @throws ErrorException
	* @return Integer 
	*/

	public function getPingoutTime() {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982["method"] = "getPingoutTime";
	     $gs_data_input2939299822982["interfaceName"] = "core.usermanager.IUserManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Logon a given user.
	* @param email The username to use when logging on, an also be the users email.
	* @param password The password for this user in plain text.
	* @throws ErrorException
	* @return core_usermanager_data_User[] 
	*/

	public function getSubUsers($userId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["userId"] = json_encode($this->transport->object_unset_nulls($userId));
	     $gs_data_input2939299822982["method"] = "getSubUsers";
	     $gs_data_input2939299822982["interfaceName"] = "core.usermanager.IUserManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* If an administrator is impersonating a lower user,
	* this function will return true.
	*
	* @throws ErrorException
	* @return core_usermanager_data_User[] 
	*/

	public function getUnconfirmedCompanyOwners() {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982["method"] = "getUnconfirmedCompanyOwners";
	     $gs_data_input2939299822982["interfaceName"] = "core.usermanager.IUserManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Fetch a user
	* @param id
	* @throws ErrorException
	* @return core_usermanager_data_User 
	*/

	public function getUserById($id) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["id"] = json_encode($this->transport->object_unset_nulls($id));
	     $gs_data_input2939299822982["method"] = "getUserById";
	     $gs_data_input2939299822982["interfaceName"] = "core.usermanager.IUserManager";
	     return $this->transport->cast(new core_usermanager_data_User(), $this->transport->sendMessage($gs_data_input2939299822982));
	}

	/**
	* Fetch all users with the given user ids.
	* @param userIds A list of user ids.
	* @throws ErrorException
	* @return core_usermanager_data_User[] 
	*/

	public function getUserList($userIds) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["userIds"] = json_encode($this->transport->object_unset_nulls($userIds));
	     $gs_data_input2939299822982["method"] = "getUserList";
	     $gs_data_input2939299822982["interfaceName"] = "core.usermanager.IUserManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* If an administrator is impersonating a lower user,
	* this function will return true.
	*
	* @throws ErrorException
	* @return core_usermanager_data_UserRole[] 
	*/

	public function getUserRoles() {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982["method"] = "getUserRoles";
	     $gs_data_input2939299822982["interfaceName"] = "core.usermanager.IUserManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* If an administrator is impersonating a lower user,
	* this function will return true.
	*
	* @throws ErrorException
	* @return core_usermanager_data_User 
	*/

	public function getUserWithPermissionCheck($userId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["userId"] = json_encode($this->transport->object_unset_nulls($userId));
	     $gs_data_input2939299822982["method"] = "getUserWithPermissionCheck";
	     $gs_data_input2939299822982["interfaceName"] = "core.usermanager.IUserManager";
	     return $this->transport->cast(new core_usermanager_data_User(), $this->transport->sendMessage($gs_data_input2939299822982));
	}

	/**
	* If an administrator is impersonating a lower user,
	* this function will return true.
	*
	* @throws ErrorException
	* @return core_usermanager_data_User[] 
	*/

	public function getUsersBasedOnGroupId($groupId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["groupId"] = json_encode($this->transport->object_unset_nulls($groupId));
	     $gs_data_input2939299822982["method"] = "getUsersBasedOnGroupId";
	     $gs_data_input2939299822982["interfaceName"] = "core.usermanager.IUserManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* If an administrator is impersonating a lower user,
	* this function will return true.
	*
	* @throws ErrorException
	* @return core_usermanager_data_User[] 
	*/

	public function getUsersByCompanyId($companyId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["companyId"] = json_encode($this->transport->object_unset_nulls($companyId));
	     $gs_data_input2939299822982["method"] = "getUsersByCompanyId";
	     $gs_data_input2939299822982["interfaceName"] = "core.usermanager.IUserManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Fetch all the users registered to this webshop.
	* @throws ErrorException
	* @return core_usermanager_data_User[] 
	*/

	public function getUsersByType($type) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["type"] = json_encode($this->transport->object_unset_nulls($type));
	     $gs_data_input2939299822982["method"] = "getUsersByType";
	     $gs_data_input2939299822982["interfaceName"] = "core.usermanager.IUserManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Switch the context of what user you are logged in as.
	*
	* @throws ErrorException
	* @return void 
	*/

	public function impersonateUser($userId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["userId"] = json_encode($this->transport->object_unset_nulls($userId));
	     $gs_data_input2939299822982["method"] = "impersonateUser";
	     $gs_data_input2939299822982["interfaceName"] = "core.usermanager.IUserManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Check if the user is a real star trek hero!
	* @param id The id of the user to check on.
	* @throws ErrorException
	* @return boolean 
	*/

	public function isCaptain($id) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["id"] = json_encode($this->transport->object_unset_nulls($id));
	     $gs_data_input2939299822982["method"] = "isCaptain";
	     $gs_data_input2939299822982["interfaceName"] = "core.usermanager.IUserManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* If an administrator is impersonating a lower user,
	* this function will return true.
	*
	* @throws ErrorException
	* @return boolean 
	*/

	public function isImpersonating() {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982["method"] = "isImpersonating";
	     $gs_data_input2939299822982["interfaceName"] = "core.usermanager.IUserManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Check if this session is logged on or not.
	* @throws ErrorException
	* @return boolean 
	*/

	public function isLoggedIn() {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982["method"] = "isLoggedIn";
	     $gs_data_input2939299822982["interfaceName"] = "core.usermanager.IUserManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* If an administrator is impersonating a lower user,
	* this function will return true.
	*
	* @throws ErrorException
	* @return void 
	*/

	public function logLogout() {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982["method"] = "logLogout";
	     $gs_data_input2939299822982["interfaceName"] = "core.usermanager.IUserManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Logon a given user.
	* @param email The username to use when logging on, an also be the users email.
	* @param password The password for this user in plain text.
	* @throws ErrorException
	* @return core_usermanager_data_User 
	*/

	public function logOn($username, $password) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["username"] = json_encode($this->transport->object_unset_nulls($username));
	     $gs_data_input2939299822982['args']["password"] = json_encode($this->transport->object_unset_nulls($password));
	     $gs_data_input2939299822982["method"] = "logOn";
	     $gs_data_input2939299822982["interfaceName"] = "core.usermanager.IUserManager";
	     return $this->transport->cast(new core_usermanager_data_User(), $this->transport->sendMessage($gs_data_input2939299822982));
	}

	/**
	* If an administrator is impersonating a lower user,
	* this function will return true.
	*
	* @throws ErrorException
	* @return core_usermanager_data_User 
	*/

	public function loginWithPincode($username, $password, $pinCode) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["username"] = json_encode($this->transport->object_unset_nulls($username));
	     $gs_data_input2939299822982['args']["password"] = json_encode($this->transport->object_unset_nulls($password));
	     $gs_data_input2939299822982['args']["pinCode"] = json_encode($this->transport->object_unset_nulls($pinCode));
	     $gs_data_input2939299822982["method"] = "loginWithPincode";
	     $gs_data_input2939299822982["interfaceName"] = "core.usermanager.IUserManager";
	     return $this->transport->cast(new core_usermanager_data_User(), $this->transport->sendMessage($gs_data_input2939299822982));
	}

	/**
	* Sometimes it is needed for someone to logon using a generated key instead.<br>
	* The key is unique and attached to the user trying to logon.<br>
	* Whenever someone logs on using the key,<br> it will automatically be removed, this it is only valid once.<br>
	* @param logonKey A unique key identifying the user which is trying to logon.
	* @throws ErrorException
	* @return core_usermanager_data_User 
	*/

	public function logonUsingKey($logonKey) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["logonKey"] = json_encode($this->transport->object_unset_nulls($logonKey));
	     $gs_data_input2939299822982["method"] = "logonUsingKey";
	     $gs_data_input2939299822982["interfaceName"] = "core.usermanager.IUserManager";
	     return $this->transport->cast(new core_usermanager_data_User(), $this->transport->sendMessage($gs_data_input2939299822982));
	}

	/**
	* Sometimes it is needed for someone to logon using a generated key instead.<br>
	* The key is unique and attached to the user trying to logon.<br>
	* Whenever someone logs on using the key,<br> it will automatically be removed, this it is only valid once.<br>
	* @param logonKey A unique key identifying the user which is trying to logon.
	* @throws ErrorException
	* @return core_usermanager_data_User 
	*/

	public function logonUsingRefNumber($refCode) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["refCode"] = json_encode($this->transport->object_unset_nulls($refCode));
	     $gs_data_input2939299822982["method"] = "logonUsingRefNumber";
	     $gs_data_input2939299822982["interfaceName"] = "core.usermanager.IUserManager";
	     return $this->transport->cast(new core_usermanager_data_User(), $this->transport->sendMessage($gs_data_input2939299822982));
	}

	/**
	* If an administrator is impersonating a lower user,
	* this function will return true.
	*
	* @throws ErrorException
	* @return core_usermanager_data_User 
	*/

	public function logonUsingTotp($username, $password, $oneTimeCode) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["username"] = json_encode($this->transport->object_unset_nulls($username));
	     $gs_data_input2939299822982['args']["password"] = json_encode($this->transport->object_unset_nulls($password));
	     $gs_data_input2939299822982['args']["oneTimeCode"] = json_encode($this->transport->object_unset_nulls($oneTimeCode));
	     $gs_data_input2939299822982["method"] = "logonUsingTotp";
	     $gs_data_input2939299822982["interfaceName"] = "core.usermanager.IUserManager";
	     return $this->transport->cast(new core_usermanager_data_User(), $this->transport->sendMessage($gs_data_input2939299822982));
	}

	/**
	* If an administrator is impersonating a lower user,
	* this function will return true.
	*
	* @throws ErrorException
	* @return core_usermanager_data_User 
	*/

	public function logonUsingTotpAgainstCrm($username, $password, $oneTimeCode) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["username"] = json_encode($this->transport->object_unset_nulls($username));
	     $gs_data_input2939299822982['args']["password"] = json_encode($this->transport->object_unset_nulls($password));
	     $gs_data_input2939299822982['args']["oneTimeCode"] = json_encode($this->transport->object_unset_nulls($oneTimeCode));
	     $gs_data_input2939299822982["method"] = "logonUsingTotpAgainstCrm";
	     $gs_data_input2939299822982["interfaceName"] = "core.usermanager.IUserManager";
	     return $this->transport->cast(new core_usermanager_data_User(), $this->transport->sendMessage($gs_data_input2939299822982));
	}

	/**
	* Logout the currently logged on user.
	* @throws ErrorException
	* @return void 
	*/

	public function logout() {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982["method"] = "logout";
	     $gs_data_input2939299822982["interfaceName"] = "core.usermanager.IUserManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* If an administrator is impersonating a lower user,
	* this function will return true.
	*
	* @throws ErrorException
	* @return void 
	*/

	public function mergeUsers($userIds, $properties) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["userIds"] = json_encode($this->transport->object_unset_nulls($userIds));
	     $gs_data_input2939299822982['args']["properties"] = json_encode($this->transport->object_unset_nulls($properties));
	     $gs_data_input2939299822982["method"] = "mergeUsers";
	     $gs_data_input2939299822982["interfaceName"] = "core.usermanager.IUserManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Removes the comment from a user
	* @param userId
	* @param commentId
	* @throws ErrorException
	* @return void 
	*/

	public function removeComment($userId, $commentId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["userId"] = json_encode($this->transport->object_unset_nulls($userId));
	     $gs_data_input2939299822982['args']["commentId"] = json_encode($this->transport->object_unset_nulls($commentId));
	     $gs_data_input2939299822982["method"] = "removeComment";
	     $gs_data_input2939299822982["interfaceName"] = "core.usermanager.IUserManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Delete a specified group.
	*
	* @param groupId
	* @throws ErrorException
	* @return void 
	*/

	public function removeGroup($groupId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["groupId"] = json_encode($this->transport->object_unset_nulls($groupId));
	     $gs_data_input2939299822982["method"] = "removeGroup";
	     $gs_data_input2939299822982["interfaceName"] = "core.usermanager.IUserManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* If an administrator is impersonating a lower user,
	* this function will return true.
	*
	* @throws ErrorException
	* @return void 
	*/

	public function removeGroupFromUser($userId, $groupId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["userId"] = json_encode($this->transport->object_unset_nulls($userId));
	     $gs_data_input2939299822982['args']["groupId"] = json_encode($this->transport->object_unset_nulls($groupId));
	     $gs_data_input2939299822982["method"] = "removeGroupFromUser";
	     $gs_data_input2939299822982["interfaceName"] = "core.usermanager.IUserManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* If an administrator is impersonating a lower user,
	* this function will return true.
	*
	* @throws ErrorException
	* @return void 
	*/

	public function removeMetaData($userId, $key) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["userId"] = json_encode($this->transport->object_unset_nulls($userId));
	     $gs_data_input2939299822982['args']["key"] = json_encode($this->transport->object_unset_nulls($key));
	     $gs_data_input2939299822982["method"] = "removeMetaData";
	     $gs_data_input2939299822982["interfaceName"] = "core.usermanager.IUserManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* If an administrator is impersonating a lower user,
	* this function will return true.
	*
	* @throws ErrorException
	* @return void 
	*/

	public function removeUserFromCompany($companyId, $userId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["companyId"] = json_encode($this->transport->object_unset_nulls($companyId));
	     $gs_data_input2939299822982['args']["userId"] = json_encode($this->transport->object_unset_nulls($userId));
	     $gs_data_input2939299822982["method"] = "removeUserFromCompany";
	     $gs_data_input2939299822982["interfaceName"] = "core.usermanager.IUserManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* This function will return a user new admin user that has access to only invoke the function
	* specified in the paramters.
	*
	* The password field on the user will be in cleartext so it can be saved by the application
	* that request this feature.
	*
	* @param managerName
	* @param managerFunction
	* @throws ErrorException
	* @return core_usermanager_data_User 
	*/

	public function requestAdminRight($managerName, $managerFunction, $applicationInstanceId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["managerName"] = json_encode($this->transport->object_unset_nulls($managerName));
	     $gs_data_input2939299822982['args']["managerFunction"] = json_encode($this->transport->object_unset_nulls($managerFunction));
	     $gs_data_input2939299822982['args']["applicationInstanceId"] = json_encode($this->transport->object_unset_nulls($applicationInstanceId));
	     $gs_data_input2939299822982["method"] = "requestAdminRight";
	     $gs_data_input2939299822982["interfaceName"] = "core.usermanager.IUserManager";
	     return $this->transport->cast(new core_usermanager_data_User(), $this->transport->sendMessage($gs_data_input2939299822982));
	}

	/**
	* If an administrator is impersonating a lower user,
	* this function will return true.
	*
	* @throws ErrorException
	* @return boolean 
	*/

	public function requestNewPincode($username, $password) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["username"] = json_encode($this->transport->object_unset_nulls($username));
	     $gs_data_input2939299822982['args']["password"] = json_encode($this->transport->object_unset_nulls($password));
	     $gs_data_input2939299822982["method"] = "requestNewPincode";
	     $gs_data_input2939299822982["interfaceName"] = "core.usermanager.IUserManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* When the reset code has been sent, you can reset your password with the given reset code.
	* @param resetCode The code sent by sendResetCode call.
	* @param username The username for the user to update, the email address is the most common username.
	* @param newPassword The new password to send as plain text.
	* @throws ErrorException
	* @return Integer 
	*/

	public function resetPassword($resetCode, $username, $newPassword) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["resetCode"] = json_encode($this->transport->object_unset_nulls($resetCode));
	     $gs_data_input2939299822982['args']["username"] = json_encode($this->transport->object_unset_nulls($username));
	     $gs_data_input2939299822982['args']["newPassword"] = json_encode($this->transport->object_unset_nulls($newPassword));
	     $gs_data_input2939299822982["method"] = "resetPassword";
	     $gs_data_input2939299822982["interfaceName"] = "core.usermanager.IUserManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* If an administrator is impersonating a lower user,
	* this function will return true.
	*
	* @throws ErrorException
	* @return core_usermanager_data_Company 
	*/

	public function saveCompany($company) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["company"] = json_encode($this->transport->object_unset_nulls($company));
	     $gs_data_input2939299822982["method"] = "saveCompany";
	     $gs_data_input2939299822982["interfaceName"] = "core.usermanager.IUserManager";
	     return $this->transport->cast(new core_usermanager_data_Company(), $this->transport->sendMessage($gs_data_input2939299822982));
	}

	/**
	* If an administrator is impersonating a lower user,
	* this function will return true.
	*
	* @throws ErrorException
	* @return void 
	*/

	public function saveExtraAddressToGroup($group, $address) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["group"] = json_encode($this->transport->object_unset_nulls($group));
	     $gs_data_input2939299822982['args']["address"] = json_encode($this->transport->object_unset_nulls($address));
	     $gs_data_input2939299822982["method"] = "saveExtraAddressToGroup";
	     $gs_data_input2939299822982["interfaceName"] = "core.usermanager.IUserManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Create a new group.
	* A group is a way to collect all users
	* together. If an administrator belongs to a
	* group, it will only be able to see/modify the
	* users that are within the same group.
	*
	* @param groupName
	* @param imageId
	* @throws ErrorException
	* @return core_usermanager_data_Group 
	*/

	public function saveGroup($group) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["group"] = json_encode($this->transport->object_unset_nulls($group));
	     $gs_data_input2939299822982["method"] = "saveGroup";
	     $gs_data_input2939299822982["interfaceName"] = "core.usermanager.IUserManager";
	     return $this->transport->cast(new core_usermanager_data_Group(), $this->transport->sendMessage($gs_data_input2939299822982));
	}

	/**
	* Update a given user.<br>
	* This will fail if you are trying to update a user which is granted more access then you have yourself.
	* @param user You can not change the password, use updatePassword to change the password.
	* @throws ErrorException
	* @return void 
	*/

	public function saveUser($user) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["user"] = json_encode($this->transport->object_unset_nulls($user));
	     $gs_data_input2939299822982["method"] = "saveUser";
	     $gs_data_input2939299822982["interfaceName"] = "core.usermanager.IUserManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* If an administrator is impersonating a lower user,
	* this function will return true.
	*
	* @throws ErrorException
	* @return void 
	*/

	public function saveUserRole($role) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["role"] = json_encode($this->transport->object_unset_nulls($role));
	     $gs_data_input2939299822982["method"] = "saveUserRole";
	     $gs_data_input2939299822982["interfaceName"] = "core.usermanager.IUserManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* If an administrator is impersonating a lower user,
	* this function will return true.
	*
	* @throws ErrorException
	* @return core_usermanager_data_Company[] 
	*/

	public function searchForCompanies($searchWord) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["searchWord"] = json_encode($this->transport->object_unset_nulls($searchWord));
	     $gs_data_input2939299822982["method"] = "searchForCompanies";
	     $gs_data_input2939299822982["interfaceName"] = "core.usermanager.IUserManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* If an administrator is impersonating a lower user,
	* this function will return true.
	*
	* @throws ErrorException
	* @return core_usermanager_data_Group[] 
	*/

	public function searchForGroup($searchCriteria) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["searchCriteria"] = json_encode($this->transport->object_unset_nulls($searchCriteria));
	     $gs_data_input2939299822982["method"] = "searchForGroup";
	     $gs_data_input2939299822982["interfaceName"] = "core.usermanager.IUserManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* If you need to reset the password for a given user, you need fetch a reset code by calling this call.
	* @param title The title of the message to attach to the reset code.
	* @param text The text to attach to the mail being sent with the reset code.
	* @param username The username to identify the user, the email address is the most common username.
	* @throws ErrorException
	* @return Integer 
	*/

	public function sendResetCode($title, $text, $username) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["title"] = json_encode($this->transport->object_unset_nulls($title));
	     $gs_data_input2939299822982['args']["text"] = json_encode($this->transport->object_unset_nulls($text));
	     $gs_data_input2939299822982['args']["username"] = json_encode($this->transport->object_unset_nulls($username));
	     $gs_data_input2939299822982["method"] = "sendResetCode";
	     $gs_data_input2939299822982["interfaceName"] = "core.usermanager.IUserManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Update a given user.<br>
	* This will fail if you are trying to update a user which is granted more access then you have yourself.
	* @param user You can not change the password, use updatePassword to change the password.
	* @throws ErrorException
	* @return void 
	*/

	public function setPasswordDirect($userId, $encryptedPassword) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["userId"] = json_encode($this->transport->object_unset_nulls($userId));
	     $gs_data_input2939299822982['args']["encryptedPassword"] = json_encode($this->transport->object_unset_nulls($encryptedPassword));
	     $gs_data_input2939299822982["method"] = "setPasswordDirect";
	     $gs_data_input2939299822982["interfaceName"] = "core.usermanager.IUserManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* If an administrator is impersonating a lower user,
	* this function will return true.
	*
	* @throws ErrorException
	* @return void 
	*/

	public function setSessionCompany($companyId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["companyId"] = json_encode($this->transport->object_unset_nulls($companyId));
	     $gs_data_input2939299822982["method"] = "setSessionCompany";
	     $gs_data_input2939299822982["interfaceName"] = "core.usermanager.IUserManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Logon a given user.
	* @param email The username to use when logging on, an also be the users email.
	* @param password The password for this user in plain text.
	* @throws ErrorException
	* @return void 
	*/

	public function toggleMainContact($userId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["userId"] = json_encode($this->transport->object_unset_nulls($userId));
	     $gs_data_input2939299822982["method"] = "toggleMainContact";
	     $gs_data_input2939299822982["interfaceName"] = "core.usermanager.IUserManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* If an administrator is impersonating a lower user,
	* this function will return true.
	*
	* @throws ErrorException
	* @return void 
	*/

	public function toggleModuleForUser($moduleId, $password) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["moduleId"] = json_encode($this->transport->object_unset_nulls($moduleId));
	     $gs_data_input2939299822982['args']["password"] = json_encode($this->transport->object_unset_nulls($password));
	     $gs_data_input2939299822982["method"] = "toggleModuleForUser";
	     $gs_data_input2939299822982["interfaceName"] = "core.usermanager.IUserManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* If an administrator is impersonating a lower user,
	* this function will return true.
	*
	* @throws ErrorException
	* @return void 
	*/

	public function undoSuspension($userId, $suspensionId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["userId"] = json_encode($this->transport->object_unset_nulls($userId));
	     $gs_data_input2939299822982['args']["suspensionId"] = json_encode($this->transport->object_unset_nulls($suspensionId));
	     $gs_data_input2939299822982["method"] = "undoSuspension";
	     $gs_data_input2939299822982["interfaceName"] = "core.usermanager.IUserManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	*
	* @param userId The id for the user to modify.
	* @param oldPassword The old password as plain text, if you have a userlevel above, the oldpassword will be ignored.
	* @param newPassword The new password as plain text.
	* @throws ErrorException
	* @return void 
	*/

	public function updatePassword($userId, $oldPassword, $newPassword) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["userId"] = json_encode($this->transport->object_unset_nulls($userId));
	     $gs_data_input2939299822982['args']["oldPassword"] = json_encode($this->transport->object_unset_nulls($oldPassword));
	     $gs_data_input2939299822982['args']["newPassword"] = json_encode($this->transport->object_unset_nulls($newPassword));
	     $gs_data_input2939299822982["method"] = "updatePassword";
	     $gs_data_input2939299822982["interfaceName"] = "core.usermanager.IUserManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* If an administrator is impersonating a lower user,
	* this function will return true.
	*
	* @throws ErrorException
	* @return core_usermanager_data_User 
	*/

	public function updatePasswordByResetCode($resetCode, $newPassword) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["resetCode"] = json_encode($this->transport->object_unset_nulls($resetCode));
	     $gs_data_input2939299822982['args']["newPassword"] = json_encode($this->transport->object_unset_nulls($newPassword));
	     $gs_data_input2939299822982["method"] = "updatePasswordByResetCode";
	     $gs_data_input2939299822982["interfaceName"] = "core.usermanager.IUserManager";
	     return $this->transport->cast(new core_usermanager_data_User(), $this->transport->sendMessage($gs_data_input2939299822982));
	}

	/**
	*
	* @param userId The id for the user to modify.
	* @param oldPassword The old password as plain text, if you have a userlevel above, the oldpassword will be ignored.
	* @param newPassword The new password as plain text.
	* @throws ErrorException
	* @return void 
	*/

	public function updatePasswordSecure($userId, $newPassword) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["userId"] = json_encode($this->transport->object_unset_nulls($userId));
	     $gs_data_input2939299822982['args']["newPassword"] = json_encode($this->transport->object_unset_nulls($newPassword));
	     $gs_data_input2939299822982["method"] = "updatePasswordSecure";
	     $gs_data_input2939299822982["interfaceName"] = "core.usermanager.IUserManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Logon a given user.
	* @param email The username to use when logging on, an also be the users email.
	* @param password The password for this user in plain text.
	* @throws ErrorException
	* @return void 
	*/

	public function updateUserCounter($counter, $password) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["counter"] = json_encode($this->transport->object_unset_nulls($counter));
	     $gs_data_input2939299822982['args']["password"] = json_encode($this->transport->object_unset_nulls($password));
	     $gs_data_input2939299822982["method"] = "updateUserCounter";
	     $gs_data_input2939299822982["interfaceName"] = "core.usermanager.IUserManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* If an administrator is impersonating a lower user,
	* this function will return true.
	*
	* @throws ErrorException
	* @return void 
	*/

	public function upgradeUserToGetShopAdmin($password) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["password"] = json_encode($this->transport->object_unset_nulls($password));
	     $gs_data_input2939299822982["method"] = "upgradeUserToGetShopAdmin";
	     $gs_data_input2939299822982["interfaceName"] = "core.usermanager.IUserManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

}
class APIUtilManager {

	var $transport;
	
	function APIUtilManager($transport) {
		$this->transport = $transport;
	}

	/**
	*
	* @author ktonder
	* @return String 
	*/

	public function getBase64EncodedPDFWebPage($urlToPage) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["urlToPage"] = json_encode($this->transport->object_unset_nulls($urlToPage));
	     $gs_data_input2939299822982["method"] = "getBase64EncodedPDFWebPage";
	     $gs_data_input2939299822982["interfaceName"] = "core.utils.IUtilManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	*
	* @author ktonder
	* @return core_usermanager_data_Company[] 
	*/

	public function getCompaniesFromBrReg($search) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["search"] = json_encode($this->transport->object_unset_nulls($search));
	     $gs_data_input2939299822982["method"] = "getCompaniesFromBrReg";
	     $gs_data_input2939299822982["interfaceName"] = "core.utils.IUtilManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	*
	* @author ktonder
	* @return core_usermanager_data_Company 
	*/

	public function getCompanyFree($companyVatNumber) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["companyVatNumber"] = json_encode($this->transport->object_unset_nulls($companyVatNumber));
	     $gs_data_input2939299822982["method"] = "getCompanyFree";
	     $gs_data_input2939299822982["interfaceName"] = "core.utils.IUtilManager";
	     return $this->transport->cast(new core_usermanager_data_Company(), $this->transport->sendMessage($gs_data_input2939299822982));
	}

	/**
	*
	* @author ktonder
	* @return core_usermanager_data_Company 
	*/

	public function getCompanyFromBrReg($companyVatNumber) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["companyVatNumber"] = json_encode($this->transport->object_unset_nulls($companyVatNumber));
	     $gs_data_input2939299822982["method"] = "getCompanyFromBrReg";
	     $gs_data_input2939299822982["interfaceName"] = "core.utils.IUtilManager";
	     return $this->transport->cast(new core_usermanager_data_Company(), $this->transport->sendMessage($gs_data_input2939299822982));
	}

	/**
	*
	* @author ktonder
	* @return core_utilmanager_data_FileObject 
	*/

	public function getFile($id) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["id"] = json_encode($this->transport->object_unset_nulls($id));
	     $gs_data_input2939299822982["method"] = "getFile";
	     $gs_data_input2939299822982["interfaceName"] = "core.utils.IUtilManager";
	     return $this->transport->cast(new core_utilmanager_data_FileObject(), $this->transport->sendMessage($gs_data_input2939299822982));
	}

	/**
	*
	* @author ktonder
	* @return int 
	*/

	public function getStartupCount() {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982["method"] = "getStartupCount";
	     $gs_data_input2939299822982["interfaceName"] = "core.utils.IUtilManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	*
	* @author ktonder
	* @return boolean 
	*/

	public function isInProductionMode() {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982["method"] = "isInProductionMode";
	     $gs_data_input2939299822982["interfaceName"] = "core.utils.IUtilManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	*
	* @author ktonder
	* @return String 
	*/

	public function saveFile($file) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["file"] = json_encode($this->transport->object_unset_nulls($file));
	     $gs_data_input2939299822982["method"] = "saveFile";
	     $gs_data_input2939299822982["interfaceName"] = "core.utils.IUtilManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	*
	* @author ktonder
	* @return void 
	*/

	public function sendPriceOffer($link, $email) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["link"] = json_encode($this->transport->object_unset_nulls($link));
	     $gs_data_input2939299822982['args']["email"] = json_encode($this->transport->object_unset_nulls($email));
	     $gs_data_input2939299822982["method"] = "sendPriceOffer";
	     $gs_data_input2939299822982["interfaceName"] = "core.utils.IUtilManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

}
class APIVerifoneManager {

	var $transport;
	
	function APIVerifoneManager($transport) {
		$this->transport = $transport;
	}

	/**
	* Handle payments trough verifone.
	* @return void 
	*/

	public function cancelPaymentProcess($terminalId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["terminalId"] = json_encode($this->transport->object_unset_nulls($terminalId));
	     $gs_data_input2939299822982["method"] = "cancelPaymentProcess";
	     $gs_data_input2939299822982["interfaceName"] = "core.verifonemanager.IVerifoneManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Handle payments trough verifone.
	* @return void 
	*/

	public function chargeOrder($orderId, $terminalId, $overrideDevMode) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["orderId"] = json_encode($this->transport->object_unset_nulls($orderId));
	     $gs_data_input2939299822982['args']["terminalId"] = json_encode($this->transport->object_unset_nulls($terminalId));
	     $gs_data_input2939299822982['args']["overrideDevMode"] = json_encode($this->transport->object_unset_nulls($overrideDevMode));
	     $gs_data_input2939299822982["method"] = "chargeOrder";
	     $gs_data_input2939299822982["interfaceName"] = "core.verifonemanager.IVerifoneManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

}
class APIVippsManager {

	var $transport;
	
	function APIVippsManager($transport) {
		$this->transport = $transport;
	}

	/**
	* Vipps management.
	* @return boolean 
	*/

	public function cancelOrder($orderId, $ip) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["orderId"] = json_encode($this->transport->object_unset_nulls($orderId));
	     $gs_data_input2939299822982['args']["ip"] = json_encode($this->transport->object_unset_nulls($ip));
	     $gs_data_input2939299822982["method"] = "cancelOrder";
	     $gs_data_input2939299822982["interfaceName"] = "core.vippsmanager.IVippsManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Vipps management.
	* @return void 
	*/

	public function checkForOrdersToCapture() {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982["method"] = "checkForOrdersToCapture";
	     $gs_data_input2939299822982["interfaceName"] = "core.vippsmanager.IVippsManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Vipps management.
	* @return boolean 
	*/

	public function checkIfOrderHasBeenCompleted($incOrderId) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["incOrderId"] = json_encode($this->transport->object_unset_nulls($incOrderId));
	     $gs_data_input2939299822982["method"] = "checkIfOrderHasBeenCompleted";
	     $gs_data_input2939299822982["interfaceName"] = "core.vippsmanager.IVippsManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Vipps management.
	* @return boolean 
	*/

	public function startMobileRequest($phoneNumber, $orderId, $ip) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["phoneNumber"] = json_encode($this->transport->object_unset_nulls($phoneNumber));
	     $gs_data_input2939299822982['args']["orderId"] = json_encode($this->transport->object_unset_nulls($orderId));
	     $gs_data_input2939299822982['args']["ip"] = json_encode($this->transport->object_unset_nulls($ip));
	     $gs_data_input2939299822982["method"] = "startMobileRequest";
	     $gs_data_input2939299822982["interfaceName"] = "core.vippsmanager.IVippsManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

}
class APIWebManager {

	var $transport;
	
	function APIWebManager($transport) {
		$this->transport = $transport;
	}

	/**
	*
	* @author hung
	* @return String 
	*/

	public function htmlGet($url) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["url"] = json_encode($this->transport->object_unset_nulls($url));
	     $gs_data_input2939299822982["method"] = "htmlGet";
	     $gs_data_input2939299822982["interfaceName"] = "core.webmanager.IWebManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	*
	* @author hung
	* @return com_google_gson_JsonObject 
	*/

	public function htmlGetJson($url) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["url"] = json_encode($this->transport->object_unset_nulls($url));
	     $gs_data_input2939299822982["method"] = "htmlGetJson";
	     $gs_data_input2939299822982["interfaceName"] = "core.webmanager.IWebManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	*
	* @author hung
	* @return String 
	*/

	public function htmlPost($url, $data, $jsonPost, $encoding) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["url"] = json_encode($this->transport->object_unset_nulls($url));
	     $gs_data_input2939299822982['args']["data"] = json_encode($this->transport->object_unset_nulls($data));
	     $gs_data_input2939299822982['args']["jsonPost"] = json_encode($this->transport->object_unset_nulls($jsonPost));
	     $gs_data_input2939299822982['args']["encoding"] = json_encode($this->transport->object_unset_nulls($encoding));
	     $gs_data_input2939299822982["method"] = "htmlPost";
	     $gs_data_input2939299822982["interfaceName"] = "core.webmanager.IWebManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	*
	* @author hung
	* @return String 
	*/

	public function htmlPostBasicAuth($url, $data, $jsonPost, $encoding, $auth) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["url"] = json_encode($this->transport->object_unset_nulls($url));
	     $gs_data_input2939299822982['args']["data"] = json_encode($this->transport->object_unset_nulls($data));
	     $gs_data_input2939299822982['args']["jsonPost"] = json_encode($this->transport->object_unset_nulls($jsonPost));
	     $gs_data_input2939299822982['args']["encoding"] = json_encode($this->transport->object_unset_nulls($encoding));
	     $gs_data_input2939299822982['args']["auth"] = json_encode($this->transport->object_unset_nulls($auth));
	     $gs_data_input2939299822982["method"] = "htmlPostBasicAuth";
	     $gs_data_input2939299822982["interfaceName"] = "core.webmanager.IWebManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	*
	* @author hung
	* @return com_google_gson_JsonObject 
	*/

	public function htmlPostJson($url, $data, $encoding) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["url"] = json_encode($this->transport->object_unset_nulls($url));
	     $gs_data_input2939299822982['args']["data"] = json_encode($this->transport->object_unset_nulls($data));
	     $gs_data_input2939299822982['args']["encoding"] = json_encode($this->transport->object_unset_nulls($encoding));
	     $gs_data_input2939299822982["method"] = "htmlPostJson";
	     $gs_data_input2939299822982["interfaceName"] = "core.webmanager.IWebManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

}
class APIWubookManager {

	var $transport;
	
	function APIWubookManager($transport) {
		$this->transport = $transport;
	}

	/**
	* Wubook management system.<br>
	* @return void 
	*/

	public function addBooking($gs_multilevel_name, $rcode) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["rcode"] = json_encode($this->transport->object_unset_nulls($rcode));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "addBooking";
	     $gs_data_input2939299822982["interfaceName"] = "core.wubook.IWubookManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Wubook management system.<br>
	* @return core_wubook_WubookBooking[] 
	*/

	public function addNewBookingsPastDays($gs_multilevel_name, $daysback) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["daysback"] = json_encode($this->transport->object_unset_nulls($daysback));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "addNewBookingsPastDays";
	     $gs_data_input2939299822982["interfaceName"] = "core.wubook.IWubookManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Wubook management system.<br>
	* @return void 
	*/

	public function addRestriction($gs_multilevel_name, $restriction) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["restriction"] = json_encode($this->transport->object_unset_nulls($restriction));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "addRestriction";
	     $gs_data_input2939299822982["interfaceName"] = "core.wubook.IWubookManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Wubook management system.<br>
	* @return void 
	*/

	public function checkForNoShowsAndMark($gs_multilevel_name) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "checkForNoShowsAndMark";
	     $gs_data_input2939299822982["interfaceName"] = "core.wubook.IWubookManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Wubook management system.<br>
	* @return void 
	*/

	public function deleteAllRooms($gs_multilevel_name) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "deleteAllRooms";
	     $gs_data_input2939299822982["interfaceName"] = "core.wubook.IWubookManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Wubook management system.<br>
	* @return String 
	*/

	public function deleteBooking($gs_multilevel_name, $rcode) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["rcode"] = json_encode($this->transport->object_unset_nulls($rcode));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "deleteBooking";
	     $gs_data_input2939299822982["interfaceName"] = "core.wubook.IWubookManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Wubook management system.<br>
	* @return void 
	*/

	public function deleteRestriction($gs_multilevel_name, $id) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["id"] = json_encode($this->transport->object_unset_nulls($id));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "deleteRestriction";
	     $gs_data_input2939299822982["interfaceName"] = "core.wubook.IWubookManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Wubook management system.<br>
	* @return void 
	*/

	public function doubleCheckDeletedBookings($gs_multilevel_name) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "doubleCheckDeletedBookings";
	     $gs_data_input2939299822982["interfaceName"] = "core.wubook.IWubookManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Wubook management system.<br>
	* @return core_wubook_WubookBooking[] 
	*/

	public function fetchAllBookings($gs_multilevel_name, $daysback) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["daysback"] = json_encode($this->transport->object_unset_nulls($daysback));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "fetchAllBookings";
	     $gs_data_input2939299822982["interfaceName"] = "core.wubook.IWubookManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Wubook management system.<br>
	* @return core_wubook_WubookBooking 
	*/

	public function fetchBooking($gs_multilevel_name, $rcode) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["rcode"] = json_encode($this->transport->object_unset_nulls($rcode));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "fetchBooking";
	     $gs_data_input2939299822982["interfaceName"] = "core.wubook.IWubookManager";
	     return $this->transport->cast(new core_wubook_WubookBooking(), $this->transport->sendMessage($gs_data_input2939299822982));
	}

	/**
	* Wubook management system.<br>
	* @return Integer[] 
	*/

	public function fetchBookingCodes($gs_multilevel_name, $daysback) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["daysback"] = json_encode($this->transport->object_unset_nulls($daysback));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "fetchBookingCodes";
	     $gs_data_input2939299822982["interfaceName"] = "core.wubook.IWubookManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Wubook management system.<br>
	* @return core_wubook_WubookBooking[] 
	*/

	public function fetchBookings($gs_multilevel_name, $daysBack, $registrations) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["daysBack"] = json_encode($this->transport->object_unset_nulls($daysBack));
	     $gs_data_input2939299822982['args']["registrations"] = json_encode($this->transport->object_unset_nulls($registrations));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "fetchBookings";
	     $gs_data_input2939299822982["interfaceName"] = "core.wubook.IWubookManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Wubook management system.<br>
	* @return core_wubook_WubookBooking[] 
	*/

	public function fetchNewBookings($gs_multilevel_name) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "fetchNewBookings";
	     $gs_data_input2939299822982["interfaceName"] = "core.wubook.IWubookManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Wubook management system.<br>
	* @return core_wubook_WubookAvailabilityRestrictions[] 
	*/

	public function getAllRestriction($gs_multilevel_name) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "getAllRestriction";
	     $gs_data_input2939299822982["interfaceName"] = "core.wubook.IWubookManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Wubook management system.<br>
	* @return public class HashMap<K,V> 
	*/

	public function getLogEntries($gs_multilevel_name) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "getLogEntries";
	     $gs_data_input2939299822982["interfaceName"] = "core.wubook.IWubookManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Wubook management system.<br>
	* @return core_wubook_WubookOta[] 
	*/

	public function getOtas($gs_multilevel_name) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "getOtas";
	     $gs_data_input2939299822982["interfaceName"] = "core.wubook.IWubookManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Wubook management system.<br>
	* @return core_wubook_WubookRoomRateMap[] 
	*/

	public function getRoomRates($gs_multilevel_name, $channelId, $channelType) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["channelId"] = json_encode($this->transport->object_unset_nulls($channelId));
	     $gs_data_input2939299822982['args']["channelType"] = json_encode($this->transport->object_unset_nulls($channelType));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "getRoomRates";
	     $gs_data_input2939299822982["interfaceName"] = "core.wubook.IWubookManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Wubook management system.<br>
	* @return public class HashMap<K,V> 
	*/

	public function getWubookRoomData($gs_multilevel_name) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "getWubookRoomData";
	     $gs_data_input2939299822982["interfaceName"] = "core.wubook.IWubookManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Wubook management system.<br>
	* @return String[] 
	*/

	public function insertAllRooms($gs_multilevel_name) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "insertAllRooms";
	     $gs_data_input2939299822982["interfaceName"] = "core.wubook.IWubookManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Wubook management system.<br>
	* @return String 
	*/

	public function markCCInvalid($gs_multilevel_name, $rcode) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["rcode"] = json_encode($this->transport->object_unset_nulls($rcode));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "markCCInvalid";
	     $gs_data_input2939299822982["interfaceName"] = "core.wubook.IWubookManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Wubook management system.<br>
	* @return String 
	*/

	public function markNoShow($gs_multilevel_name, $rcode) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["rcode"] = json_encode($this->transport->object_unset_nulls($rcode));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "markNoShow";
	     $gs_data_input2939299822982["interfaceName"] = "core.wubook.IWubookManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Wubook management system.<br>
	* @return boolean 
	*/

	public function newOta($gs_multilevel_name, $type) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["type"] = json_encode($this->transport->object_unset_nulls($type));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "newOta";
	     $gs_data_input2939299822982["interfaceName"] = "core.wubook.IWubookManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Wubook management system.<br>
	* @return void 
	*/

	public function saveWubookRoomData($gs_multilevel_name, $res) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["res"] = json_encode($this->transport->object_unset_nulls($res));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "saveWubookRoomData";
	     $gs_data_input2939299822982["interfaceName"] = "core.wubook.IWubookManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Wubook management system.<br>
	* @return void 
	*/

	public function setRoomRates($gs_multilevel_name, $channelId, $rates, $channelType) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["channelId"] = json_encode($this->transport->object_unset_nulls($channelId));
	     $gs_data_input2939299822982['args']["rates"] = json_encode($this->transport->object_unset_nulls($rates));
	     $gs_data_input2939299822982['args']["channelType"] = json_encode($this->transport->object_unset_nulls($channelType));
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "setRoomRates";
	     $gs_data_input2939299822982["interfaceName"] = "core.wubook.IWubookManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Wubook management system.<br>
	* @return boolean 
	*/

	public function testConnection($gs_multilevel_name) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "testConnection";
	     $gs_data_input2939299822982["interfaceName"] = "core.wubook.IWubookManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Wubook management system.<br>
	* @return boolean 
	*/

	public function updateAvailabilityFromButton($gs_multilevel_name) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "updateAvailabilityFromButton";
	     $gs_data_input2939299822982["interfaceName"] = "core.wubook.IWubookManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Wubook management system.<br>
	* @return String 
	*/

	public function updateMinStay($gs_multilevel_name) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "updateMinStay";
	     $gs_data_input2939299822982["interfaceName"] = "core.wubook.IWubookManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Wubook management system.<br>
	* @return String 
	*/

	public function updatePrices($gs_multilevel_name) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "updatePrices";
	     $gs_data_input2939299822982["interfaceName"] = "core.wubook.IWubookManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

	/**
	* Wubook management system.<br>
	* @return String 
	*/

	public function updateShortAvailability($gs_multilevel_name) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['multiLevelName'] = json_encode($this->transport->object_unset_nulls($gs_multilevel_name));
	     $gs_data_input2939299822982["method"] = "updateShortAvailability";
	     $gs_data_input2939299822982["interfaceName"] = "core.wubook.IWubookManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

}
class APIYouTubeManager {

	var $transport;
	
	function APIYouTubeManager($transport) {
		$this->transport = $transport;
	}

	/**
	* The youtube manager handles the communication between the google youtube api and the frontend.
	* @return core_youtubemanager_data_SearchResult[] 
	*/

	public function searchYoutube($searchword) {
	     $gs_data_input2939299822982 = array();
	     $gs_data_input2939299822982['args'] = array();
	     $gs_data_input2939299822982['args']["searchword"] = json_encode($this->transport->object_unset_nulls($searchword));
	     $gs_data_input2939299822982["method"] = "searchYoutube";
	     $gs_data_input2939299822982["interfaceName"] = "core.youtubemanager.IYouTubeManager";
	     return $this->transport->sendMessage($gs_data_input2939299822982);
	}

}
class GetShopApi {

      var $transport;
      function GetShopApi($port, $host="localhost", $sessionId) {
           $this->transport = new CommunicationHelper();
           $this->transport->port = $port;
           $this->transport->sessionId = $sessionId;
           $this->transport->host = $host;
           $this->transport->connect();
      }
      /**
      * @return AccountingManager
      */
      public function getAccountingManager() {
           return new APIAccountingManager($this->transport);
      }
      /**
      * @return AmestoManager
      */
      public function getAmestoManager() {
           return new APIAmestoManager($this->transport);
      }
      /**
      * @return ApacManager
      */
      public function getApacManager() {
           return new APIApacManager($this->transport);
      }
      /**
      * @return BamboraManager
      */
      public function getBamboraManager() {
           return new APIBamboraManager($this->transport);
      }
      /**
      * @return BannerManager
      */
      public function getBannerManager() {
           return new APIBannerManager($this->transport);
      }
      /**
      * @return BigStock
      */
      public function getBigStock() {
           return new APIBigStock($this->transport);
      }
      /**
      * @return BookingComRateManagerManager
      */
      public function getBookingComRateManagerManager() {
           return new APIBookingComRateManagerManager($this->transport);
      }
      /**
      * @return BookingEngine
      */
      public function getBookingEngine() {
           return new APIBookingEngine($this->transport);
      }
      /**
      * @return BrainTreeManager
      */
      public function getBrainTreeManager() {
           return new APIBrainTreeManager($this->transport);
      }
      /**
      * @return C3Manager
      */
      public function getC3Manager() {
           return new APIC3Manager($this->transport);
      }
      /**
      * @return CalendarManager
      */
      public function getCalendarManager() {
           return new APICalendarManager($this->transport);
      }
      /**
      * @return CarTuningManager
      */
      public function getCarTuningManager() {
           return new APICarTuningManager($this->transport);
      }
      /**
      * @return CareTakerManager
      */
      public function getCareTakerManager() {
           return new APICareTakerManager($this->transport);
      }
      /**
      * @return CartManager
      */
      public function getCartManager() {
           return new APICartManager($this->transport);
      }
      /**
      * @return CertegoManager
      */
      public function getCertegoManager() {
           return new APICertegoManager($this->transport);
      }
      /**
      * @return ContentManager
      */
      public function getContentManager() {
           return new APIContentManager($this->transport);
      }
      /**
      * @return DBBackupManager
      */
      public function getDBBackupManager() {
           return new APIDBBackupManager($this->transport);
      }
      /**
      * @return DibsManager
      */
      public function getDibsManager() {
           return new APIDibsManager($this->transport);
      }
      /**
      * @return DoorManager
      */
      public function getDoorManager() {
           return new APIDoorManager($this->transport);
      }
      /**
      * @return EpayManager
      */
      public function getEpayManager() {
           return new APIEpayManager($this->transport);
      }
      /**
      * @return EventBookingManager
      */
      public function getEventBookingManager() {
           return new APIEventBookingManager($this->transport);
      }
      /**
      * @return ExcelManager
      */
      public function getExcelManager() {
           return new APIExcelManager($this->transport);
      }
      /**
      * @return FileManager
      */
      public function getFileManager() {
           return new APIFileManager($this->transport);
      }
      /**
      * @return FooterManager
      */
      public function getFooterManager() {
           return new APIFooterManager($this->transport);
      }
      /**
      * @return FtpManager
      */
      public function getFtpManager() {
           return new APIFtpManager($this->transport);
      }
      /**
      * @return GalleryManager
      */
      public function getGalleryManager() {
           return new APIGalleryManager($this->transport);
      }
      /**
      * @return GetShop
      */
      public function getGetShop() {
           return new APIGetShop($this->transport);
      }
      /**
      * @return GetShopAccountingManager
      */
      public function getGetShopAccountingManager() {
           return new APIGetShopAccountingManager($this->transport);
      }
      /**
      * @return GetShopApplicationPool
      */
      public function getGetShopApplicationPool() {
           return new APIGetShopApplicationPool($this->transport);
      }
      /**
      * @return GetShopLockManager
      */
      public function getGetShopLockManager() {
           return new APIGetShopLockManager($this->transport);
      }
      /**
      * @return GetShopLockSystemManager
      */
      public function getGetShopLockSystemManager() {
           return new APIGetShopLockSystemManager($this->transport);
      }
      /**
      * @return ImageManager
      */
      public function getImageManager() {
           return new APIImageManager($this->transport);
      }
      /**
      * @return InformationScreenManager
      */
      public function getInformationScreenManager() {
           return new APIInformationScreenManager($this->transport);
      }
      /**
      * @return InvoiceManager
      */
      public function getInvoiceManager() {
           return new APIInvoiceManager($this->transport);
      }
      /**
      * @return LasGruppenPDFGenerator
      */
      public function getLasGruppenPDFGenerator() {
           return new APILasGruppenPDFGenerator($this->transport);
      }
      /**
      * @return ListManager
      */
      public function getListManager() {
           return new APIListManager($this->transport);
      }
      /**
      * @return LogoManager
      */
      public function getLogoManager() {
           return new APILogoManager($this->transport);
      }
      /**
      * @return MecaManager
      */
      public function getMecaManager() {
           return new APIMecaManager($this->transport);
      }
      /**
      * @return MekonomenManager
      */
      public function getMekonomenManager() {
           return new APIMekonomenManager($this->transport);
      }
      /**
      * @return MessageManager
      */
      public function getMessageManager() {
           return new APIMessageManager($this->transport);
      }
      /**
      * @return MobileManager
      */
      public function getMobileManager() {
           return new APIMobileManager($this->transport);
      }
      /**
      * @return NewsLetterManager
      */
      public function getNewsLetterManager() {
           return new APINewsLetterManager($this->transport);
      }
      /**
      * @return NewsManager
      */
      public function getNewsManager() {
           return new APINewsManager($this->transport);
      }
      /**
      * @return OAuthManager
      */
      public function getOAuthManager() {
           return new APIOAuthManager($this->transport);
      }
      /**
      * @return OrderManager
      */
      public function getOrderManager() {
           return new APIOrderManager($this->transport);
      }
      /**
      * @return PageManager
      */
      public function getPageManager() {
           return new APIPageManager($this->transport);
      }
      /**
      * @return PaymentManager
      */
      public function getPaymentManager() {
           return new APIPaymentManager($this->transport);
      }
      /**
      * @return PaymentTerminalManager
      */
      public function getPaymentTerminalManager() {
           return new APIPaymentTerminalManager($this->transport);
      }
      /**
      * @return PkkControlManager
      */
      public function getPkkControlManager() {
           return new APIPkkControlManager($this->transport);
      }
      /**
      * @return PmsBookingProcess
      */
      public function getPmsBookingProcess() {
           return new APIPmsBookingProcess($this->transport);
      }
      /**
      * @return PmsEventManager
      */
      public function getPmsEventManager() {
           return new APIPmsEventManager($this->transport);
      }
      /**
      * @return PmsInvoiceManager
      */
      public function getPmsInvoiceManager() {
           return new APIPmsInvoiceManager($this->transport);
      }
      /**
      * @return PmsManager
      */
      public function getPmsManager() {
           return new APIPmsManager($this->transport);
      }
      /**
      * @return PmsManagerProcessor
      */
      public function getPmsManagerProcessor() {
           return new APIPmsManagerProcessor($this->transport);
      }
      /**
      * @return PmsPaymentTerminal
      */
      public function getPmsPaymentTerminal() {
           return new APIPmsPaymentTerminal($this->transport);
      }
      /**
      * @return PmsReportManager
      */
      public function getPmsReportManager() {
           return new APIPmsReportManager($this->transport);
      }
      /**
      * @return PmsSelfManagement
      */
      public function getPmsSelfManagement() {
           return new APIPmsSelfManagement($this->transport);
      }
      /**
      * @return PmsWebBookingManager
      */
      public function getPmsWebBookingManager() {
           return new APIPmsWebBookingManager($this->transport);
      }
      /**
      * @return PrintManager
      */
      public function getPrintManager() {
           return new APIPrintManager($this->transport);
      }
      /**
      * @return ProductManager
      */
      public function getProductManager() {
           return new APIProductManager($this->transport);
      }
      /**
      * @return PullServerManager
      */
      public function getPullServerManager() {
           return new APIPullServerManager($this->transport);
      }
      /**
      * @return QuestBackManager
      */
      public function getQuestBackManager() {
           return new APIQuestBackManager($this->transport);
      }
      /**
      * @return ReportingManager
      */
      public function getReportingManager() {
           return new APIReportingManager($this->transport);
      }
      /**
      * @return ResturantManager
      */
      public function getResturantManager() {
           return new APIResturantManager($this->transport);
      }
      /**
      * @return SalesManager
      */
      public function getSalesManager() {
           return new APISalesManager($this->transport);
      }
      /**
      * @return ScormManager
      */
      public function getScormManager() {
           return new APIScormManager($this->transport);
      }
      /**
      * @return SearchManager
      */
      public function getSearchManager() {
           return new APISearchManager($this->transport);
      }
      /**
      * @return SedoxProductManager
      */
      public function getSedoxProductManager() {
           return new APISedoxProductManager($this->transport);
      }
      /**
      * @return SendRegningManager
      */
      public function getSendRegningManager() {
           return new APISendRegningManager($this->transport);
      }
      /**
      * @return SimpleEventManager
      */
      public function getSimpleEventManager() {
           return new APISimpleEventManager($this->transport);
      }
      /**
      * @return SmsHistoryManager
      */
      public function getSmsHistoryManager() {
           return new APISmsHistoryManager($this->transport);
      }
      /**
      * @return StoreApplicationInstancePool
      */
      public function getStoreApplicationInstancePool() {
           return new APIStoreApplicationInstancePool($this->transport);
      }
      /**
      * @return StoreApplicationPool
      */
      public function getStoreApplicationPool() {
           return new APIStoreApplicationPool($this->transport);
      }
      /**
      * @return StoreManager
      */
      public function getStoreManager() {
           return new APIStoreManager($this->transport);
      }
      /**
      * @return StorePrintManager
      */
      public function getStorePrintManager() {
           return new APIStorePrintManager($this->transport);
      }
      /**
      * @return StripeManager
      */
      public function getStripeManager() {
           return new APIStripeManager($this->transport);
      }
      /**
      * @return TicketManager
      */
      public function getTicketManager() {
           return new APITicketManager($this->transport);
      }
      /**
      * @return TimeRegisteringManager
      */
      public function getTimeRegisteringManager() {
           return new APITimeRegisteringManager($this->transport);
      }
      /**
      * @return TrackAndTraceManager
      */
      public function getTrackAndTraceManager() {
           return new APITrackAndTraceManager($this->transport);
      }
      /**
      * @return TrackerManager
      */
      public function getTrackerManager() {
           return new APITrackerManager($this->transport);
      }
      /**
      * @return UUIDSecurityManager
      */
      public function getUUIDSecurityManager() {
           return new APIUUIDSecurityManager($this->transport);
      }
      /**
      * @return UserManager
      */
      public function getUserManager() {
           return new APIUserManager($this->transport);
      }
      /**
      * @return UtilManager
      */
      public function getUtilManager() {
           return new APIUtilManager($this->transport);
      }
      /**
      * @return VerifoneManager
      */
      public function getVerifoneManager() {
           return new APIVerifoneManager($this->transport);
      }
      /**
      * @return VippsManager
      */
      public function getVippsManager() {
           return new APIVippsManager($this->transport);
      }
      /**
      * @return WebManager
      */
      public function getWebManager() {
           return new APIWebManager($this->transport);
      }
      /**
      * @return WubookManager
      */
      public function getWubookManager() {
           return new APIWubookManager($this->transport);
      }
      /**
      * @return YouTubeManager
      */
      public function getYouTubeManager() {
           return new APIYouTubeManager($this->transport);
      }
}
?>